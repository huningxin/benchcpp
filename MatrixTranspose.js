/*
  Copyright (C) 2013

  This software is provided 'as-is', without any express or implied
  warranty.  In no event will the authors be held liable for any damages
  arising from the use of this software.

  Permission is granted to anyone to use this software for any purpose,
  including commercial applications, and to alter it and redistribute it
  freely, subject to the following restrictions:

  1. The origin of this software must not be misrepresented; you must not
     claim that you wrote the original software. If you use this software
     in a product, an acknowledgment in the product documentation would be
     appreciated but is not required.
  2. Altered source versions must be plainly marked as such, and must not be
     misrepresented as being the original software.
  3. This notice may not be removed or altered from any source distribution.
*/

if (typeof SIMD === "undefined") {
  // SIMD module. We don't use the var keyword here, so that we put the
  // SIMD object in the global scope even if this polyfill code is included
  // within some other scope. The theory is that we're anticipating a
  // future where SIMD is predefined in the global scope.
  SIMD = {};
}

// private stuff.
var _SIMD_PRIVATE = {};

// Temporary buffers for swizzles and bitcasts.
_SIMD_PRIVATE._f32x4 = new Float32Array(4);
_SIMD_PRIVATE._f64x2 = new Float64Array(_SIMD_PRIVATE._f32x4.buffer);
_SIMD_PRIVATE._i32x4 = new Int32Array(_SIMD_PRIVATE._f32x4.buffer);
_SIMD_PRIVATE._i16x8 = new Int16Array(_SIMD_PRIVATE._f32x4.buffer);
_SIMD_PRIVATE._i8x16 = new Int8Array(_SIMD_PRIVATE._f32x4.buffer);

if (typeof Math.fround !== 'undefined') {
  _SIMD_PRIVATE.truncatef32 = Math.fround;
} else {
  _SIMD_PRIVATE._f32 = new Float32Array(1);

  _SIMD_PRIVATE.truncatef32 = function(x) {
    _SIMD_PRIVATE._f32[0] = x;
    return _SIMD_PRIVATE._f32[0];
  }
}

// Type checking functions.

_SIMD_PRIVATE.isNumber = function(o) {
  return typeof o === "number" || (typeof o === "object" && o.constructor === Number);
}

_SIMD_PRIVATE.isTypedArray = function(o) {
  return (o instanceof Int8Array) ||
         (o instanceof Uint8Array) ||
         (o instanceof Uint8ClampedArray) ||
         (o instanceof Int16Array) ||
         (o instanceof Uint16Array) ||
         (o instanceof Int32Array) ||
         (o instanceof Uint32Array) ||
         (o instanceof Float32Array) ||
         (o instanceof Float64Array) ||
         (o instanceof Int32x4Array) ||
         (o instanceof Float32x4Array);
}

_SIMD_PRIVATE.isArrayBuffer = function(o) {
  return (o instanceof ArrayBuffer);
}

_SIMD_PRIVATE.minNum = function(x, y) {
  return x != x ? y :
         y != y ? x :
         Math.min(x, y);
}

_SIMD_PRIVATE.maxNum = function(x, y) {
  return x != x ? y :
         y != y ? x :
         Math.max(x, y);
}

_SIMD_PRIVATE.tobool = function(x) {
  return x < 0;
}

_SIMD_PRIVATE.frombool = function(x) {
  return !x - 1;
}

// Save/Restore utilities for implementing bitwise conversions.

_SIMD_PRIVATE.saveFloat64x2 = function(x) {
  x = SIMD.float64x2.check(x);
  _SIMD_PRIVATE._f64x2[0] = x.x;
  _SIMD_PRIVATE._f64x2[1] = x.y;
}

_SIMD_PRIVATE.saveFloat32x4 = function(x) {
  x = SIMD.float32x4.check(x);
  _SIMD_PRIVATE._f32x4[0] = x.x;
  _SIMD_PRIVATE._f32x4[1] = x.y;
  _SIMD_PRIVATE._f32x4[2] = x.z;
  _SIMD_PRIVATE._f32x4[3] = x.w;
}

_SIMD_PRIVATE.saveInt32x4 = function(x) {
  x = SIMD.int32x4.check(x);
  _SIMD_PRIVATE._i32x4[0] = x.x;
  _SIMD_PRIVATE._i32x4[1] = x.y;
  _SIMD_PRIVATE._i32x4[2] = x.z;
  _SIMD_PRIVATE._i32x4[3] = x.w;
}

_SIMD_PRIVATE.saveInt16x8 = function(x) {
  x = SIMD.int16x8.check(x);
  _SIMD_PRIVATE._i16x8[0] = x.s0;
  _SIMD_PRIVATE._i16x8[1] = x.s1;
  _SIMD_PRIVATE._i16x8[2] = x.s2;
  _SIMD_PRIVATE._i16x8[3] = x.s3;
  _SIMD_PRIVATE._i16x8[4] = x.s4;
  _SIMD_PRIVATE._i16x8[5] = x.s5;
  _SIMD_PRIVATE._i16x8[6] = x.s6;
  _SIMD_PRIVATE._i16x8[7] = x.s7;
}

_SIMD_PRIVATE.saveInt8x16 = function(x) {
  x = SIMD.int8x16.check(x);
  _SIMD_PRIVATE._i8x16[0] = x.s0;
  _SIMD_PRIVATE._i8x16[1] = x.s1;
  _SIMD_PRIVATE._i8x16[2] = x.s2;
  _SIMD_PRIVATE._i8x16[3] = x.s3;
  _SIMD_PRIVATE._i8x16[4] = x.s4;
  _SIMD_PRIVATE._i8x16[5] = x.s5;
  _SIMD_PRIVATE._i8x16[6] = x.s6;
  _SIMD_PRIVATE._i8x16[7] = x.s7;
  _SIMD_PRIVATE._i8x16[8] = x.s8;
  _SIMD_PRIVATE._i8x16[9] = x.s9;
  _SIMD_PRIVATE._i8x16[10] = x.s10;
  _SIMD_PRIVATE._i8x16[11] = x.s11;
  _SIMD_PRIVATE._i8x16[12] = x.s12;
  _SIMD_PRIVATE._i8x16[13] = x.s13;
  _SIMD_PRIVATE._i8x16[14] = x.s14;
  _SIMD_PRIVATE._i8x16[15] = x.s15;
}

_SIMD_PRIVATE.restoreFloat64x2 = function() {
  var alias = _SIMD_PRIVATE._f64x2;
  return SIMD.float64x2(alias[0], alias[1]);
}

_SIMD_PRIVATE.restoreFloat32x4 = function() {
  var alias = _SIMD_PRIVATE._f32x4;
  return SIMD.float32x4(alias[0], alias[1], alias[2], alias[3]);
}

_SIMD_PRIVATE.restoreInt32x4 = function() {
  var alias = _SIMD_PRIVATE._i32x4;
  return SIMD.int32x4(alias[0], alias[1], alias[2], alias[3]);
}

_SIMD_PRIVATE.restoreInt16x8 = function() {
  var alias = _SIMD_PRIVATE._i16x8;
  return SIMD.int16x8(alias[0], alias[1], alias[2], alias[3],
                      alias[4], alias[5], alias[6], alias[7]);
}

_SIMD_PRIVATE.restoreInt8x16 = function() {
  var alias = _SIMD_PRIVATE._i8x16;
  return SIMD.int8x16(alias[0], alias[1], alias[2], alias[3],
                      alias[4], alias[5], alias[6], alias[7],
                      alias[8], alias[9], alias[10], alias[11],
                      alias[12], alias[13], alias[14], alias[15]);
}

if (typeof SIMD.float32x4 === "undefined") {
  /**
    * Construct a new instance of float32x4 number.
    * @param {double} value used for x lane.
    * @param {double} value used for y lane.
    * @param {double} value used for z lane.
    * @param {double} value used for w lane.
    * @constructor
    */
  SIMD.float32x4 = function(x, y, z, w) {
    if (!(this instanceof SIMD.float32x4)) {
      return new SIMD.float32x4(x, y, z, w);
    }

    this.x_ = _SIMD_PRIVATE.truncatef32(x);
    this.y_ = _SIMD_PRIVATE.truncatef32(y);
    this.z_ = _SIMD_PRIVATE.truncatef32(z);
    this.w_ = _SIMD_PRIVATE.truncatef32(w);
  }

  Object.defineProperty(SIMD.float32x4.prototype, 'x', {
    get: function() { return this.x_; }
  });

  Object.defineProperty(SIMD.float32x4.prototype, 'y', {
    get: function() { return this.y_; }
  });

  Object.defineProperty(SIMD.float32x4.prototype, 'z', {
    get: function() { return this.z_; }
  });

  Object.defineProperty(SIMD.float32x4.prototype, 'w', {
    get: function() { return this.w_; }
  });

  /**
    * Extract the sign bit from each lane return them in the first 4 bits.
    */
  Object.defineProperty(SIMD.float32x4.prototype, 'signMask', {
    get: function() {
      var mx = (this.x < 0.0 || 1/this.x === -Infinity);
      var my = (this.y < 0.0 || 1/this.y === -Infinity);
      var mz = (this.z < 0.0 || 1/this.z === -Infinity);
      var mw = (this.w < 0.0 || 1/this.w === -Infinity);
      return mx | my << 1 | mz << 2 | mw << 3;
    }
  });
}

if (typeof SIMD.float32x4.check === "undefined") {
  /**
    * Check whether the argument is a float32x4.
    * @param {float32x4} v An instance of float32x4.
    * @return {float32x4} The float32x4 instance.
    */
  SIMD.float32x4.check = function(v) {
    if (!(v instanceof SIMD.float32x4)) {
      throw new TypeError("argument is not a float32x4.");
    }
    return v;
  }
}

if (typeof SIMD.float32x4.splat === "undefined") {
  /**
    * Construct a new instance of float32x4 number with the same value
    * in all lanes.
    * @param {double} value used for all lanes.
    * @constructor
    */
  SIMD.float32x4.splat = function(s) {
    return SIMD.float32x4(s, s, s, s);
  }
}

if (typeof SIMD.float32x4.fromFloat64x2 === "undefined") {
  /**
    * @param {float64x2} t An instance of float64x2.
    * @return {float32x4} A float32x4 with .x and .y from t
    */
  SIMD.float32x4.fromFloat64x2 = function(t) {
    t = SIMD.float64x2.check(t);
    return SIMD.float32x4(t.x, t.y, 0, 0);
  }
}

if (typeof SIMD.float32x4.fromInt32x4 === "undefined") {
  /**
    * @param {int32x4} t An instance of int32x4.
    * @return {float32x4} An integer to float conversion copy of t.
    */
  SIMD.float32x4.fromInt32x4 = function(t) {
    t = SIMD.int32x4.check(t);
    return SIMD.float32x4(t.x, t.y, t.z, t.w);
  }
}

if (typeof SIMD.float32x4.fromFloat64x2Bits === "undefined") {
  /**
   * @param {float64x2} t An instance of float64x2.
   * @return {float32x4} a bit-wise copy of t as a float32x4.
   */
  SIMD.float32x4.fromFloat64x2Bits = function(t) {
    _SIMD_PRIVATE.saveFloat64x2(t);
    return _SIMD_PRIVATE.restoreFloat32x4();
  }
}

if (typeof SIMD.float32x4.fromInt32x4Bits === "undefined") {
  /**
   * @param {int32x4} t An instance of int32x4.
   * @return {float32x4} a bit-wise copy of t as a float32x4.
   */
  SIMD.float32x4.fromInt32x4Bits = function(t) {
    _SIMD_PRIVATE.saveInt32x4(t);
    return _SIMD_PRIVATE.restoreFloat32x4();
  }
}

if (typeof SIMD.float32x4.fromInt16x8Bits === "undefined") {
  /**
   * @param {int16x8} t An instance of int16x8.
   * @return {float32x4} a bit-wise copy of t as a float32x4.
   */
  SIMD.float32x4.fromInt16x8Bits = function(t) {
    _SIMD_PRIVATE.saveInt16x8(t);
    return _SIMD_PRIVATE.restoreFloat32x4();
  }
}

if (typeof SIMD.float32x4.fromInt8x16Bits === "undefined") {
  /**
   * @param {int8x16} t An instance of int8x16.
   * @return {float32x4} a bit-wise copy of t as a float32x4.
   */
  SIMD.float32x4.fromInt8x16Bits = function(t) {
    _SIMD_PRIVATE.saveInt8x16(t);
    return _SIMD_PRIVATE.restoreFloat32x4();
  }
}

if (typeof SIMD.float64x2 === "undefined") {
  /**
    * Construct a new instance of float64x2 number.
    * @param {double} value used for x lane.
    * @param {double} value used for y lane.
    * @constructor
    */
  SIMD.float64x2 = function(x, y) {
    if (!(this instanceof SIMD.float64x2)) {
      return new SIMD.float64x2(x, y);
    }

    // Use unary + to force coercion to Number.
    this.x_ = +x;
    this.y_ = +y;
  }

  Object.defineProperty(SIMD.float64x2.prototype, 'x', {
    get: function() { return this.x_; }
  });

  Object.defineProperty(SIMD.float64x2.prototype, 'y', {
    get: function() { return this.y_; }
  });

  /**
    * Extract the sign bit from each lane return them in the first 2 bits.
    */
  Object.defineProperty(SIMD.float64x2.prototype, 'signMask', {
    get: function() {
      var mx = (this.x < 0.0 || 1/this.x === -Infinity);
      var my = (this.y < 0.0 || 1/this.y === -Infinity);
      return mx | my << 1;
    }
  });
}

if (typeof SIMD.float64x2.check === "undefined") {
  /**
    * Check whether the argument is a float64x2.
    * @param {float64x2} v An instance of float64x2.
    * @return {float64x2} The float64x2 instance.
    */
  SIMD.float64x2.check = function(v) {
    if (!(v instanceof SIMD.float64x2)) {
      throw new TypeError("argument is not a float64x2.");
    }
    return v;
  }
}

if (typeof SIMD.float64x2.splat === "undefined") {
  /**
    * Construct a new instance of float64x2 number with the same value
    * in all lanes.
    * @param {double} value used for all lanes.
    * @constructor
    */
  SIMD.float64x2.splat = function(s) {
    return SIMD.float64x2(s, s);
  }
}

if (typeof SIMD.float64x2.fromFloat32x4 === "undefined") {
  /**
    * @param {float32x4} t An instance of float32x4.
    * @return {float64x2} A float64x2 with .x and .y from t
    */
  SIMD.float64x2.fromFloat32x4 = function(t) {
    t = SIMD.float32x4.check(t);
    return SIMD.float64x2(t.x, t.y);
  }
}

if (typeof SIMD.float64x2.fromInt32x4 === "undefined") {
  /**
    * @param {int32x4} t An instance of int32x4.
    * @return {float64x2} A float64x2 with .x and .y from t
    */
  SIMD.float64x2.fromInt32x4 = function(t) {
    t = SIMD.int32x4.check(t);
    return SIMD.float64x2(t.x, t.y);
  }
}

if (typeof SIMD.float64x2.fromFloat32x4Bits === "undefined") {
  /**
   * @param {float32x4} t An instance of float32x4.
   * @return {float64x2} a bit-wise copy of t as a float64x2.
   */
  SIMD.float64x2.fromFloat32x4Bits = function(t) {
    _SIMD_PRIVATE.saveFloat32x4(t);
    return _SIMD_PRIVATE.restoreFloat64x2();
  }
}

if (typeof SIMD.float64x2.fromInt32x4Bits === "undefined") {
  /**
   * @param {int32x4} t An instance of int32x4.
   * @return {float64x2} a bit-wise copy of t as a float64x2.
   */
  SIMD.float64x2.fromInt32x4Bits = function(t) {
    _SIMD_PRIVATE.saveInt32x4(t);
    return _SIMD_PRIVATE.restoreFloat64x2();
  }
}

if (typeof SIMD.float64x2.fromInt16x8Bits === "undefined") {
  /**
   * @param {int16x8} t An instance of int16x8.
   * @return {float64x2} a bit-wise copy of t as a float64x2.
   */
  SIMD.float64x2.fromInt16x8Bits = function(t) {
    _SIMD_PRIVATE.saveInt16x8(t);
    return _SIMD_PRIVATE.restoreFloat64x2();
  }
}

if (typeof SIMD.float64x2.fromInt8x16Bits === "undefined") {
  /**
   * @param {int8x16} t An instance of int8x16.
   * @return {float64x2} a bit-wise copy of t as a float64x2.
   */
  SIMD.float64x2.fromInt8x16Bits = function(t) {
    _SIMD_PRIVATE.saveInt8x16(t);
    return _SIMD_PRIVATE.restoreFloat64x2();
  }
}

if (typeof SIMD.int32x4 === "undefined") {
  /**
    * Construct a new instance of int32x4 number.
    * @param {integer} 32-bit value used for x lane.
    * @param {integer} 32-bit value used for y lane.
    * @param {integer} 32-bit value used for z lane.
    * @param {integer} 32-bit value used for w lane.
    * @constructor
    */
  SIMD.int32x4 = function(x, y, z, w) {
    if (!(this instanceof SIMD.int32x4)) {
      return new SIMD.int32x4(x, y, z, w);
    }

    this.x_ = x|0;
    this.y_ = y|0;
    this.z_ = z|0;
    this.w_ = w|0;
  }

  Object.defineProperty(SIMD.int32x4.prototype, 'x', {
    get: function() { return this.x_; }
  });

  Object.defineProperty(SIMD.int32x4.prototype, 'y', {
    get: function() { return this.y_; }
  });

  Object.defineProperty(SIMD.int32x4.prototype, 'z', {
    get: function() { return this.z_; }
  });

  Object.defineProperty(SIMD.int32x4.prototype, 'w', {
    get: function() { return this.w_; }
  });

  Object.defineProperty(SIMD.int32x4.prototype, 'flagX', {
    get: function() { return _SIMD_PRIVATE.tobool(this.x); }
  });

  Object.defineProperty(SIMD.int32x4.prototype, 'flagY', {
    get: function() { return _SIMD_PRIVATE.tobool(this.y); }
  });

  Object.defineProperty(SIMD.int32x4.prototype, 'flagZ', {
    get: function() { return _SIMD_PRIVATE.tobool(this.z); }
  });

  Object.defineProperty(SIMD.int32x4.prototype, 'flagW', {
    get: function() { return _SIMD_PRIVATE.tobool(this.w); }
  });

  /**
    * Extract the sign bit from each lane return them in the first 4 bits.
    */
  Object.defineProperty(SIMD.int32x4.prototype, 'signMask', {
    get: function() {
      var mx = _SIMD_PRIVATE.tobool(this.x);
      var my = _SIMD_PRIVATE.tobool(this.y);
      var mz = _SIMD_PRIVATE.tobool(this.z);
      var mw = _SIMD_PRIVATE.tobool(this.w);
      return mx | my << 1 | mz << 2 | mw << 3;
    }
  });
}

if (typeof SIMD.int32x4.check === "undefined") {
  /**
    * Check whether the argument is a int32x4.
    * @param {int32x4} v An instance of int32x4.
    * @return {int32x4} The int32x4 instance.
    */
  SIMD.int32x4.check = function(v) {
    if (!(v instanceof SIMD.int32x4)) {
      throw new TypeError("argument is not a int32x4.");
    }
    return v;
  }
}

if (typeof SIMD.int32x4.bool === "undefined") {
  /**
    * Construct a new instance of int32x4 number with either true or false in each
    * lane, depending on the truth values in x, y, z, and w.
    * @param {boolean} flag used for x lane.
    * @param {boolean} flag used for y lane.
    * @param {boolean} flag used for z lane.
    * @param {boolean} flag used for w lane.
    * @constructor
    */
  SIMD.int32x4.bool = function(x, y, z, w) {
    return SIMD.int32x4(_SIMD_PRIVATE.frombool(x),
                        _SIMD_PRIVATE.frombool(y),
                        _SIMD_PRIVATE.frombool(z),
                        _SIMD_PRIVATE.frombool(w));
  }
}

if (typeof SIMD.int32x4.splat === "undefined") {
  /**
    * Construct a new instance of int32x4 number with the same value
    * in all lanes.
    * @param {integer} value used for all lanes.
    * @constructor
    */
  SIMD.int32x4.splat = function(s) {
    return SIMD.int32x4(s, s, s, s);
  }
}

if (typeof SIMD.int32x4.fromFloat32x4 === "undefined") {
  /**
    * @param {float32x4} t An instance of float32x4.
    * @return {int32x4} with a integer to float conversion of t.
    */
  SIMD.int32x4.fromFloat32x4 = function(t) {
    t = SIMD.float32x4.check(t);
    return SIMD.int32x4(t.x, t.y, t.z, t.w);
  }
}

if (typeof SIMD.int32x4.fromFloat64x2 === "undefined") {
  /**
    * @param {float64x2} t An instance of float64x2.
    * @return {int32x4}  An int32x4 with .x and .y from t
    */
  SIMD.int32x4.fromFloat64x2 = function(t) {
    t = SIMD.float64x2.check(t);
    return SIMD.int32x4(t.x, t.y, 0, 0);
  }
}

if (typeof SIMD.int32x4.fromFloat32x4Bits === "undefined") {
  /**
    * @param {float32x4} t An instance of float32x4.
    * @return {int32x4} a bit-wise copy of t as a int32x4.
    */
  SIMD.int32x4.fromFloat32x4Bits = function(t) {
    _SIMD_PRIVATE.saveFloat32x4(t);
    return _SIMD_PRIVATE.restoreInt32x4();
  }
}

if (typeof SIMD.int32x4.fromFloat64x2Bits === "undefined") {
  /**
   * @param {float64x2} t An instance of float64x2.
   * @return {int32x4} a bit-wise copy of t as an int32x4.
   */
  SIMD.int32x4.fromFloat64x2Bits = function(t) {
    _SIMD_PRIVATE.saveFloat64x2(t);
    return _SIMD_PRIVATE.restoreInt32x4();
  }
}

if (typeof SIMD.int32x4.fromInt16x8Bits === "undefined") {
  /**
    * @param {int16x8} t An instance of int16x8.
    * @return {int32x4} a bit-wise copy of t as a int32x4.
    */
  SIMD.int32x4.fromInt16x8Bits = function(t) {
    _SIMD_PRIVATE.saveInt16x8(t);
    return _SIMD_PRIVATE.restoreInt32x4();
  }
}

if (typeof SIMD.int32x4.fromInt8x16Bits === "undefined") {
  /**
    * @param {int8x16} t An instance of int8x16.
    * @return {int32x4} a bit-wise copy of t as a int32x4.
    */
  SIMD.int32x4.fromInt8x16Bits = function(t) {
    _SIMD_PRIVATE.saveInt8x16(t);
    return _SIMD_PRIVATE.restoreInt32x4();
  }
}

if (typeof SIMD.int16x8 === "undefined") {
  /**
    * Construct a new instance of int16x8 number.
    * @param {integer} 16-bit value used for s0 lane.
    * @param {integer} 16-bit value used for s1 lane.
    * @param {integer} 16-bit value used for s2 lane.
    * @param {integer} 16-bit value used for s3 lane.
    * @param {integer} 16-bit value used for s4 lane.
    * @param {integer} 16-bit value used for s5 lane.
    * @param {integer} 16-bit value used for s6 lane.
    * @param {integer} 16-bit value used for s7 lane.
    * @constructor
    */
  SIMD.int16x8 = function(s0, s1, s2, s3, s4, s5, s6, s7) {
    if (!(this instanceof SIMD.int16x8)) {
      return new SIMD.int16x8(s0, s1, s2, s3, s4, s5, s6, s7);
    }

    this.s0_ = s0 << 16 >> 16;
    this.s1_ = s1 << 16 >> 16;
    this.s2_ = s2 << 16 >> 16;
    this.s3_ = s3 << 16 >> 16;
    this.s4_ = s4 << 16 >> 16;
    this.s5_ = s5 << 16 >> 16;
    this.s6_ = s6 << 16 >> 16;
    this.s7_ = s7 << 16 >> 16;
  }

  Object.defineProperty(SIMD.int16x8.prototype, 's0', {
    get: function() { return this.s0_; }
  });

  Object.defineProperty(SIMD.int16x8.prototype, 's1', {
    get: function() { return this.s1_; }
  });

  Object.defineProperty(SIMD.int16x8.prototype, 's2', {
    get: function() { return this.s2_; }
  });

  Object.defineProperty(SIMD.int16x8.prototype, 's3', {
    get: function() { return this.s3_; }
  });

  Object.defineProperty(SIMD.int16x8.prototype, 's4', {
    get: function() { return this.s4_; }
  });

  Object.defineProperty(SIMD.int16x8.prototype, 's5', {
    get: function() { return this.s5_; }
  });

  Object.defineProperty(SIMD.int16x8.prototype, 's6', {
    get: function() { return this.s6_; }
  });

  Object.defineProperty(SIMD.int16x8.prototype, 's7', {
    get: function() { return this.s7_; }
  });

  /**
    * Extract the sign bit from each lane return them in the first 8 bits.
    */
  Object.defineProperty(SIMD.int16x8.prototype, 'signMask', {
    get: function() {
      var ms0 = (this.s0 & 0x8000) >>> 15;
      var ms1 = (this.s1 & 0x8000) >>> 15;
      var ms2 = (this.s2 & 0x8000) >>> 15;
      var ms3 = (this.s3 & 0x8000) >>> 15;
      var ms4 = (this.s4 & 0x8000) >>> 15;
      var ms5 = (this.s5 & 0x8000) >>> 15;
      var ms6 = (this.s6 & 0x8000) >>> 15;
      var ms7 = (this.s7 & 0x8000) >>> 15;
      return ms0 | ms1 << 1 | ms2 << 2 | ms3 << 3 |
             ms4 << 4 | ms5 << 5 | ms6 << 6 | ms7 << 7;
    }
  });
}

if (typeof SIMD.int16x8.check === "undefined") {
  /**
    * Check whether the argument is a int16x8.
    * @param {int16x8} v An instance of int16x8.
    * @return {int16x8} The int16x8 instance.
    */
  SIMD.int16x8.check = function(v) {
    if (!(v instanceof SIMD.int16x8)) {
      throw new TypeError("argument is not a int16x8.");
    }
    return v;
  }
}

if (typeof SIMD.int16x8.bool === "undefined") {
  /**
    * Construct a new instance of int16x8 number with true or false in each
    * lane, depending on the truth value in s0, s1, s2, s3, s4, s5, s6, and s7.
    * @param {boolean} flag used for s0 lane.
    * @param {boolean} flag used for s1 lane.
    * @param {boolean} flag used for s2 lane.
    * @param {boolean} flag used for s3 lane.
    * @param {boolean} flag used for s4 lane.
    * @param {boolean} flag used for s5 lane.
    * @param {boolean} flag used for s6 lane.
    * @param {boolean} flag used for s7 lane.
    * @constructor
    */
  SIMD.int16x8.bool = function(s0, s1, s2, s3, s4, s5, s6, s7) {
    return SIMD.int16x8(s0 ? -1 : 0x0,
                        s1 ? -1 : 0x0,
                        s2 ? -1 : 0x0,
                        s3 ? -1 : 0x0,
                        s4 ? -1 : 0x0,
                        s5 ? -1 : 0x0,
                        s6 ? -1 : 0x0,
                        s7 ? -1 : 0x0);
  }
}

if (typeof SIMD.int16x8.splat === "undefined") {
  /**
    * Construct a new instance of int16x8 number with the same value
    * in all lanes.
    * @param {integer} value used for all lanes.
    * @constructor
    */
  SIMD.int16x8.splat = function(s) {
    return SIMD.int16x8(s, s, s, s, s, s, s, s);
  }
}

if (typeof SIMD.int16x8.fromFloat32x4Bits === "undefined") {
  /**
    * @param {float32x4} t An instance of float32x4.
    * @return {int16x8} a bit-wise copy of t as a int16x8.
    */
  SIMD.int16x8.fromFloat32x4Bits = function(t) {
    _SIMD_PRIVATE.saveFloat32x4(t);
    return _SIMD_PRIVATE.restoreInt16x8();
  }
}

if (typeof SIMD.int16x8.fromFloat64x2Bits === "undefined") {
  /**
   * @param {float64x2} t An instance of float64x2.
   * @return {int16x8} a bit-wise copy of t as an int16x8.
   */
  SIMD.int16x8.fromFloat64x2Bits = function(t) {
    _SIMD_PRIVATE.saveFloat64x2(t);
    return _SIMD_PRIVATE.restoreInt16x8();
  }
}

if (typeof SIMD.int16x8.fromInt32x4Bits === "undefined") {
  /**
    * @param {int32x4} t An instance of int32x4.
    * @return {int16x8} a bit-wise copy of t as a int16x8.
    */
  SIMD.int16x8.fromInt32x4Bits = function(t) {
    _SIMD_PRIVATE.saveInt32x4(t);
    return _SIMD_PRIVATE.restoreInt16x8();
  }
}

if (typeof SIMD.int16x8.fromInt8x16Bits === "undefined") {
  /**
    * @param {int8x16} t An instance of int8x16.
    * @return {int16x8} a bit-wise copy of t as a int16x8.
    */
  SIMD.int16x8.fromInt8x16Bits = function(t) {
    _SIMD_PRIVATE.saveInt8x16(t);
    return _SIMD_PRIVATE.restoreInt16x8();
  }
}

if (typeof SIMD.int8x16 === "undefined") {
  /**
    * Construct a new instance of int8x16 number.
    * @param {integer} 8-bit value used for s0 lane.
    * @param {integer} 8-bit value used for s1 lane.
    * @param {integer} 8-bit value used for s2 lane.
    * @param {integer} 8-bit value used for s3 lane.
    * @param {integer} 8-bit value used for s4 lane.
    * @param {integer} 8-bit value used for s5 lane.
    * @param {integer} 8-bit value used for s6 lane.
    * @param {integer} 8-bit value used for s7 lane.
    * @param {integer} 8-bit value used for s8 lane.
    * @param {integer} 8-bit value used for s9 lane.
    * @param {integer} 8-bit value used for s10 lane.
    * @param {integer} 8-bit value used for s11 lane.
    * @param {integer} 8-bit value used for s12 lane.
    * @param {integer} 8-bit value used for s13 lane.
    * @param {integer} 8-bit value used for s14 lane.
    * @param {integer} 8-bit value used for s15 lane.
    * @constructor
    */
  SIMD.int8x16 = function(s0, s1, s2, s3, s4, s5, s6, s7,
                          s8, s9, s10, s11, s12, s13, s14, s15) {
    if (!(this instanceof SIMD.int8x16)) {
      return new SIMD.int8x16(s0, s1, s2, s3, s4, s5, s6, s7,
                              s8, s9, s10, s11, s12, s13, s14, s15);
    }

    this.s0_ = s0 << 24 >> 24;
    this.s1_ = s1 << 24 >> 24;
    this.s2_ = s2 << 24 >> 24;
    this.s3_ = s3 << 24 >> 24;
    this.s4_ = s4 << 24 >> 24;
    this.s5_ = s5 << 24 >> 24;
    this.s6_ = s6 << 24 >> 24;
    this.s7_ = s7 << 24 >> 24;
    this.s8_ = s8 << 24 >> 24;
    this.s9_ = s9 << 24 >> 24;
    this.s10_ = s10 << 24 >> 24;
    this.s11_ = s11 << 24 >> 24;
    this.s12_ = s12 << 24 >> 24;
    this.s13_ = s13 << 24 >> 24;
    this.s14_ = s14 << 24 >> 24;
    this.s15_ = s15 << 24 >> 24;
  }

  Object.defineProperty(SIMD.int8x16.prototype, 's0', {
    get: function() { return this.s0_; }
  });

  Object.defineProperty(SIMD.int8x16.prototype, 's1', {
    get: function() { return this.s1_; }
  });

  Object.defineProperty(SIMD.int8x16.prototype, 's2', {
    get: function() { return this.s2_; }
  });

  Object.defineProperty(SIMD.int8x16.prototype, 's3', {
    get: function() { return this.s3_; }
  });

  Object.defineProperty(SIMD.int8x16.prototype, 's4', {
    get: function() { return this.s4_; }
  });

  Object.defineProperty(SIMD.int8x16.prototype, 's5', {
    get: function() { return this.s5_; }
  });

  Object.defineProperty(SIMD.int8x16.prototype, 's6', {
    get: function() { return this.s6_; }
  });

  Object.defineProperty(SIMD.int8x16.prototype, 's7', {
    get: function() { return this.s7_; }
  });

  Object.defineProperty(SIMD.int8x16.prototype, 's8', {
    get: function() { return this.s8_; }
  });

  Object.defineProperty(SIMD.int8x16.prototype, 's9', {
    get: function() { return this.s9_; }
  });

  Object.defineProperty(SIMD.int8x16.prototype, 's10', {
    get: function() { return this.s10_; }
  });

  Object.defineProperty(SIMD.int8x16.prototype, 's11', {
    get: function() { return this.s11_; }
  });

  Object.defineProperty(SIMD.int8x16.prototype, 's12', {
    get: function() { return this.s12_; }
  });

  Object.defineProperty(SIMD.int8x16.prototype, 's13', {
    get: function() { return this.s13_; }
  });

  Object.defineProperty(SIMD.int8x16.prototype, 's14', {
    get: function() { return this.s14_; }
  });

  Object.defineProperty(SIMD.int8x16.prototype, 's15', {
    get: function() { return this.s15_; }
  });

  /**
    * Extract the sign bit from each lane return them in the first 16 bits.
    */
  Object.defineProperty(SIMD.int8x16.prototype, 'signMask', {
    get: function() {
      var ms0 = (this.s0 & 0x80) >>> 7;
      var ms1 = (this.s1 & 0x80) >>> 7;
      var ms2 = (this.s2 & 0x80) >>> 7;
      var ms3 = (this.s3 & 0x80) >>> 7;
      var ms4 = (this.s4 & 0x80) >>> 7;
      var ms5 = (this.s5 & 0x80) >>> 7;
      var ms6 = (this.s6 & 0x80) >>> 7;
      var ms7 = (this.s7 & 0x80) >>> 7;
      var ms8 = (this.s8 & 0x80) >>> 7;
      var ms9 = (this.s9 & 0x80) >>> 7;
      var ms10 = (this.s10 & 0x80) >>> 7;
      var ms11 = (this.s11 & 0x80) >>> 7;
      var ms12 = (this.s12 & 0x80) >>> 7;
      var ms13 = (this.s13 & 0x80) >>> 7;
      var ms14 = (this.s14 & 0x80) >>> 7;
      var ms15 = (this.s15 & 0x80) >>> 7;
      return ms0 | ms1 << 1 | ms2 << 2 | ms3 << 3 |
             ms4 << 4 | ms5 << 5 | ms6 << 6 | ms7 << 7 |
             ms8 << 8 | ms9 << 9 | ms10 << 10 | ms11 << 11 |
             ms12 << 12 | ms13 << 13 | ms14 << 14 | ms15 << 15;
    }
  });
}

if (typeof SIMD.int8x16.check === "undefined") {
  /**
    * Check whether the argument is a int8x16.
    * @param {int8x16} v An instance of int8x16.
    * @return {int8x16} The int8x16 instance.
    */
  SIMD.int8x16.check = function(v) {
    if (!(v instanceof SIMD.int8x16)) {
      throw new TypeError("argument is not a int8x16.");
    }
    return v;
  }
}

if (typeof SIMD.int8x16.bool === "undefined") {
  /**
    * Construct a new instance of int8x16 number with true or false in each
    * lane, depending on the truth value in s0, s1, s2, s3, s4, s5, s6, s7,
    * s8, s9, s10, s11, s12, s13, s14, and s15.
    * @param {boolean} flag used for s0 lane.
    * @param {boolean} flag used for s1 lane.
    * @param {boolean} flag used for s2 lane.
    * @param {boolean} flag used for s3 lane.
    * @param {boolean} flag used for s4 lane.
    * @param {boolean} flag used for s5 lane.
    * @param {boolean} flag used for s6 lane.
    * @param {boolean} flag used for s7 lane.
    * @param {boolean} flag used for s8 lane.
    * @param {boolean} flag used for s9 lane.
    * @param {boolean} flag used for s10 lane.
    * @param {boolean} flag used for s11 lane.
    * @param {boolean} flag used for s12 lane.
    * @param {boolean} flag used for s13 lane.
    * @param {boolean} flag used for s14 lane.
    * @param {boolean} flag used for s15 lane.
    * @constructor
    */
  SIMD.int8x16.bool = function(s0, s1, s2, s3, s4, s5, s6, s7,
                               s8, s9, s10, s11, s12, s13, s14, s15) {
    return SIMD.int8x16(s0 ? -1 : 0x0,
                        s1 ? -1 : 0x0,
                        s2 ? -1 : 0x0,
                        s3 ? -1 : 0x0,
                        s4 ? -1 : 0x0,
                        s5 ? -1 : 0x0,
                        s6 ? -1 : 0x0,
                        s7 ? -1 : 0x0,
                        s8 ? -1 : 0x0,
                        s9 ? -1 : 0x0,
                        s10 ? -1 : 0x0,
                        s11 ? -1 : 0x0,
                        s12 ? -1 : 0x0,
                        s13 ? -1 : 0x0,
                        s14 ? -1 : 0x0,
                        s15 ? -1 : 0x0);
  }
}

if (typeof SIMD.int8x16.splat === "undefined") {
  /**
    * Construct a new instance of int8x16 number with the same value
    * in all lanes.
    * @param {integer} value used for all lanes.
    * @constructor
    */
  SIMD.int8x16.splat = function(s) {
    return SIMD.int8x16(s, s, s, s, s, s, s, s,
                        s, s, s, s, s, s, s, s);
  }
}

if (typeof SIMD.int8x16.fromFloat32x4Bits === "undefined") {
  /**
    * @param {float32x4} t An instance of float32x4.
    * @return {int8x16} a bit-wise copy of t as a int8x16.
    */
  SIMD.int8x16.fromFloat32x4Bits = function(t) {
    _SIMD_PRIVATE.saveFloat32x4(t);
    return _SIMD_PRIVATE.restoreInt8x16();
  }
}

if (typeof SIMD.int8x16.fromFloat64x2Bits === "undefined") {
  /**
   * @param {float64x2} t An instance of float64x2.
   * @return {int8x16} a bit-wise copy of t as an int8x16.
   */
  SIMD.int8x16.fromFloat64x2Bits = function(t) {
    _SIMD_PRIVATE.saveFloat64x2(t);
    return _SIMD_PRIVATE.restoreInt8x16();
  }
}

if (typeof SIMD.int8x16.fromInt32x4Bits === "undefined") {
  /**
    * @param {int32x4} t An instance of int32x4.
    * @return {int8x16} a bit-wise copy of t as a int8x16.
    */
  SIMD.int8x16.fromInt32x4Bits = function(t) {
    _SIMD_PRIVATE.saveInt32x4(t);
    return _SIMD_PRIVATE.restoreInt8x16();
  }
}

if (typeof SIMD.int8x16.fromInt16x8Bits === "undefined") {
  /**
    * @param {int16x8} t An instance of int16x8.
    * @return {int8x16} a bit-wise copy of t as a int8x16.
    */
  SIMD.int8x16.fromInt16x8Bits = function(t) {
    _SIMD_PRIVATE.saveInt16x8(t);
    return _SIMD_PRIVATE.restoreInt8x16();
  }
}

if (typeof SIMD.float32x4.abs === "undefined") {
  /**
   * @param {float32x4} t An instance of float32x4.
   * @return {float32x4} New instance of float32x4 with absolute values of
   * t.
   */
  SIMD.float32x4.abs = function(t) {
    t = SIMD.float32x4.check(t);
    return SIMD.float32x4(Math.abs(t.x), Math.abs(t.y), Math.abs(t.z),
                          Math.abs(t.w));
  }
}

if (typeof SIMD.float32x4.neg === "undefined") {
  /**
    * @param {float32x4} t An instance of float32x4.
    * @return {float32x4} New instance of float32x4 with negated values of
    * t.
    */
  SIMD.float32x4.neg = function(t) {
    t = SIMD.float32x4.check(t);
    return SIMD.float32x4(-t.x, -t.y, -t.z, -t.w);
  }
}

if (typeof SIMD.float32x4.add === "undefined") {
  /**
    * @param {float32x4} a An instance of float32x4.
    * @param {float32x4} b An instance of float32x4.
    * @return {float32x4} New instance of float32x4 with a + b.
    */
  SIMD.float32x4.add = function(a, b) {
    a = SIMD.float32x4.check(a);
    b = SIMD.float32x4.check(b);
    return SIMD.float32x4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
  }
}

if (typeof SIMD.float32x4.sub === "undefined") {
  /**
    * @param {float32x4} a An instance of float32x4.
    * @param {float32x4} b An instance of float32x4.
    * @return {float32x4} New instance of float32x4 with a - b.
    */
  SIMD.float32x4.sub = function(a, b) {
    a = SIMD.float32x4.check(a);
    b = SIMD.float32x4.check(b);
    return SIMD.float32x4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
  }
}

if (typeof SIMD.float32x4.mul === "undefined") {
  /**
    * @param {float32x4} a An instance of float32x4.
    * @param {float32x4} b An instance of float32x4.
    * @return {float32x4} New instance of float32x4 with a * b.
    */
  SIMD.float32x4.mul = function(a, b) {
    a = SIMD.float32x4.check(a);
    b = SIMD.float32x4.check(b);
    return SIMD.float32x4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w);
  }
}

if (typeof SIMD.float32x4.div === "undefined") {
  /**
    * @param {float32x4} a An instance of float32x4.
    * @param {float32x4} b An instance of float32x4.
    * @return {float32x4} New instance of float32x4 with a / b.
    */
  SIMD.float32x4.div = function(a, b) {
    a = SIMD.float32x4.check(a);
    b = SIMD.float32x4.check(b);
    return SIMD.float32x4(a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w);
  }
}

if (typeof SIMD.float32x4.clamp === "undefined") {
  /**
    * @param {float32x4} t An instance of float32x4.
    * @param {float32x4} lowerLimit An instance of float32x4.
    * @param {float32x4} upperLimit An instance of float32x4.
    * @return {float32x4} New instance of float32x4 with t's values clamped
    * between lowerLimit and upperLimit.
    */
  SIMD.float32x4.clamp = function(t, lowerLimit, upperLimit) {
    t = SIMD.float32x4.check(t);
    lowerLimit = SIMD.float32x4.check(lowerLimit);
    upperLimit = SIMD.float32x4.check(upperLimit);
    var cx = t.x < lowerLimit.x ? lowerLimit.x : t.x;
    var cy = t.y < lowerLimit.y ? lowerLimit.y : t.y;
    var cz = t.z < lowerLimit.z ? lowerLimit.z : t.z;
    var cw = t.w < lowerLimit.w ? lowerLimit.w : t.w;
    cx = cx > upperLimit.x ? upperLimit.x : cx;
    cy = cy > upperLimit.y ? upperLimit.y : cy;
    cz = cz > upperLimit.z ? upperLimit.z : cz;
    cw = cw > upperLimit.w ? upperLimit.w : cw;
    return SIMD.float32x4(cx, cy, cz, cw);
  }
}

if (typeof SIMD.float32x4.min === "undefined") {
  /**
    * @param {float32x4} t An instance of float32x4.
    * @param {float32x4} other An instance of float32x4.
    * @return {float32x4} New instance of float32x4 with the minimum value of
    * t and other.
    */
  SIMD.float32x4.min = function(t, other) {
    t = SIMD.float32x4.check(t);
    other = SIMD.float32x4.check(other);
    var cx = Math.min(t.x, other.x);
    var cy = Math.min(t.y, other.y);
    var cz = Math.min(t.z, other.z);
    var cw = Math.min(t.w, other.w);
    return SIMD.float32x4(cx, cy, cz, cw);
  }
}

if (typeof SIMD.float32x4.max === "undefined") {
  /**
    * @param {float32x4} t An instance of float32x4.
    * @param {float32x4} other An instance of float32x4.
    * @return {float32x4} New instance of float32x4 with the maximum value of
    * t and other.
    */
  SIMD.float32x4.max = function(t, other) {
    t = SIMD.float32x4.check(t);
    other = SIMD.float32x4.check(other);
    var cx = Math.max(t.x, other.x);
    var cy = Math.max(t.y, other.y);
    var cz = Math.max(t.z, other.z);
    var cw = Math.max(t.w, other.w);
    return SIMD.float32x4(cx, cy, cz, cw);
  }
}

if (typeof SIMD.float32x4.minNum === "undefined") {
  /**
    * @param {float32x4} t An instance of float32x4.
    * @param {float32x4} other An instance of float32x4.
    * @return {float32x4} New instance of float32x4 with the minimum value of
    * t and other, preferring numbers over NaNs.
    */
  SIMD.float32x4.minNum = function(t, other) {
    t = SIMD.float32x4.check(t);
    other = SIMD.float32x4.check(other);
    var cx = _SIMD_PRIVATE.minNum(t.x, other.x);
    var cy = _SIMD_PRIVATE.minNum(t.y, other.y);
    var cz = _SIMD_PRIVATE.minNum(t.z, other.z);
    var cw = _SIMD_PRIVATE.minNum(t.w, other.w);
    return SIMD.float32x4(cx, cy, cz, cw);
  }
}

if (typeof SIMD.float32x4.maxNum === "undefined") {
  /**
    * @param {float32x4} t An instance of float32x4.
    * @param {float32x4} other An instance of float32x4.
    * @return {float32x4} New instance of float32x4 with the maximum value of
    * t and other, preferring numbers over NaNs.
    */
  SIMD.float32x4.maxNum = function(t, other) {
    t = SIMD.float32x4.check(t);
    other = SIMD.float32x4.check(other);
    var cx = _SIMD_PRIVATE.maxNum(t.x, other.x);
    var cy = _SIMD_PRIVATE.maxNum(t.y, other.y);
    var cz = _SIMD_PRIVATE.maxNum(t.z, other.z);
    var cw = _SIMD_PRIVATE.maxNum(t.w, other.w);
    return SIMD.float32x4(cx, cy, cz, cw);
  }
}

if (typeof SIMD.float32x4.reciprocal === "undefined") {
  /**
    * @param {float32x4} t An instance of float32x4.
    * @return {float32x4} New instance of float32x4 with reciprocal value of
    * t.
    */
  SIMD.float32x4.reciprocal = function(t) {
    t = SIMD.float32x4.check(t);
    return SIMD.float32x4(1.0 / t.x, 1.0 / t.y, 1.0 / t.z, 1.0 / t.w);
  }
}

if (typeof SIMD.float32x4.reciprocalSqrt === "undefined") {
  /**
    * @param {float32x4} t An instance of float32x4.
    * @return {float32x4} New instance of float32x4 with square root of the
    * reciprocal value of t.
    */
  SIMD.float32x4.reciprocalSqrt = function(t) {
    t = SIMD.float32x4.check(t);
    return SIMD.float32x4(Math.sqrt(1.0 / t.x), Math.sqrt(1.0 / t.y),
                          Math.sqrt(1.0 / t.z), Math.sqrt(1.0 / t.w));
  }
}

if (typeof SIMD.float32x4.sqrt === "undefined") {
  /**
    * @param {float32x4} t An instance of float32x4.
    * @return {float32x4} New instance of float32x4 with square root of
    * values of t.
    */
  SIMD.float32x4.sqrt = function(t) {
    t = SIMD.float32x4.check(t);
    return SIMD.float32x4(Math.sqrt(t.x), Math.sqrt(t.y),
                          Math.sqrt(t.z), Math.sqrt(t.w));
  }
}

if (typeof SIMD.float32x4.swizzle === "undefined") {
  /**
    * @param {float32x4} t An instance of float32x4 to be swizzled.
    * @param {integer} x - Index in t for lane x
    * @param {integer} y - Index in t for lane y
    * @param {integer} z - Index in t for lane z
    * @param {integer} w - Index in t for lane w
    * @return {float32x4} New instance of float32x4 with lanes swizzled.
    */
  SIMD.float32x4.swizzle = function(t, x, y, z, w) {
    t = SIMD.float32x4.check(t);
    _SIMD_PRIVATE._f32x4[0] = t.x;
    _SIMD_PRIVATE._f32x4[1] = t.y;
    _SIMD_PRIVATE._f32x4[2] = t.z;
    _SIMD_PRIVATE._f32x4[3] = t.w;
    var storage = _SIMD_PRIVATE._f32x4;
    return SIMD.float32x4(storage[x], storage[y], storage[z], storage[w]);
  }
}

if (typeof SIMD.float32x4.shuffle === "undefined") {

  _SIMD_PRIVATE._f32x8 = new Float32Array(8);

  /**
    * @param {float32x4} t1 An instance of float32x4 to be shuffled.
    * @param {float32x4} t2 An instance of float32x4 to be shuffled.
    * @param {integer} x - Index in concatenation of t1 and t2 for lane x
    * @param {integer} y - Index in concatenation of t1 and t2 for lane y
    * @param {integer} z - Index in concatenation of t1 and t2 for lane z
    * @param {integer} w - Index in concatenation of t1 and t2 for lane w
    * @return {float32x4} New instance of float32x4 with lanes shuffled.
    */
  SIMD.float32x4.shuffle = function(t1, t2, x, y, z, w) {
    t1 = SIMD.float32x4.check(t1);
    t2 = SIMD.float32x4.check(t2);
    var storage = _SIMD_PRIVATE._f32x8;
    storage[0] = t1.x;
    storage[1] = t1.y;
    storage[2] = t1.z;
    storage[3] = t1.w;
    storage[4] = t2.x;
    storage[5] = t2.y;
    storage[6] = t2.z;
    storage[7] = t2.w;
    return SIMD.float32x4(storage[x], storage[y], storage[z], storage[w]);
  }
}

if (typeof SIMD.float32x4.withX === "undefined") {
  /**
    * @param {float32x4} t An instance of float32x4.
    * @param {double} value used for x lane.
    * @return {float32x4} New instance of float32x4 with the values in t and
    * x replaced with {x}.
    */
  SIMD.float32x4.withX = function(t, x) {
    t = SIMD.float32x4.check(t);
    return SIMD.float32x4(x, t.y, t.z, t.w);
  }
}

if (typeof SIMD.float32x4.withY === "undefined") {
  /**
    * @param {float32x4} t An instance of float32x4.
    * @param {double} value used for y lane.
    * @return {float32x4} New instance of float32x4 with the values in t and
    * y replaced with {y}.
    */
  SIMD.float32x4.withY = function(t, y) {
    t = SIMD.float32x4.check(t);
    return SIMD.float32x4(t.x, y, t.z, t.w);
  }
}

if (typeof SIMD.float32x4.withZ === "undefined") {
  /**
    * @param {float32x4} t An instance of float32x4.
    * @param {double} value used for z lane.
    * @return {float32x4} New instance of float32x4 with the values in t and
    * z replaced with {z}.
    */
  SIMD.float32x4.withZ = function(t, z) {
    t = SIMD.float32x4.check(t);
    return SIMD.float32x4(t.x, t.y, z, t.w);
  }
}

if (typeof SIMD.float32x4.withW === "undefined") {
  /**
    * @param {float32x4} t An instance of float32x4.
    * @param {double} value used for w lane.
    * @return {float32x4} New instance of float32x4 with the values in t and
    * w replaced with {w}.
    */
  SIMD.float32x4.withW = function(t, w) {
    t = SIMD.float32x4.check(t);
    return SIMD.float32x4(t.x, t.y, t.z, w);
  }
}

if (typeof SIMD.float32x4.lessThan === "undefined") {
  /**
    * @param {float32x4} t An instance of float32x4.
    * @param {float32x4} other An instance of float32x4.
    * @return {int32x4} true or false in each lane depending on
    * the result of t < other.
    */
  SIMD.float32x4.lessThan = function(t, other) {
    t = SIMD.float32x4.check(t);
    other = SIMD.float32x4.check(other);
    var cx = t.x < other.x;
    var cy = t.y < other.y;
    var cz = t.z < other.z;
    var cw = t.w < other.w;
    return SIMD.int32x4.bool(cx, cy, cz, cw);
  }
}

if (typeof SIMD.float32x4.lessThanOrEqual === "undefined") {
  /**
    * @param {float32x4} t An instance of float32x4.
    * @param {float32x4} other An instance of float32x4.
    * @return {int32x4} true or false in each lane depending on
    * the result of t <= other.
    */
  SIMD.float32x4.lessThanOrEqual = function(t, other) {
    t = SIMD.float32x4.check(t);
    other = SIMD.float32x4.check(other);
    var cx = t.x <= other.x;
    var cy = t.y <= other.y;
    var cz = t.z <= other.z;
    var cw = t.w <= other.w;
    return SIMD.int32x4.bool(cx, cy, cz, cw);
  }
}

if (typeof SIMD.float32x4.equal === "undefined") {
  /**
    * @param {float32x4} t An instance of float32x4.
    * @param {float32x4} other An instance of float32x4.
    * @return {int32x4} true or false in each lane depending on
    * the result of t == other.
    */
  SIMD.float32x4.equal = function(t, other) {
    t = SIMD.float32x4.check(t);
    other = SIMD.float32x4.check(other);
    var cx = t.x == other.x;
    var cy = t.y == other.y;
    var cz = t.z == other.z;
    var cw = t.w == other.w;
    return SIMD.int32x4.bool(cx, cy, cz, cw);
  }
}

if (typeof SIMD.float32x4.notEqual === "undefined") {
  /**
    * @param {float32x4} t An instance of float32x4.
    * @param {float32x4} other An instance of float32x4.
    * @return {int32x4} true or false in each lane depending on
    * the result of t != other.
    */
  SIMD.float32x4.notEqual = function(t, other) {
    t = SIMD.float32x4.check(t);
    other = SIMD.float32x4.check(other);
    var cx = t.x != other.x;
    var cy = t.y != other.y;
    var cz = t.z != other.z;
    var cw = t.w != other.w;
    return SIMD.int32x4.bool(cx, cy, cz, cw);
  }
}

if (typeof SIMD.float32x4.greaterThanOrEqual === "undefined") {
  /**
    * @param {float32x4} t An instance of float32x4.
    * @param {float32x4} other An instance of float32x4.
    * @return {int32x4} true or false in each lane depending on
    * the result of t >= other.
    */
  SIMD.float32x4.greaterThanOrEqual = function(t, other) {
    t = SIMD.float32x4.check(t);
    other = SIMD.float32x4.check(other);
    var cx = t.x >= other.x;
    var cy = t.y >= other.y;
    var cz = t.z >= other.z;
    var cw = t.w >= other.w;
    return SIMD.int32x4.bool(cx, cy, cz, cw);
  }
}

if (typeof SIMD.float32x4.greaterThan === "undefined") {
  /**
    * @param {float32x4} t An instance of float32x4.
    * @param {float32x4} other An instance of float32x4.
    * @return {int32x4} true or false in each lane depending on
    * the result of t > other.
    */
  SIMD.float32x4.greaterThan = function(t, other) {
    t = SIMD.float32x4.check(t);
    other = SIMD.float32x4.check(other);
    var cx = t.x > other.x;
    var cy = t.y > other.y;
    var cz = t.z > other.z;
    var cw = t.w > other.w;
    return SIMD.int32x4.bool(cx, cy, cz, cw);
  }
}

if (typeof SIMD.float32x4.select === "undefined") {
  /**
    * @param {int32x4} t Selector mask. An instance of int32x4
    * @param {float32x4} trueValue Pick lane from here if corresponding
    * selector lane is true
    * @param {float32x4} falseValue Pick lane from here if corresponding
    * selector lane is false
    * @return {float32x4} Mix of lanes from trueValue or falseValue as
    * indicated
    */
  SIMD.float32x4.select = function(t, trueValue, falseValue) {
    t = SIMD.int32x4.check(t);
    trueValue = SIMD.float32x4.check(trueValue);
    falseValue = SIMD.float32x4.check(falseValue);
    return SIMD.float32x4(_SIMD_PRIVATE.tobool(t.x) ? trueValue.x : falseValue.x,
                          _SIMD_PRIVATE.tobool(t.y) ? trueValue.y : falseValue.y,
                          _SIMD_PRIVATE.tobool(t.z) ? trueValue.z : falseValue.z,
                          _SIMD_PRIVATE.tobool(t.w) ? trueValue.w : falseValue.w);
  }
}

if (typeof SIMD.float32x4.bitselect === "undefined") {
  /**
    * @param {int32x4} t Selector mask. An instance of int32x4
    * @param {float32x4} trueValue Pick bit from here if corresponding
    * selector bit is 1
    * @param {float32x4} falseValue Pick bit from here if corresponding
    * selector bit is 0
    * @return {float32x4} Mix of bits from trueValue or falseValue as
    * indicated
    */
  SIMD.float32x4.bitselect = function(t, trueValue, falseValue) {
    t = SIMD.int32x4.check(t);
    trueValue = SIMD.float32x4.check(trueValue);
    falseValue = SIMD.float32x4.check(falseValue);
    var tv = SIMD.int32x4.fromFloat32x4Bits(trueValue);
    var fv = SIMD.int32x4.fromFloat32x4Bits(falseValue);
    var tr = SIMD.int32x4.and(t, tv);
    var fr = SIMD.int32x4.and(SIMD.int32x4.not(t), fv);
    return SIMD.float32x4.fromInt32x4Bits(SIMD.int32x4.or(tr, fr));
  }
}

if (typeof SIMD.float32x4.and === "undefined") {
  /**
    * @param {float32x4} a An instance of float32x4.
    * @param {float32x4} b An instance of float32x4.
    * @return {float32x4} New instance of float32x4 with values of a & b.
    */
  SIMD.float32x4.and = function(a, b) {
    a = SIMD.float32x4.check(a);
    b = SIMD.float32x4.check(b);
    var aInt = SIMD.int32x4.fromFloat32x4Bits(a);
    var bInt = SIMD.int32x4.fromFloat32x4Bits(b);
    return SIMD.float32x4.fromInt32x4Bits(SIMD.int32x4.and(aInt, bInt));
  }
}

if (typeof SIMD.float32x4.or === "undefined") {
  /**
    * @param {float32x4} a An instance of float32x4.
    * @param {float32x4} b An instance of float32x4.
    * @return {float32x4} New instance of float32x4 with values of a | b.
    */
  SIMD.float32x4.or = function(a, b) {
    a = SIMD.float32x4.check(a);
    b = SIMD.float32x4.check(b);
    var aInt = SIMD.int32x4.fromFloat32x4Bits(a);
    var bInt = SIMD.int32x4.fromFloat32x4Bits(b);
    return SIMD.float32x4.fromInt32x4Bits(SIMD.int32x4.or(aInt, bInt));
  }
}

if (typeof SIMD.float32x4.xor === "undefined") {
  /**
    * @param {float32x4} a An instance of float32x4.
    * @param {float32x4} b An instance of float32x4.
    * @return {float32x4} New instance of float32x4 with values of a ^ b.
    */
  SIMD.float32x4.xor = function(a, b) {
    a = SIMD.float32x4.check(a);
    b = SIMD.float32x4.check(b);
    var aInt = SIMD.int32x4.fromFloat32x4Bits(a);
    var bInt = SIMD.int32x4.fromFloat32x4Bits(b);
    return SIMD.float32x4.fromInt32x4Bits(SIMD.int32x4.xor(aInt, bInt));
  }
}

if (typeof SIMD.float32x4.not === "undefined") {
  /**
    * @param {float32x4} a An instance of float32x4.
    * @return {float32x4} New instance of float32x4 with values of ~a.
    */
  SIMD.float32x4.not = function(a) {
    a = SIMD.float32x4.check(a);
    var aInt = SIMD.int32x4.fromFloat32x4Bits(a);
    return SIMD.float32x4.fromInt32x4Bits(SIMD.int32x4.not(aInt));
  }
}

if (typeof SIMD.float32x4.load === "undefined") {
  /**
    * @param {Typed array} tarray An instance of a typed array.
    * @param {Number} index An instance of Number.
    * @return {float32x4} New instance of float32x4.
    */
  SIMD.float32x4.load = function(tarray, index) {
    if (!_SIMD_PRIVATE.isTypedArray(tarray))
      throw new TypeError("The 1st argument must be a typed array.");
    if (!_SIMD_PRIVATE.isNumber(index))
      throw new TypeError("The 2nd argument must be a Number.");
    var bpe = tarray.BYTES_PER_ELEMENT;
    if (index < 0 || (index * bpe + 16) > tarray.byteLength)
      throw new RangeError("The value of index is invalid.");
    var f32temp = _SIMD_PRIVATE._f32x4;
    var array = bpe == 1 ? _SIMD_PRIVATE._i8x16 :
                bpe == 2 ? _SIMD_PRIVATE._i16x8 :
                bpe == 4 ? (tarray instanceof Float32Array ? f32temp : _SIMD_PRIVATE._i32x4) :
                _SIMD_PRIVATE._f64x2;
    var n = 16 / bpe;
    for (var i = 0; i < n; ++i)
      array[i] = tarray[index + i];
    return SIMD.float32x4(f32temp[0], f32temp[1], f32temp[2], f32temp[3]);
  }
}

if (typeof SIMD.float32x4.loadX === "undefined") {
  /**
    * @param {Typed array} tarray An instance of a typed array.
    * @param {Number} index An instance of Number.
    * @return {float32x4} New instance of float32x4.
    */
  SIMD.float32x4.loadX = function(tarray, index) {
    if (!_SIMD_PRIVATE.isTypedArray(tarray))
      throw new TypeError("The 1st argument must be a typed array.");
    if (!_SIMD_PRIVATE.isNumber(index))
      throw new TypeError("The 2nd argument must be a Number.");
    var bpe = tarray.BYTES_PER_ELEMENT;
    if (index < 0 || (index * bpe + 4) > tarray.byteLength)
      throw new RangeError("The value of index is invalid.");
    var f32temp = _SIMD_PRIVATE._f32x4;
    var array = bpe == 1 ? _SIMD_PRIVATE._i8x16 :
                bpe == 2 ? _SIMD_PRIVATE._i16x8 :
                bpe == 4 ? (tarray instanceof Float32Array ? f32temp : _SIMD_PRIVATE._i32x4) :
                _SIMD_PRIVATE._f64x2;
    var n = 4 / bpe;
    for (var i = 0; i < n; ++i)
      array[i] = tarray[index + i];
    return SIMD.float32x4(f32temp[0], 0.0, 0.0, 0.0);
  }
}

if (typeof SIMD.float32x4.loadXY === "undefined") {
  /**
    * @param {Typed array} tarray An instance of a typed array.
    * @param {Number} index An instance of Number.
    * @return {float32x4} New instance of float32x4.
    */
  SIMD.float32x4.loadXY = function(tarray, index) {
    if (!_SIMD_PRIVATE.isTypedArray(tarray))
      throw new TypeError("The 1st argument must be a typed array.");
    if (!_SIMD_PRIVATE.isNumber(index))
      throw new TypeError("The 2nd argument must be a Number.");
    var bpe = tarray.BYTES_PER_ELEMENT;
    if (index < 0 || (index * bpe + 8) > tarray.byteLength)
      throw new RangeError("The value of index is invalid.");
    var f32temp = _SIMD_PRIVATE._f32x4;
    var array = bpe == 1 ? _SIMD_PRIVATE._i8x16 :
                bpe == 2 ? _SIMD_PRIVATE._i16x8 :
                bpe == 4 ? (tarray instanceof Float32Array ? f32temp : _SIMD_PRIVATE._i32x4) :
                _SIMD_PRIVATE._f64x2;
    var n = 8 / bpe;
    for (var i = 0; i < n; ++i)
      array[i] = tarray[index + i];
    return SIMD.float32x4(f32temp[0], f32temp[1], 0.0, 0.0);
  }
}

if (typeof SIMD.float32x4.loadXYZ === "undefined") {
  /**
    * @param {Typed array} tarray An instance of a typed array.
    * @param {Number} index An instance of Number.
    * @return {float32x4} New instance of float32x4.
    */
  SIMD.float32x4.loadXYZ = function(tarray, index) {
    if (!_SIMD_PRIVATE.isTypedArray(tarray))
      throw new TypeError("The 1st argument must be a typed array.");
    if (!_SIMD_PRIVATE.isNumber(index))
      throw new TypeError("The 2nd argument must be a Number.");
    var bpe = tarray.BYTES_PER_ELEMENT;
    if (index < 0 || (index * bpe + 12) > tarray.byteLength)
      throw new RangeError("The value of index is invalid.");
    var f32temp = _SIMD_PRIVATE._f32x4;
    var array = bpe == 1 ? _SIMD_PRIVATE._i8x16 :
                bpe == 2 ? _SIMD_PRIVATE._i16x8 :
                bpe == 4 ? (tarray instanceof Float32Array ? f32temp : _SIMD_PRIVATE._i32x4) :
                _SIMD_PRIVATE._f64x2;
    var n = 12 / bpe;
    for (var i = 0; i < n; ++i)
      array[i] = tarray[index + i];
    return SIMD.float32x4(f32temp[0], f32temp[1], f32temp[2], 0.0);
  }
}

if (typeof SIMD.float32x4.store === "undefined") {
  /**
    * @param {Typed array} tarray An instance of a typed array.
    * @param {Number} index An instance of Number.
    * @param {float32x4} value An instance of float32x4.
    * @return {void}
    */
  SIMD.float32x4.store = function(tarray, index, value) {
    if (!_SIMD_PRIVATE.isTypedArray(tarray))
      throw new TypeError("The 1st argument must be a typed array.");
    if (!_SIMD_PRIVATE.isNumber(index))
      throw new TypeError("The 2nd argument must be a Number.");
    var bpe = tarray.BYTES_PER_ELEMENT;
    if (index < 0 || (index * bpe + 16) > tarray.byteLength)
      throw new RangeError("The value of index is invalid.");
    value = SIMD.float32x4.check(value);
    _SIMD_PRIVATE._f32x4[0] = value.x;
    _SIMD_PRIVATE._f32x4[1] = value.y;
    _SIMD_PRIVATE._f32x4[2] = value.z;
    _SIMD_PRIVATE._f32x4[3] = value.w;
    var array = bpe == 1 ? _SIMD_PRIVATE._i8x16 :
                bpe == 2 ? _SIMD_PRIVATE._i16x8 :
                bpe == 4 ? (tarray instanceof Float32Array ? _SIMD_PRIVATE._f32x4 : _SIMD_PRIVATE._i32x4) :
                _SIMD_PRIVATE._f64x2;
    var n = 16 / bpe;
    for (var i = 0; i < n; ++i)
      tarray[index + i] = array[i];
  }
}

if (typeof SIMD.float32x4.storeX === "undefined") {
  /**
    * @param {Typed array} tarray An instance of a typed array.
    * @param {Number} index An instance of Number.
    * @param {float32x4} value An instance of float32x4.
    * @return {void}
    */
  SIMD.float32x4.storeX = function(tarray, index, value) {
    if (!_SIMD_PRIVATE.isTypedArray(tarray))
      throw new TypeError("The 1st argument must be a typed array.");
    if (!_SIMD_PRIVATE.isNumber(index))
      throw new TypeError("The 2nd argument must be a Number.");
    var bpe = tarray.BYTES_PER_ELEMENT;
    if (index < 0 || (index * bpe + 4) > tarray.byteLength)
      throw new RangeError("The value of index is invalid.");
    value = SIMD.float32x4.check(value);
    if (bpe == 8) {
      // tarray's elements are too wide. Just create a new view; this is rare.
      var view = new Float32Array(tarray.buffer, tarray.byteOffset + index * 8, 1);
      view[0] = value.x;
    } else {
      _SIMD_PRIVATE._f32x4[0] = value.x;
      var array = bpe == 1 ? _SIMD_PRIVATE._i8x16 :
                  bpe == 2 ? _SIMD_PRIVATE._i16x8 :
                  (tarray instanceof Float32Array ? _SIMD_PRIVATE._f32x4 : _SIMD_PRIVATE._i32x4);
      var n = 4 / bpe;
      for (var i = 0; i < n; ++i)
        tarray[index + i] = array[i];
    }
  }
}

if (typeof SIMD.float32x4.storeXY === "undefined") {
  /**
    * @param {Typed array} tarray An instance of a typed array.
    * @param {Number} index An instance of Number.
    * @param {float32x4} value An instance of float32x4.
    * @return {void}
    */
  SIMD.float32x4.storeXY = function(tarray, index, value) {
    if (!_SIMD_PRIVATE.isTypedArray(tarray))
      throw new TypeError("The 1st argument must be a typed array.");
    if (!_SIMD_PRIVATE.isNumber(index))
      throw new TypeError("The 2nd argument must be a Number.");
    var bpe = tarray.BYTES_PER_ELEMENT;
    if (index < 0 || (index * bpe + 8) > tarray.byteLength)
      throw new RangeError("The value of index is invalid.");
    value = SIMD.float32x4.check(value);
    _SIMD_PRIVATE._f32x4[0] = value.x;
    _SIMD_PRIVATE._f32x4[1] = value.y;
    var array = bpe == 1 ? _SIMD_PRIVATE._i8x16 :
                bpe == 2 ? _SIMD_PRIVATE._i16x8 :
                bpe == 4 ? (tarray instanceof Float32Array ? _SIMD_PRIVATE._f32x4 : _SIMD_PRIVATE._i32x4) :
                _SIMD_PRIVATE._f64x2;
    var n = 8 / bpe;
    for (var i = 0; i < n; ++i)
      tarray[index + i] = array[i];
  }
}

if (typeof SIMD.float32x4.storeXYZ === "undefined") {
  /**
    * @param {Typed array} tarray An instance of a typed array.
    * @param {Number} index An instance of Number.
    * @param {float32x4} value An instance of float32x4.
    * @return {void}
    */
  SIMD.float32x4.storeXYZ = function(tarray, index, value) {
    if (!_SIMD_PRIVATE.isTypedArray(tarray))
      throw new TypeError("The 1st argument must be a typed array.");
    if (!_SIMD_PRIVATE.isNumber(index))
      throw new TypeError("The 2nd argument must be a Number.");
    var bpe = tarray.BYTES_PER_ELEMENT;
    if (index < 0 || (index * bpe + 12) > tarray.byteLength)
      throw new RangeError("The value of index is invalid.");
    value = SIMD.float32x4.check(value);
    if (bpe == 8) {
      // tarray's elements are too wide. Just create a new view; this is rare.
      var view = new Float32Array(tarray.buffer, tarray.byteOffset + index * 8, 3);
      view[0] = value.x;
      view[1] = value.y;
      view[2] = value.z;
    } else {
      _SIMD_PRIVATE._f32x4[0] = value.x;
      _SIMD_PRIVATE._f32x4[1] = value.y;
      _SIMD_PRIVATE._f32x4[2] = value.z;
      var array = bpe == 1 ? _SIMD_PRIVATE._i8x16 :
                  bpe == 2 ? _SIMD_PRIVATE._i16x8 :
                  (tarray instanceof Float32Array ? _SIMD_PRIVATE._f32x4 : _SIMD_PRIVATE._i32x4);
      var n = 12 / bpe;
      for (var i = 0; i < n; ++i)
        tarray[index + i] = array[i];
    }
  }
}

if (typeof SIMD.float64x2.abs === "undefined") {
  /**
   * @param {float64x2} t An instance of float64x2.
   * @return {float64x2} New instance of float64x2 with absolute values of
   * t.
   */
  SIMD.float64x2.abs = function(t) {
    t = SIMD.float64x2.check(t);
    return SIMD.float64x2(Math.abs(t.x), Math.abs(t.y));
  }
}

if (typeof SIMD.float64x2.neg === "undefined") {
  /**
    * @param {float64x2} t An instance of float64x2.
    * @return {float64x2} New instance of float64x2 with negated values of
    * t.
    */
  SIMD.float64x2.neg = function(t) {
    t = SIMD.float64x2.check(t);
    return SIMD.float64x2(-t.x, -t.y);
  }
}

if (typeof SIMD.float64x2.add === "undefined") {
  /**
    * @param {float64x2} a An instance of float64x2.
    * @param {float64x2} b An instance of float64x2.
    * @return {float64x2} New instance of float64x2 with a + b.
    */
  SIMD.float64x2.add = function(a, b) {
    a = SIMD.float64x2.check(a);
    b = SIMD.float64x2.check(b);
    return SIMD.float64x2(a.x + b.x, a.y + b.y);
  }
}

if (typeof SIMD.float64x2.sub === "undefined") {
  /**
    * @param {float64x2} a An instance of float64x2.
    * @param {float64x2} b An instance of float64x2.
    * @return {float64x2} New instance of float64x2 with a - b.
    */
  SIMD.float64x2.sub = function(a, b) {
    a = SIMD.float64x2.check(a);
    b = SIMD.float64x2.check(b);
    return SIMD.float64x2(a.x - b.x, a.y - b.y);
  }
}

if (typeof SIMD.float64x2.mul === "undefined") {
  /**
    * @param {float64x2} a An instance of float64x2.
    * @param {float64x2} b An instance of float64x2.
    * @return {float64x2} New instance of float64x2 with a * b.
    */
  SIMD.float64x2.mul = function(a, b) {
    a = SIMD.float64x2.check(a);
    b = SIMD.float64x2.check(b);
    return SIMD.float64x2(a.x * b.x, a.y * b.y);
  }
}

if (typeof SIMD.float64x2.div === "undefined") {
  /**
    * @param {float64x2} a An instance of float64x2.
    * @param {float64x2} b An instance of float64x2.
    * @return {float64x2} New instance of float64x2 with a / b.
    */
  SIMD.float64x2.div = function(a, b) {
    a = SIMD.float64x2.check(a);
    b = SIMD.float64x2.check(b);
    return SIMD.float64x2(a.x / b.x, a.y / b.y);
  }
}

if (typeof SIMD.float64x2.clamp === "undefined") {
  /**
    * @param {float64x2} t An instance of float64x2.
    * @param {float64x2} lowerLimit An instance of float64x2.
    * @param {float64x2} upperLimit An instance of float64x2.
    * @return {float64x2} New instance of float64x2 with t's values clamped
    * between lowerLimit and upperLimit.
    */
  SIMD.float64x2.clamp = function(t, lowerLimit, upperLimit) {
    t = SIMD.float64x2.check(t);
    lowerLimit = SIMD.float64x2.check(lowerLimit);
    upperLimit = SIMD.float64x2.check(upperLimit);
    var cx = t.x < lowerLimit.x ? lowerLimit.x : t.x;
    var cy = t.y < lowerLimit.y ? lowerLimit.y : t.y;
    cx = cx > upperLimit.x ? upperLimit.x : cx;
    cy = cy > upperLimit.y ? upperLimit.y : cy;
    return SIMD.float64x2(cx, cy);
  }
}

if (typeof SIMD.float64x2.min === "undefined") {
  /**
    * @param {float64x2} t An instance of float64x2.
    * @param {float64x2} other An instance of float64x2.
    * @return {float64x2} New instance of float64x2 with the minimum value of
    * t and other.
    */
  SIMD.float64x2.min = function(t, other) {
    t = SIMD.float64x2.check(t);
    other = SIMD.float64x2.check(other);
    var cx = Math.min(t.x, other.x);
    var cy = Math.min(t.y, other.y);
    return SIMD.float64x2(cx, cy);
  }
}

if (typeof SIMD.float64x2.max === "undefined") {
  /**
    * @param {float64x2} t An instance of float64x2.
    * @param {float64x2} other An instance of float64x2.
    * @return {float64x2} New instance of float64x2 with the maximum value of
    * t and other.
    */
  SIMD.float64x2.max = function(t, other) {
    t = SIMD.float64x2.check(t);
    other = SIMD.float64x2.check(other);
    var cx = Math.max(t.x, other.x);
    var cy = Math.max(t.y, other.y);
    return SIMD.float64x2(cx, cy);
  }
}

if (typeof SIMD.float64x2.minNum === "undefined") {
  /**
    * @param {float64x2} t An instance of float64x2.
    * @param {float64x2} other An instance of float64x2.
    * @return {float64x2} New instance of float64x2 with the minimum value of
    * t and other, preferring numbers over NaNs.
    */
  SIMD.float64x2.minNum = function(t, other) {
    t = SIMD.float64x2.check(t);
    other = SIMD.float64x2.check(other);
    var cx = _SIMD_PRIVATE.minNum(t.x, other.x);
    var cy = _SIMD_PRIVATE.minNum(t.y, other.y);
    return SIMD.float64x2(cx, cy);
  }
}

if (typeof SIMD.float64x2.maxNum === "undefined") {
  /**
    * @param {float64x2} t An instance of float64x2.
    * @param {float64x2} other An instance of float64x2.
    * @return {float64x2} New instance of float64x2 with the maximum value of
    * t and other, preferring numbers over NaNs.
    */
  SIMD.float64x2.maxNum = function(t, other) {
    t = SIMD.float64x2.check(t);
    other = SIMD.float64x2.check(other);
    var cx = _SIMD_PRIVATE.maxNum(t.x, other.x);
    var cy = _SIMD_PRIVATE.maxNum(t.y, other.y);
    return SIMD.float64x2(cx, cy);
  }
}

if (typeof SIMD.float64x2.reciprocal === "undefined") {
  /**
    * @param {float64x2} t An instance of float64x2.
    * @return {float64x2} New instance of float64x2 with reciprocal value of
    * t.
    */
  SIMD.float64x2.reciprocal = function(t) {
    t = SIMD.float64x2.check(t);
    return SIMD.float64x2(1.0 / t.x, 1.0 / t.y);
  }
}

if (typeof SIMD.float64x2.reciprocalSqrt === "undefined") {
  /**
    * @param {float64x2} t An instance of float64x2.
    * @return {float64x2} New instance of float64x2 with square root of the
    * reciprocal value of t.
    */
  SIMD.float64x2.reciprocalSqrt = function(t) {
    t = SIMD.float64x2.check(t);
    return SIMD.float64x2(Math.sqrt(1.0 / t.x), Math.sqrt(1.0 / t.y));
  }
}

if (typeof SIMD.float64x2.sqrt === "undefined") {
  /**
    * @param {float64x2} t An instance of float64x2.
    * @return {float64x2} New instance of float64x2 with square root of
    * values of t.
    */
  SIMD.float64x2.sqrt = function(t) {
    t = SIMD.float64x2.check(t);
    return SIMD.float64x2(Math.sqrt(t.x), Math.sqrt(t.y));
  }
}

if (typeof SIMD.float64x2.swizzle === "undefined") {
  /**
    * @param {float64x2} t An instance of float64x2 to be swizzled.
    * @param {integer} x - Index in t for lane x
    * @param {integer} y - Index in t for lane y
    * @return {float64x2} New instance of float64x2 with lanes swizzled.
    */
  SIMD.float64x2.swizzle = function(t, x, y) {
    t = SIMD.float64x2.check(t);
    var storage = _SIMD_PRIVATE._f64x2;
    storage[0] = t.x;
    storage[1] = t.y;
    return SIMD.float64x2(storage[x], storage[y]);
  }
}

if (typeof SIMD.float64x2.shuffle === "undefined") {

  _SIMD_PRIVATE._f64x4 = new Float64Array(4);

  /**
    * @param {float64x2} t1 An instance of float64x2 to be shuffled.
    * @param {float64x2} t2 An instance of float64x2 to be shuffled.
    * @param {integer} x - Index in concatenation of t1 and t2 for lane x
    * @param {integer} y - Index in concatenation of t1 and t2 for lane y
    * @return {float64x2} New instance of float64x2 with lanes shuffled.
    */
  SIMD.float64x2.shuffle = function(t1, t2, x, y) {
    t1 = SIMD.float64x2.check(t1);
    t2 = SIMD.float64x2.check(t2);
    var storage = _SIMD_PRIVATE._f64x4;
    storage[0] = t1.x;
    storage[1] = t1.y;
    storage[2] = t2.x;
    storage[3] = t2.y;
    return SIMD.float64x2(storage[x], storage[y]);
  }
}

if (typeof SIMD.float64x2.withX === "undefined") {
  /**
    * @param {float64x2} t An instance of float64x2.
    * @param {double} value used for x lane.
    * @return {float64x2} New instance of float64x2 with the values in t and
    * x replaced with {x}.
    */
  SIMD.float64x2.withX = function(t, x) {
    t = SIMD.float64x2.check(t);
    return SIMD.float64x2(x, t.y);
  }
}

if (typeof SIMD.float64x2.withY === "undefined") {
  /**
    * @param {float64x2} t An instance of float64x2.
    * @param {double} value used for y lane.
    * @return {float64x2} New instance of float64x2 with the values in t and
    * y replaced with {y}.
    */
  SIMD.float64x2.withY = function(t, y) {
    t = SIMD.float64x2.check(t);
    return SIMD.float64x2(t.x, y);
  }
}

if (typeof SIMD.float64x2.lessThan === "undefined") {
  /**
    * @param {float64x2} t An instance of float64x2.
    * @param {float64x2} other An instance of float64x2.
    * @return {int32x4} true or false in each lane depending on
    * the result of t < other.
    */
  SIMD.float64x2.lessThan = function(t, other) {
    t = SIMD.float64x2.check(t);
    other = SIMD.float64x2.check(other);
    var cx = t.x < other.x;
    var cy = t.y < other.y;
    return SIMD.int32x4.bool(cx, cx, cy, cy);
  }
}

if (typeof SIMD.float64x2.lessThanOrEqual === "undefined") {
  /**
    * @param {float64x2} t An instance of float64x2.
    * @param {float64x2} other An instance of float64x2.
    * @return {int32x4} true or false in each lane depending on
    * the result of t <= other.
    */
  SIMD.float64x2.lessThanOrEqual = function(t, other) {
    t = SIMD.float64x2.check(t);
    other = SIMD.float64x2.check(other);
    var cx = t.x <= other.x;
    var cy = t.y <= other.y;
    return SIMD.int32x4.bool(cx, cx, cy, cy);
  }
}

if (typeof SIMD.float64x2.equal === "undefined") {
  /**
    * @param {float64x2} t An instance of float64x2.
    * @param {float64x2} other An instance of float64x2.
    * @return {int32x4} true or false in each lane depending on
    * the result of t == other.
    */
  SIMD.float64x2.equal = function(t, other) {
    t = SIMD.float64x2.check(t);
    other = SIMD.float64x2.check(other);
    var cx = t.x == other.x;
    var cy = t.y == other.y;
    return SIMD.int32x4.bool(cx, cx, cy, cy);
  }
}

if (typeof SIMD.float64x2.notEqual === "undefined") {
  /**
    * @param {float64x2} t An instance of float64x2.
    * @param {float64x2} other An instance of float64x2.
    * @return {int32x4} true or false in each lane depending on
    * the result of t != other.
    */
  SIMD.float64x2.notEqual = function(t, other) {
    t = SIMD.float64x2.check(t);
    other = SIMD.float64x2.check(other);
    var cx = t.x != other.x;
    var cy = t.y != other.y;
    return SIMD.int32x4.bool(cx, cx, cy, cy);
  }
}

if (typeof SIMD.float64x2.greaterThanOrEqual === "undefined") {
  /**
    * @param {float64x2} t An instance of float64x2.
    * @param {float64x2} other An instance of float64x2.
    * @return {int32x4} true or false in each lane depending on
    * the result of t >= other.
    */
  SIMD.float64x2.greaterThanOrEqual = function(t, other) {
    t = SIMD.float64x2.check(t);
    other = SIMD.float64x2.check(other);
    var cx = t.x >= other.x;
    var cy = t.y >= other.y;
    return SIMD.int32x4.bool(cx, cx, cy, cy);
  }
}

if (typeof SIMD.float64x2.greaterThan === "undefined") {
  /**
    * @param {float64x2} t An instance of float64x2.
    * @param {float64x2} other An instance of float64x2.
    * @return {int32x4} true or false in each lane depending on
    * the result of t > other.
    */
  SIMD.float64x2.greaterThan = function(t, other) {
    t = SIMD.float64x2.check(t);
    other = SIMD.float64x2.check(other);
    var cx = t.x > other.x;
    var cy = t.y > other.y;
    return SIMD.int32x4.bool(cx, cx, cy, cy);
  }
}

if (typeof SIMD.float64x2.select === "undefined") {
  /**
    * @param {int32x4} t Selector mask. An instance of int32x4
    * @param {float64x2} trueValue Pick lane from here if corresponding
    * selector lane is true
    * @param {float64x2} falseValue Pick lane from here if corresponding
    * selector lane is false
    * @return {float64x2} Mix of lanes from trueValue or falseValue as
    * indicated
    */
  SIMD.float64x2.select = function(t, trueValue, falseValue) {
    t = SIMD.int32x4.check(t);
    trueValue = SIMD.float64x2.check(trueValue);
    falseValue = SIMD.float64x2.check(falseValue);
    return SIMD.float64x2(_SIMD_PRIVATE.tobool(t.x) ? trueValue.x : falseValue.x,
                          _SIMD_PRIVATE.tobool(t.y) ? trueValue.y : falseValue.y);
  }
}

if (typeof SIMD.float64x2.bitselect === "undefined") {
  /**
    * @param {int32x4} t Selector mask. An instance of int32x4
    * @param {float64x2} trueValue Pick bit from here if corresponding
    * selector bit is 1
    * @param {float64x2} falseValue Pick bit from here if corresponding
    * selector bit is 0
    * @return {float64x2} Mix of bits from trueValue or falseValue as
    * indicated
    */
  SIMD.float64x2.bitselect = function(t, trueValue, falseValue) {
    t = SIMD.int32x4.check(t);
    trueValue = SIMD.float64x2.check(trueValue);
    falseValue = SIMD.float64x2.check(falseValue);
    var tv = SIMD.int32x4.fromFloat64x2Bits(trueValue);
    var fv = SIMD.int32x4.fromFloat64x2Bits(falseValue);
    var tr = SIMD.int32x4.and(t, tv);
    var fr = SIMD.int32x4.and(SIMD.int32x4.not(t), fv);
    return SIMD.float64x2.fromInt32x4Bits(SIMD.int32x4.or(tr, fr));
  }
}

if (typeof SIMD.float64x2.load === "undefined") {
  /**
    * @param {Typed array} tarray An instance of a typed array.
    * @param {Number} index An instance of Number.
    * @return {float64x2} New instance of float64x2.
    */
  SIMD.float64x2.load = function(tarray, index) {
    if (!_SIMD_PRIVATE.isTypedArray(tarray))
      throw new TypeError("The 1st argument must be a typed array.");
    if (!_SIMD_PRIVATE.isNumber(index))
      throw new TypeError("The 2nd argument must be a Number.");
    var bpe = tarray.BYTES_PER_ELEMENT;
    if (index < 0 || (index * bpe + 16) > tarray.byteLength)
      throw new RangeError("The value of index is invalid.");
    var f64temp = _SIMD_PRIVATE._f64x2;
    var array = bpe == 1 ? _SIMD_PRIVATE._i8x16 :
                bpe == 2 ? _SIMD_PRIVATE._i16x8 :
                bpe == 4 ? (tarray instanceof Float32Array ? _SIMD_PRIVATE._f32x4 : _SIMD_PRIVATE._i32x4) :
                f64temp;
    var n = 16 / bpe;
    for (var i = 0; i < n; ++i)
      array[i] = tarray[index + i];
    return SIMD.float64x2(f64temp[0], f64temp[1]);
  }
}

if (typeof SIMD.float64x2.loadX === "undefined") {
  /**
    * @param {Typed array} tarray An instance of a typed array.
    * @param {Number} index An instance of Number.
    * @return {float64x2} New instance of float64x2.
    */
  SIMD.float64x2.loadX = function(tarray, index) {
    if (!_SIMD_PRIVATE.isTypedArray(tarray))
      throw new TypeError("The 1st argument must be a typed array.");
    if (!_SIMD_PRIVATE.isNumber(index))
      throw new TypeError("The 2nd argument must be a Number.");
    var bpe = tarray.BYTES_PER_ELEMENT;
    if (index < 0 || (index * bpe + 8) > tarray.byteLength)
      throw new RangeError("The value of index is invalid.");
    var f64temp = _SIMD_PRIVATE._f64x2;
    var array = bpe == 1 ? _SIMD_PRIVATE._i8x16 :
                bpe == 2 ? _SIMD_PRIVATE._i16x8 :
                bpe == 4 ? (tarray instanceof Float32Array ? _SIMD_PRIVATE._f32x4 : _SIMD_PRIVATE._i32x4) :
                f64temp;
    var n = 8 / bpe;
    for (var i = 0; i < n; ++i)
      array[i] = tarray[index + i];
    return SIMD.float64x2(f64temp[0], 0.0);
  }
}

if (typeof SIMD.float64x2.store === "undefined") {
  /**
    * @param {Typed array} tarray An instance of a typed array.
    * @param {Number} index An instance of Number.
    * @param {float64x2} value An instance of float64x2.
    * @return {void}
    */
  SIMD.float64x2.store = function(tarray, index, value) {
    if (!_SIMD_PRIVATE.isTypedArray(tarray))
      throw new TypeError("The 1st argument must be a typed array.");
    if (!_SIMD_PRIVATE.isNumber(index))
      throw new TypeError("The 2nd argument must be a Number.");
    var bpe = tarray.BYTES_PER_ELEMENT;
    if (index < 0 || (index * bpe + 16) > tarray.byteLength)
      throw new RangeError("The value of index is invalid.");
    value = SIMD.float64x2.check(value);
    _SIMD_PRIVATE._f64x2[0] = value.x;
    _SIMD_PRIVATE._f64x2[1] = value.y;
    var array = bpe == 1 ? _SIMD_PRIVATE._i8x16 :
                bpe == 2 ? _SIMD_PRIVATE._i16x8 :
                bpe == 4 ? (tarray instanceof Float32Array ? _SIMD_PRIVATE._f32x4 : _SIMD_PRIVATE._i32x4) :
                _SIMD_PRIVATE._f64x2;
    var n = 16 / bpe;
    for (var i = 0; i < n; ++i)
      tarray[index + i] = array[i];
  }
}

if (typeof SIMD.float64x2.storeX === "undefined") {
  /**
    * @param {Typed array} tarray An instance of a typed array.
    * @param {Number} index An instance of Number.
    * @param {float64x2} value An instance of float64x2.
    * @return {void}
    */
  SIMD.float64x2.storeX = function(tarray, index, value) {
    if (!_SIMD_PRIVATE.isTypedArray(tarray))
      throw new TypeError("The 1st argument must be a typed array.");
    if (!_SIMD_PRIVATE.isNumber(index))
      throw new TypeError("The 2nd argument must be a Number.");
    var bpe = tarray.BYTES_PER_ELEMENT;
    if (index < 0 || (index * bpe + 8) > tarray.byteLength)
      throw new RangeError("The value of index is invalid.");
    value = SIMD.float64x2.check(value);
    _SIMD_PRIVATE._f64x2[0] = value.x;
    var array = bpe == 1 ? _SIMD_PRIVATE._i8x16 :
                bpe == 2 ? _SIMD_PRIVATE._i16x8 :
                bpe == 4 ? (tarray instanceof Float32Array ? _SIMD_PRIVATE._f32x4 : _SIMD_PRIVATE._i32x4) :
                _SIMD_PRIVATE._f64x2;
    var n = 8 / bpe;
    for (var i = 0; i < n; ++i)
      tarray[index + i] = array[i];
  }
}

if (typeof SIMD.int32x4.and === "undefined") {
  /**
    * @param {int32x4} a An instance of int32x4.
    * @param {int32x4} b An instance of int32x4.
    * @return {int32x4} New instance of int32x4 with values of a & b.
    */
  SIMD.int32x4.and = function(a, b) {
    a = SIMD.int32x4.check(a);
    b = SIMD.int32x4.check(b);
    return SIMD.int32x4(a.x & b.x, a.y & b.y, a.z & b.z, a.w & b.w);
  }
}

if (typeof SIMD.int32x4.or === "undefined") {
  /**
    * @param {int32x4} a An instance of int32x4.
    * @param {int32x4} b An instance of int32x4.
    * @return {int32x4} New instance of int32x4 with values of a | b.
    */
  SIMD.int32x4.or = function(a, b) {
    a = SIMD.int32x4.check(a);
    b = SIMD.int32x4.check(b);
    return SIMD.int32x4(a.x | b.x, a.y | b.y, a.z | b.z, a.w | b.w);
  }
}

if (typeof SIMD.int32x4.xor === "undefined") {
  /**
    * @param {int32x4} a An instance of int32x4.
    * @param {int32x4} b An instance of int32x4.
    * @return {int32x4} New instance of int32x4 with values of a ^ b.
    */
  SIMD.int32x4.xor = function(a, b) {
    a = SIMD.int32x4.check(a);
    b = SIMD.int32x4.check(b);
    return SIMD.int32x4(a.x ^ b.x, a.y ^ b.y, a.z ^ b.z, a.w ^ b.w);
  }
}

if (typeof SIMD.int32x4.not === "undefined") {
  /**
    * @param {int32x4} t An instance of int32x4.
    * @return {int32x4} New instance of int32x4 with values of ~t
    */
  SIMD.int32x4.not = function(t) {
    t = SIMD.int32x4.check(t);
    return SIMD.int32x4(~t.x, ~t.y, ~t.z, ~t.w);
  }
}

if (typeof SIMD.int32x4.neg === "undefined") {
  /**
    * @param {int32x4} t An instance of int32x4.
    * @return {int32x4} New instance of int32x4 with values of -t
    */
  SIMD.int32x4.neg = function(t) {
    t = SIMD.int32x4.check(t);
    return SIMD.int32x4(-t.x, -t.y, -t.z, -t.w);
  }
}

if (typeof SIMD.int32x4.add === "undefined") {
  /**
    * @param {int32x4} a An instance of int32x4.
    * @param {int32x4} b An instance of int32x4.
    * @return {int32x4} New instance of int32x4 with values of a + b.
    */
  SIMD.int32x4.add = function(a, b) {
    a = SIMD.int32x4.check(a);
    b = SIMD.int32x4.check(b);
    return SIMD.int32x4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w);
  }
}

if (typeof SIMD.int32x4.sub === "undefined") {
  /**
    * @param {int32x4} a An instance of int32x4.
    * @param {int32x4} b An instance of int32x4.
    * @return {int32x4} New instance of int32x4 with values of a - b.
    */
  SIMD.int32x4.sub = function(a, b) {
    a = SIMD.int32x4.check(a);
    b = SIMD.int32x4.check(b);
    return SIMD.int32x4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w);
  }
}

if (typeof SIMD.int32x4.mul === "undefined") {
  /**
    * @param {int32x4} a An instance of int32x4.
    * @param {int32x4} b An instance of int32x4.
    * @return {int32x4} New instance of int32x4 with values of a * b.
    */
  SIMD.int32x4.mul = function(a, b) {
    a = SIMD.int32x4.check(a);
    b = SIMD.int32x4.check(b);
    return SIMD.int32x4(Math.imul(a.x, b.x), Math.imul(a.y, b.y),
                        Math.imul(a.z, b.z), Math.imul(a.w, b.w));
  }
}

if (typeof SIMD.int32x4.swizzle === "undefined") {
  /**
    * @param {int32x4} t An instance of int32x4 to be swizzled.
    * @param {integer} x - Index in t for lane x
    * @param {integer} y - Index in t for lane y
    * @param {integer} z - Index in t for lane z
    * @param {integer} w - Index in t for lane w
    * @return {int32x4} New instance of int32x4 with lanes swizzled.
    */
  SIMD.int32x4.swizzle = function(t, x, y, z, w) {
    t = SIMD.int32x4.check(t);
    var storage = _SIMD_PRIVATE._i32x4;
    storage[0] = t.x;
    storage[1] = t.y;
    storage[2] = t.z;
    storage[3] = t.w;
    return SIMD.int32x4(storage[x], storage[y], storage[z], storage[w]);
  }
}

if (typeof SIMD.int32x4.shuffle === "undefined") {

  _SIMD_PRIVATE._i32x8 = new Int32Array(8);

  /**
    * @param {int32x4} t1 An instance of int32x4 to be shuffled.
    * @param {int32x4} t2 An instance of int32x4 to be shuffled.
    * @param {integer} x - Index in concatenation of t1 and t2 for lane x
    * @param {integer} y - Index in concatenation of t1 and t2 for lane y
    * @param {integer} z - Index in concatenation of t1 and t2 for lane z
    * @param {integer} w - Index in concatenation of t1 and t2 for lane w
    * @return {int32x4} New instance of int32x4 with lanes shuffled.
    */
  SIMD.int32x4.shuffle = function(t1, t2, x, y, z, w) {
    t1 = SIMD.int32x4.check(t1);
    t2 = SIMD.int32x4.check(t2);
    var storage = _SIMD_PRIVATE._i32x8;
    storage[0] = t1.x;
    storage[1] = t1.y;
    storage[2] = t1.z;
    storage[3] = t1.w;
    storage[4] = t2.x;
    storage[5] = t2.y;
    storage[6] = t2.z;
    storage[7] = t2.w;
    return SIMD.int32x4(storage[x], storage[y], storage[z], storage[w]);
  }
}

if (typeof SIMD.int32x4.select === "undefined") {
  /**
    * @param {int32x4} t Selector mask. An instance of int32x4
    * @param {int32x4} trueValue Pick lane from here if corresponding
    * selector lane is true
    * @param {int32x4} falseValue Pick lane from here if corresponding
    * selector lane is false
    * @return {int32x4} Mix of lanes from trueValue or falseValue as
    * indicated
    */
  SIMD.int32x4.select = function(t, trueValue, falseValue) {
    t = SIMD.int32x4.check(t);
    trueValue = SIMD.int32x4.check(trueValue);
    falseValue = SIMD.int32x4.check(falseValue);
    return SIMD.int32x4(_SIMD_PRIVATE.tobool(t.x) ? trueValue.x : falseValue.x,
                        _SIMD_PRIVATE.tobool(t.y) ? trueValue.y : falseValue.y,
                        _SIMD_PRIVATE.tobool(t.z) ? trueValue.z : falseValue.z,
                        _SIMD_PRIVATE.tobool(t.w) ? trueValue.w : falseValue.w);
  }
}

if (typeof SIMD.int32x4.bitselect === "undefined") {
  /**
    * @param {int32x4} t Selector mask. An instance of int32x4
    * @param {int32x4} trueValue Pick bit from here if corresponding
    * selector bit is 1
    * @param {int32x4} falseValue Pick bit from here if corresponding
    * selector bit is 0
    * @return {int32x4} Mix of bits from trueValue or falseValue as
    * indicated
    */
  SIMD.int32x4.bitselect = function(t, trueValue, falseValue) {
    t = SIMD.int32x4.check(t);
    trueValue = SIMD.int32x4.check(trueValue);
    falseValue = SIMD.int32x4.check(falseValue);
    var tr = SIMD.int32x4.and(t, trueValue);
    var fr = SIMD.int32x4.and(SIMD.int32x4.not(t), falseValue);
    return SIMD.int32x4.or(tr, fr);
  }
}

if (typeof SIMD.int32x4.withX === "undefined") {
  /**
    * @param {int32x4} t An instance of int32x4.
    * @param {integer} 32-bit value used for x lane.
    * @return {int32x4} New instance of int32x4 with the values in t and
    * x lane replaced with {x}.
    */
  SIMD.int32x4.withX = function(t, x) {
    t = SIMD.int32x4.check(t);
    return SIMD.int32x4(x, t.y, t.z, t.w);
  }
}

if (typeof SIMD.int32x4.withY === "undefined") {
  /**
    * @param {int32x4} t An instance of int32x4.
    * @param {integer} 32-bit value used for y lane.
    * @return {int32x4} New instance of int32x4 with the values in t and
    * y lane replaced with {y}.
    */
  SIMD.int32x4.withY = function(t, y) {
    t = SIMD.int32x4.check(t);
    return SIMD.int32x4(t.x, y, t.z, t.w);
  }
}

if (typeof SIMD.int32x4.withZ === "undefined") {
  /**
    * @param {int32x4} t An instance of int32x4.
    * @param {integer} 32-bit value used for z lane.
    * @return {int32x4} New instance of int32x4 with the values in t and
    * z lane replaced with {z}.
    */
  SIMD.int32x4.withZ = function(t, z) {
    t = SIMD.int32x4.check(t);
    return SIMD.int32x4(t.x, t.y, z, t.w);
  }
}

if (typeof SIMD.int32x4.withW === "undefined") {
  /**
    * @param {int32x4} t An instance of int32x4.
    * @param {integer} 32-bit value used for w lane.
    * @return {int32x4} New instance of int32x4 with the values in t and
    * w lane replaced with {w}.
    */
  SIMD.int32x4.withW = function(t, w) {
    t = SIMD.int32x4.check(t);
    return SIMD.int32x4(t.x, t.y, t.z, w);
  }
}

if (typeof SIMD.int32x4.equal === "undefined") {
  /**
    * @param {int32x4} t An instance of int32x4.
    * @param {int32x4} other An instance of int32x4.
    * @return {int32x4} true or false in each lane depending on
    * the result of t == other.
    */
  SIMD.int32x4.equal = function(t, other) {
    t = SIMD.int32x4.check(t);
    other = SIMD.int32x4.check(other);
    var cx = t.x == other.x;
    var cy = t.y == other.y;
    var cz = t.z == other.z;
    var cw = t.w == other.w;
    return SIMD.int32x4.bool(cx, cy, cz, cw);
  }
}

if (typeof SIMD.int32x4.notEqual === "undefined") {
  /**
    * @param {int32x4} t An instance of int32x4.
    * @param {int32x4} other An instance of int32x4.
    * @return {int32x4} true or false in each lane depending on
    * the result of t != other.
    */
  SIMD.int32x4.notEqual = function(t, other) {
    t = SIMD.int32x4.check(t);
    other = SIMD.int32x4.check(other);
    var cx = t.x != other.x;
    var cy = t.y != other.y;
    var cz = t.z != other.z;
    var cw = t.w != other.w;
    return SIMD.int32x4.bool(cx, cy, cz, cw);
  }
}

if (typeof SIMD.int32x4.greaterThan === "undefined") {
  /**
    * @param {int32x4} t An instance of int32x4.
    * @param {int32x4} other An instance of int32x4.
    * @return {int32x4} true or false in each lane depending on
    * the result of t > other.
    */
  SIMD.int32x4.greaterThan = function(t, other) {
    t = SIMD.int32x4.check(t);
    other = SIMD.int32x4.check(other);
    var cx = t.x > other.x;
    var cy = t.y > other.y;
    var cz = t.z > other.z;
    var cw = t.w > other.w;
    return SIMD.int32x4.bool(cx, cy, cz, cw);
  }
}

if (typeof SIMD.int32x4.greaterThanOrEqual === "undefined") {
  /**
    * @param {int32x4} t An instance of int32x4.
    * @param {int32x4} other An instance of int32x4.
    * @return {int32x4} true or false in each lane depending on
    * the result of t >= other.
    */
  SIMD.int32x4.greaterThanOrEqual = function(t, other) {
    t = SIMD.int32x4.check(t);
    other = SIMD.int32x4.check(other);
    var cx = t.x >= other.x;
    var cy = t.y >= other.y;
    var cz = t.z >= other.z;
    var cw = t.w >= other.w;
    return SIMD.int32x4.bool(cx, cy, cz, cw);
  }
}

if (typeof SIMD.int32x4.lessThan === "undefined") {
  /**
    * @param {int32x4} t An instance of int32x4.
    * @param {int32x4} other An instance of int32x4.
    * @return {int32x4} true or false in each lane depending on
    * the result of t < other.
    */
  SIMD.int32x4.lessThan = function(t, other) {
    t = SIMD.int32x4.check(t);
    other = SIMD.int32x4.check(other);
    var cx = t.x < other.x;
    var cy = t.y < other.y;
    var cz = t.z < other.z;
    var cw = t.w < other.w;
    return SIMD.int32x4.bool(cx, cy, cz, cw);
  }
}

if (typeof SIMD.int32x4.lessThanOrEqual === "undefined") {
  /**
    * @param {int32x4} t An instance of int32x4.
    * @param {int32x4} other An instance of int32x4.
    * @return {int32x4} true or false in each lane depending on
    * the result of t <= other.
    */
  SIMD.int32x4.lessThanOrEqual = function(t, other) {
    t = SIMD.int32x4.check(t);
    other = SIMD.int32x4.check(other);
    var cx = t.x <= other.x;
    var cy = t.y <= other.y;
    var cz = t.z <= other.z;
    var cw = t.w <= other.w;
    return SIMD.int32x4.bool(cx, cy, cz, cw);
  }
}

if (typeof SIMD.int32x4.shiftLeftByScalar === "undefined") {
  /**
    * @param {int32x4} a An instance of int32x4.
    * @param {integer} bits Bit count to shift by.
    * @return {int32x4} lanes in a shifted by bits.
    */
  SIMD.int32x4.shiftLeftByScalar = function(a, bits) {
    a = SIMD.int32x4.check(a);
    var x = a.x << bits;
    var y = a.y << bits;
    var z = a.z << bits;
    var w = a.w << bits;
    return SIMD.int32x4(x, y, z, w);
  }
}

if (typeof SIMD.int32x4.shiftRightLogicalByScalar === "undefined") {
  /**
    * @param {int32x4} a An instance of int32x4.
    * @param {integer} bits Bit count to shift by.
    * @return {int32x4} lanes in a shifted by bits.
    */
  SIMD.int32x4.shiftRightLogicalByScalar = function(a, bits) {
    a = SIMD.int32x4.check(a);
    var x = a.x >>> bits;
    var y = a.y >>> bits;
    var z = a.z >>> bits;
    var w = a.w >>> bits;
    return SIMD.int32x4(x, y, z, w);
  }
}

if (typeof SIMD.int32x4.shiftRightArithmeticByScalar === "undefined") {
  /**
    * @param {int32x4} a An instance of int32x4.
    * @param {integer} bits Bit count to shift by.
    * @return {int32x4} lanes in a shifted by bits.
    */
  SIMD.int32x4.shiftRightArithmeticByScalar = function(a, bits) {
    a = SIMD.int32x4.check(a);
    var x = a.x >> bits;
    var y = a.y >> bits;
    var z = a.z >> bits;
    var w = a.w >> bits;
    return SIMD.int32x4(x, y, z, w);
  }
}

if (typeof SIMD.int32x4.load === "undefined") {
  /**
    * @param {Typed array} tarray An instance of a typed array.
    * @param {Number} index An instance of Number.
    * @return {int32x4} New instance of int32x4.
    */
  SIMD.int32x4.load = function(tarray, index) {
    if (!_SIMD_PRIVATE.isTypedArray(tarray))
      throw new TypeError("The 1st argument must be a typed array.");
    if (!_SIMD_PRIVATE.isNumber(index))
      throw new TypeError("The 2nd argument must be a Number.");
    var bpe = tarray.BYTES_PER_ELEMENT;
    if (index < 0 || (index * bpe + 16) > tarray.byteLength)
      throw new RangeError("The value of index is invalid.");
    var i32temp = _SIMD_PRIVATE._i32x4;
    var array = bpe == 1 ? _SIMD_PRIVATE._i8x16 :
                bpe == 2 ? _SIMD_PRIVATE._i16x8 :
                bpe == 4 ? (tarray instanceof Float32Array ? _SIMD_PRIVATE._f32x4 : i32temp) :
                _SIMD_PRIVATE._f64x2;
    var n = 16 / bpe;
    for (var i = 0; i < n; ++i)
      array[i] = tarray[index + i];
    return SIMD.int32x4(i32temp[0], i32temp[1], i32temp[2], i32temp[3]);
  }
}

if (typeof SIMD.int32x4.loadX === "undefined") {
  /**
    * @param {Typed array} tarray An instance of a typed array.
    * @param {Number} index An instance of Number.
    * @return {int32x4} New instance of int32x4.
    */
  SIMD.int32x4.loadX = function(tarray, index) {
    if (!_SIMD_PRIVATE.isTypedArray(tarray))
      throw new TypeError("The 1st argument must be a typed array.");
    if (!_SIMD_PRIVATE.isNumber(index))
      throw new TypeError("The 2nd argument must be a Number.");
    var bpe = tarray.BYTES_PER_ELEMENT;
    if (index < 0 || (index * bpe + 4) > tarray.byteLength)
      throw new RangeError("The value of index is invalid.");
    var i32temp = _SIMD_PRIVATE._i32x4;
    var array = bpe == 1 ? _SIMD_PRIVATE._i8x16 :
                bpe == 2 ? _SIMD_PRIVATE._i16x8 :
                bpe == 4 ? (tarray instanceof Float32Array ? _SIMD_PRIVATE._f32x4 : i32temp) :
                _SIMD_PRIVATE._f64x2;
    var n = 4 / bpe;
    for (var i = 0; i < n; ++i)
      array[i] = tarray[index + i];
    return SIMD.int32x4(i32temp[0], 0, 0, 0);
  }
}

if (typeof SIMD.int32x4.loadXY === "undefined") {
  /**
    * @param {Typed array} tarray An instance of a typed array.
    * @param {Number} index An instance of Number.
    * @return {int32x4} New instance of int32x4.
    */
  SIMD.int32x4.loadXY = function(tarray, index) {
    if (!_SIMD_PRIVATE.isTypedArray(tarray))
      throw new TypeError("The 1st argument must be a typed array.");
    if (!_SIMD_PRIVATE.isNumber(index))
      throw new TypeError("The 2nd argument must be a Number.");
    var bpe = tarray.BYTES_PER_ELEMENT;
    if (index < 0 || (index * bpe + 8) > tarray.byteLength)
      throw new RangeError("The value of index is invalid.");
    var i32temp = _SIMD_PRIVATE._i32x4;
    var array = bpe == 1 ? _SIMD_PRIVATE._i8x16 :
                bpe == 2 ? _SIMD_PRIVATE._i16x8 :
                bpe == 4 ? (tarray instanceof Float32Array ? _SIMD_PRIVATE._f32x4 : i32temp) :
                _SIMD_PRIVATE._f64x2;
    var n = 8 / bpe;
    for (var i = 0; i < n; ++i)
      array[i] = tarray[index + i];
    return SIMD.int32x4(i32temp[0], i32temp[1], 0, 0);
  }
}

if (typeof SIMD.int32x4.loadXYZ === "undefined") {
  /**
    * @param {Typed array} tarray An instance of a typed array.
    * @param {Number} index An instance of Number.
    * @return {int32x4} New instance of int32x4.
    */
  SIMD.int32x4.loadXYZ = function(tarray, index) {
    if (!_SIMD_PRIVATE.isTypedArray(tarray))
      throw new TypeError("The 1st argument must be a typed array.");
    if (!_SIMD_PRIVATE.isNumber(index))
      throw new TypeError("The 2nd argument must be a Number.");
    var bpe = tarray.BYTES_PER_ELEMENT;
    if (index < 0 || (index * bpe + 12) > tarray.byteLength)
      throw new RangeError("The value of index is invalid.");
    var i32temp = _SIMD_PRIVATE._i32x4;
    var array = bpe == 1 ? _SIMD_PRIVATE._i8x16 :
                bpe == 2 ? _SIMD_PRIVATE._i16x8 :
                bpe == 4 ? (tarray instanceof Float32Array ? _SIMD_PRIVATE._f32x4 : i32temp) :
                _SIMD_PRIVATE._f64x2;
    var n = 12 / bpe;
    for (var i = 0; i < n; ++i)
      array[i] = tarray[index + i];
    return SIMD.int32x4(i32temp[0], i32temp[1], i32temp[2], 0);
  }
}

if (typeof SIMD.int32x4.store === "undefined") {
  /**
    * @param {Typed array} tarray An instance of a typed array.
    * @param {Number} index An instance of Number.
    * @param {int32x4} value An instance of int32x4.
    * @return {void}
    */
  SIMD.int32x4.store = function(tarray, index, value) {
    if (!_SIMD_PRIVATE.isTypedArray(tarray))
      throw new TypeError("The 1st argument must be a typed array.");
    if (!_SIMD_PRIVATE.isNumber(index))
      throw new TypeError("The 2nd argument must be a Number.");
    var bpe = tarray.BYTES_PER_ELEMENT;
    if (index < 0 || (index * bpe + 16) > tarray.byteLength)
      throw new RangeError("The value of index is invalid.");
    value = SIMD.int32x4.check(value);
    _SIMD_PRIVATE._i32x4[0] = value.x;
    _SIMD_PRIVATE._i32x4[1] = value.y;
    _SIMD_PRIVATE._i32x4[2] = value.z;
    _SIMD_PRIVATE._i32x4[3] = value.w;
    var array = bpe == 1 ? _SIMD_PRIVATE._i8x16 :
                bpe == 2 ? _SIMD_PRIVATE._i16x8 :
                bpe == 4 ? (tarray instanceof Float32Array ? _SIMD_PRIVATE._f32x4 : _SIMD_PRIVATE._i32x4) :
                _SIMD_PRIVATE._f64x2;
    var n = 16 / bpe;
    for (var i = 0; i < n; ++i)
      tarray[index + i] = array[i];
  }
}

if (typeof SIMD.int32x4.storeX === "undefined") {
  /**
    * @param {Typed array} tarray An instance of a typed array.
    * @param {Number} index An instance of Number.
    * @param {int32x4} value An instance of int32x4.
    * @return {void}
    */
  SIMD.int32x4.storeX = function(tarray, index, value) {
    if (!_SIMD_PRIVATE.isTypedArray(tarray))
      throw new TypeError("The 1st argument must be a typed array.");
    if (!_SIMD_PRIVATE.isNumber(index))
      throw new TypeError("The 2nd argument must be a Number.");
    var bpe = tarray.BYTES_PER_ELEMENT;
    if (index < 0 || (index * bpe + 4) > tarray.byteLength)
      throw new RangeError("The value of index is invalid.");
    value = SIMD.int32x4.check(value);
    if (bpe == 8) {
      // tarray's elements are too wide. Just create a new view; this is rare.
      var view = new Int32Array(tarray.buffer, tarray.byteOffset + index * 8, 1);
      view[0] = value.x;
    } else {
      _SIMD_PRIVATE._i32x4[0] = value.x;
      var array = bpe == 1 ? _SIMD_PRIVATE._i8x16 :
                  bpe == 2 ? _SIMD_PRIVATE._i16x8 :
                  (tarray instanceof Float32Array ? _SIMD_PRIVATE._f32x4 : _SIMD_PRIVATE._i32x4);
      var n = 4 / bpe;
      for (var i = 0; i < n; ++i)
        tarray[index + i] = array[i];
    }
  }
}

if (typeof SIMD.int32x4.storeXY === "undefined") {
  /**
    * @param {Typed array} tarray An instance of a typed array.
    * @param {Number} index An instance of Number.
    * @param {int32x4} value An instance of int32x4.
    * @return {void}
    */
  SIMD.int32x4.storeXY = function(tarray, index, value) {
    if (!_SIMD_PRIVATE.isTypedArray(tarray))
      throw new TypeError("The 1st argument must be a typed array.");
    if (!_SIMD_PRIVATE.isNumber(index))
      throw new TypeError("The 2nd argument must be a Number.");
    var bpe = tarray.BYTES_PER_ELEMENT;
    if (index < 0 || (index * bpe + 8) > tarray.byteLength)
      throw new RangeError("The value of index is invalid.");
    value = SIMD.int32x4.check(value);
    _SIMD_PRIVATE._i32x4[0] = value.x;
    _SIMD_PRIVATE._i32x4[1] = value.y;
    var array = bpe == 1 ? _SIMD_PRIVATE._i8x16 :
                bpe == 2 ? _SIMD_PRIVATE._i16x8 :
                bpe == 4 ? (tarray instanceof Float32Array ? _SIMD_PRIVATE._f32x4 : _SIMD_PRIVATE._i32x4) :
                _SIMD_PRIVATE._f64x2;
    var n = 8 / bpe;
    for (var i = 0; i < n; ++i)
      tarray[index + i] = array[i];
  }
}

if (typeof SIMD.int32x4.storeXYZ === "undefined") {
  /**
    * @param {Typed array} tarray An instance of a typed array.
    * @param {Number} index An instance of Number.
    * @param {int32x4} value An instance of int32x4.
    * @return {void}
    */
  SIMD.int32x4.storeXYZ = function(tarray, index, value) {
    if (!_SIMD_PRIVATE.isTypedArray(tarray))
      throw new TypeError("The 1st argument must be a typed array.");
    if (!_SIMD_PRIVATE.isNumber(index))
      throw new TypeError("The 2nd argument must be a Number.");
    var bpe = tarray.BYTES_PER_ELEMENT;
    if (index < 0 || (index * bpe + 12) > tarray.byteLength)
      throw new RangeError("The value of index is invalid.");
    value = SIMD.int32x4.check(value);
    if (bpe == 8) {
      // tarray's elements are too wide. Just create a new view; this is rare.
      var view = new Int32Array(tarray.buffer, tarray.byteOffset + index * 8, 3);
      view[0] = value.x;
      view[1] = value.y;
      view[2] = value.z;
    } else {
      _SIMD_PRIVATE._i32x4[0] = value.x;
      _SIMD_PRIVATE._i32x4[1] = value.y;
      _SIMD_PRIVATE._i32x4[2] = value.z;
      var array = bpe == 1 ? _SIMD_PRIVATE._i8x16 :
                  bpe == 2 ? _SIMD_PRIVATE._i16x8 :
                  (tarray instanceof Float32Array ? _SIMD_PRIVATE._f32x4 : _SIMD_PRIVATE._i32x4);
      var n = 12 / bpe;
      for (var i = 0; i < n; ++i)
        tarray[index + i] = array[i];
    }
  }
}

if (typeof SIMD.int16x8.and === "undefined") {
  /**
    * @param {int16x8} a An instance of int16x8.
    * @param {int16x8} b An instance of int16x8.
    * @return {int16x8} New instance of int16x8 with values of a & b.
    */
  SIMD.int16x8.and = function(a, b) {
    a = SIMD.int16x8.check(a);
    b = SIMD.int16x8.check(b);
    return SIMD.int16x8(a.s0 & b.s0, a.s1 & b.s1, a.s2 & b.s2, a.s3 & b.s3,
                        a.s4 & b.s4, a.s5 & b.s5, a.s6 & b.s6, a.s7 & b.s7);
  }
}

if (typeof SIMD.int16x8.or === "undefined") {
  /**
    * @param {int16x8} a An instance of int16x8.
    * @param {int16x8} b An instance of int16x8.
    * @return {int16x8} New instance of int16x8 with values of a | b.
    */
  SIMD.int16x8.or = function(a, b) {
    a = SIMD.int16x8.check(a);
    b = SIMD.int16x8.check(b);
    return SIMD.int16x8(a.s0 | b.s0, a.s1 | b.s1, a.s2 | b.s2, a.s3 | b.s3,
                        a.s4 | b.s4, a.s5 | b.s5, a.s6 | b.s6, a.s7 | b.s7);
  }
}

if (typeof SIMD.int16x8.xor === "undefined") {
  /**
    * @param {int16x8} a An instance of int16x8.
    * @param {int16x8} b An instance of int16x8.
    * @return {int16x8} New instance of int16x8 with values of a ^ b.
    */
  SIMD.int16x8.xor = function(a, b) {
    a = SIMD.int16x8.check(a);
    b = SIMD.int16x8.check(b);
    return SIMD.int16x8(a.s0 ^ b.s0, a.s1 ^ b.s1, a.s2 ^ b.s2, a.s3 ^ b.s3,
                        a.s4 ^ b.s4, a.s5 ^ b.s5, a.s6 ^ b.s6, a.s7 ^ b.s7);
  }
}

if (typeof SIMD.int16x8.not === "undefined") {
  /**
    * @param {int16x8} t An instance of int16x8.
    * @return {int16x8} New instance of int16x8 with values of ~t
    */
  SIMD.int16x8.not = function(t) {
    t = SIMD.int16x8.check(t);
    return SIMD.int16x8(~t.s0, ~t.s1, ~t.s2, ~t.s3,
                        ~t.s4, ~t.s5, ~t.s6, ~t.s7);
  }
}

if (typeof SIMD.int16x8.neg === "undefined") {
  /**
    * @param {int16x8} t An instance of int16x8.
    * @return {int16x8} New instance of int16x8 with values of -t
    */
  SIMD.int16x8.neg = function(t) {
    t = SIMD.int16x8.check(t);
    return SIMD.int16x8(-t.s0, -t.s1, -t.s2, -t.s3,
                        -t.s4, -t.s5, -t.s6, -t.s7);
  }
}

if (typeof SIMD.int16x8.add === "undefined") {
  /**
    * @param {int16x8} a An instance of int16x8.
    * @param {int16x8} b An instance of int16x8.
    * @return {int16x8} New instance of int16x8 with values of a + b.
    */
  SIMD.int16x8.add = function(a, b) {
    a = SIMD.int16x8.check(a);
    b = SIMD.int16x8.check(b);
    return SIMD.int16x8(a.s0 + b.s0, a.s1 + b.s1, a.s2 + b.s2, a.s3 + b.s3,
                        a.s4 + b.s4, a.s5 + b.s5, a.s6 + b.s6, a.s7 + b.s7);
  }
}

if (typeof SIMD.int16x8.sub === "undefined") {
  /**
    * @param {int16x8} a An instance of int16x8.
    * @param {int16x8} b An instance of int16x8.
    * @return {int16x8} New instance of int16x8 with values of a - b.
    */
  SIMD.int16x8.sub = function(a, b) {
    a = SIMD.int16x8.check(a);
    b = SIMD.int16x8.check(b);
    return SIMD.int16x8(a.s0 - b.s0, a.s1 - b.s1, a.s2 - b.s2, a.s3 - b.s3,
                        a.s4 - b.s4, a.s5 - b.s5, a.s6 - b.s6, a.s7 - b.s7);
  }
}

if (typeof SIMD.int16x8.mul === "undefined") {
  /**
    * @param {int16x8} a An instance of int16x8.
    * @param {int16x8} b An instance of int16x8.
    * @return {int16x8} New instance of int16x8 with values of a * b.
    */
  SIMD.int16x8.mul = function(a, b) {
    a = SIMD.int16x8.check(a);
    b = SIMD.int16x8.check(b);
    return SIMD.int16x8(Math.imul(a.s0, b.s0), Math.imul(a.s1, b.s1),
                        Math.imul(a.s2, b.s2), Math.imul(a.s3, b.s3),
                        Math.imul(a.s4, b.s4), Math.imul(a.s5, b.s5),
                        Math.imul(a.s6, b.s6), Math.imul(a.s7, b.s7));
  }
}

if (typeof SIMD.int16x8.select === "undefined") {
  /**
    * @param {int16x8} t Selector mask. An instance of int16x8
    * @param {int16x8} trueValue Pick lane from here if corresponding
    * selector lane is true
    * @param {int16x8} falseValue Pick lane from here if corresponding
    * selector lane is false
    * @return {int16x8} Mix of lanes from trueValue or falseValue as
    * indicated
    */
  SIMD.int16x8.select = function(t, trueValue, falseValue) {
    t = SIMD.int16x8.check(t);
    trueValue = SIMD.int16x8.check(trueValue);
    falseValue = SIMD.int16x8.check(falseValue);
    return SIMD.int16x8(_SIMD_PRIVATE.tobool(t.s0) ? trueValue.s0 : falseValue.s0,
                        _SIMD_PRIVATE.tobool(t.s1) ? trueValue.s1 : falseValue.s1,
                        _SIMD_PRIVATE.tobool(t.s2) ? trueValue.s2 : falseValue.s2,
                        _SIMD_PRIVATE.tobool(t.s3) ? trueValue.s3 : falseValue.s3,
                        _SIMD_PRIVATE.tobool(t.s4) ? trueValue.s4 : falseValue.s4,
                        _SIMD_PRIVATE.tobool(t.s5) ? trueValue.s5 : falseValue.s5,
                        _SIMD_PRIVATE.tobool(t.s6) ? trueValue.s6 : falseValue.s6,
                        _SIMD_PRIVATE.tobool(t.s7) ? trueValue.s7 : falseValue.s7);
  }
}

if (typeof SIMD.int16x8.bitselect === "undefined") {
  /**
    * @param {int16x8} t Selector mask. An instance of int16x8
    * @param {int16x8} trueValue Pick lane from here if corresponding
    * selector bit is 1
    * @param {int16x8} falseValue Pick lane from here if corresponding
    * selector bit is 0
    * @return {int16x8} Mix of lanes from trueValue or falseValue as
    * indicated
    */
  SIMD.int16x8.bitselect = function(t, trueValue, falseValue) {
    t = SIMD.int16x8.check(t);
    trueValue = SIMD.int16x8.check(trueValue);
    falseValue = SIMD.int16x8.check(falseValue);
    var tr = SIMD.int16x8.and(t, trueValue);
    var fr = SIMD.int16x8.and(SIMD.int16x8.not(t), falseValue);
    return SIMD.int16x8.or(tr, fr);
  }
}

if (typeof SIMD.int16x8.equal === "undefined") {
  /**
    * @param {int16x8} t An instance of int16x8.
    * @param {int16x8} other An instance of int16x8.
    * @return {int16x8} true or false in each lane depending on
    * the result of t == other.
    */
  SIMD.int16x8.equal = function(t, other) {
    t = SIMD.int16x8.check(t);
    other = SIMD.int16x8.check(other);
    var cs0 = t.s0 == other.s0;
    var cs1 = t.s1 == other.s1;
    var cs2 = t.s2 == other.s2;
    var cs3 = t.s3 == other.s3;
    var cs4 = t.s4 == other.s4;
    var cs5 = t.s5 == other.s5;
    var cs6 = t.s6 == other.s6;
    var cs7 = t.s7 == other.s7;
    return SIMD.int16x8.bool(cs0, cs1, cs2, cs3, cs4, cs5, cs6, cs7);
  }
}

if (typeof SIMD.int16x8.notEqual === "undefined") {
  /**
    * @param {int16x8} t An instance of int16x8.
    * @param {int16x8} other An instance of int16x8.
    * @return {int16x8} true or false in each lane depending on
    * the result of t != other.
    */
  SIMD.int16x8.notEqual = function(t, other) {
    t = SIMD.int16x8.check(t);
    other = SIMD.int16x8.check(other);
    var cs0 = t.s0 != other.s0;
    var cs1 = t.s1 != other.s1;
    var cs2 = t.s2 != other.s2;
    var cs3 = t.s3 != other.s3;
    var cs4 = t.s4 != other.s4;
    var cs5 = t.s5 != other.s5;
    var cs6 = t.s6 != other.s6;
    var cs7 = t.s7 != other.s7;
    return SIMD.int16x8.bool(cs0, cs1, cs2, cs3, cs4, cs5, cs6, cs7);
  }
}

if (typeof SIMD.int16x8.greaterThan === "undefined") {
  /**
    * @param {int16x8} t An instance of int16x8.
    * @param {int16x8} other An instance of int16x8.
    * @return {int16x8} true or false in each lane depending on
    * the result of t > other.
    */
  SIMD.int16x8.greaterThan = function(t, other) {
    t = SIMD.int16x8.check(t);
    other = SIMD.int16x8.check(other);
    var cs0 = t.s0 > other.s0;
    var cs1 = t.s1 > other.s1;
    var cs2 = t.s2 > other.s2;
    var cs3 = t.s3 > other.s3;
    var cs4 = t.s4 > other.s4;
    var cs5 = t.s5 > other.s5;
    var cs6 = t.s6 > other.s6;
    var cs7 = t.s7 > other.s7;
    return SIMD.int16x8.bool(cs0, cs1, cs2, cs3, cs4, cs5, cs6, cs7);
  }
}

if (typeof SIMD.int16x8.greaterThanOrEqual === "undefined") {
  /**
    * @param {int16x8} t An instance of int16x8.
    * @param {int16x8} other An instance of int16x8.
    * @return {int16x8} true or false in each lane depending on
    * the result of t >= other.
    */
  SIMD.int16x8.greaterThanOrEqual = function(t, other) {
    t = SIMD.int16x8.check(t);
    other = SIMD.int16x8.check(other);
    var cs0 = t.s0 >= other.s0;
    var cs1 = t.s1 >= other.s1;
    var cs2 = t.s2 >= other.s2;
    var cs3 = t.s3 >= other.s3;
    var cs4 = t.s4 >= other.s4;
    var cs5 = t.s5 >= other.s5;
    var cs6 = t.s6 >= other.s6;
    var cs7 = t.s7 >= other.s7;
    return SIMD.int16x8.bool(cs0, cs1, cs2, cs3, cs4, cs5, cs6, cs7);
  }
}

if (typeof SIMD.int16x8.lessThan === "undefined") {
  /**
    * @param {int16x8} t An instance of int16x8.
    * @param {int16x8} other An instance of int16x8.
    * @return {int16x8} true or false in each lane depending on
    * the result of t < other.
    */
  SIMD.int16x8.lessThan = function(t, other) {
    t = SIMD.int16x8.check(t);
    other = SIMD.int16x8.check(other);
    var cs0 = t.s0 < other.s0;
    var cs1 = t.s1 < other.s1;
    var cs2 = t.s2 < other.s2;
    var cs3 = t.s3 < other.s3;
    var cs4 = t.s4 < other.s4;
    var cs5 = t.s5 < other.s5;
    var cs6 = t.s6 < other.s6;
    var cs7 = t.s7 < other.s7;
    return SIMD.int16x8.bool(cs0, cs1, cs2, cs3, cs4, cs5, cs6, cs7);
  }
}

if (typeof SIMD.int16x8.lessThanOrEqual === "undefined") {
  /**
    * @param {int16x8} t An instance of int16x8.
    * @param {int16x8} other An instance of int16x8.
    * @return {int16x8} true or false in each lane depending on
    * the result of t <= other.
    */
  SIMD.int16x8.lessThanOrEqual = function(t, other) {
    t = SIMD.int16x8.check(t);
    other = SIMD.int16x8.check(other);
    var cs0 = t.s0 <= other.s0;
    var cs1 = t.s1 <= other.s1;
    var cs2 = t.s2 <= other.s2;
    var cs3 = t.s3 <= other.s3;
    var cs4 = t.s4 <= other.s4;
    var cs5 = t.s5 <= other.s5;
    var cs6 = t.s6 <= other.s6;
    var cs7 = t.s7 <= other.s7;
    return SIMD.int16x8.bool(cs0, cs1, cs2, cs3, cs4, cs5, cs6, cs7);
  }
}

if (typeof SIMD.int16x8.shiftLeftByScalar === "undefined") {
  /**
    * @param {int16x8} a An instance of int16x8.
    * @param {integer} bits Bit count to shift by.
    * @return {int16x8} lanes in a shifted by bits.
    */
  SIMD.int16x8.shiftLeftByScalar = function(a, bits) {
    a = SIMD.int16x8.check(a);
    var s0 = a.s0 << bits;
    var s1 = a.s1 << bits;
    var s2 = a.s2 << bits;
    var s3 = a.s3 << bits;
    var s4 = a.s4 << bits;
    var s5 = a.s5 << bits;
    var s6 = a.s6 << bits;
    var s7 = a.s7 << bits;
    return SIMD.int16x8(s0, s1, s2, s3, s4, s5, s6, s7);
  }
}

if (typeof SIMD.int16x8.shiftRightLogicalByScalar === "undefined") {
  /**
    * @param {int16x8} a An instance of int16x8.
    * @param {integer} bits Bit count to shift by.
    * @return {int16x8} lanes in a shifted by bits.
    */
  SIMD.int16x8.shiftRightLogicalByScalar = function(a, bits) {
    a = SIMD.int16x8.check(a);
    var s0 = (a.s0 & 0xffff) >>> bits;
    var s1 = (a.s1 & 0xffff) >>> bits;
    var s2 = (a.s2 & 0xffff) >>> bits;
    var s3 = (a.s3 & 0xffff) >>> bits;
    var s4 = (a.s4 & 0xffff) >>> bits;
    var s5 = (a.s5 & 0xffff) >>> bits;
    var s6 = (a.s6 & 0xffff) >>> bits;
    var s7 = (a.s7 & 0xffff) >>> bits;
    return SIMD.int16x8(s0, s1, s2, s3, s4, s5, s6, s7);
  }
}

if (typeof SIMD.int16x8.shiftRightArithmeticByScalar === "undefined") {
  /**
    * @param {int16x8} a An instance of int16x8.
    * @param {integer} bits Bit count to shift by.
    * @return {int16x8} lanes in a shifted by bits.
    */
  SIMD.int16x8.shiftRightArithmeticByScalar = function(a, bits) {
    a = SIMD.int16x8.check(a);
    var s0 = a.s0 >> bits;
    var s1 = a.s1 >> bits;
    var s2 = a.s2 >> bits;
    var s3 = a.s3 >> bits;
    var s4 = a.s4 >> bits;
    var s5 = a.s5 >> bits;
    var s6 = a.s6 >> bits;
    var s7 = a.s7 >> bits;
    return SIMD.int16x8(s0, s1, s2, s3, s4, s5, s6, s7);
  }
}

if (typeof SIMD.int16x8.load === "undefined") {
  /**
    * @param {Typed array} tarray An instance of a typed array.
    * @param {Number} index An instance of Number.
    * @return {int16x8} New instance of int16x8.
    */
  SIMD.int16x8.load = function(tarray, index) {
    if (!_SIMD_PRIVATE.isTypedArray(tarray))
      throw new TypeError("The 1st argument must be a typed array.");
    if (!_SIMD_PRIVATE.isNumber(index))
      throw new TypeError("The 2nd argument must be a Number.");
    var bpe = tarray.BYTES_PER_ELEMENT;
    if (index < 0 || (index * bpe + 16) > tarray.byteLength)
      throw new RangeError("The value of index is invalid.");
    var i16temp = _SIMD_PRIVATE._i16x8;
    var array = bpe == 1 ? _SIMD_PRIVATE._i8x16 :
                bpe == 2 ? i16temp :
                bpe == 4 ? (tarray instanceof Float32Array ? _SIMD_PRIVATE._f32x4 : _SIMD_PRIVATE._i32x4) :
                _SIMD_PRIVATE._f64x2;
    var n = 16 / bpe;
    for (var i = 0; i < n; ++i)
      array[i] = tarray[index + i];
    return SIMD.int16x8(i16temp[0], i16temp[1], i16temp[2], i16temp[3],
                        i16temp[4], i16temp[5], i16temp[6], i16temp[7]);
  }
}

if (typeof SIMD.int16x8.store === "undefined") {
  /**
    * @param {Typed array} tarray An instance of a typed array.
    * @param {Number} index An instance of Number.
    * @param {int16x8} value An instance of int16x8.
    * @return {void}
    */
  SIMD.int16x8.store = function(tarray, index, value) {
    if (!_SIMD_PRIVATE.isTypedArray(tarray))
      throw new TypeError("The 1st argument must be a typed array.");
    if (!_SIMD_PRIVATE.isNumber(index))
      throw new TypeError("The 2nd argument must be a Number.");
    var bpe = tarray.BYTES_PER_ELEMENT;
    if (index < 0 || (index * bpe + 16) > tarray.byteLength)
      throw new RangeError("The value of index is invalid.");
    value = SIMD.int16x8.check(value);
    _SIMD_PRIVATE._i16x8[0] = value.s0;
    _SIMD_PRIVATE._i16x8[1] = value.s1;
    _SIMD_PRIVATE._i16x8[2] = value.s2;
    _SIMD_PRIVATE._i16x8[3] = value.s3;
    _SIMD_PRIVATE._i16x8[4] = value.s4;
    _SIMD_PRIVATE._i16x8[5] = value.s5;
    _SIMD_PRIVATE._i16x8[6] = value.s6;
    _SIMD_PRIVATE._i16x8[7] = value.s7;
    var array = bpe == 1 ? _SIMD_PRIVATE._i8x16 :
                bpe == 2 ? _SIMD_PRIVATE._i16x8 :
                bpe == 4 ? (tarray instanceof Float32Array ? _SIMD_PRIVATE._f32x4 : _SIMD_PRIVATE._i32x4) :
                _SIMD_PRIVATE._f64x2;
    var n = 16 / bpe;
    for (var i = 0; i < n; ++i)
      tarray[index + i] = array[i];
  }
}

if (typeof SIMD.int8x16.and === "undefined") {
  /**
    * @param {int8x16} a An instance of int8x16.
    * @param {int8x16} b An instance of int8x16.
    * @return {int8x16} New instance of int8x16 with values of a & b.
    */
  SIMD.int8x16.and = function(a, b) {
    a = SIMD.int8x16.check(a);
    b = SIMD.int8x16.check(b);
    return SIMD.int8x16(a.s0 & b.s0, a.s1 & b.s1, a.s2 & b.s2, a.s3 & b.s3,
                        a.s4 & b.s4, a.s5 & b.s5, a.s6 & b.s6, a.s7 & b.s7,
                        a.s8 & b.s8, a.s9 & b.s9, a.s10 & b.s10, a.s11 & b.s11,
                        a.s12 & b.s12, a.s13 & b.s13, a.s14 & b.s14, a.s15 & b.s15);
  }
}

if (typeof SIMD.int8x16.or === "undefined") {
  /**
    * @param {int8x16} a An instance of int8x16.
    * @param {int8x16} b An instance of int8x16.
    * @return {int8x16} New instance of int8x16 with values of a | b.
    */
  SIMD.int8x16.or = function(a, b) {
    a = SIMD.int8x16.check(a);
    b = SIMD.int8x16.check(b);
    return SIMD.int8x16(a.s0 | b.s0, a.s1 | b.s1, a.s2 | b.s2, a.s3 | b.s3,
                        a.s4 | b.s4, a.s5 | b.s5, a.s6 | b.s6, a.s7 | b.s7,
                        a.s8 | b.s8, a.s9 | b.s9, a.s10 | b.s10, a.s11 | b.s11,
                        a.s12 | b.s12, a.s13 | b.s13, a.s14 | b.s14, a.s15 | b.s15);
  }
}

if (typeof SIMD.int8x16.xor === "undefined") {
  /**
    * @param {int8x16} a An instance of int8x16.
    * @param {int8x16} b An instance of int8x16.
    * @return {int8x16} New instance of int8x16 with values of a ^ b.
    */
  SIMD.int8x16.xor = function(a, b) {
    a = SIMD.int8x16.check(a);
    b = SIMD.int8x16.check(b);
    return SIMD.int8x16(a.s0 ^ b.s0, a.s1 ^ b.s1, a.s2 ^ b.s2, a.s3 ^ b.s3,
                        a.s4 ^ b.s4, a.s5 ^ b.s5, a.s6 ^ b.s6, a.s7 ^ b.s7,
                        a.s8 ^ b.s8, a.s9 ^ b.s9, a.s10 ^ b.s10, a.s11 ^ b.s11,
                        a.s12 ^ b.s12, a.s13 ^ b.s13, a.s14 ^ b.s14, a.s15 ^ b.s15);
  }
}

if (typeof SIMD.int8x16.not === "undefined") {
  /**
    * @param {int8x16} t An instance of int8x16.
    * @return {int8x16} New instance of int8x16 with values of ~t
    */
  SIMD.int8x16.not = function(t) {
    t = SIMD.int8x16.check(t);
    return SIMD.int8x16(~t.s0, ~t.s1, ~t.s2, ~t.s3,
                        ~t.s4, ~t.s5, ~t.s6, ~t.s7,
                        ~t.s8, ~t.s9, ~t.s10, ~t.s11,
                        ~t.s12, ~t.s13, ~t.s14, ~t.s15);
  }
}

if (typeof SIMD.int8x16.neg === "undefined") {
  /**
    * @param {int8x16} t An instance of int8x16.
    * @return {int8x16} New instance of int8x16 with values of -t
    */
  SIMD.int8x16.neg = function(t) {
    t = SIMD.int8x16.check(t);
    return SIMD.int8x16(-t.s0, -t.s1, -t.s2, -t.s3,
                        -t.s4, -t.s5, -t.s6, -t.s7,
                        -t.s8, -t.s9, -t.s10, -t.s11,
                        -t.s12, -t.s13, -t.s14, -t.s15);
  }
}

if (typeof SIMD.int8x16.add === "undefined") {
  /**
    * @param {int8x16} a An instance of int8x16.
    * @param {int8x16} b An instance of int8x16.
    * @return {int8x16} New instance of int8x16 with values of a + b.
    */
  SIMD.int8x16.add = function(a, b) {
    a = SIMD.int8x16.check(a);
    b = SIMD.int8x16.check(b);
    return SIMD.int8x16(a.s0 + b.s0, a.s1 + b.s1, a.s2 + b.s2, a.s3 + b.s3,
                        a.s4 + b.s4, a.s5 + b.s5, a.s6 + b.s6, a.s7 + b.s7,
                        a.s8 + b.s8, a.s9 + b.s9, a.s10 + b.s10, a.s11 + b.s11,
                        a.s12 + b.s12, a.s13 + b.s13, a.s14 + b.s14, a.s15 + b.s15);
  }
}

if (typeof SIMD.int8x16.sub === "undefined") {
  /**
    * @param {int8x16} a An instance of int8x16.
    * @param {int8x16} b An instance of int8x16.
    * @return {int8x16} New instance of int8x16 with values of a - b.
    */
  SIMD.int8x16.sub = function(a, b) {
    a = SIMD.int8x16.check(a);
    b = SIMD.int8x16.check(b);
    return SIMD.int8x16(a.s0 - b.s0, a.s1 - b.s1, a.s2 - b.s2, a.s3 - b.s3,
                        a.s4 - b.s4, a.s5 - b.s5, a.s6 - b.s6, a.s7 - b.s7,
                        a.s8 - b.s8, a.s9 - b.s9, a.s10 - b.s10, a.s11 - b.s11,
                        a.s12 - b.s12, a.s13 - b.s13, a.s14 - b.s14, a.s15 - b.s15);
  }
}

if (typeof SIMD.int8x16.mul === "undefined") {
  /**
    * @param {int8x16} a An instance of int8x16.
    * @param {int8x16} b An instance of int8x16.
    * @return {int8x16} New instance of int8x16 with values of a * b.
    */
  SIMD.int8x16.mul = function(a, b) {
    a = SIMD.int8x16.check(a);
    b = SIMD.int8x16.check(b);
    return SIMD.int8x16(Math.imul(a.s0, b.s0), Math.imul(a.s1, b.s1),
                        Math.imul(a.s2, b.s2), Math.imul(a.s3, b.s3),
                        Math.imul(a.s4, b.s4), Math.imul(a.s5, b.s5),
                        Math.imul(a.s6, b.s6), Math.imul(a.s7, b.s7),
                        Math.imul(a.s8, b.s8), Math.imul(a.s9, b.s9),
                        Math.imul(a.s10, b.s10), Math.imul(a.s11, b.s11),
                        Math.imul(a.s12, b.s12), Math.imul(a.s13, b.s13),
                        Math.imul(a.s14, b.s14), Math.imul(a.s15, b.s15));
  }
}

if (typeof SIMD.int8x16.select === "undefined") {
  /**
    * @param {int8x16} t Selector mask. An instance of int8x16
    * @param {int8x16} trueValue Pick lane from here if corresponding
    * selector lane is true
    * @param {int8x16} falseValue Pick lane from here if corresponding
    * selector lane is false
    * @return {int8x16} Mix of lanes from trueValue or falseValue as
    * indicated
    */
  SIMD.int8x16.select = function(t, trueValue, falseValue) {
    t = SIMD.int8x16.check(t);
    trueValue = SIMD.int8x16.check(trueValue);
    falseValue = SIMD.int8x16.check(falseValue);
    return SIMD.int8x16(_SIMD_PRIVATE.tobool(t.s0) ? trueValue.s0 : falseValue.s0,
                        _SIMD_PRIVATE.tobool(t.s1) ? trueValue.s1 : falseValue.s1,
                        _SIMD_PRIVATE.tobool(t.s2) ? trueValue.s2 : falseValue.s2,
                        _SIMD_PRIVATE.tobool(t.s3) ? trueValue.s3 : falseValue.s3,
                        _SIMD_PRIVATE.tobool(t.s4) ? trueValue.s4 : falseValue.s4,
                        _SIMD_PRIVATE.tobool(t.s5) ? trueValue.s5 : falseValue.s5,
                        _SIMD_PRIVATE.tobool(t.s6) ? trueValue.s6 : falseValue.s6,
                        _SIMD_PRIVATE.tobool(t.s7) ? trueValue.s7 : falseValue.s7,
                        _SIMD_PRIVATE.tobool(t.s8) ? trueValue.s8 : falseValue.s8,
                        _SIMD_PRIVATE.tobool(t.s9) ? trueValue.s9 : falseValue.s9,
                        _SIMD_PRIVATE.tobool(t.s10) ? trueValue.s10 : falseValue.s10,
                        _SIMD_PRIVATE.tobool(t.s11) ? trueValue.s11 : falseValue.s11,
                        _SIMD_PRIVATE.tobool(t.s12) ? trueValue.s12 : falseValue.s12,
                        _SIMD_PRIVATE.tobool(t.s13) ? trueValue.s13 : falseValue.s13,
                        _SIMD_PRIVATE.tobool(t.s14) ? trueValue.s14 : falseValue.s14,
                        _SIMD_PRIVATE.tobool(t.s15) ? trueValue.s15 : falseValue.s15);
  }
}

if (typeof SIMD.int8x16.bitselect === "undefined") {
  /**
    * @param {int8x16} t Selector mask. An instance of int8x16
    * @param {int8x16} trueValue Pick lane from here if corresponding
    * selector bit is 1
    * @param {int8x16} falseValue Pick lane from here if corresponding
    * selector bit is 0
    * @return {int8x16} Mix of lanes from trueValue or falseValue as
    * indicated
    */
  SIMD.int8x16.bitselect = function(t, trueValue, falseValue) {
    t = SIMD.int8x16.check(t);
    trueValue = SIMD.int8x16.check(trueValue);
    falseValue = SIMD.int8x16.check(falseValue);
    var tr = SIMD.int8x16.and(t, trueValue);
    var fr = SIMD.int8x16.and(SIMD.int8x16.not(t), falseValue);
    return SIMD.int8x16.or(tr, fr);
  }
}

if (typeof SIMD.int8x16.equal === "undefined") {
  /**
    * @param {int8x16} t An instance of int8x16.
    * @param {int8x16} other An instance of int8x16.
    * @return {int8x16} true or false in each lane depending on
    * the result of t == other.
    */
  SIMD.int8x16.equal = function(t, other) {
    t = SIMD.int8x16.check(t);
    other = SIMD.int8x16.check(other);
    var cs0 = t.s0 == other.s0;
    var cs1 = t.s1 == other.s1;
    var cs2 = t.s2 == other.s2;
    var cs3 = t.s3 == other.s3;
    var cs4 = t.s4 == other.s4;
    var cs5 = t.s5 == other.s5;
    var cs6 = t.s6 == other.s6;
    var cs7 = t.s7 == other.s7;
    var cs8 = t.s8 == other.s8;
    var cs9 = t.s9 == other.s9;
    var cs10 = t.s10 == other.s10;
    var cs11 = t.s11 == other.s11;
    var cs12 = t.s12 == other.s12;
    var cs13 = t.s13 == other.s13;
    var cs14 = t.s14 == other.s14;
    var cs15 = t.s15 == other.s15;
    return SIMD.int8x16.bool(cs0, cs1, cs2, cs3, cs4, cs5, cs6, cs7,
                             cs8, cs9, cs10, cs11, cs12, cs13, cs14, cs15);
  }
}

if (typeof SIMD.int8x16.notEqual === "undefined") {
  /**
    * @param {int8x16} t An instance of int8x16.
    * @param {int8x16} other An instance of int8x16.
    * @return {int8x16} true or false in each lane depending on
    * the result of t != other.
    */
  SIMD.int8x16.notEqual = function(t, other) {
    t = SIMD.int8x16.check(t);
    other = SIMD.int8x16.check(other);
    var cs0 = t.s0 != other.s0;
    var cs1 = t.s1 != other.s1;
    var cs2 = t.s2 != other.s2;
    var cs3 = t.s3 != other.s3;
    var cs4 = t.s4 != other.s4;
    var cs5 = t.s5 != other.s5;
    var cs6 = t.s6 != other.s6;
    var cs7 = t.s7 != other.s7;
    var cs8 = t.s8 != other.s8;
    var cs9 = t.s9 != other.s9;
    var cs10 = t.s10 != other.s10;
    var cs11 = t.s11 != other.s11;
    var cs12 = t.s12 != other.s12;
    var cs13 = t.s13 != other.s13;
    var cs14 = t.s14 != other.s14;
    var cs15 = t.s15 != other.s15;
    return SIMD.int8x16.bool(cs0, cs1, cs2, cs3, cs4, cs5, cs6, cs7,
                             cs8, cs9, cs10, cs11, cs12, cs13, cs14, cs15);
  }
}

if (typeof SIMD.int8x16.greaterThan === "undefined") {
  /**
    * @param {int8x16} t An instance of int8x16.
    * @param {int8x16} other An instance of int8x16.
    * @return {int8x16} true or false in each lane depending on
    * the result of t > other.
    */
  SIMD.int8x16.greaterThan = function(t, other) {
    t = SIMD.int8x16.check(t);
    other = SIMD.int8x16.check(other);
    var cs0 = t.s0 > other.s0;
    var cs1 = t.s1 > other.s1;
    var cs2 = t.s2 > other.s2;
    var cs3 = t.s3 > other.s3;
    var cs4 = t.s4 > other.s4;
    var cs5 = t.s5 > other.s5;
    var cs6 = t.s6 > other.s6;
    var cs7 = t.s7 > other.s7;
    var cs8 = t.s8 > other.s8;
    var cs9 = t.s9 > other.s9;
    var cs10 = t.s10 > other.s10;
    var cs11 = t.s11 > other.s11;
    var cs12 = t.s12 > other.s12;
    var cs13 = t.s13 > other.s13;
    var cs14 = t.s14 > other.s14;
    var cs15 = t.s15 > other.s15;
    return SIMD.int8x16.bool(cs0, cs1, cs2, cs3, cs4, cs5, cs6, cs7,
                             cs8, cs9, cs10, cs11, cs12, cs13, cs14, cs15);
  }
}

if (typeof SIMD.int8x16.greaterThanOrEqual === "undefined") {
  /**
    * @param {int8x16} t An instance of int8x16.
    * @param {int8x16} other An instance of int8x16.
    * @return {int8x16} true or false in each lane depending on
    * the result of t >= other.
    */
  SIMD.int8x16.greaterThanOrEqual = function(t, other) {
    t = SIMD.int8x16.check(t);
    other = SIMD.int8x16.check(other);
    var cs0 = t.s0 >= other.s0;
    var cs1 = t.s1 >= other.s1;
    var cs2 = t.s2 >= other.s2;
    var cs3 = t.s3 >= other.s3;
    var cs4 = t.s4 >= other.s4;
    var cs5 = t.s5 >= other.s5;
    var cs6 = t.s6 >= other.s6;
    var cs7 = t.s7 >= other.s7;
    var cs8 = t.s8 >= other.s8;
    var cs9 = t.s9 >= other.s9;
    var cs10 = t.s10 >= other.s10;
    var cs11 = t.s11 >= other.s11;
    var cs12 = t.s12 >= other.s12;
    var cs13 = t.s13 >= other.s13;
    var cs14 = t.s14 >= other.s14;
    var cs15 = t.s15 >= other.s15;
    return SIMD.int8x16.bool(cs0, cs1, cs2, cs3, cs4, cs5, cs6, cs7,
                             cs8, cs9, cs10, cs11, cs12, cs13, cs14, cs15);
  }
}

if (typeof SIMD.int8x16.lessThan === "undefined") {
  /**
    * @param {int8x16} t An instance of int8x16.
    * @param {int8x16} other An instance of int8x16.
    * @return {int8x16} true or false in each lane depending on
    * the result of t < other.
    */
  SIMD.int8x16.lessThan = function(t, other) {
    t = SIMD.int8x16.check(t);
    other = SIMD.int8x16.check(other);
    var cs0 = t.s0 < other.s0;
    var cs1 = t.s1 < other.s1;
    var cs2 = t.s2 < other.s2;
    var cs3 = t.s3 < other.s3;
    var cs4 = t.s4 < other.s4;
    var cs5 = t.s5 < other.s5;
    var cs6 = t.s6 < other.s6;
    var cs7 = t.s7 < other.s7;
    var cs8 = t.s8 < other.s8;
    var cs9 = t.s9 < other.s9;
    var cs10 = t.s10 < other.s10;
    var cs11 = t.s11 < other.s11;
    var cs12 = t.s12 < other.s12;
    var cs13 = t.s13 < other.s13;
    var cs14 = t.s14 < other.s14;
    var cs15 = t.s15 < other.s15;
    return SIMD.int8x16.bool(cs0, cs1, cs2, cs3, cs4, cs5, cs6, cs7,
                             cs8, cs9, cs10, cs11, cs12, cs13, cs14, cs15);
  }
}

if (typeof SIMD.int8x16.lessThanOrEqual === "undefined") {
  /**
    * @param {int8x16} t An instance of int8x16.
    * @param {int8x16} other An instance of int8x16.
    * @return {int8x16} true or false in each lane depending on
    * the result of t <= other.
    */
  SIMD.int8x16.lessThanOrEqual = function(t, other) {
    t = SIMD.int8x16.check(t);
    other = SIMD.int8x16.check(other);
    var cs0 = t.s0 <= other.s0;
    var cs1 = t.s1 <= other.s1;
    var cs2 = t.s2 <= other.s2;
    var cs3 = t.s3 <= other.s3;
    var cs4 = t.s4 <= other.s4;
    var cs5 = t.s5 <= other.s5;
    var cs6 = t.s6 <= other.s6;
    var cs7 = t.s7 <= other.s7;
    var cs8 = t.s8 <= other.s8;
    var cs9 = t.s9 <= other.s9;
    var cs10 = t.s10 <= other.s10;
    var cs11 = t.s11 <= other.s11;
    var cs12 = t.s12 <= other.s12;
    var cs13 = t.s13 <= other.s13;
    var cs14 = t.s14 <= other.s14;
    var cs15 = t.s15 <= other.s15;
    return SIMD.int8x16.bool(cs0, cs1, cs2, cs3, cs4, cs5, cs6, cs7,
                             cs8, cs9, cs10, cs11, cs12, cs13, cs14, cs15);
  }
}

if (typeof SIMD.int8x16.shiftLeftByScalar === "undefined") {
  /**
    * @param {int8x16} a An instance of int8x16.
    * @param {integer} bits Bit count to shift by.
    * @return {int8x16} lanes in a shifted by bits.
    */
  SIMD.int8x16.shiftLeftByScalar = function(a, bits) {
    a = SIMD.int8x16.check(a);
    var s0 = a.s0 << bits;
    var s1 = a.s1 << bits;
    var s2 = a.s2 << bits;
    var s3 = a.s3 << bits;
    var s4 = a.s4 << bits;
    var s5 = a.s5 << bits;
    var s6 = a.s6 << bits;
    var s7 = a.s7 << bits;
    var s8 = a.s8 << bits;
    var s9 = a.s9 << bits;
    var s10 = a.s10 << bits;
    var s11 = a.s11 << bits;
    var s12 = a.s12 << bits;
    var s13 = a.s13 << bits;
    var s14 = a.s14 << bits;
    var s15 = a.s15 << bits;
    return SIMD.int8x16(s0, s1, s2, s3, s4, s5, s6, s7,
                        s8, s9, s10, s11, s12, s13, s14, s15);
  }
}

if (typeof SIMD.int8x16.shiftRightLogicalByScalar === "undefined") {
  /**
    * @param {int8x16} a An instance of int8x16.
    * @param {integer} bits Bit count to shift by.
    * @return {int8x16} lanes in a shifted by bits.
    */
  SIMD.int8x16.shiftRightLogicalByScalar = function(a, bits) {
    a = SIMD.int8x16.check(a);
    var s0 = (a.s0 & 0xff) >>> bits;
    var s1 = (a.s1 & 0xff) >>> bits;
    var s2 = (a.s2 & 0xff) >>> bits;
    var s3 = (a.s3 & 0xff) >>> bits;
    var s4 = (a.s4 & 0xff) >>> bits;
    var s5 = (a.s5 & 0xff) >>> bits;
    var s6 = (a.s6 & 0xff) >>> bits;
    var s7 = (a.s7 & 0xff) >>> bits;
    var s8 = (a.s8 & 0xff) >>> bits;
    var s9 = (a.s9 & 0xff) >>> bits;
    var s10 = (a.s10 & 0xff) >>> bits;
    var s11 = (a.s11 & 0xff) >>> bits;
    var s12 = (a.s12 & 0xff) >>> bits;
    var s13 = (a.s13 & 0xff) >>> bits;
    var s14 = (a.s14 & 0xff) >>> bits;
    var s15 = (a.s15 & 0xff) >>> bits;
    return SIMD.int8x16(s0, s1, s2, s3, s4, s5, s6, s7,
                        s8, s9, s10, s11, s12, s13, s14, s15);
  }
}

if (typeof SIMD.int8x16.shiftRightArithmeticByScalar === "undefined") {
  /**
    * @param {int8x16} a An instance of int8x16.
    * @param {integer} bits Bit count to shift by.
    * @return {int8x16} lanes in a shifted by bits.
    */
  SIMD.int8x16.shiftRightArithmeticByScalar = function(a, bits) {
    a = SIMD.int8x16.check(a);
    var s0 = a.s0 >> bits;
    var s1 = a.s1 >> bits;
    var s2 = a.s2 >> bits;
    var s3 = a.s3 >> bits;
    var s4 = a.s4 >> bits;
    var s5 = a.s5 >> bits;
    var s6 = a.s6 >> bits;
    var s7 = a.s7 >> bits;
    var s8 = a.s8 >> bits;
    var s9 = a.s9 >> bits;
    var s10 = a.s10 >> bits;
    var s11 = a.s11 >> bits;
    var s12 = a.s12 >> bits;
    var s13 = a.s13 >> bits;
    var s14 = a.s14 >> bits;
    var s15 = a.s15 >> bits;
    return SIMD.int8x16(s0, s1, s2, s3, s4, s5, s6, s7,
                        s8, s9, s10, s11, s12, s13, s14, s15);
  }
}

if (typeof SIMD.int8x16.load === "undefined") {
  /**
    * @param {Typed array} tarray An instance of a typed array.
    * @param {Number} index An instance of Number.
    * @return {int8x16} New instance of int8x16.
    */
  SIMD.int8x16.load = function(tarray, index) {
    if (!_SIMD_PRIVATE.isTypedArray(tarray))
      throw new TypeError("The 1st argument must be a typed array.");
    if (!_SIMD_PRIVATE.isNumber(index))
      throw new TypeError("The 2nd argument must be a Number.");
    var bpe = tarray.BYTES_PER_ELEMENT;
    if (index < 0 || (index * bpe + 16) > tarray.byteLength)
      throw new RangeError("The value of index is invalid.");
    var i8temp = _SIMD_PRIVATE._i8x16;
    var array = bpe == 1 ? i8temp :
                bpe == 2 ? _SIMD_PRIVATE._i16x8 :
                bpe == 4 ? (tarray instanceof Float32Array ? _SIMD_PRIVATE._f32x4 : _SIMD_PRIVATE._i32x4) :
                _SIMD_PRIVATE._f64x2;
    var n = 16 / bpe;
    for (var i = 0; i < n; ++i)
      array[i] = tarray[index + i];
    return SIMD.int8x16(i8temp[0], i8temp[1], i8temp[2], i8temp[3],
                        i8temp[4], i8temp[5], i8temp[6], i8temp[7],
                        i8temp[8], i8temp[9], i8temp[10], i8temp[11],
                        i8temp[12], i8temp[13], i8temp[14], i8temp[15]);
  }
}

if (typeof SIMD.int8x16.store === "undefined") {
  /**
    * @param {Typed array} tarray An instance of a typed array.
    * @param {Number} index An instance of Number.
    * @param {int8x16} value An instance of int8x16.
    * @return {void}
    */
  SIMD.int8x16.store = function(tarray, index, value) {
    if (!_SIMD_PRIVATE.isTypedArray(tarray))
      throw new TypeError("The 1st argument must be a typed array.");
    if (!_SIMD_PRIVATE.isNumber(index))
      throw new TypeError("The 2nd argument must be a Number.");
    var bpe = tarray.BYTES_PER_ELEMENT;
    if (index < 0 || (index * bpe + 16) > tarray.byteLength)
      throw new RangeError("The value of index is invalid.");
    value = SIMD.int8x16.check(value);
    _SIMD_PRIVATE._i8x16[0] = value.s0;
    _SIMD_PRIVATE._i8x16[1] = value.s1;
    _SIMD_PRIVATE._i8x16[2] = value.s2;
    _SIMD_PRIVATE._i8x16[3] = value.s3;
    _SIMD_PRIVATE._i8x16[4] = value.s4;
    _SIMD_PRIVATE._i8x16[5] = value.s5;
    _SIMD_PRIVATE._i8x16[6] = value.s6;
    _SIMD_PRIVATE._i8x16[7] = value.s7;
    _SIMD_PRIVATE._i8x16[8] = value.s8;
    _SIMD_PRIVATE._i8x16[9] = value.s9;
    _SIMD_PRIVATE._i8x16[10] = value.s10;
    _SIMD_PRIVATE._i8x16[11] = value.s11;
    _SIMD_PRIVATE._i8x16[12] = value.s12;
    _SIMD_PRIVATE._i8x16[13] = value.s13;
    _SIMD_PRIVATE._i8x16[14] = value.s14;
    _SIMD_PRIVATE._i8x16[15] = value.s15;
    var array = bpe == 1 ? _SIMD_PRIVATE._i8x16 :
                bpe == 2 ? _SIMD_PRIVATE._i16x8 :
                bpe == 4 ? (tarray instanceof Float32Array ? _SIMD_PRIVATE._f32x4 : _SIMD_PRIVATE._i32x4) :
                _SIMD_PRIVATE._f64x2;
    var n = 16 / bpe;
    for (var i = 0; i < n; ++i)
      tarray[index + i] = array[i];
  }
}

if (typeof Float32x4Array === "undefined") {
  Float32x4Array = function(a, b, c) {
    if (_SIMD_PRIVATE.isNumber(a)) {
      this.storage_ = new Float32Array(a*4);
      this.length_ = a;
      this.byteOffset_ = 0;
      return;
    } else if (_SIMD_PRIVATE.isTypedArray(a)) {
      if (!(a instanceof Float32x4Array)) {
        throw "Copying typed array of non-Float32x4Array is unimplemented.";
      }
      this.storage_ = new Float32Array(a.length * 4);
      this.length_ = a.length;
      this.byteOffset_ = 0;
      // Copy floats.
      for (var i = 0; i < a.length*4; i++) {
        this.storage_[i] = a.storage_[i];
      }
    } else if (_SIMD_PRIVATE.isArrayBuffer(a)) {
      if ((b != undefined) && (b % Float32x4Array.BYTES_PER_ELEMENT) != 0) {
        throw "byteOffset must be a multiple of 16.";
      }
      if (c != undefined) {
        c *= 4;
        this.storage_ = new Float32Array(a, b, c);
      }
      else {
        // Note: new Float32Array(a, b) is NOT equivalent to new Float32Array(a, b, undefined)
        this.storage_ = new Float32Array(a, b);
      }
      this.length_ = this.storage_.length / 4;
      this.byteOffset_ = b != undefined ? b : 0;
    } else {
      throw "Unknown type of first argument.";
    }
  }

  Object.defineProperty(Float32x4Array.prototype, 'length', {
    get: function() { return this.length_; }
  });

  Object.defineProperty(Float32x4Array.prototype, 'byteLength', {
    get: function() { return this.length_ * Float32x4Array.BYTES_PER_ELEMENT; }
  });

  Object.defineProperty(Float32x4Array, 'BYTES_PER_ELEMENT', {
    get: function() { return 16; }
  });

  Object.defineProperty(Float32x4Array.prototype, 'BYTES_PER_ELEMENT', {
    get: function() { return 16; }
  });

  Object.defineProperty(Float32x4Array.prototype, 'byteOffset', {
    get: function() { return this.byteOffset_; }
  });

  Object.defineProperty(Float32x4Array.prototype, 'buffer', {
    get: function() { return this.storage_.buffer; }
  });

  Float32x4Array.prototype.getAt = function(i) {
    if (i < 0) {
      throw "Index must be >= 0.";
    }
    if (i >= this.length) {
      throw "Index out of bounds.";
    }
    var x = this.storage_[i*4+0];
    var y = this.storage_[i*4+1];
    var z = this.storage_[i*4+2];
    var w = this.storage_[i*4+3];
    return SIMD.float32x4(x, y, z, w);
  }

  Float32x4Array.prototype.setAt = function(i, v) {
    if (i < 0) {
      throw "Index must be >= 0.";
    }
    if (i >= this.length) {
      throw "Index out of bounds.";
    }
    if (!(v instanceof SIMD.float32x4)) {
      throw "Value is not a float32x4.";
    }
    this.storage_[i*4+0] = v.x;
    this.storage_[i*4+1] = v.y;
    this.storage_[i*4+2] = v.z;
    this.storage_[i*4+3] = v.w;
  }
}

if (typeof Int32x4Array === "undefined") {
  Int32x4Array = function(a, b, c) {
    if (_SIMD_PRIVATE.isNumber(a)) {
      this.storage_ = new Int32Array(a*4);
      this.length_ = a;
      this.byteOffset_ = 0;
      return;
    } else if (_SIMD_PRIVATE.isTypedArray(a)) {
      if (!(a instanceof Int32x4Array)) {
        throw "Copying typed array of non-Int32x4Array is unimplemented.";
      }
      this.storage_ = new Int32Array(a.length * 4);
      this.length_ = a.length;
      this.byteOffset_ = 0;
      // Copy ints.
      for (var i = 0; i < a.length*4; i++) {
        this.storage_[i] = a.storage_[i];
      }
    } else if (_SIMD_PRIVATE.isArrayBuffer(a)) {
      if ((b != undefined) && (b % Int32x4Array.BYTES_PER_ELEMENT) != 0) {
        throw "byteOffset must be a multiple of 16.";
      }
      if (c != undefined) {
        c *= 4;
        this.storage_ = new Int32Array(a, b, c);
      }
      else {
        // Note: new Int32Array(a, b) is NOT equivalent to new Int32Array(a, b, undefined)
        this.storage_ = new Int32Array(a, b);
      }
      this.length_ = this.storage_.length / 4;
      this.byteOffset_ = b != undefined ? b : 0;
    } else {
      throw "Unknown type of first argument.";
    }
  }

  Object.defineProperty(Int32x4Array.prototype, 'length', {
    get: function() { return this.length_; }
  });

  Object.defineProperty(Int32x4Array.prototype, 'byteLength', {
    get: function() { return this.length_ * Int32x4Array.BYTES_PER_ELEMENT; }
  });

  Object.defineProperty(Int32x4Array, 'BYTES_PER_ELEMENT', {
    get: function() { return 16; }
  });

  Object.defineProperty(Int32x4Array.prototype, 'BYTES_PER_ELEMENT', {
    get: function() { return 16; }
  });

  Object.defineProperty(Int32x4Array.prototype, 'byteOffset', {
    get: function() { return this.byteOffset_; }
  });

  Object.defineProperty(Int32x4Array.prototype, 'buffer', {
    get: function() { return this.storage_.buffer; }
  });

  Int32x4Array.prototype.getAt = function(i) {
    if (i < 0) {
      throw "Index must be >= 0.";
    }
    if (i >= this.length) {
      throw "Index out of bounds.";
    }
    var x = this.storage_[i*4+0];
    var y = this.storage_[i*4+1];
    var z = this.storage_[i*4+2];
    var w = this.storage_[i*4+3];
    return SIMD.int32x4(x, y, z, w);
  }

  Int32x4Array.prototype.setAt = function(i, v) {
    if (i < 0) {
      throw "Index must be >= 0.";
    }
    if (i >= this.length) {
      throw "Index out of bounds.";
    }
    if (!(v instanceof SIMD.int32x4)) {
      throw "Value is not a int32x4.";
    }
    this.storage_[i*4+0] = v.x;
    this.storage_[i*4+1] = v.y;
    this.storage_[i*4+2] = v.z;
    this.storage_[i*4+3] = v.w;
  }

  _SIMD_PRIVATE.isDataView = function(v) {
    return v instanceof DataView;
  }

  DataView.prototype.getFloat32x4 = function(byteOffset, littleEndian) {
    if (!_SIMD_PRIVATE.isDataView(this))
      throw new TypeError("This is not a DataView.");
    if (byteOffset < 0 || (byteOffset + 16) > this.buffer.byteLength)
      throw new RangeError("The value of byteOffset is invalid.");
    if (typeof littleEndian === 'undefined')
      littleEndian = false;
    return SIMD.float32x4(this.getFloat32(byteOffset, littleEndian),
                          this.getFloat32(byteOffset + 4, littleEndian),
                          this.getFloat32(byteOffset + 8, littleEndian),
                          this.getFloat32(byteOffset + 12, littleEndian));
  }

  DataView.prototype.getFloat64x2 = function(byteOffset, littleEndian) {
    if (!_SIMD_PRIVATE.isDataView(this))
      throw new TypeError("This is not a DataView.");
    if (byteOffset < 0 || (byteOffset + 16) > this.buffer.byteLength)
      throw new RangeError("The value of byteOffset is invalid.");
    if (typeof littleEndian === 'undefined')
      littleEndian = false;
    return SIMD.float64x2(this.getFloat64(byteOffset, littleEndian),
                          this.getFloat64(byteOffset + 8, littleEndian));
  }

  DataView.prototype.getInt32x4 = function(byteOffset, littleEndian) {
    if (!_SIMD_PRIVATE.isDataView(this))
      throw new TypeError("This is not a DataView.");
    if (byteOffset < 0 || (byteOffset + 16) > this.buffer.byteLength)
      throw new RangeError("The value of byteOffset is invalid.");
    if (typeof littleEndian === 'undefined')
      littleEndian = false;
    return SIMD.int32x4(this.getInt32(byteOffset, littleEndian),
                        this.getInt32(byteOffset + 4, littleEndian),
                        this.getInt32(byteOffset + 8, littleEndian),
                        this.getInt32(byteOffset + 12, littleEndian));
  }

  DataView.prototype.getInt16x8 = function(byteOffset, littleEndian) {
    if (!_SIMD_PRIVATE.isDataView(this))
      throw new TypeError("This is not a DataView.");
    if (byteOffset < 0 || (byteOffset + 16) > this.buffer.byteLength)
      throw new RangeError("The value of byteOffset is invalid.");
    if (typeof littleEndian === 'undefined')
      littleEndian = false;
    return SIMD.int16x8(this.getInt16(byteOffset, littleEndian),
                        this.getInt16(byteOffset + 2, littleEndian),
                        this.getInt16(byteOffset + 4, littleEndian),
                        this.getInt16(byteOffset + 6, littleEndian),
                        this.getInt16(byteOffset + 8, littleEndian),
                        this.getInt16(byteOffset + 10, littleEndian),
                        this.getInt16(byteOffset + 12, littleEndian),
                        this.getInt16(byteOffset + 14, littleEndian));
  }

  DataView.prototype.getInt8x16 = function(byteOffset, littleEndian) {
    if (!_SIMD_PRIVATE.isDataView(this))
      throw new TypeError("This is not a DataView.");
    if (byteOffset < 0 || (byteOffset + 16) > this.buffer.byteLength)
      throw new RangeError("The value of byteOffset is invalid.");
    if (typeof littleEndian === 'undefined')
      littleEndian = false;
    return SIMD.int8x16(this.getInt8(byteOffset, littleEndian),
                        this.getInt8(byteOffset + 1, littleEndian),
                        this.getInt8(byteOffset + 2, littleEndian),
                        this.getInt8(byteOffset + 3, littleEndian),
                        this.getInt8(byteOffset + 4, littleEndian),
                        this.getInt8(byteOffset + 5, littleEndian),
                        this.getInt8(byteOffset + 6, littleEndian),
                        this.getInt8(byteOffset + 7, littleEndian),
                        this.getInt8(byteOffset + 8, littleEndian),
                        this.getInt8(byteOffset + 9, littleEndian),
                        this.getInt8(byteOffset + 10, littleEndian),
                        this.getInt8(byteOffset + 11, littleEndian),
                        this.getInt8(byteOffset + 12, littleEndian),
                        this.getInt8(byteOffset + 13, littleEndian),
                        this.getInt8(byteOffset + 14, littleEndian),
                        this.getInt8(byteOffset + 15, littleEndian));
  }

  DataView.prototype.setFloat32x4 = function(byteOffset, value, littleEndian) {
    if (!_SIMD_PRIVATE.isDataView(this))
      throw new TypeError("This is not a DataView.");
    if (byteOffset < 0 || (byteOffset + 16) > this.buffer.byteLength)
      throw new RangeError("The value of byteOffset is invalid.");
    value = SIMD.float32x4.check(value);
    if (typeof littleEndian === 'undefined')
      littleEndian = false;
    this.setFloat32(byteOffset, value.x, littleEndian);
    this.setFloat32(byteOffset + 4, value.y, littleEndian);
    this.setFloat32(byteOffset + 8, value.z, littleEndian);
    this.setFloat32(byteOffset + 12, value.w, littleEndian);
  }

  DataView.prototype.setFloat64x2 = function(byteOffset, value, littleEndian) {
    if (!_SIMD_PRIVATE.isDataView(this))
      throw new TypeError("This is not a DataView.");
    if (byteOffset < 0 || (byteOffset + 16) > this.buffer.byteLength)
      throw new RangeError("The value of byteOffset is invalid.");
    value = SIMD.float64x2.check(value);
    if (typeof littleEndian === 'undefined')
      littleEndian = false;
    this.setFloat64(byteOffset, value.x, littleEndian);
    this.setFloat64(byteOffset + 8, value.y, littleEndian);
  }

  DataView.prototype.setInt32x4 = function(byteOffset, value, littleEndian) {
    if (!_SIMD_PRIVATE.isDataView(this))
      throw new TypeError("This is not a DataView.");
    if (byteOffset < 0 || (byteOffset + 16) > this.buffer.byteLength)
      throw new RangeError("The value of byteOffset is invalid.");
    value = SIMD.int32x4.check(value);
    if (typeof littleEndian === 'undefined')
      littleEndian = false;
    this.setInt32(byteOffset, value.x, littleEndian);
    this.setInt32(byteOffset + 4, value.y, littleEndian);
    this.setInt32(byteOffset + 8, value.z, littleEndian);
    this.setInt32(byteOffset + 12, value.w, littleEndian);
  }

  DataView.prototype.setInt16x8 = function(byteOffset, value, littleEndian) {
    if (!_SIMD_PRIVATE.isDataView(this))
      throw new TypeError("This is not a DataView.");
    if (byteOffset < 0 || (byteOffset + 16) > this.buffer.byteLength)
      throw new RangeError("The value of byteOffset is invalid.");
    value = SIMD.int16x8.check(value);
    if (typeof littleEndian === 'undefined')
      littleEndian = false;
    this.setInt16(byteOffset, value.s0, littleEndian);
    this.setInt16(byteOffset + 2, value.s1, littleEndian);
    this.setInt16(byteOffset + 4, value.s2, littleEndian);
    this.setInt16(byteOffset + 6, value.s3, littleEndian);
    this.setInt16(byteOffset + 8, value.s4, littleEndian);
    this.setInt16(byteOffset + 10, value.s5, littleEndian);
    this.setInt16(byteOffset + 12, value.s6, littleEndian);
    this.setInt16(byteOffset + 14, value.s7, littleEndian);
  }

  DataView.prototype.setInt8x16 = function(byteOffset, value, littleEndian) {
    if (!_SIMD_PRIVATE.isDataView(this))
      throw new TypeError("This is not a DataView.");
    if (byteOffset < 0 || (byteOffset + 16) > this.buffer.byteLength)
      throw new RangeError("The value of byteOffset is invalid.");
    value = SIMD.int8x16.check(value);
    if (typeof littleEndian === 'undefined')
      littleEndian = false;
    this.setInt8(byteOffset, value.s0, littleEndian);
    this.setInt8(byteOffset + 1, value.s1, littleEndian);
    this.setInt8(byteOffset + 2, value.s2, littleEndian);
    this.setInt8(byteOffset + 3, value.s3, littleEndian);
    this.setInt8(byteOffset + 4, value.s4, littleEndian);
    this.setInt8(byteOffset + 5, value.s5, littleEndian);
    this.setInt8(byteOffset + 6, value.s6, littleEndian);
    this.setInt8(byteOffset + 7, value.s7, littleEndian);
    this.setInt8(byteOffset + 8, value.s8, littleEndian);
    this.setInt8(byteOffset + 9, value.s9, littleEndian);
    this.setInt8(byteOffset + 10, value.s10, littleEndian);
    this.setInt8(byteOffset + 11, value.s11, littleEndian);
    this.setInt8(byteOffset + 12, value.s12, littleEndian);
    this.setInt8(byteOffset + 13, value.s13, littleEndian);
    this.setInt8(byteOffset + 14, value.s14, littleEndian);
    this.setInt8(byteOffset + 15, value.s15, littleEndian);
  }
}


// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      // Module is the only 'upvar', which we provide directly. We also provide FS for legacy support.
      var evalled = eval('(function(Module, FS) { return function(' + args.join(',') + '){ ' + source + ' } })')(Module, typeof FS !== 'undefined' ? FS : null);
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + size)|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + size)|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) Runtime.stackRestore(stack);
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["cwrap"] = cwrap;
Module["ccall"] = ccall;


function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module['AsciiToString'] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module['stringToAscii'] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the a given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module['UTF8ArrayToString'] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8, ptr);
}
Module['UTF8ToString'] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module['stringToUTF8Array'] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
}
Module['stringToUTF8'] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module['lengthBytesUTF8'] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF16'] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module['lengthBytesUTF16'] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}
Module['stringToUTF32'] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module['lengthBytesUTF32'] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module['stackTrace'] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 570425344;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))>>0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer++)>>0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];

if (!Math['fround']) {
  var froundBuffer = new Float32Array(1);
  Math['fround'] = function(x) { froundBuffer[0] = x; return froundBuffer[0] };
}
Math.fround = Math['fround'];

if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===





STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 15552;
  /* global initializers */ __ATINIT__.push({ func: function() { __GLOBAL__sub_I_base_cpp() } }, { func: function() { __GLOBAL__sub_I_iostream_cpp() } });
  

/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,77,97,116,114,105,120,84,114,97,110,115,112,111,115,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,115,58,32,37,115,0,0,70,65,73,76,69,68,32,73,78,73,84,0,0,0,0,0,70,65,73,76,69,68,32,67,76,69,65,78,85,80,0,0,37,45,50,48,115,32,58,32,37,49,50,108,108,117,32,37,49,50,108,108,117,32,37,49,50,108,108,117,32,37,49,50,108,108,117,32,37,49,48,46,50,102,32,37,49,48,46,50,102,0,0,0,0,0,0,0,37,45,50,48,115,32,58,32,37,49,50,115,32,37,49,50,115,32,37,49,50,115,32,37,49,50,115,32,37,49,48,115,32,37,49,48,115,0,0,0,78,97,109,101,0,0,0,0,73,116,101,114,97,116,105,111,110,115,0,0,0,0,0,0,83,99,97,108,97,114,51,50,40,110,115,41,0,0,0,0,83,99,97,108,97,114,54,52,40,110,115,41,0,0,0,0,83,73,77,68,51,50,40,110,115,41,0,0,0,0,0,0,82,97,116,105,111,51,50,0,82,97,116,105,111,54,52], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([200,5,0,0,1,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,3,0,0,0,2,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,24,54,0,0,168,5,0,0,64,11,0,0,0,0,0,0,0,0,0,0,48,6,0,0,1,0,0,0,3,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,5,0,0,0,2,0,0,0,2,0,0,0,6,0,0,0,7,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,24,54,0,0,24,6,0,0,64,11,0,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,0,0,0,0,200,6,0,0,4,0,0,0,5,0,0,0,3,0,0,0,5,0,0,0,2,0,0,0,2,0,0,0,8,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,11,0,0,0,5,0,0,0,7,0,0,0,6,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,24,54,0,0,168,6,0,0,0,11,0,0,0,0,0,0,0,0,0,0,48,7,0,0,4,0,0,0,6,0,0,0,4,0,0,0,5,0,0,0,2,0,0,0,2,0,0,0,12,0,0,0,9,0,0,0,6,0,0,0,13,0,0,0,14,0,0,0,7,0,0,0,8,0,0,0,8,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,24,54,0,0,24,7,0,0,0,11,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,240,53,0,0,64,7,0,0,58,32,0,0,0,0,0,0,0,0,0,0,160,7,0,0,7,0,0,0,8,0,0,0,15,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,24,54,0,0,136,7,0,0,152,52,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69,0,0,0,0,0,0,0,0,240,53,0,0,176,7,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,24,54,0,0,216,7,0,0,208,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,0,0,0,0,0,11,0,0,9,0,0,0,10,0,0,0,5,0,0,0,5,0,0,0,2,0,0,0,2,0,0,0,12,0,0,0,9,0,0,0,6,0,0,0,10,0,0,0,11,0,0,0,5,0,0,0,8,0,0,0,8,0,0,0,0,0,0,0,64,11,0,0,11,0,0,0,12,0,0,0,6,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,5,0,0,0,2,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,1,0,0,0,4,0,0,0,4,0,0,0,8,0,0,0,0,0,0,0,120,11,0,0,13,0,0,0,14,0,0,0,248,255,255,255,248,255,255,255,120,11,0,0,15,0,0,0,16,0,0,0,8,0,0,0,0,0,0,0,192,11,0,0,17,0,0,0,18,0,0,0,248,255,255,255,248,255,255,255,192,11,0,0,19,0,0,0,20,0,0,0,4,0,0,0,0,0,0,0,8,12,0,0,21,0,0,0,22,0,0,0,252,255,255,255,252,255,255,255,8,12,0,0,23,0,0,0,24,0,0,0,4,0,0,0,0,0,0,0,80,12,0,0,25,0,0,0,26,0,0,0,252,255,255,255,252,255,255,255,80,12,0,0,27,0,0,0,28,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,10,0,0,29,0,0,0,30,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,64,10,0,0,31,0,0,0,32,0,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,24,54,0,0,248,9,0,0,160,7,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,240,53,0,0,40,10,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,24,54,0,0,72,10,0,0,64,10,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,24,54,0,0,136,10,0,0,64,10,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,240,53,0,0,200,10,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,240,53,0,0,8,11,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,120,54,0,0,72,11,0,0,0,0,0,0,1,0,0,0,120,10,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,120,54,0,0,144,11,0,0,0,0,0,0,1,0,0,0,184,10,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,120,54,0,0,216,11,0,0,0,0,0,0,1,0,0,0,120,10,0,0,3,244,255,255,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,120,54,0,0,32,12,0,0,0,0,0,0,1,0,0,0,184,10,0,0,3,244,255,255,0,0,0,0,176,12,0,0,33,0,0,0,34,0,0,0,16,0,0,0,1,0,0,0,9,0,0,0,10,0,0,0,2,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,24,54,0,0,144,12,0,0,240,7,0,0,0,0,0,0,0,0,0,0,248,26,0,0,35,0,0,0,36,0,0,0,37,0,0,0,1,0,0,0,3,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,27,0,0,38,0,0,0,39,0,0,0,37,0,0,0,2,0,0,0,4,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,28,0,0,40,0,0,0,41,0,0,0,37,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,136,29,0,0,42,0,0,0,43,0,0,0,37,0,0,0,12,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,17,0,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,30,0,0,44,0,0,0,45,0,0,0,37,0,0,0,3,0,0,0,4,0,0,0,23,0,0,0,5,0,0,0,24,0,0,0,1,0,0,0,2,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,108,108,0,0,0,0,0,0,0,0,0,0,0,0,0,0,76,0,0,0,0,0,0,0,0,0,0,0,224,30,0,0,46,0,0,0,47,0,0,0,37,0,0,0,7,0,0,0,8,0,0,0,25,0,0,0,9,0,0,0,26,0,0,0,3,0,0,0,4,0,0,0,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,152,31,0,0,48,0,0,0,49,0,0,0,37,0,0,0,17,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,1,0,0,0,248,255,255,255,152,31,0,0,18,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,23,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,37,109,47,37,100,47,37,121,37,89,45,37,109,45,37,100,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,72,58,37,77,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,56,32,0,0,50,0,0,0,51,0,0,0,37,0,0,0,25,0,0,0,32,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,36,0,0,0,2,0,0,0,248,255,255,255,56,32,0,0,26,0,0,0,27,0,0,0,28,0,0,0,29,0,0,0,30,0,0,0,31,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,200,32,0,0,52,0,0,0,53,0,0,0,37,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,33,0,0,54,0,0,0,55,0,0,0,37,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,27,0,0,56,0,0,0,57,0,0,0,37,0,0,0,33,0,0,0,34,0,0,0,7,0,0,0,8,0,0,0,9,0,0,0,10,0,0,0,35,0,0,0,11,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,27,0,0,58,0,0,0,59,0,0,0,37,0,0,0,36,0,0,0,37,0,0,0,13,0,0,0,14,0,0,0,15,0,0,0,16,0,0,0,38,0,0,0,17,0,0,0,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,27,0,0,60,0,0,0,61,0,0,0,37,0,0,0,39,0,0,0,40,0,0,0,19,0,0,0,20,0,0,0,21,0,0,0,22,0,0,0,41,0,0,0,23,0,0,0,24,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,28,0,0,62,0,0,0,63,0,0,0,37,0,0,0,42,0,0,0,43,0,0,0,25,0,0,0,26,0,0,0,27,0,0,0,28,0,0,0,44,0,0,0,29,0,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,33,0,0,64,0,0,0,65,0,0,0,37,0,0,0,3,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,76,102,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,0,0,0,0,80,34,0,0,66,0,0,0,67,0,0,0,37,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,0,0,0,0,224,34,0,0,68,0,0,0,69,0,0,0,37,0,0,0,1,0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,46,48,76,102,0,0,0,0,0,0,0,112,35,0,0,70,0,0,0,71,0,0,0,37,0,0,0,2,0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,35,0,0,72,0,0,0,73,0,0,0,37,0,0,0,13,0,0,0,11,0,0,0,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,36,0,0,74,0,0,0,75,0,0,0,37,0,0,0,14,0,0,0,12,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,118,101,99,116,111,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,67,0,0,0,0,0,0,0,0,0,0,0,208,26,0,0,76,0,0,0,77,0,0,0,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,168,23,0,0,78,0,0,0,79,0,0,0,37,0,0,0,9,0,0,0,15,0,0,0,10,0,0,0,16,0,0,0,11,0,0,0,1,0,0,0,17,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,24,0,0,80,0,0,0,81,0,0,0,37,0,0,0,1,0,0,0,2,0,0,0,4,0,0,0,45,0,0,0,46,0,0,0,5,0,0,0,47,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,26,0,0,82,0,0,0,83,0,0,0,37,0,0,0,48,0,0,0,49,0,0,0,33,0,0,0,34,0,0,0,35,0,0,0,0,0,0,0,168,26,0,0,84,0,0,0,85,0,0,0,37,0,0,0,50,0,0,0,51,0,0,0,36,0,0,0,37,0,0,0,38,0,0,0,116,114,117,101,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,102,97,108,115,101,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,109,47,37,100,47,37,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,72,58,37,77,58,37,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,0,0,0,0,224,22,0,0,86,0,0,0,87,0,0,0,37,0,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,24,54,0,0,200,22,0,0,96,7,0,0,0,0,0,0,0,0,0,0,112,23,0,0,86,0,0,0,88,0,0,0,37,0,0,0,18,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,12,0,0,0,19,0,0,0,13,0,0,0,20,0,0,0,14,0,0,0,5,0,0,0,21,0,0,0,6,0,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,240,53,0,0,80,23,0,0,120,54,0,0,56,23,0,0,0,0,0,0,2,0,0,0,224,22,0,0,2,0,0,0,104,23,0,0,2,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,120,54,0,0,144,23,0,0,0,0,0,0,2,0,0,0,224,22,0,0,2,0,0,0,104,23,0,0,2,0,0,0,0,0,0,0,64,24,0,0,86,0,0,0,89,0,0,0,37,0,0,0,3,0,0,0,4,0,0,0,7,0,0,0,52,0,0,0,53,0,0,0,8,0,0,0,54,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,240,53,0,0,32,24,0,0,120,54,0,0,248,23,0,0,0,0,0,0,2,0,0,0,224,22,0,0,2,0,0,0,56,24,0,0,2,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,120,54,0,0,96,24,0,0,0,0,0,0,2,0,0,0,224,22,0,0,2,0,0,0,56,24,0,0,2,0,0,0,0,0,0,0,0,25,0,0,86,0,0,0,90,0,0,0,37,0,0,0,5,0,0,0,6,0,0,0,9,0,0,0,55,0,0,0,56,0,0,0,10,0,0,0,57,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,120,54,0,0,216,24,0,0,0,0,0,0,2,0,0,0,224,22,0,0,2,0,0,0,56,24,0,0,2,0,0,0,0,0,0,0,120,25,0,0,86,0,0,0,91,0,0,0,37,0,0,0,7,0,0,0,8,0,0,0,11,0,0,0,58,0,0,0,59,0,0,0,12,0,0,0,60,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,120,54,0,0,80,25,0,0,0,0,0,0,2,0,0,0,224,22,0,0,2,0,0,0,56,24,0,0,2,0,0,0,0,0,0,0,240,25,0,0,86,0,0,0,92,0,0,0,37,0,0,0,7,0,0,0,8,0,0,0,11,0,0,0,58,0,0,0,59,0,0,0,12,0,0,0,60,0,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,24,54,0,0,200,25,0,0,120,25,0,0,0,0,0,0,0,0,0,0,88,26,0,0,86,0,0,0,93,0,0,0,37,0,0,0,7,0,0,0,8,0,0,0,11,0,0,0,58,0,0,0,59,0,0,0,12,0,0,0,60,0,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,24,54,0,0,48,26,0,0,120,25,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,24,54,0,0,104,26,0,0,224,22,0,0,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,24,54,0,0,144,26,0,0,224,22,0,0,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,24,54,0,0,184,26,0,0,224,22,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,24,54,0,0,224,26,0,0,224,22,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,24,54,0,0,8,27,0,0,224,22,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,240,53,0,0,80,27,0,0,120,54,0,0,48,27,0,0,0,0,0,0,2,0,0,0,224,22,0,0,2,0,0,0,104,27,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,120,54,0,0,144,27,0,0,0,0,0,0,2,0,0,0,224,22,0,0,2,0,0,0,104,27,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,120,54,0,0,208,27,0,0,0,0,0,0,2,0,0,0,224,22,0,0,2,0,0,0,104,27,0,0,2,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,120,54,0,0,16,28,0,0,0,0,0,0,2,0,0,0,224,22,0,0,2,0,0,0,104,27,0,0,2,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,240,53,0,0,176,28,0,0,120,54,0,0,152,28,0,0,0,0,0,0,1,0,0,0,208,28,0,0,0,0,0,0,120,54,0,0,80,28,0,0,0,0,0,0,2,0,0,0,224,22,0,0,2,0,0,0,216,28,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,120,54,0,0,88,29,0,0,0,0,0,0,1,0,0,0,208,28,0,0,0,0,0,0,120,54,0,0,16,29,0,0,0,0,0,0,2,0,0,0,224,22,0,0,2,0,0,0,112,29,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,240,53,0,0,8,30,0,0,120,54,0,0,240,29,0,0,0,0,0,0,1,0,0,0,40,30,0,0,0,0,0,0,120,54,0,0,168,29,0,0,0,0,0,0,2,0,0,0,224,22,0,0,2,0,0,0,48,30,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,120,54,0,0,176,30,0,0,0,0,0,0,1,0,0,0,40,30,0,0,0,0,0,0,120,54,0,0,104,30,0,0,0,0,0,0,2,0,0,0,224,22,0,0,2,0,0,0,200,30,0,0,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,240,53,0,0,72,31,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,240,53,0,0,104,31,0,0,120,54,0,0,0,31,0,0,0,0,0,0,3,0,0,0,224,22,0,0,2,0,0,0,96,31,0,0,2,0,0,0,144,31,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,240,53,0,0,8,32,0,0,120,54,0,0,192,31,0,0,0,0,0,0,3,0,0,0,224,22,0,0,2,0,0,0,96,31,0,0,2,0,0,0,48,32,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,240,53,0,0,168,32,0,0,120,54,0,0,96,32,0,0,0,0,0,0,2,0,0,0,224,22,0,0,2,0,0,0,192,32,0,0,0,8,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,120,54,0,0,232,32,0,0,0,0,0,0,2,0,0,0,224,22,0,0,2,0,0,0,192,32,0,0,0,8,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,240,53,0,0,152,33,0,0,120,54,0,0,80,33,0,0,0,0,0,0,2,0,0,0,224,22,0,0,2,0,0,0,184,33,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,240,53,0,0,40,34,0,0,120,54,0,0,224,33,0,0,0,0,0,0,2,0,0,0,224,22,0,0,2,0,0,0,72,34,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,240,53,0,0,184,34,0,0,120,54,0,0,112,34,0,0,0,0,0,0,2,0,0,0,224,22,0,0,2,0,0,0,216,34,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,240,53,0,0,72,35,0,0,120,54,0,0,0,35,0,0,0,0,0,0,2,0,0,0,224,22,0,0,2,0,0,0,104,35,0,0,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,240,53,0,0,168,35,0,0,120,54,0,0,144,35,0,0,0,0,0,0,2,0,0,0,224,22,0,0,2,0,0,0,192,35,0,0,2,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,120,54,0,0,232,35,0,0,0,0,0,0,2,0,0,0,224,22,0,0,2,0,0,0,192,35,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,65,77,0,0,0,0,0,0,80,77,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,97,110,117,97,114,121,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,77,97,114,99,104,0,0,0,65,112,114,105,108,0,0,0,77,97,121,0,0,0,0,0,74,117,110,101,0,0,0,0,74,117,108,121,0,0,0,0,65,117,103,117,115,116,0,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,79,99,116,111,98,101,114,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,74,97,110], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+1380);
/* memory initializer */ allocate([70,101,98,0,0,0,0,0,77,97,114,0,0,0,0,0,65,112,114,0,0,0,0,0,74,117,110,0,0,0,0,0,74,117,108,0,0,0,0,0,65,117,103,0,0,0,0,0,83,101,112,0,0,0,0,0,79,99,116,0,0,0,0,0,78,111,118,0,0,0,0,0,68,101,99,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,83,117,110,100,97,121,0,0,77,111,110,100,97,121,0,0,84,117,101,115,100,97,121,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,70,114,105,100,97,121,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,83,117,110,0,0,0,0,0,77,111,110,0,0,0,0,0,84,117,101,0,0,0,0,0,87,101,100,0,0,0,0,0,84,104,117,0,0,0,0,0,70,114,105,0,0,0,0,0,83,97,116,0,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,50,0,0,0,0,0,0,117,110,99,97,117,103,104,116,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,58,32,37,115,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,101,120,99,101,112,116,105,111,110,32,111,102,32,116,121,112,101,32,37,115,0,0,0,0,0,0,0,0,116,101,114,109,105,110,97,116,105,110,103,32,119,105,116,104,32,37,115,32,102,111,114,101,105,103,110,32,101,120,99,101,112,116,105,111,110,0,0,0,116,101,114,109,105,110,97,116,105,110,103,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,116,104,114,101,97,100,95,111,110,99,101,32,102,97,105,108,117,114,101,32,105,110,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,95,102,97,115,116,40,41,0,0,0,0,0,0,0,0,99,97,110,110,111,116,32,99,114,101,97,116,101,32,112,116,104,114,101,97,100,32,107,101,121,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,99,97,110,110,111,116,32,122,101,114,111,32,111,117,116,32,116,104,114,101,97,100,32,118,97,108,117,101,32,102,111,114,32,95,95,99,120,97,95,103,101,116,95,103,108,111,98,97,108,115,40,41,0,0,0,0,0,0,0,0,152,51,0,0,94,0,0,0,95,0,0,0,61,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,24,54,0,0,136,51,0,0,232,51,0,0,0,0,0,0,116,101,114,109,105,110,97,116,101,95,104,97,110,100,108,101,114,32,117,110,101,120,112,101,99,116,101,100,108,121,32,114,101,116,117,114,110,101,100,0,0,0,0,0,0,0,0,0,83,116,57,101,120,99,101,112,116,105,111,110,0,0,0,0,240,53,0,0,216,51,0,0,0,0,0,0,48,52,0,0,96,0,0,0,97,0,0,0,62,0,0,0,0,0,0,0,0,0,0,0,152,52,0,0,98,0,0,0,99,0,0,0,15,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,24,54,0,0,32,52,0,0,232,51,0,0,0,0,0,0,0,0,0,0,112,52,0,0,96,0,0,0,100,0,0,0,62,0,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,24,54,0,0,88,52,0,0,48,52,0,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,24,54,0,0,128,52,0,0,232,51,0,0,0,0,0,0,0,0,0,0,248,52,0,0,101,0,0,0,102,0,0,0,63,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,240,53,0,0,208,52,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,24,54,0,0,232,52,0,0,232,51,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,24,54,0,0,8,53,0,0,224,52,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,24,54,0,0,64,53,0,0,48,53,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,24,54,0,0,160,53,0,0,48,53,0,0,0,0,0,0,24,54,0,0,120,53,0,0,200,53,0,0,0,0,0,0,0,0,0,0,104,53,0,0,103,0,0,0,104,0,0,0,105,0,0,0,106,0,0,0,22,0,0,0,13,0,0,0,1,0,0,0,5,0,0,0,0,0,0,0,96,54,0,0,103,0,0,0,107,0,0,0,105,0,0,0,106,0,0,0,22,0,0,0,14,0,0,0,2,0,0,0,6,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,24,54,0,0,56,54,0,0,104,53,0,0,0,0,0,0,0,0,0,0,192,54,0,0,103,0,0,0,108,0,0,0,105,0,0,0,106,0,0,0,22,0,0,0,15,0,0,0,3,0,0,0,7,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,24,54,0,0,152,54,0,0,104,53,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,1,2,4,7,3,6,5,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,45,43,32,32,32,48,88,48,120,0,0,0,0,0,0,0,40,110,117,108,108,41,0,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,0,0,0,0,0,105,110,102,0,0,0,0,0,73,78,70,0,0,0,0,0,110,97,110,0,0,0,0,0,78,65,78,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+11624);




var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }function ___cxa_atexit() {
  return _atexit.apply(null, arguments)
  }

   
  Module["_i64Subtract"] = _i64Subtract;

  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  var EXCEPTIONS={last:0,caught:[],infos:{},deAdjust:function (adjusted) {
        if (!adjusted || EXCEPTIONS.infos[adjusted]) return adjusted;
        for (var ptr in EXCEPTIONS.infos) {
          var info = EXCEPTIONS.infos[ptr];
          if (info.adjusted === adjusted) {
            return ptr;
          }
        }
        return adjusted;
      },addRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount++;
      },decRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        assert(info.refcount > 0);
        info.refcount--;
        if (info.refcount === 0) {
          if (info.destructor) {
            Runtime.dynCall('vi', info.destructor, [ptr]);
          }
          delete EXCEPTIONS.infos[ptr];
          ___cxa_free_exception(ptr);
        }
      },clearRef:function (ptr) {
        if (!ptr) return;
        var info = EXCEPTIONS.infos[ptr];
        info.refcount = 0;
      }};
  function ___resumeException(ptr) {
      if (!EXCEPTIONS.last) { EXCEPTIONS.last = ptr; }
      EXCEPTIONS.clearRef(EXCEPTIONS.deAdjust(ptr)); // exception refcount should be cleared, but don't free it
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }function ___cxa_find_matching_catch() {
      var thrown = EXCEPTIONS.last;
      if (!thrown) {
        // just pass through the null ptr
        return ((asm["setTempRet0"](0),0)|0);
      }
      var info = EXCEPTIONS.infos[thrown];
      var throwntype = info.type;
      if (!throwntype) {
        // just pass through the thrown ptr
        return ((asm["setTempRet0"](0),thrown)|0);
      }
      var typeArray = Array.prototype.slice.call(arguments);
  
      var pointer = Module['___cxa_is_pointer_type'](throwntype);
      // can_catch receives a **, add indirection
      if (!___cxa_find_matching_catch.buffer) ___cxa_find_matching_catch.buffer = _malloc(4);
      HEAP32[((___cxa_find_matching_catch.buffer)>>2)]=thrown;
      thrown = ___cxa_find_matching_catch.buffer;
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (typeArray[i] && Module['___cxa_can_catch'](typeArray[i], throwntype, thrown)) {
          thrown = HEAP32[((thrown)>>2)]; // undo indirection
          info.adjusted = thrown;
          return ((asm["setTempRet0"](typeArray[i]),thrown)|0);
        }
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      thrown = HEAP32[((thrown)>>2)]; // undo indirection
      return ((asm["setTempRet0"](throwntype),thrown)|0);
    }function ___cxa_throw(ptr, type, destructor) {
      EXCEPTIONS.infos[ptr] = {
        ptr: ptr,
        adjusted: ptr,
        type: type,
        destructor: destructor,
        refcount: 0
      };
      EXCEPTIONS.last = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

   
  Module["_memset"] = _memset;

  var _BDtoILow=true;

  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _pthread_mutex_lock() {}

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  function _abort() {
      Module['abort']();
    }

  function _pthread_once(ptr, func) {
      if (!_pthread_once.seen) _pthread_once.seen = {};
      if (ptr in _pthread_once.seen) return;
      Runtime.dynCall('v', func);
      _pthread_once.seen[ptr] = 1;
    }

  
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
  
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
  
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
  
      /*
      // Disabled, see https://github.com/kripken/emscripten/issues/2770
      stream = FS.getStreamFromPtr(stream);
      if (stream.stream_ops.flush) {
        stream.stream_ops.flush(stream);
      }
      */
    }

  var _fabs=Math_abs;

   
  Module["_strlen"] = _strlen;

  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fputc(c, stream) {
      // int fputc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputc.html
      var chr = unSign(c & 0xFF);
      HEAP8[((_fputc.ret)>>0)]=chr;
      var fd = _fileno(stream);
      var ret = _write(fd, _fputc.ret, 1);
      if (ret == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return -1;
      } else {
        return chr;
      }
    }

  
  var PTHREAD_SPECIFIC={};function _pthread_getspecific(key) {
      return PTHREAD_SPECIFIC[key] || 0;
    }

   
  Module["_i64Add"] = _i64Add;

  
  function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      var fd = _fileno(stream);
      return _write(fd, s, _strlen(s));
    }function _puts(s) {
      // int puts(const char *s);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/puts.html
      // NOTE: puts() always writes an extra newline.
      var stdout = HEAP32[((_stdout)>>2)];
      var ret = _fputs(s, stdout);
      if (ret < 0) {
        return ret;
      } else {
        var newlineRet = _fputc(10, stdout);
        return (newlineRet < 0) ? -1 : ret + 1;
      }
    }

  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return (bytesWritten / size)|0;
      }
    }

  
  
  
  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)>>0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return (bytesRead / size)|0;
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)>>0)];
      }
    }function _getc() {
  return _fgetc.apply(null, arguments)
  }

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _pthread_setspecific(key, value) {
      if (!(key in PTHREAD_SPECIFIC)) {
        return ERRNO_CODES.EINVAL;
      }
      PTHREAD_SPECIFIC[key] = value;
      return 0;
    }

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _ftime(p) {
      var millis = Date.now();
      HEAP32[((p)>>2)]=(millis/1000)|0;
      HEAP16[(((p)+(4))>>1)]=millis % 1000;
      HEAP16[(((p)+(6))>>1)]=0; // Obsolete field
      HEAP16[(((p)+(8))>>1)]=0; // Obsolete field
      return 0;
    }

  
  var LOCALE={curr:0,check:function (locale) {
        if (locale) locale = Pointer_stringify(locale);
        return locale === 'C' || locale === 'POSIX' || !locale;
      }};
  
  function _free() {
  }
  Module["_free"] = _free;function _freelocale(locale) {
      _free(locale);
    }

  
  function _malloc(bytes) {
      /* Over-allocate to make sure it is byte-aligned by 8.
       * This will leak memory, but this is only the dummy
       * implementation (replaced by dlmalloc normally) so
       * not an issue.
       */
      var ptr = Runtime.dynamicAlloc(bytes + 8);
      return (ptr+8) & 0xFFFFFFF8;
    }
  Module["_malloc"] = _malloc;function ___cxa_allocate_exception(size) {
      return _malloc(size);
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  function _pthread_cond_wait() {
      return 0;
    }

  var _BDtoIHigh=true;

  function _pthread_cond_broadcast() {
      return 0;
    }

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[((variable)>>0)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[((variable)>>0)]=1;
        return 1;
      }
      return 0;
    }

  function ___cxa_guard_release() {}

  
  
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (HEAP32[((tempDoublePtr)>>2)]=HEAP32[(((varargs)+(argIndex))>>2)],HEAP32[(((tempDoublePtr)+(4))>>2)]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],(+(HEAPF64[(tempDoublePtr)>>3])));
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[((textIndex)>>0)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)>>0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)>>0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)>>0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)>>0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)>>0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)>>0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)>>0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)>>0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[((i)>>0)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }function _vfprintf(s, f, va_arg) {
      return _fprintf(s, f, HEAP32[((va_arg)>>2)]);
    }

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function _pthread_mutex_unlock() {}

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;


  
  var PTHREAD_SPECIFIC_NEXT_KEY=1;function _pthread_key_create(key, destructor) {
      if (key == 0) {
        return ERRNO_CODES.EINVAL;
      }
      HEAP32[((key)>>2)]=PTHREAD_SPECIFIC_NEXT_KEY;
      // values start at 0
      PTHREAD_SPECIFIC[PTHREAD_SPECIFIC_NEXT_KEY] = 0;
      PTHREAD_SPECIFIC_NEXT_KEY++;
      return 0;
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

   
  Module["_memmove"] = _memmove;

  
  function _calloc(n, s) {
      var ret = _malloc(n*s);
      _memset(ret, 0, n*s);
      return ret;
    }
  Module["_calloc"] = _calloc;function _newlocale(mask, locale, base) {
      if (!LOCALE.check(locale)) {
        ___setErrNo(ERRNO_CODES.ENOENT);
        return 0;
      }
      if (!base) base = _calloc(1, 4);
      return base;
    }

  function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      EXCEPTIONS.caught.push(ptr);
      EXCEPTIONS.addRef(EXCEPTIONS.deAdjust(ptr));
      return ptr;
    }

  function ___errno_location() {
      return ___errno_state;
    }

  var _BItoD=true;

  var _UItoD=true;

  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  
  
  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr);
      } catch(e) { // XXX FIXME
      }
    }function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      asm['setThrew'](0);
      // Call destructor if one is registered then clear it.
      var ptr = EXCEPTIONS.caught.pop();
      if (ptr) {
        EXCEPTIONS.decRef(EXCEPTIONS.deAdjust(ptr));
        EXCEPTIONS.last = 0; // XXX in decRef?
      }
    }function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = EXCEPTIONS.caught.pop();
      EXCEPTIONS.last = ptr;
      throw ptr + " - Exception catching is disabled, this exception cannot be caught. Compile with -s DISABLE_EXCEPTION_CATCHING=0 or DISABLE_EXCEPTION_CATCHING=2 to catch.";
    }

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  function _uselocale(locale) {
      var old = LOCALE.curr;
      if (locale) LOCALE.curr = locale;
      return old;
    }

  var ___dso_handle=allocate(1, "i32*", ALLOC_STATIC);



___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
_fputc.ret = allocate([0], "i8", ALLOC_STATIC);
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiii(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiii"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_i(index) {
  try {
    return Module["dynCall_i"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiid(index,a1,a2,a3,a4,a5,a6,a7) {
  try {
    Module["dynCall_viiiiiid"](index,a1,a2,a3,a4,a5,a6,a7);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiid(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiid"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_v(index) {
  try {
    Module["dynCall_v"](index);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    return Module["dynCall_iiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8) {
  try {
    Module["dynCall_viiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiii(index,a1,a2,a3,a4,a5) {
  try {
    return Module["dynCall_iiiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "SIMD": SIMD };
Module.asmLibraryArg = { "abort": abort, "assert": assert, "invoke_iiii": invoke_iiii, "invoke_viiiiiii": invoke_viiiiiii, "invoke_viiiii": invoke_viiiii, "invoke_i": invoke_i, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_ii": invoke_ii, "invoke_viiiiiid": invoke_viiiiiid, "invoke_viii": invoke_viii, "invoke_viiiiid": invoke_viiiiid, "invoke_v": invoke_v, "invoke_iiiiiiiii": invoke_iiiiiiiii, "invoke_iiiii": invoke_iiiii, "invoke_viiiiiiii": invoke_viiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_iiiiii": invoke_iiiiii, "invoke_viiii": invoke_viiii, "_fabs": _fabs, "_strftime": _strftime, "_pthread_cond_wait": _pthread_cond_wait, "_send": _send, "_pthread_key_create": _pthread_key_create, "_fread": _fread, "___ctype_b_loc": ___ctype_b_loc, "___cxa_guard_acquire": ___cxa_guard_acquire, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_vfprintf": _vfprintf, "_ungetc": _ungetc, "___cxa_free_exception": ___cxa_free_exception, "___cxa_allocate_exception": ___cxa_allocate_exception, "___cxa_find_matching_catch": ___cxa_find_matching_catch, "___ctype_toupper_loc": ___ctype_toupper_loc, "_fflush": _fflush, "___cxa_guard_release": ___cxa_guard_release, "__addDays": __addDays, "_pwrite": _pwrite, "_strerror_r": _strerror_r, "_strftime_l": _strftime_l, "_pthread_mutex_lock": _pthread_mutex_lock, "___setErrNo": ___setErrNo, "_sbrk": _sbrk, "_uselocale": _uselocale, "_catgets": _catgets, "_newlocale": _newlocale, "_calloc": _calloc, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___cxa_end_catch": ___cxa_end_catch, "___resumeException": ___resumeException, "__ZSt18uncaught_exceptionv": __ZSt18uncaught_exceptionv, "_sysconf": _sysconf, "___cxa_begin_catch": ___cxa_begin_catch, "_pthread_getspecific": _pthread_getspecific, "__arraySum": __arraySum, "___ctype_tolower_loc": ___ctype_tolower_loc, "_fileno": _fileno, "_pthread_mutex_unlock": _pthread_mutex_unlock, "_pthread_once": _pthread_once, "_pread": _pread, "_puts": _puts, "_mkport": _mkport, "__reallyNegative": __reallyNegative, "_getc": _getc, "_write": _write, "__isLeapYear": __isLeapYear, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___errno_location": ___errno_location, "_fputs": _fputs, "_recv": _recv, "_pthread_setspecific": _pthread_setspecific, "___cxa_atexit": ___cxa_atexit, "_fgetc": _fgetc, "_fputc": _fputc, "___cxa_throw": ___cxa_throw, "_freelocale": _freelocale, "_pthread_cond_broadcast": _pthread_cond_broadcast, "___cxa_rethrow": ___cxa_rethrow, "_abort": _abort, "_catclose": _catclose, "_fwrite": _fwrite, "_time": _time, "_fprintf": _fprintf, "_strerror": _strerror, "__formatString": __formatString, "_atexit": _atexit, "_catopen": _catopen, "_read": _read, "_ftime": _ftime, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8, "___dso_handle": ___dso_handle, "_stderr": _stderr, "_stdin": _stdin, "_stdout": _stdout };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'use asm';
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;
  var ___dso_handle=env.___dso_handle|0;
  var _stderr=env._stderr|0;
  var _stdin=env._stdin|0;
  var _stdout=env._stdout|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var Math_fround=global.Math.fround;
  var abort=env.abort;
  var assert=env.assert;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiiiii=env.invoke_viiiiiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_i=env.invoke_i;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viiiiiid=env.invoke_viiiiiid;
  var invoke_viii=env.invoke_viii;
  var invoke_viiiiid=env.invoke_viiiiid;
  var invoke_v=env.invoke_v;
  var invoke_iiiiiiiii=env.invoke_iiiiiiiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_viiiiiiii=env.invoke_viiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiiiii=env.invoke_iiiiii;
  var invoke_viiii=env.invoke_viiii;
  var _fabs=env._fabs;
  var _strftime=env._strftime;
  var _pthread_cond_wait=env._pthread_cond_wait;
  var _send=env._send;
  var _pthread_key_create=env._pthread_key_create;
  var _fread=env._fread;
  var ___ctype_b_loc=env.___ctype_b_loc;
  var ___cxa_guard_acquire=env.___cxa_guard_acquire;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _vfprintf=env._vfprintf;
  var _ungetc=env._ungetc;
  var ___cxa_free_exception=env.___cxa_free_exception;
  var ___cxa_allocate_exception=env.___cxa_allocate_exception;
  var ___cxa_find_matching_catch=env.___cxa_find_matching_catch;
  var ___ctype_toupper_loc=env.___ctype_toupper_loc;
  var _fflush=env._fflush;
  var ___cxa_guard_release=env.___cxa_guard_release;
  var __addDays=env.__addDays;
  var _pwrite=env._pwrite;
  var _strerror_r=env._strerror_r;
  var _strftime_l=env._strftime_l;
  var _pthread_mutex_lock=env._pthread_mutex_lock;
  var ___setErrNo=env.___setErrNo;
  var _sbrk=env._sbrk;
  var _uselocale=env._uselocale;
  var _catgets=env._catgets;
  var _newlocale=env._newlocale;
  var _calloc=env._calloc;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___cxa_end_catch=env.___cxa_end_catch;
  var ___resumeException=env.___resumeException;
  var __ZSt18uncaught_exceptionv=env.__ZSt18uncaught_exceptionv;
  var _sysconf=env._sysconf;
  var ___cxa_begin_catch=env.___cxa_begin_catch;
  var _pthread_getspecific=env._pthread_getspecific;
  var __arraySum=env.__arraySum;
  var ___ctype_tolower_loc=env.___ctype_tolower_loc;
  var _fileno=env._fileno;
  var _pthread_mutex_unlock=env._pthread_mutex_unlock;
  var _pthread_once=env._pthread_once;
  var _pread=env._pread;
  var _puts=env._puts;
  var _mkport=env._mkport;
  var __reallyNegative=env.__reallyNegative;
  var _getc=env._getc;
  var _write=env._write;
  var __isLeapYear=env.__isLeapYear;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___errno_location=env.___errno_location;
  var _fputs=env._fputs;
  var _recv=env._recv;
  var _pthread_setspecific=env._pthread_setspecific;
  var ___cxa_atexit=env.___cxa_atexit;
  var _fgetc=env._fgetc;
  var _fputc=env._fputc;
  var ___cxa_throw=env.___cxa_throw;
  var _freelocale=env._freelocale;
  var _pthread_cond_broadcast=env._pthread_cond_broadcast;
  var ___cxa_rethrow=env.___cxa_rethrow;
  var _abort=env._abort;
  var _catclose=env._catclose;
  var _fwrite=env._fwrite;
  var _time=env._time;
  var _fprintf=env._fprintf;
  var _strerror=env._strerror;
  var __formatString=env.__formatString;
  var _atexit=env._atexit;
  var _catopen=env._catopen;
  var _read=env._read;
  var _ftime=env._ftime;
  var SIMD_float32x4=global.SIMD.float32x4;
  var SIMD_int32x4=global.SIMD.int32x4;
  var SIMD_int32x4_check=SIMD_int32x4.check;
  var SIMD_int32x4_add=SIMD_int32x4.add;
  var SIMD_int32x4_sub=SIMD_int32x4.sub;
  var SIMD_int32x4_neg=SIMD_int32x4.neg;
  var SIMD_int32x4_mul=SIMD_int32x4.mul;
  var SIMD_int32x4_equal=SIMD_int32x4.equal;
  var SIMD_int32x4_lessThan=SIMD_int32x4.lessThan;
  var SIMD_int32x4_greaterThan=SIMD_int32x4.greaterThan;
  var SIMD_int32x4_notEqual=SIMD_int32x4.notEqual;
  var SIMD_int32x4_lessThanOrEqual=SIMD_int32x4.lessThanOrEqual;
  var SIMD_int32x4_greaterThanOrEqual=SIMD_int32x4.greaterThanOrEqual;
  var SIMD_int32x4_select=SIMD_int32x4.select;
  var SIMD_int32x4_and=SIMD_int32x4.and;
  var SIMD_int32x4_or=SIMD_int32x4.or;
  var SIMD_int32x4_xor=SIMD_int32x4.xor;
  var SIMD_int32x4_not=SIMD_int32x4.not;
  var SIMD_int32x4_splat=SIMD_int32x4.splat;
  var SIMD_int32x4_swizzle=SIMD_int32x4.swizzle;
  var SIMD_int32x4_shuffle=SIMD_int32x4.shuffle;
  var SIMD_int32x4_withX=SIMD_int32x4.withX;
  var SIMD_int32x4_withY=SIMD_int32x4.withY;
  var SIMD_int32x4_withZ=SIMD_int32x4.withZ;
  var SIMD_int32x4_withW=SIMD_int32x4.withW;
  var SIMD_int32x4_load=SIMD_int32x4.load;
  var SIMD_int32x4_store=SIMD_int32x4.store;
  var SIMD_int32x4_loadX=SIMD_int32x4.loadX;
  var SIMD_int32x4_storeX=SIMD_int32x4.storeX;
  var SIMD_int32x4_loadXY=SIMD_int32x4.loadXY;
  var SIMD_int32x4_storeXY=SIMD_int32x4.storeXY;
  var SIMD_int32x4_loadXYZ=SIMD_int32x4.loadXYZ;
  var SIMD_int32x4_storeXYZ=SIMD_int32x4.storeXYZ;
  var SIMD_int32x4_fromFloat32x4=SIMD_int32x4.fromFloat32x4;
  var SIMD_int32x4_fromFloat32x4Bits=SIMD_int32x4.fromFloat32x4Bits;
  var SIMD_int32x4_shiftRightArithmeticByScalar=SIMD_int32x4.shiftRightArithmeticByScalar;
  var SIMD_int32x4_shiftRightLogicalByScalar=SIMD_int32x4.shiftRightLogicalByScalar;
  var SIMD_int32x4_shiftLeftByScalar=SIMD_int32x4.shiftLeftByScalar;
  var SIMD_float32x4_check=SIMD_float32x4.check;
  var SIMD_float32x4_add=SIMD_float32x4.add;
  var SIMD_float32x4_sub=SIMD_float32x4.sub;
  var SIMD_float32x4_neg=SIMD_float32x4.neg;
  var SIMD_float32x4_mul=SIMD_float32x4.mul;
  var SIMD_float32x4_equal=SIMD_float32x4.equal;
  var SIMD_float32x4_lessThan=SIMD_float32x4.lessThan;
  var SIMD_float32x4_greaterThan=SIMD_float32x4.greaterThan;
  var SIMD_float32x4_notEqual=SIMD_float32x4.notEqual;
  var SIMD_float32x4_lessThanOrEqual=SIMD_float32x4.lessThanOrEqual;
  var SIMD_float32x4_greaterThanOrEqual=SIMD_float32x4.greaterThanOrEqual;
  var SIMD_float32x4_select=SIMD_float32x4.select;
  var SIMD_float32x4_and=SIMD_float32x4.and;
  var SIMD_float32x4_or=SIMD_float32x4.or;
  var SIMD_float32x4_xor=SIMD_float32x4.xor;
  var SIMD_float32x4_not=SIMD_float32x4.not;
  var SIMD_float32x4_splat=SIMD_float32x4.splat;
  var SIMD_float32x4_swizzle=SIMD_float32x4.swizzle;
  var SIMD_float32x4_shuffle=SIMD_float32x4.shuffle;
  var SIMD_float32x4_withX=SIMD_float32x4.withX;
  var SIMD_float32x4_withY=SIMD_float32x4.withY;
  var SIMD_float32x4_withZ=SIMD_float32x4.withZ;
  var SIMD_float32x4_withW=SIMD_float32x4.withW;
  var SIMD_float32x4_load=SIMD_float32x4.load;
  var SIMD_float32x4_store=SIMD_float32x4.store;
  var SIMD_float32x4_loadX=SIMD_float32x4.loadX;
  var SIMD_float32x4_storeX=SIMD_float32x4.storeX;
  var SIMD_float32x4_loadXY=SIMD_float32x4.loadXY;
  var SIMD_float32x4_storeXY=SIMD_float32x4.storeXY;
  var SIMD_float32x4_loadXYZ=SIMD_float32x4.loadXYZ;
  var SIMD_float32x4_storeXYZ=SIMD_float32x4.storeXYZ;
  var SIMD_float32x4_div=SIMD_float32x4.div;
  var SIMD_float32x4_min=SIMD_float32x4.min;
  var SIMD_float32x4_max=SIMD_float32x4.max;
  var SIMD_float32x4_minNum=SIMD_float32x4.minNum;
  var SIMD_float32x4_maxNum=SIMD_float32x4.maxNum;
  var SIMD_float32x4_sqrt=SIMD_float32x4.sqrt;
  var SIMD_float32x4_abs=SIMD_float32x4.abs;
  var SIMD_float32x4_fromInt32x4=SIMD_float32x4.fromInt32x4;
  var SIMD_float32x4_fromInt32x4Bits=SIMD_float32x4.fromInt32x4Bits;
  var tempFloat = Math_fround(0);
  const f0 = Math_fround(0);

// EMSCRIPTEN_START_FUNCS

function _printf_core($f, $fmt, $ap, $nl_arg, $nl_type) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 $nl_arg = $nl_arg | 0;
 $nl_type = $nl_type | 0;
 var $$$p$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i105$i = 0, $$0$lcssa$i112$i = 0, $$0$lcssa$i136$i = 0, $$0$lcssa$i151$i = 0, $$0$lcssa$i47 = 0, $$0$lcssa$i47$i = 0, $$0$lcssa$i52 = 0, $$0$lcssa$i54 = 0, $$0$lcssa$i54$i = 0, $$0$lcssa$i56$i = 0, $$0$lcssa$i62 = 0, $$0$lcssa$i64$i = 0, $$0$lcssa$i69 = 0, $$0$lcssa$i71$i = 0, $$0$lcssa$i76 = 0, $$0$lcssa$i77$i = 0, $$0$lcssa$i84$i = 0, $$0$lcssa$i86 = 0, $$0$lcssa$i92$i = 0, $$01$i = 0, $$01$i$i = 0, $$01$i103$i = 0, $$01$i110$i = 0, $$01$i134$i = 0, $$01$i149$i = 0, $$01$i45 = 0, $$01$i45$i = 0, $$01$i52$i = 0, $$01$i60 = 0, $$01$i62$i = 0, $$01$i67 = 0, $$01$i69$i = 0, $$01$i74 = 0, $$01$i75$i = 0, $$01$i82$i = 0, $$01$i84 = 0, $$01$lcssa$off0$i = 0, $$01$lcssa$off0$i$i = 0, $$01$lcssa$off0$i93$i = 0, $$012$i = 0, $$013$i = 0.0, $$019$i = 0, $$03$i49 = 0, $$05$i = 0, $$05$i$i = 0, $$05$i87$i = 0, $$1$i = 0.0, $$1$lcssa$i$i = 0, $$1$lcssa$i120$i = 0, $$12$i = 0, $$12$i$i = 0, $$12$i118$i = 0, $$12$i127$i = 0, $$12$i142$i = 0, $$12$i142$i$lcssa = 0, $$12$i95$i = 0, $$120$i = 0, $$2$i = 0.0, $$2$us$i = 0.0, $$2$us$us$i = 0.0, $$216$i = 0, $$26$i = 0, $$26$us$i = 0, $$28$i = 0.0, $$29$i = 0, $$3$i = 0.0, $$31$i = 0, $$317$i = 0, $$39$i = 0, $$4$i = 0.0, $$418$lcssa$i = 0, $$418193$i = 0, $$5205$i = 0, $$92 = 0, $$a$3$i = 0, $$a$3$us$i = 0, $$a$3$us310$i = 0, $$a$3312$i = 0, $$fl$4 = 0, $$lcssa106 = 0, $$lcssa283$i = 0, $$lcssa290 = 0, $$lcssa291 = 0, $$lcssa295 = 0, $$lcssa298 = 0, $$lcssa299 = 0, $$lcssa300 = 0, $$lcssa301 = 0, $$lcssa302 = 0, $$lcssa303 = 0, $$lcssa305 = 0, $$lcssa306 = 0, $$lcssa312 = 0, $$lcssa316 = 0, $$lcssa318 = 0, $$lcssa321 = 0, $$lcssa322 = 0, $$lcssa325 = 0.0, $$lcssa326 = 0, $$lcssa329 = 0, $$lcssa333 = 0, $$p$5 = 0, $$p$i = 0, $$pn$i = 0, $$pr$i = 0, $$pr154$i = 0, $$pre308$i = 0, $$z$4$us$i = 0, $0 = 0, $1 = 0, $10 = 0, $1002 = 0, $1003 = 0, $1007 = 0, $1009 = 0, $101 = 0, $1012 = 0, $1016 = 0, $1017 = 0, $102 = 0, $1021 = 0, $1023 = 0, $1026 = 0, $1030 = 0, $1031 = 0, $1035 = 0.0, $1036 = 0.0, $104 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $1060 = 0, $1061 = 0, $1063 = 0, $1065 = 0, $11 = 0, $12 = 0, $123 = 0, $126 = 0, $127 = 0, $128 = 0, $128$phi = 0, $13 = 0, $131 = 0, $132 = 0, $134 = 0, $136 = 0, $138 = 0, $139 = 0, $14 = 0, $144 = 0, $147 = 0, $15 = 0, $154 = 0, $156 = 0, $159 = 0, $16 = 0, $160 = 0, $162 = 0, $165 = 0, $166 = 0, $172 = 0, $173 = 0, $179 = 0, $180 = 0.0, $183 = 0.0, $186 = 0, $187 = 0, $194 = 0, $195 = 0, $2 = 0, $201 = 0, $213 = 0, $22 = 0, $220 = 0, $222 = 0, $226 = 0, $23 = 0, $232 = 0, $233 = 0, $245 = 0, $247 = 0, $25 = 0, $250 = 0, $251 = 0, $26 = 0, $261 = 0, $265 = 0, $267 = 0, $269 = 0, $274 = 0, $275 = 0, $276 = 0, $28 = 0, $280 = 0, $281 = 0, $292 = 0, $297 = 0, $299 = 0, $3 = 0, $301 = 0, $307 = 0, $31 = 0, $315 = 0, $32 = 0, $321 = 0, $323 = 0, $325 = 0, $330 = 0, $333 = 0, $335 = 0, $336 = 0, $344 = 0, $346 = 0, $352 = 0, $360 = 0.0, $365 = 0, $369 = 0, $37 = 0, $376 = 0, $380 = 0, $383 = 0, $384 = 0, $39 = 0, $393 = 0, $4 = 0, $40 = 0, $401 = 0.0, $402 = 0, $405 = 0, $407 = 0, $410 = 0, $415 = 0.0, $425 = 0, $428 = 0, $432 = 0, $433 = 0, $434 = 0, $438 = 0, $439 = 0, $44 = 0, $450 = 0, $46 = 0, $462 = 0, $465 = 0, $47 = 0, $471 = 0, $480 = 0, $486 = 0, $495 = 0, $5 = 0, $501 = 0, $51 = 0, $513 = 0, $518 = 0, $519 = 0, $521 = 0, $522 = 0, $530 = 0, $537 = 0, $539 = 0, $541 = 0, $550 = 0, $56 = 0, $560 = 0, $561 = 0, $563 = 0, $564 = 0, $565 = 0, $571 = 0, $573 = 0, $576 = 0, $578 = 0, $579 = 0, $580 = 0, $582 = 0, $584 = 0, $584$phi = 0, $587 = 0, $589 = 0, $59 = 0, $593 = 0, $598 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $61 = 0, $620 = 0, $622 = 0, $625 = 0, $626 = 0, $630 = 0, $638 = 0, $639 = 0, $640 = 0, $644 = 0, $65 = 0, $665 = 0, $666 = 0, $669 = 0, $67 = 0, $674 = 0, $676 = 0, $683 = 0, $684 = 0, $685 = 0, $688 = 0, $689 = 0, $690 = 0, $697 = 0, $7 = 0, $707 = 0, $710 = 0, $712 = 0, $714 = 0, $716 = 0, $721 = 0, $722 = 0, $725 = 0, $727 = 0, $729 = 0, $731 = 0, $745 = 0, $750 = 0, $759 = 0, $760 = 0, $764 = 0, $767 = 0, $770 = 0, $771 = 0, $773 = 0, $777 = 0, $781 = 0, $782 = 0, $783 = 0, $787 = 0, $788 = 0, $799 = 0, $8 = 0, $805 = 0, $815 = 0, $820 = 0, $821 = 0, $823 = 0, $824 = 0, $832 = 0, $840 = 0, $841 = 0, $843 = 0, $845 = 0, $846 = 0, $851 = 0, $856 = 0, $86 = 0, $861 = 0, $870 = 0, $875 = 0, $879 = 0, $883 = 0, $884 = 0, $884$phi = 0, $885 = 0, $898 = 0, $899 = 0, $9 = 0, $904 = 0, $910 = 0, $914 = 0, $916 = 0, $92 = 0, $93 = 0, $930 = 0, $939 = 0, $94 = 0, $941 = 0, $943 = 0, $945 = 0, $946 = 0, $954 = 0, $962 = 0, $970 = 0, $980 = 0, $982 = 0, $984 = 0, $985 = 0, $988 = 0, $99 = 0, $992 = 0, $993 = 0, $997 = 0, $999 = 0, $a$0 = 0, $a$1 = 0, $a$1$lcssa$i = 0, $a$1261$i = 0, $a$2 = 0, $a$2$ph$i = 0, $a$3$lcssa$i = 0, $a$3248$i = 0, $a$3248$us$i = 0, $a$5$lcssa$i = 0, $a$5223$i = 0, $a$6$i = 0, $a$7$i = 0, $a$8$ph$i = 0, $a$8$ph294$i = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0, $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current29 = 0, $arglist_current32 = 0, $arglist_current35 = 0, $arglist_current38 = 0, $arglist_current41 = 0, $arglist_current44 = 0, $arglist_current47 = 0, $arglist_current5 = 0, $arglist_current50 = 0, $arglist_current53 = 0, $arglist_current56 = 0, $arglist_current59 = 0, $arglist_current62 = 0, $arglist_current8 = 0, $argpos$0 = 0, $big$i = 0, $buf = 0, $buf$i = 0, $carry$0254$i = 0, $carry3$0242$i = 0, $carry3$0242$us$i = 0, $cnt$0 = 0, $cnt$1 = 0, $cnt$1$lcssa = 0, $d$0$i = 0, $d$0253$i = 0, $d$0255$i = 0, $d$1241$i = 0, $d$1241$us$i = 0, $d$2$lcssa$i = 0, $d$2222$i = 0, $d$3$i = 0, $d$4199$i = 0, $d$5192$i = 0, $d$6204$i = 0, $e$0237$i = 0, $e$1$i = 0, $e$2218$i = 0, $e$3$i = 0, $e$4$ph$i = 0, $e2$i = 0, $ebuf0$i = 0, $estr$0$i = 0, $estr$1$lcssa$i = 0, $estr$1$ph$i = 0, $estr$1209$i = 0, $estr$2$i = 0, $fl$0110 = 0, $fl$0170 = 0, $fl$1 = 0, $fl$1$ = 0, $fl$3 = 0, $fl$4 = 0, $fl$6 = 0, $i$0$lcssa = 0, $i$0$lcssa273 = 0, $i$0175 = 0, $i$0236$i = 0, $i$03$i = 0, $i$03$i31 = 0, $i$1$lcssa$i = 0, $i$1186 = 0, $i$1230$i = 0, $i$2162 = 0, $i$2217$i = 0, $i$3160 = 0, $i$3213$i = 0, $isdigittmp = 0, $isdigittmp1$i = 0, $isdigittmp1$i28 = 0, $isdigittmp11 = 0, $isdigittmp4$i = 0, $isdigittmp4$i30 = 0, $isdigittmp9 = 0, $j$0229$i = 0, $j$0231$i = 0, $j$1214$i = 0, $j$2$i = 0, $l$0 = 0, $l$0$i = 0, $l$1174 = 0, $l$2 = 0, $l10n$0 = 0, $l10n$0$lcssa = 0, $l10n$1 = 0, $l10n$2 = 0, $l10n$3 = 0, $mb = 0, $or$cond19 = 0, $p$0 = 0, $p$1 = 0, $p$2 = 0, $p$4272 = 0, $p$5 = 0, $pad$i = 0, $pl$0 = 0, $pl$0$i = 0, $pl$1 = 0, $pl$1$i = 0, $pl$2 = 0, $prefix$0 = 0, $prefix$0$$i = 0, $prefix$0$i = 0, $prefix$1 = 0, $prefix$2 = 0, $r$0$a$8$i = 0, $re$0$i = 0, $re$1187$i = 0, $round$0186$i = 0.0, $round6$1$i = 0.0, $s$0$i = 0, $s$0$us$i = 0, $s$0$us$us$i = 0, $s$1$i = 0, $s$1$lcssa$i = 0, $s$1$us$i = 0, $s$1$us$us$i = 0, $s1$0$i = 0, $s7$0196$i = 0, $s7$1$i = 0, $s8$0$lcssa$i = 0, $s8$0188$i = 0, $s9$0$i = 0, $s9$1200$i = 0, $s9$2$i = 0, $small$0$i = 0.0, $small$1$i = 0.0, $st$0 = 0, $st$0$lcssa296 = 0, $storemerge = 0, $storemerge13 = 0, $storemerge8108 = 0, $storemerge8169 = 0, $t$0 = 0, $t$1 = 0, $uglygep296$i = 0, $uglygep300301$i = 0, $umax$i = 0, $w$0 = 0, $w$1 = 0, $w$2 = 0, $wc = 0, $ws$0176 = 0, $ws$1187 = 0, $y$03$i = 0, $y$03$i$i = 0, $y$03$i117$i = 0, $y$03$i126$i = 0, $y$03$i141$i = 0, $y$03$i94$i = 0, $z$0$i = 0, $z$0$lcssa = 0, $z$0163 = 0, $z$1$lcssa$i = 0, $z$1260$i = 0, $z$2 = 0, $z$2$i = 0, $z$2$i$lcssa = 0, $z$3$lcssa$i = 0, $z$3247$i = 0, $z$3247$us$i = 0, $z$4$i = 0, $z$4$us$i = 0, $z$5$i = 0, $z$6$$i = 0, $z$6$i = 0, $z$6$i$lcssa = 0, $z$6$ph$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 864 | 0;
 $big$i = sp + 16 | 0;
 $e2$i = sp + 8 | 0;
 $buf$i = sp + 836 | 0;
 $0 = $buf$i;
 $ebuf0$i = sp + 824 | 0;
 $pad$i = sp + 568 | 0;
 $buf = sp + 528 | 0;
 $wc = sp;
 $mb = sp + 520 | 0;
 $1 = ($f | 0) != 0;
 $2 = $buf + 40 | 0;
 $3 = $2;
 $4 = $buf + 39 | 0;
 $5 = $wc + 4 | 0;
 $6 = $wc;
 $7 = $ebuf0$i + 12 | 0;
 $8 = $ebuf0$i + 11 | 0;
 $9 = $7;
 $10 = $9 - $0 | 0;
 $11 = -2 - $0 | 0;
 $12 = $9 + 2 | 0;
 $13 = $big$i + 288 | 0;
 $14 = $buf$i + 9 | 0;
 $15 = $14;
 $16 = $buf$i + 8 | 0;
 $1044 = 0;
 $1045 = 0;
 $23 = $fmt;
 $cnt$0 = 0;
 $l$0 = 0;
 $l10n$0 = 0;
 L1 : while (1) {
  do if (($cnt$0 | 0) > -1) if (($l$0 | 0) > (2147483647 - $cnt$0 | 0)) {
   HEAP32[(___errno_location() | 0) >> 2] = 75;
   $cnt$1 = -1;
   break;
  } else {
   $cnt$1 = $l$0 + $cnt$0 | 0;
   break;
  } else $cnt$1 = $cnt$0; while (0);
  $22 = HEAP8[$23 >> 0] | 0;
  if (!($22 << 24 >> 24)) {
   $cnt$1$lcssa = $cnt$1;
   $l10n$0$lcssa = $l10n$0;
   label = 351;
   break;
  } else {
   $1046 = $22;
   $26 = $23;
  }
  while (1) {
   if ($1046 << 24 >> 24 == 37) {
    $28 = $26;
    $z$0163 = $26;
    label = 9;
    break;
   } else if (!($1046 << 24 >> 24)) {
    $$lcssa106 = $26;
    $z$0$lcssa = $26;
    break;
   }
   $25 = $26 + 1 | 0;
   $1046 = HEAP8[$25 >> 0] | 0;
   $26 = $25;
  }
  L12 : do if ((label | 0) == 9) while (1) {
   label = 0;
   if ((HEAP8[$28 + 1 >> 0] | 0) != 37) {
    $$lcssa106 = $28;
    $z$0$lcssa = $z$0163;
    break L12;
   }
   $31 = $z$0163 + 1 | 0;
   $32 = $28 + 2 | 0;
   if ((HEAP8[$32 >> 0] | 0) == 37) {
    $28 = $32;
    $z$0163 = $31;
    label = 9;
   } else {
    $$lcssa106 = $32;
    $z$0$lcssa = $31;
    break;
   }
  } while (0);
  $37 = $z$0$lcssa - $23 | 0;
  if ($1) ___fwritex($23, $37, $f) | 0;
  if (($z$0$lcssa | 0) != ($23 | 0)) {
   $23 = $$lcssa106;
   $cnt$0 = $cnt$1;
   $l$0 = $37;
   continue;
  }
  $39 = $$lcssa106 + 1 | 0;
  $40 = HEAP8[$39 >> 0] | 0;
  $isdigittmp = ($40 << 24 >> 24) + -48 | 0;
  if ($isdigittmp >>> 0 < 10) {
   $44 = (HEAP8[$$lcssa106 + 2 >> 0] | 0) == 36;
   $$92 = $44 ? $$lcssa106 + 3 | 0 : $39;
   $47 = HEAP8[$$92 >> 0] | 0;
   $argpos$0 = $44 ? $isdigittmp : -1;
   $l10n$1 = $44 ? 1 : $l10n$0;
   $storemerge = $$92;
  } else {
   $47 = $40;
   $argpos$0 = -1;
   $l10n$1 = $l10n$0;
   $storemerge = $39;
  }
  $46 = $47 << 24 >> 24;
  L24 : do if (($46 & -32 | 0) == 32) {
   $51 = $46;
   $56 = $47;
   $fl$0170 = 0;
   $storemerge8169 = $storemerge;
   while (1) {
    if (!(1 << $51 + -32 & 75913)) {
     $65 = $56;
     $fl$0110 = $fl$0170;
     $storemerge8108 = $storemerge8169;
     break L24;
    }
    $59 = 1 << ($56 << 24 >> 24) + -32 | $fl$0170;
    $60 = $storemerge8169 + 1 | 0;
    $61 = HEAP8[$60 >> 0] | 0;
    $51 = $61 << 24 >> 24;
    if (($51 & -32 | 0) != 32) {
     $65 = $61;
     $fl$0110 = $59;
     $storemerge8108 = $60;
     break;
    } else {
     $56 = $61;
     $fl$0170 = $59;
     $storemerge8169 = $60;
    }
   }
  } else {
   $65 = $47;
   $fl$0110 = 0;
   $storemerge8108 = $storemerge;
  } while (0);
  do if ($65 << 24 >> 24 == 42) {
   $67 = $storemerge8108 + 1 | 0;
   $isdigittmp11 = (HEAP8[$67 >> 0] | 0) + -48 | 0;
   if ($isdigittmp11 >>> 0 < 10) if ((HEAP8[$storemerge8108 + 2 >> 0] | 0) == 36) {
    HEAP32[$nl_type + ($isdigittmp11 << 2) >> 2] = 10;
    $l10n$2 = 1;
    $storemerge13 = $storemerge8108 + 3 | 0;
    $w$0 = HEAP32[$nl_arg + ((HEAP8[$67 >> 0] | 0) + -48 << 3) >> 2] | 0;
   } else label = 23; else label = 23;
   if ((label | 0) == 23) {
    label = 0;
    if ($l10n$1) {
     $$0 = -1;
     label = 369;
     break L1;
    }
    if (!$1) {
     $99 = $67;
     $fl$1 = $fl$0110;
     $l10n$3 = 0;
     $w$1 = 0;
     break;
    }
    $arglist_current = HEAP32[$ap >> 2] | 0;
    $86 = HEAP32[$arglist_current >> 2] | 0;
    HEAP32[$ap >> 2] = $arglist_current + 4;
    $l10n$2 = 0;
    $storemerge13 = $67;
    $w$0 = $86;
   }
   if (($w$0 | 0) < 0) {
    $99 = $storemerge13;
    $fl$1 = $fl$0110 | 8192;
    $l10n$3 = $l10n$2;
    $w$1 = 0 - $w$0 | 0;
   } else {
    $99 = $storemerge13;
    $fl$1 = $fl$0110;
    $l10n$3 = $l10n$2;
    $w$1 = $w$0;
   }
  } else {
   $isdigittmp1$i = ($65 << 24 >> 24) + -48 | 0;
   if ($isdigittmp1$i >>> 0 < 10) {
    $94 = $storemerge8108;
    $i$03$i = 0;
    $isdigittmp4$i = $isdigittmp1$i;
    while (1) {
     $92 = ($i$03$i * 10 | 0) + $isdigittmp4$i | 0;
     $93 = $94 + 1 | 0;
     $isdigittmp4$i = (HEAP8[$93 >> 0] | 0) + -48 | 0;
     if ($isdigittmp4$i >>> 0 >= 10) {
      $$lcssa290 = $92;
      $$lcssa291 = $93;
      break;
     } else {
      $94 = $93;
      $i$03$i = $92;
     }
    }
    if (($$lcssa290 | 0) < 0) {
     $$0 = -1;
     label = 369;
     break L1;
    } else {
     $99 = $$lcssa291;
     $fl$1 = $fl$0110;
     $l10n$3 = $l10n$1;
     $w$1 = $$lcssa290;
    }
   } else {
    $99 = $storemerge8108;
    $fl$1 = $fl$0110;
    $l10n$3 = $l10n$1;
    $w$1 = 0;
   }
  } while (0);
  L45 : do if ((HEAP8[$99 >> 0] | 0) == 46) {
   $101 = $99 + 1 | 0;
   $102 = HEAP8[$101 >> 0] | 0;
   if ($102 << 24 >> 24 != 42) {
    $isdigittmp1$i28 = ($102 << 24 >> 24) + -48 | 0;
    if ($isdigittmp1$i28 >>> 0 < 10) {
     $1048 = $101;
     $128 = $99;
     $i$03$i31 = 0;
     $isdigittmp4$i30 = $isdigittmp1$i28;
    } else {
     $1047 = $101;
     $p$0 = 0;
     break;
    }
    while (1) {
     $126 = ($i$03$i31 * 10 | 0) + $isdigittmp4$i30 | 0;
     $127 = $128 + 2 | 0;
     $isdigittmp4$i30 = (HEAP8[$127 >> 0] | 0) + -48 | 0;
     if ($isdigittmp4$i30 >>> 0 >= 10) {
      $1047 = $127;
      $p$0 = $126;
      break L45;
     } else {
      $128$phi = $1048;
      $1048 = $127;
      $i$03$i31 = $126;
      $128 = $128$phi;
     }
    }
   }
   $104 = $99 + 2 | 0;
   $isdigittmp9 = (HEAP8[$104 >> 0] | 0) + -48 | 0;
   if ($isdigittmp9 >>> 0 < 10) if ((HEAP8[$99 + 3 >> 0] | 0) == 36) {
    HEAP32[$nl_type + ($isdigittmp9 << 2) >> 2] = 10;
    $1047 = $99 + 4 | 0;
    $p$0 = HEAP32[$nl_arg + ((HEAP8[$104 >> 0] | 0) + -48 << 3) >> 2] | 0;
    break;
   }
   if ($l10n$3) {
    $$0 = -1;
    label = 369;
    break L1;
   }
   if ($1) {
    $arglist_current2 = HEAP32[$ap >> 2] | 0;
    $123 = HEAP32[$arglist_current2 >> 2] | 0;
    HEAP32[$ap >> 2] = $arglist_current2 + 4;
    $1047 = $104;
    $p$0 = $123;
   } else {
    $1047 = $104;
    $p$0 = 0;
   }
  } else {
   $1047 = $99;
   $p$0 = -1;
  } while (0);
  $132 = $1047;
  $st$0 = 0;
  while (1) {
   $131 = HEAP8[$132 >> 0] | 0;
   $134 = ($131 << 24 >> 24) + -65 | 0;
   if ($134 >>> 0 > 57) {
    $$0 = -1;
    label = 369;
    break L1;
   }
   $136 = $132 + 1 | 0;
   $138 = HEAP8[14864 + ($st$0 * 58 | 0) + $134 >> 0] | 0;
   $139 = $138 & 255;
   if (($139 + -1 | 0) >>> 0 < 8) {
    $132 = $136;
    $st$0 = $139;
   } else {
    $$lcssa295 = $132;
    $$lcssa298 = $131;
    $$lcssa299 = $136;
    $$lcssa300 = $138;
    $$lcssa301 = $139;
    $st$0$lcssa296 = $st$0;
    break;
   }
  }
  if (!($$lcssa300 << 24 >> 24)) {
   $$0 = -1;
   label = 369;
   break;
  }
  $144 = ($argpos$0 | 0) > -1;
  L64 : do if ($$lcssa300 << 24 >> 24 == 19) if ($144) {
   $$0 = -1;
   label = 369;
   break L1;
  } else {
   $1049 = $1044;
   $1050 = $1045;
   label = 62;
  } else {
   if ($144) {
    HEAP32[$nl_type + ($argpos$0 << 2) >> 2] = $$lcssa301;
    $147 = $nl_arg + ($argpos$0 << 3) | 0;
    $1049 = HEAP32[$147 >> 2] | 0;
    $1050 = HEAP32[$147 + 4 >> 2] | 0;
    label = 62;
    break;
   }
   if (!$1) {
    $$0 = 0;
    label = 369;
    break L1;
   }
   if (($$lcssa300 & 255) > 20) {
    $187 = $$lcssa298;
    $195 = $1044;
    $222 = $1045;
   } else do switch ($$lcssa301 | 0) {
   case 10:
    {
     $arglist_current8 = HEAP32[$ap >> 2] | 0;
     $156 = HEAP32[$arglist_current8 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current8 + 4;
     $1051 = (($156 | 0) < 0) << 31 >> 31;
     $1052 = $156;
     label = 63;
     break L64;
     break;
    }
   case 13:
    {
     $arglist_current17 = HEAP32[$ap >> 2] | 0;
     $166 = HEAP32[$arglist_current17 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current17 + 4;
     $1051 = ((($166 & 65535) << 16 >> 16 | 0) < 0) << 31 >> 31;
     $1052 = $166 << 16 >> 16;
     label = 63;
     break L64;
     break;
    }
   case 9:
    {
     $arglist_current5 = HEAP32[$ap >> 2] | 0;
     $154 = HEAP32[$arglist_current5 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current5 + 4;
     $1051 = $1045;
     $1052 = $154;
     label = 63;
     break L64;
     break;
    }
   case 11:
    {
     $arglist_current11 = HEAP32[$ap >> 2] | 0;
     $159 = HEAP32[$arglist_current11 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current11 + 4;
     $1051 = 0;
     $1052 = $159;
     label = 63;
     break L64;
     break;
    }
   case 15:
    {
     $arglist_current23 = HEAP32[$ap >> 2] | 0;
     $173 = HEAP32[$arglist_current23 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current23 + 4;
     $1051 = ((($173 & 255) << 24 >> 24 | 0) < 0) << 31 >> 31;
     $1052 = $173 << 24 >> 24;
     label = 63;
     break L64;
     break;
    }
   case 14:
    {
     $arglist_current20 = HEAP32[$ap >> 2] | 0;
     $172 = HEAP32[$arglist_current20 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current20 + 4;
     $1051 = 0;
     $1052 = $172 & 65535;
     label = 63;
     break L64;
     break;
    }
   case 16:
    {
     $arglist_current26 = HEAP32[$ap >> 2] | 0;
     $179 = HEAP32[$arglist_current26 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current26 + 4;
     $1051 = 0;
     $1052 = $179 & 255;
     label = 63;
     break L64;
     break;
    }
   case 12:
    {
     $arglist_current14 = HEAP32[$ap >> 2] | 0;
     $160 = $arglist_current14;
     $162 = HEAP32[$160 >> 2] | 0;
     $165 = HEAP32[$160 + 4 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current14 + 8;
     $1051 = $165;
     $1052 = $162;
     label = 63;
     break L64;
     break;
    }
   case 18:
    {
     $arglist_current32 = HEAP32[$ap >> 2] | 0;
     HEAP32[tempDoublePtr >> 2] = HEAP32[$arglist_current32 >> 2];
     HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arglist_current32 + 4 >> 2];
     $183 = +HEAPF64[tempDoublePtr >> 3];
     HEAP32[$ap >> 2] = $arglist_current32 + 8;
     HEAPF64[tempDoublePtr >> 3] = $183;
     $1049 = HEAP32[tempDoublePtr >> 2] | 0;
     $1050 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
     label = 62;
     break L64;
     break;
    }
   case 17:
    {
     $arglist_current29 = HEAP32[$ap >> 2] | 0;
     HEAP32[tempDoublePtr >> 2] = HEAP32[$arglist_current29 >> 2];
     HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arglist_current29 + 4 >> 2];
     $180 = +HEAPF64[tempDoublePtr >> 3];
     HEAP32[$ap >> 2] = $arglist_current29 + 8;
     HEAPF64[tempDoublePtr >> 3] = $180;
     $1051 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
     $1052 = HEAP32[tempDoublePtr >> 2] | 0;
     label = 63;
     break L64;
     break;
    }
   default:
    {
     $1051 = $1045;
     $1052 = $1044;
     label = 63;
     break L64;
    }
   } while (0);
  } while (0);
  if ((label | 0) == 62) {
   label = 0;
   if ($1) {
    $1051 = $1050;
    $1052 = $1049;
    label = 63;
   } else {
    $1044 = $1049;
    $1045 = $1050;
    $23 = $$lcssa299;
    $cnt$0 = $cnt$1;
    $l$0 = $37;
    $l10n$0 = $l10n$3;
    continue;
   }
  }
  if ((label | 0) == 63) {
   label = 0;
   $187 = HEAP8[$$lcssa295 >> 0] | 0;
   $195 = $1052;
   $222 = $1051;
  }
  $186 = $187 << 24 >> 24;
  $t$0 = ($st$0$lcssa296 | 0) != 0 & ($186 & 15 | 0) == 3 ? $186 & -33 : $186;
  $194 = $fl$1 & -65537;
  $fl$1$ = ($fl$1 & 8192 | 0) == 0 ? $fl$1 : $194;
  L88 : do switch ($t$0 | 0) {
  case 110:
   {
    switch ($st$0$lcssa296 | 0) {
    case 7:
     {
      $213 = $195;
      HEAP32[$213 >> 2] = $cnt$1;
      HEAP32[$213 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
      $1044 = $195;
      $1045 = $222;
      $23 = $$lcssa299;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 0:
     {
      HEAP32[$195 >> 2] = $cnt$1;
      $1044 = $195;
      $1045 = $222;
      $23 = $$lcssa299;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 1:
     {
      HEAP32[$195 >> 2] = $cnt$1;
      $1044 = $195;
      $1045 = $222;
      $23 = $$lcssa299;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 2:
     {
      $201 = $195;
      HEAP32[$201 >> 2] = $cnt$1;
      HEAP32[$201 + 4 >> 2] = (($cnt$1 | 0) < 0) << 31 >> 31;
      $1044 = $195;
      $1045 = $222;
      $23 = $$lcssa299;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 3:
     {
      HEAP16[$195 >> 1] = $cnt$1;
      $1044 = $195;
      $1045 = $222;
      $23 = $$lcssa299;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 4:
     {
      HEAP8[$195 >> 0] = $cnt$1;
      $1044 = $195;
      $1045 = $222;
      $23 = $$lcssa299;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    case 6:
     {
      HEAP32[$195 >> 2] = $cnt$1;
      $1044 = $195;
      $1045 = $222;
      $23 = $$lcssa299;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
      break;
     }
    default:
     {
      $1044 = $195;
      $1045 = $222;
      $23 = $$lcssa299;
      $cnt$0 = $cnt$1;
      $l$0 = $37;
      $l10n$0 = $l10n$3;
      continue L1;
     }
    }
    break;
   }
  case 112:
   {
    $fl$3 = $fl$1$ | 8;
    $p$1 = $p$0 >>> 0 > 8 ? $p$0 : 8;
    $t$1 = 120;
    label = 74;
    break;
   }
  case 111:
   {
    $245 = ($195 | 0) == 0 & ($222 | 0) == 0;
    if ($245) $$0$lcssa$i52 = $2; else {
     $$03$i49 = $2;
     $247 = $195;
     $251 = $222;
     while (1) {
      $250 = $$03$i49 + -1 | 0;
      HEAP8[$250 >> 0] = $247 & 7 | 48;
      $247 = _bitshift64Lshr($247 | 0, $251 | 0, 3) | 0;
      $251 = tempRet0;
      if (($247 | 0) == 0 & ($251 | 0) == 0) {
       $$0$lcssa$i52 = $250;
       break;
      } else $$03$i49 = $250;
     }
    }
    $or$cond19 = ($fl$1$ & 8 | 0) == 0 | $245;
    $297 = $195;
    $299 = $222;
    $a$0 = $$0$lcssa$i52;
    $fl$4 = $fl$1$;
    $p$2 = $p$0;
    $pl$1 = $or$cond19 & 1 ^ 1;
    $prefix$1 = $or$cond19 ? 15328 : 15333;
    label = 90;
    break;
   }
  case 83:
   {
    $321 = $195;
    if (!$p$0) {
     $1059 = $195;
     $1060 = $321;
     $i$0$lcssa273 = 0;
     label = 105;
    } else {
     $1057 = $321;
     $1058 = $195;
     $p$4272 = $p$0;
     label = 100;
    }
    break;
   }
  case 67:
   {
    HEAP32[$wc >> 2] = $195;
    HEAP32[$5 >> 2] = 0;
    $1057 = $wc;
    $1058 = $6;
    $p$4272 = -1;
    label = 100;
    break;
   }
  case 99:
   {
    HEAP8[$4 >> 0] = $195;
    $1053 = $195;
    $1054 = $222;
    $a$2 = $4;
    $fl$6 = $194;
    $p$5 = 1;
    $pl$2 = 0;
    $prefix$2 = 15328;
    $z$2 = $2;
    break;
   }
  case 105:
  case 100:
   {
    if (($222 | 0) < 0) {
     $261 = _i64Subtract(0, 0, $195 | 0, $222 | 0) | 0;
     $267 = tempRet0;
     $269 = $261;
     $pl$0 = 1;
     $prefix$0 = 15328;
     label = 85;
     break L88;
    }
    if (!($fl$1$ & 2048)) {
     $265 = $fl$1$ & 1;
     $267 = $222;
     $269 = $195;
     $pl$0 = $265;
     $prefix$0 = ($265 | 0) == 0 ? 15328 : 15330;
     label = 85;
    } else {
     $267 = $222;
     $269 = $195;
     $pl$0 = 1;
     $prefix$0 = 15329;
     label = 85;
    }
    break;
   }
  case 65:
  case 71:
  case 70:
  case 69:
  case 97:
  case 103:
  case 102:
  case 101:
   {
    HEAP32[tempDoublePtr >> 2] = $195;
    HEAP32[tempDoublePtr + 4 >> 2] = $222;
    $360 = +HEAPF64[tempDoublePtr >> 3];
    HEAP32[$e2$i >> 2] = 0;
    if (($222 | 0) < 0) {
     $$013$i = -$360;
     $pl$0$i = 1;
     $prefix$0$i = 15352;
    } else if (!($fl$1$ & 2048)) {
     $365 = $fl$1$ & 1;
     $$013$i = $360;
     $pl$0$i = $365;
     $prefix$0$i = ($365 | 0) == 0 ? 15353 : 15358;
    } else {
     $$013$i = $360;
     $pl$0$i = 1;
     $prefix$0$i = 15355;
    }
    HEAPF64[tempDoublePtr >> 3] = $$013$i;
    $369 = HEAP32[tempDoublePtr + 4 >> 2] & 2146435072;
    if (!($369 >>> 0 < 2146435072 | ($369 | 0) == 2146435072 & 0 < 0)) {
     $376 = ($t$0 & 32 | 0) != 0;
     if ($$013$i != $$013$i | 0.0 != 0.0) {
      $pl$1$i = 0;
      $s1$0$i = $376 ? 15392 : 15400;
     } else {
      $pl$1$i = $pl$0$i;
      $s1$0$i = $376 ? 15376 : 15384;
     }
     $380 = $pl$1$i + 3 | 0;
     $383 = ($w$1 | 0) > ($380 | 0);
     if (($fl$1$ & 8192 | 0) == 0 & $383) {
      $384 = $w$1 - $380 | 0;
      _memset($pad$i | 0, 32, ($384 >>> 0 > 256 ? 256 : $384) | 0) | 0;
      if ($384 >>> 0 > 255) {
       $$01$i45$i = $384;
       do {
        ___fwritex($pad$i, 256, $f) | 0;
        $$01$i45$i = $$01$i45$i + -256 | 0;
       } while ($$01$i45$i >>> 0 > 255);
       $$0$lcssa$i47$i = $384 & 255;
      } else $$0$lcssa$i47$i = $384;
      ___fwritex($pad$i, $$0$lcssa$i47$i, $f) | 0;
     }
     ___fwritex($prefix$0$i, $pl$1$i, $f) | 0;
     ___fwritex($s1$0$i, 3, $f) | 0;
     if (($fl$1$ & 73728 | 0) == 8192 & $383) {
      $393 = $w$1 - $380 | 0;
      _memset($pad$i | 0, 32, ($393 >>> 0 > 256 ? 256 : $393) | 0) | 0;
      if ($393 >>> 0 > 255) {
       $$01$i52$i = $393;
       do {
        ___fwritex($pad$i, 256, $f) | 0;
        $$01$i52$i = $$01$i52$i + -256 | 0;
       } while ($$01$i52$i >>> 0 > 255);
       $$0$lcssa$i54$i = $393 & 255;
      } else $$0$lcssa$i54$i = $393;
      ___fwritex($pad$i, $$0$lcssa$i54$i, $f) | 0;
     }
     $1044 = $195;
     $1045 = $222;
     $23 = $$lcssa299;
     $cnt$0 = $cnt$1;
     $l$0 = $383 ? $w$1 : $380;
     $l10n$0 = $l10n$3;
     continue L1;
    }
    $401 = +_frexpl($$013$i, $e2$i) * 2.0;
    $402 = $401 != 0.0;
    if ($402) HEAP32[$e2$i >> 2] = (HEAP32[$e2$i >> 2] | 0) + -1;
    $405 = $t$0 | 32;
    if (($405 | 0) == 97) {
     $407 = $t$0 & 32;
     $prefix$0$$i = ($407 | 0) == 0 ? $prefix$0$i : $prefix$0$i + 9 | 0;
     $410 = $pl$0$i | 2;
     $re$0$i = $p$0 >>> 0 > 11 ? 0 : 12 - $p$0 | 0;
     do if (!$re$0$i) $$1$i = $401; else {
      $re$1187$i = $re$0$i;
      $round$0186$i = 8.0;
      while (1) {
       $re$1187$i = $re$1187$i + -1 | 0;
       $415 = $round$0186$i * 16.0;
       if (!$re$1187$i) {
        $$lcssa325 = $415;
        break;
       } else $round$0186$i = $415;
      }
      if ((HEAP8[$prefix$0$$i >> 0] | 0) == 45) {
       $$1$i = -($$lcssa325 + (-$401 - $$lcssa325));
       break;
      } else {
       $$1$i = $401 + $$lcssa325 - $$lcssa325;
       break;
      }
     } while (0);
     $425 = HEAP32[$e2$i >> 2] | 0;
     $428 = ($425 | 0) < 0 ? 0 - $425 | 0 : $425;
     if (($428 | 0) < 0) {
      $$05$i$i = $7;
      $432 = $428;
      $433 = (($428 | 0) < 0) << 31 >> 31;
      while (1) {
       $434 = ___uremdi3($432 | 0, $433 | 0, 10, 0) | 0;
       $438 = $$05$i$i + -1 | 0;
       HEAP8[$438 >> 0] = $434 | 48;
       $439 = ___udivdi3($432 | 0, $433 | 0, 10, 0) | 0;
       if ($433 >>> 0 > 9 | ($433 | 0) == 9 & $432 >>> 0 > 4294967295) {
        $$05$i$i = $438;
        $432 = $439;
        $433 = tempRet0;
       } else {
        $$lcssa326 = $438;
        $1061 = $439;
        break;
       }
      }
      $$0$lcssa$i56$i = $$lcssa326;
      $$01$lcssa$off0$i$i = $1061;
     } else {
      $$0$lcssa$i56$i = $7;
      $$01$lcssa$off0$i$i = $428;
     }
     if (!$$01$lcssa$off0$i$i) $$1$lcssa$i$i = $$0$lcssa$i56$i; else {
      $$12$i$i = $$0$lcssa$i56$i;
      $y$03$i$i = $$01$lcssa$off0$i$i;
      while (1) {
       $450 = $$12$i$i + -1 | 0;
       HEAP8[$450 >> 0] = ($y$03$i$i >>> 0) % 10 | 0 | 48;
       if ($y$03$i$i >>> 0 < 10) {
        $$1$lcssa$i$i = $450;
        break;
       } else {
        $$12$i$i = $450;
        $y$03$i$i = ($y$03$i$i >>> 0) / 10 | 0;
       }
      }
     }
     if (($$1$lcssa$i$i | 0) == ($7 | 0)) {
      HEAP8[$8 >> 0] = 48;
      $estr$0$i = $8;
     } else $estr$0$i = $$1$lcssa$i$i;
     HEAP8[$estr$0$i + -1 >> 0] = (HEAP32[$e2$i >> 2] >> 31 & 2) + 43;
     $462 = $estr$0$i + -2 | 0;
     HEAP8[$462 >> 0] = $t$0 + 15;
     if (($p$0 | 0) < 1) if (!($fl$1$ & 8)) {
      $$2$us$us$i = $$1$i;
      $s$0$us$us$i = $buf$i;
      while (1) {
       $465 = ~~$$2$us$us$i;
       $471 = $s$0$us$us$i + 1 | 0;
       HEAP8[$s$0$us$us$i >> 0] = HEAPU8[15408 + $465 >> 0] | $407;
       $$2$us$us$i = ($$2$us$us$i - +($465 | 0)) * 16.0;
       if (($471 - $0 | 0) != 1 | $$2$us$us$i == 0.0) $s$1$us$us$i = $471; else {
        HEAP8[$471 >> 0] = 46;
        $s$1$us$us$i = $s$0$us$us$i + 2 | 0;
       }
       if (!($$2$us$us$i != 0.0)) {
        $s$1$lcssa$i = $s$1$us$us$i;
        break;
       } else $s$0$us$us$i = $s$1$us$us$i;
      }
     } else {
      $$2$us$i = $$1$i;
      $s$0$us$i = $buf$i;
      while (1) {
       $480 = ~~$$2$us$i;
       $486 = $s$0$us$i + 1 | 0;
       HEAP8[$s$0$us$i >> 0] = HEAPU8[15408 + $480 >> 0] | $407;
       $$2$us$i = ($$2$us$i - +($480 | 0)) * 16.0;
       if (($486 - $0 | 0) == 1) {
        HEAP8[$486 >> 0] = 46;
        $s$1$us$i = $s$0$us$i + 2 | 0;
       } else $s$1$us$i = $486;
       if (!($$2$us$i != 0.0)) {
        $s$1$lcssa$i = $s$1$us$i;
        break;
       } else $s$0$us$i = $s$1$us$i;
      }
     } else {
      $$2$i = $$1$i;
      $s$0$i = $buf$i;
      while (1) {
       $495 = ~~$$2$i;
       $501 = $s$0$i + 1 | 0;
       HEAP8[$s$0$i >> 0] = HEAPU8[15408 + $495 >> 0] | $407;
       $$2$i = ($$2$i - +($495 | 0)) * 16.0;
       if (($501 - $0 | 0) == 1) {
        HEAP8[$501 >> 0] = 46;
        $s$1$i = $s$0$i + 2 | 0;
       } else $s$1$i = $501;
       if (!($$2$i != 0.0)) {
        $s$1$lcssa$i = $s$1$i;
        break;
       } else $s$0$i = $s$1$i;
      }
     }
     $$pre308$i = $s$1$lcssa$i;
     $513 = $462;
     if (($p$0 | 0) != 0 & ($11 + $$pre308$i | 0) < ($p$0 | 0)) $l$0$i = $12 + $p$0 - $513 | 0; else $l$0$i = $10 - $513 + $$pre308$i | 0;
     $518 = $l$0$i + $410 | 0;
     $519 = $fl$1$ & 73728;
     $521 = ($w$1 | 0) > ($518 | 0);
     if (($519 | 0) == 0 & $521) {
      $522 = $w$1 - $518 | 0;
      _memset($pad$i | 0, 32, ($522 >>> 0 > 256 ? 256 : $522) | 0) | 0;
      if ($522 >>> 0 > 255) {
       $$01$i62$i = $522;
       do {
        ___fwritex($pad$i, 256, $f) | 0;
        $$01$i62$i = $$01$i62$i + -256 | 0;
       } while ($$01$i62$i >>> 0 > 255);
       $$0$lcssa$i64$i = $522 & 255;
      } else $$0$lcssa$i64$i = $522;
      ___fwritex($pad$i, $$0$lcssa$i64$i, $f) | 0;
     }
     ___fwritex($prefix$0$$i, $410, $f) | 0;
     if (($519 | 0) == 65536 & $521) {
      $530 = $w$1 - $518 | 0;
      _memset($pad$i | 0, 48, ($530 >>> 0 > 256 ? 256 : $530) | 0) | 0;
      if ($530 >>> 0 > 255) {
       $$01$i69$i = $530;
       do {
        ___fwritex($pad$i, 256, $f) | 0;
        $$01$i69$i = $$01$i69$i + -256 | 0;
       } while ($$01$i69$i >>> 0 > 255);
       $$0$lcssa$i71$i = $530 & 255;
      } else $$0$lcssa$i71$i = $530;
      ___fwritex($pad$i, $$0$lcssa$i71$i, $f) | 0;
     }
     $537 = $$pre308$i - $0 | 0;
     ___fwritex($buf$i, $537, $f) | 0;
     $539 = $9 - $462 | 0;
     $541 = $l$0$i - $539 - $537 | 0;
     if (($541 | 0) > 0) {
      _memset($pad$i | 0, 48, ($541 >>> 0 > 256 ? 256 : $541) | 0) | 0;
      if ($541 >>> 0 > 255) {
       $$01$i75$i = $541;
       do {
        ___fwritex($pad$i, 256, $f) | 0;
        $$01$i75$i = $$01$i75$i + -256 | 0;
       } while ($$01$i75$i >>> 0 > 255);
       $$0$lcssa$i77$i = $541 & 255;
      } else $$0$lcssa$i77$i = $541;
      ___fwritex($pad$i, $$0$lcssa$i77$i, $f) | 0;
     }
     ___fwritex($462, $539, $f) | 0;
     if (($519 | 0) == 8192 & $521) {
      $550 = $w$1 - $518 | 0;
      _memset($pad$i | 0, 32, ($550 >>> 0 > 256 ? 256 : $550) | 0) | 0;
      if ($550 >>> 0 > 255) {
       $$01$i82$i = $550;
       do {
        ___fwritex($pad$i, 256, $f) | 0;
        $$01$i82$i = $$01$i82$i + -256 | 0;
       } while ($$01$i82$i >>> 0 > 255);
       $$0$lcssa$i84$i = $550 & 255;
      } else $$0$lcssa$i84$i = $550;
      ___fwritex($pad$i, $$0$lcssa$i84$i, $f) | 0;
     }
     $1044 = $195;
     $1045 = $222;
     $23 = $$lcssa299;
     $cnt$0 = $cnt$1;
     $l$0 = $521 ? $w$1 : $518;
     $l10n$0 = $l10n$3;
     continue L1;
    }
    $$p$i = ($p$0 | 0) < 0 ? 6 : $p$0;
    if ($402) {
     $560 = (HEAP32[$e2$i >> 2] | 0) + -28 | 0;
     HEAP32[$e2$i >> 2] = $560;
     $$3$i = $401 * 268435456.0;
     $561 = $560;
    } else {
     $$3$i = $401;
     $561 = HEAP32[$e2$i >> 2] | 0;
    }
    $$39$i = ($561 | 0) < 0 ? $big$i : $13;
    $563 = $$39$i;
    $$4$i = $$3$i;
    $z$0$i = $$39$i;
    while (1) {
     $564 = ~~$$4$i >>> 0;
     HEAP32[$z$0$i >> 2] = $564;
     $565 = $z$0$i + 4 | 0;
     $$4$i = ($$4$i - +($564 >>> 0)) * 1.0e9;
     if (!($$4$i != 0.0)) {
      $$lcssa302 = $565;
      break;
     } else $z$0$i = $565;
    }
    $$pr$i = HEAP32[$e2$i >> 2] | 0;
    if (($$pr$i | 0) > 0) {
     $571 = $$pr$i;
     $a$1261$i = $$39$i;
     $z$1260$i = $$lcssa302;
     while (1) {
      $573 = ($571 | 0) > 29 ? 29 : $571;
      $d$0253$i = $z$1260$i + -4 | 0;
      do if ($d$0253$i >>> 0 < $a$1261$i >>> 0) $a$2$ph$i = $a$1261$i; else {
       $584 = $z$1260$i;
       $carry$0254$i = 0;
       $d$0255$i = $d$0253$i;
       while (1) {
        $576 = _bitshift64Shl(HEAP32[$d$0255$i >> 2] | 0, 0, $573 | 0) | 0;
        $578 = _i64Add($576 | 0, tempRet0 | 0, $carry$0254$i | 0, 0) | 0;
        $579 = tempRet0;
        $580 = ___uremdi3($578 | 0, $579 | 0, 1e9, 0) | 0;
        HEAP32[$d$0255$i >> 2] = $580;
        $582 = ___udivdi3($578 | 0, $579 | 0, 1e9, 0) | 0;
        $d$0$i = $584 + -8 | 0;
        if ($d$0$i >>> 0 < $a$1261$i >>> 0) {
         $$lcssa303 = $582;
         break;
        } else {
         $584$phi = $d$0255$i;
         $carry$0254$i = $582;
         $d$0255$i = $d$0$i;
         $584 = $584$phi;
        }
       }
       if (!$$lcssa303) {
        $a$2$ph$i = $a$1261$i;
        break;
       }
       $587 = $a$1261$i + -4 | 0;
       HEAP32[$587 >> 2] = $$lcssa303;
       $a$2$ph$i = $587;
      } while (0);
      $z$2$i = $z$1260$i;
      while (1) {
       if ($z$2$i >>> 0 <= $a$2$ph$i >>> 0) {
        $z$2$i$lcssa = $z$2$i;
        break;
       }
       $589 = $z$2$i + -4 | 0;
       if (!(HEAP32[$589 >> 2] | 0)) $z$2$i = $589; else {
        $z$2$i$lcssa = $z$2$i;
        break;
       }
      }
      $593 = (HEAP32[$e2$i >> 2] | 0) - $573 | 0;
      HEAP32[$e2$i >> 2] = $593;
      if (($593 | 0) > 0) {
       $571 = $593;
       $a$1261$i = $a$2$ph$i;
       $z$1260$i = $z$2$i$lcssa;
      } else {
       $$pr154$i = $593;
       $a$1$lcssa$i = $a$2$ph$i;
       $z$1$lcssa$i = $z$2$i$lcssa;
       break;
      }
     }
    } else {
     $$pr154$i = $$pr$i;
     $a$1$lcssa$i = $$39$i;
     $z$1$lcssa$i = $$lcssa302;
    }
    L244 : do if (($$pr154$i | 0) < 0) {
     $598 = (($$p$i + 25 | 0) / 9 | 0) + 1 | 0;
     if (($405 | 0) == 102) {
      $600 = $$39$i + ($598 << 2) | 0;
      $601 = $$pr154$i;
      $a$3248$us$i = $a$1$lcssa$i;
      $z$3247$us$i = $z$1$lcssa$i;
      while (1) {
       $$26$us$i = ($601 | 0) < -9 ? 9 : 0 - $601 | 0;
       do if ($a$3248$us$i >>> 0 < $z$3247$us$i >>> 0) {
        $622 = (1 << $$26$us$i) + -1 | 0;
        $626 = 1e9 >>> $$26$us$i;
        $carry3$0242$us$i = 0;
        $d$1241$us$i = $a$3248$us$i;
        while (1) {
         $620 = HEAP32[$d$1241$us$i >> 2] | 0;
         HEAP32[$d$1241$us$i >> 2] = ($620 >>> $$26$us$i) + $carry3$0242$us$i;
         $625 = Math_imul($620 & $622, $626) | 0;
         $d$1241$us$i = $d$1241$us$i + 4 | 0;
         if ($d$1241$us$i >>> 0 >= $z$3247$us$i >>> 0) {
          $$lcssa306 = $625;
          break;
         } else $carry3$0242$us$i = $625;
        }
        $$a$3$us$i = (HEAP32[$a$3248$us$i >> 2] | 0) == 0 ? $a$3248$us$i + 4 | 0 : $a$3248$us$i;
        if (!$$lcssa306) {
         $$a$3$us310$i = $$a$3$us$i;
         $z$4$us$i = $z$3247$us$i;
         break;
        }
        HEAP32[$z$3247$us$i >> 2] = $$lcssa306;
        $$a$3$us310$i = $$a$3$us$i;
        $z$4$us$i = $z$3247$us$i + 4 | 0;
       } else {
        $$a$3$us310$i = (HEAP32[$a$3248$us$i >> 2] | 0) == 0 ? $a$3248$us$i + 4 | 0 : $a$3248$us$i;
        $z$4$us$i = $z$3247$us$i;
       } while (0);
       $$z$4$us$i = ($z$4$us$i - $563 >> 2 | 0) > ($598 | 0) ? $600 : $z$4$us$i;
       $601 = (HEAP32[$e2$i >> 2] | 0) + $$26$us$i | 0;
       HEAP32[$e2$i >> 2] = $601;
       if (($601 | 0) >= 0) {
        $a$3$lcssa$i = $$a$3$us310$i;
        $z$3$lcssa$i = $$z$4$us$i;
        break L244;
       } else {
        $a$3248$us$i = $$a$3$us310$i;
        $z$3247$us$i = $$z$4$us$i;
       }
      }
     } else {
      $630 = $$pr154$i;
      $a$3248$i = $a$1$lcssa$i;
      $z$3247$i = $z$1$lcssa$i;
     }
     while (1) {
      $$26$i = ($630 | 0) < -9 ? 9 : 0 - $630 | 0;
      do if ($a$3248$i >>> 0 < $z$3247$i >>> 0) {
       $638 = (1 << $$26$i) + -1 | 0;
       $639 = 1e9 >>> $$26$i;
       $carry3$0242$i = 0;
       $d$1241$i = $a$3248$i;
       while (1) {
        $640 = HEAP32[$d$1241$i >> 2] | 0;
        HEAP32[$d$1241$i >> 2] = ($640 >>> $$26$i) + $carry3$0242$i;
        $644 = Math_imul($640 & $638, $639) | 0;
        $d$1241$i = $d$1241$i + 4 | 0;
        if ($d$1241$i >>> 0 >= $z$3247$i >>> 0) {
         $$lcssa305 = $644;
         break;
        } else $carry3$0242$i = $644;
       }
       $$a$3$i = (HEAP32[$a$3248$i >> 2] | 0) == 0 ? $a$3248$i + 4 | 0 : $a$3248$i;
       if (!$$lcssa305) {
        $$a$3312$i = $$a$3$i;
        $z$4$i = $z$3247$i;
        break;
       }
       HEAP32[$z$3247$i >> 2] = $$lcssa305;
       $$a$3312$i = $$a$3$i;
       $z$4$i = $z$3247$i + 4 | 0;
      } else {
       $$a$3312$i = (HEAP32[$a$3248$i >> 2] | 0) == 0 ? $a$3248$i + 4 | 0 : $a$3248$i;
       $z$4$i = $z$3247$i;
      } while (0);
      if (($z$4$i - $$a$3312$i >> 2 | 0) > ($598 | 0)) $z$5$i = $$a$3312$i + ($598 << 2) | 0; else $z$5$i = $z$4$i;
      $630 = (HEAP32[$e2$i >> 2] | 0) + $$26$i | 0;
      HEAP32[$e2$i >> 2] = $630;
      if (($630 | 0) >= 0) {
       $a$3$lcssa$i = $$a$3312$i;
       $z$3$lcssa$i = $z$5$i;
       break;
      } else {
       $a$3248$i = $$a$3312$i;
       $z$3247$i = $z$5$i;
      }
     }
    } else {
     $a$3$lcssa$i = $a$1$lcssa$i;
     $z$3$lcssa$i = $z$1$lcssa$i;
    } while (0);
    do if ($a$3$lcssa$i >>> 0 < $z$3$lcssa$i >>> 0) {
     $665 = ($563 - $a$3$lcssa$i >> 2) * 9 | 0;
     $666 = HEAP32[$a$3$lcssa$i >> 2] | 0;
     if ($666 >>> 0 < 10) {
      $e$1$i = $665;
      break;
     } else {
      $e$0237$i = $665;
      $i$0236$i = 10;
     }
     while (1) {
      $i$0236$i = $i$0236$i * 10 | 0;
      $669 = $e$0237$i + 1 | 0;
      if ($666 >>> 0 < $i$0236$i >>> 0) {
       $e$1$i = $669;
       break;
      } else $e$0237$i = $669;
     }
    } else $e$1$i = 0; while (0);
    $674 = ($405 | 0) == 103;
    $676 = $$p$i - (($405 | 0) != 102 ? $e$1$i : 0) + (($674 & ($$p$i | 0) != 0) << 31 >> 31) | 0;
    if (($676 | 0) < ((($z$3$lcssa$i - $563 >> 2) * 9 | 0) + -9 | 0)) {
     $683 = $676 + 9216 | 0;
     $684 = ($683 | 0) / 9 | 0;
     $685 = $$39$i + ($684 + -1023 << 2) | 0;
     $j$0229$i = (($683 | 0) % 9 | 0) + 1 | 0;
     if (($j$0229$i | 0) < 9) {
      $i$1230$i = 10;
      $j$0231$i = $j$0229$i;
      while (1) {
       $688 = $i$1230$i * 10 | 0;
       $j$0231$i = $j$0231$i + 1 | 0;
       if (($j$0231$i | 0) == 9) {
        $i$1$lcssa$i = $688;
        break;
       } else $i$1230$i = $688;
      }
     } else $i$1$lcssa$i = 10;
     $689 = HEAP32[$685 >> 2] | 0;
     $690 = ($689 >>> 0) % ($i$1$lcssa$i >>> 0) | 0;
     if (!$690) if (($$39$i + ($684 + -1022 << 2) | 0) == ($z$3$lcssa$i | 0)) {
      $a$7$i = $a$3$lcssa$i;
      $d$3$i = $685;
      $e$3$i = $e$1$i;
     } else label = 231; else label = 231;
     do if ((label | 0) == 231) {
      label = 0;
      $$28$i = ((($689 >>> 0) / ($i$1$lcssa$i >>> 0) | 0) & 1 | 0) == 0 ? 9007199254740992.0 : 9007199254740994.0;
      $697 = ($i$1$lcssa$i | 0) / 2 | 0;
      do if ($690 >>> 0 < $697 >>> 0) $small$0$i = .5; else {
       if (($690 | 0) == ($697 | 0)) if (($$39$i + ($684 + -1022 << 2) | 0) == ($z$3$lcssa$i | 0)) {
        $small$0$i = 1.0;
        break;
       }
       $small$0$i = 1.5;
      } while (0);
      do if (!$pl$0$i) {
       $round6$1$i = $$28$i;
       $small$1$i = $small$0$i;
      } else {
       if ((HEAP8[$prefix$0$i >> 0] | 0) != 45) {
        $round6$1$i = $$28$i;
        $small$1$i = $small$0$i;
        break;
       }
       $round6$1$i = -$$28$i;
       $small$1$i = -$small$0$i;
      } while (0);
      $707 = $689 - $690 | 0;
      HEAP32[$685 >> 2] = $707;
      if (!($round6$1$i + $small$1$i != $round6$1$i)) {
       $a$7$i = $a$3$lcssa$i;
       $d$3$i = $685;
       $e$3$i = $e$1$i;
       break;
      }
      $710 = $707 + $i$1$lcssa$i | 0;
      HEAP32[$685 >> 2] = $710;
      if ($710 >>> 0 > 999999999) {
       $a$5223$i = $a$3$lcssa$i;
       $d$2222$i = $685;
       while (1) {
        $712 = $d$2222$i + -4 | 0;
        HEAP32[$d$2222$i >> 2] = 0;
        if ($712 >>> 0 < $a$5223$i >>> 0) {
         $714 = $a$5223$i + -4 | 0;
         HEAP32[$714 >> 2] = 0;
         $a$6$i = $714;
        } else $a$6$i = $a$5223$i;
        $716 = (HEAP32[$712 >> 2] | 0) + 1 | 0;
        HEAP32[$712 >> 2] = $716;
        if ($716 >>> 0 > 999999999) {
         $a$5223$i = $a$6$i;
         $d$2222$i = $712;
        } else {
         $a$5$lcssa$i = $a$6$i;
         $d$2$lcssa$i = $712;
         break;
        }
       }
      } else {
       $a$5$lcssa$i = $a$3$lcssa$i;
       $d$2$lcssa$i = $685;
      }
      $721 = ($563 - $a$5$lcssa$i >> 2) * 9 | 0;
      $722 = HEAP32[$a$5$lcssa$i >> 2] | 0;
      if ($722 >>> 0 < 10) {
       $a$7$i = $a$5$lcssa$i;
       $d$3$i = $d$2$lcssa$i;
       $e$3$i = $721;
       break;
      } else {
       $e$2218$i = $721;
       $i$2217$i = 10;
      }
      while (1) {
       $i$2217$i = $i$2217$i * 10 | 0;
       $725 = $e$2218$i + 1 | 0;
       if ($722 >>> 0 < $i$2217$i >>> 0) {
        $a$7$i = $a$5$lcssa$i;
        $d$3$i = $d$2$lcssa$i;
        $e$3$i = $725;
        break;
       } else $e$2218$i = $725;
      }
     } while (0);
     $727 = $d$3$i + 4 | 0;
     $a$8$ph$i = $a$7$i;
     $e$4$ph$i = $e$3$i;
     $z$6$ph$i = $z$3$lcssa$i >>> 0 > $727 >>> 0 ? $727 : $z$3$lcssa$i;
    } else {
     $a$8$ph$i = $a$3$lcssa$i;
     $e$4$ph$i = $e$1$i;
     $z$6$ph$i = $z$3$lcssa$i;
    }
    $a$8$ph294$i = $a$8$ph$i;
    $729 = 0 - $e$4$ph$i | 0;
    $z$6$i = $z$6$ph$i;
    while (1) {
     if ($z$6$i >>> 0 <= $a$8$ph$i >>> 0) {
      $$lcssa283$i = 0;
      $z$6$i$lcssa = $z$6$i;
      break;
     }
     $731 = $z$6$i + -4 | 0;
     if (!(HEAP32[$731 >> 2] | 0)) $z$6$i = $731; else {
      $$lcssa283$i = 1;
      $z$6$i$lcssa = $z$6$i;
      break;
     }
    }
    do if ($674) {
     $$$p$i = (($$p$i | 0) == 0 & 1) + $$p$i | 0;
     if (($$$p$i | 0) > ($e$4$ph$i | 0) & ($e$4$ph$i | 0) > -5) {
      $$019$i = $t$0 + -1 | 0;
      $$216$i = $$$p$i + -1 - $e$4$ph$i | 0;
     } else {
      $$019$i = $t$0 + -2 | 0;
      $$216$i = $$$p$i + -1 | 0;
     }
     if ($fl$1$ & 8) {
      $$120$i = $$019$i;
      $$317$i = $$216$i;
      break;
     }
     do if ($$lcssa283$i) {
      $745 = HEAP32[$z$6$i$lcssa + -4 >> 2] | 0;
      if (!$745) {
       $j$2$i = 9;
       break;
      }
      if (!(($745 >>> 0) % 10 | 0)) {
       $i$3213$i = 10;
       $j$1214$i = 0;
      } else {
       $j$2$i = 0;
       break;
      }
      while (1) {
       $i$3213$i = $i$3213$i * 10 | 0;
       $750 = $j$1214$i + 1 | 0;
       if (($745 >>> 0) % ($i$3213$i >>> 0) | 0) {
        $j$2$i = $750;
        break;
       } else $j$1214$i = $750;
      }
     } else $j$2$i = 9; while (0);
     $759 = (($z$6$i$lcssa - $563 >> 2) * 9 | 0) + -9 | 0;
     if (($$019$i | 32 | 0) == 102) {
      $760 = $759 - $j$2$i | 0;
      $$29$i = ($760 | 0) < 0 ? 0 : $760;
      $$120$i = $$019$i;
      $$317$i = ($$216$i | 0) < ($$29$i | 0) ? $$216$i : $$29$i;
      break;
     } else {
      $764 = $759 + $e$4$ph$i - $j$2$i | 0;
      $$31$i = ($764 | 0) < 0 ? 0 : $764;
      $$120$i = $$019$i;
      $$317$i = ($$216$i | 0) < ($$31$i | 0) ? $$216$i : $$31$i;
      break;
     }
    } else {
     $$120$i = $t$0;
     $$317$i = $$p$i;
    } while (0);
    $767 = ($$317$i | 0) != 0;
    if ($767) $771 = 1; else $771 = ($fl$1$ & 8 | 0) != 0;
    $770 = $771 & 1;
    $773 = ($$120$i | 32 | 0) == 102;
    if ($773) {
     $$pn$i = ($e$4$ph$i | 0) > 0 ? $e$4$ph$i : 0;
     $estr$2$i = 0;
    } else {
     $777 = ($e$4$ph$i | 0) < 0 ? $729 : $e$4$ph$i;
     if (($777 | 0) < 0) {
      $$05$i87$i = $7;
      $781 = $777;
      $782 = (($777 | 0) < 0) << 31 >> 31;
      while (1) {
       $783 = ___uremdi3($781 | 0, $782 | 0, 10, 0) | 0;
       $787 = $$05$i87$i + -1 | 0;
       HEAP8[$787 >> 0] = $783 | 48;
       $788 = ___udivdi3($781 | 0, $782 | 0, 10, 0) | 0;
       if ($782 >>> 0 > 9 | ($782 | 0) == 9 & $781 >>> 0 > 4294967295) {
        $$05$i87$i = $787;
        $781 = $788;
        $782 = tempRet0;
       } else {
        $$lcssa312 = $787;
        $1063 = $788;
        break;
       }
      }
      $$0$lcssa$i92$i = $$lcssa312;
      $$01$lcssa$off0$i93$i = $1063;
     } else {
      $$0$lcssa$i92$i = $7;
      $$01$lcssa$off0$i93$i = $777;
     }
     if (!$$01$lcssa$off0$i93$i) $estr$1$ph$i = $$0$lcssa$i92$i; else {
      $$12$i95$i = $$0$lcssa$i92$i;
      $y$03$i94$i = $$01$lcssa$off0$i93$i;
      while (1) {
       $799 = $$12$i95$i + -1 | 0;
       HEAP8[$799 >> 0] = ($y$03$i94$i >>> 0) % 10 | 0 | 48;
       if ($y$03$i94$i >>> 0 < 10) {
        $estr$1$ph$i = $799;
        break;
       } else {
        $$12$i95$i = $799;
        $y$03$i94$i = ($y$03$i94$i >>> 0) / 10 | 0;
       }
      }
     }
     if (($9 - $estr$1$ph$i | 0) < 2) {
      $estr$1209$i = $estr$1$ph$i;
      while (1) {
       $805 = $estr$1209$i + -1 | 0;
       HEAP8[$805 >> 0] = 48;
       if (($9 - $805 | 0) < 2) $estr$1209$i = $805; else {
        $estr$1$lcssa$i = $805;
        break;
       }
      }
     } else $estr$1$lcssa$i = $estr$1$ph$i;
     HEAP8[$estr$1$lcssa$i + -1 >> 0] = ($e$4$ph$i >> 31 & 2) + 43;
     $815 = $estr$1$lcssa$i + -2 | 0;
     HEAP8[$815 >> 0] = $$120$i;
     $$pn$i = $9 - $815 | 0;
     $estr$2$i = $815;
    }
    $820 = $pl$0$i + 1 + $$317$i + $770 + $$pn$i | 0;
    $821 = $fl$1$ & 73728;
    $823 = ($w$1 | 0) > ($820 | 0);
    if (($821 | 0) == 0 & $823) {
     $824 = $w$1 - $820 | 0;
     _memset($pad$i | 0, 32, ($824 >>> 0 > 256 ? 256 : $824) | 0) | 0;
     if ($824 >>> 0 > 255) {
      $$01$i103$i = $824;
      do {
       ___fwritex($pad$i, 256, $f) | 0;
       $$01$i103$i = $$01$i103$i + -256 | 0;
      } while ($$01$i103$i >>> 0 > 255);
      $$0$lcssa$i105$i = $824 & 255;
     } else $$0$lcssa$i105$i = $824;
     ___fwritex($pad$i, $$0$lcssa$i105$i, $f) | 0;
    }
    ___fwritex($prefix$0$i, $pl$0$i, $f) | 0;
    if (($821 | 0) == 65536 & $823) {
     $832 = $w$1 - $820 | 0;
     _memset($pad$i | 0, 48, ($832 >>> 0 > 256 ? 256 : $832) | 0) | 0;
     if ($832 >>> 0 > 255) {
      $$01$i110$i = $832;
      do {
       ___fwritex($pad$i, 256, $f) | 0;
       $$01$i110$i = $$01$i110$i + -256 | 0;
      } while ($$01$i110$i >>> 0 > 255);
      $$0$lcssa$i112$i = $832 & 255;
     } else $$0$lcssa$i112$i = $832;
     ___fwritex($pad$i, $$0$lcssa$i112$i, $f) | 0;
    }
    do if ($773) {
     $r$0$a$8$i = $a$8$ph$i >>> 0 > $$39$i >>> 0 ? $$39$i : $a$8$ph$i;
     $840 = ~$563;
     $841 = ~$a$8$ph294$i;
     $umax$i = $840 >>> 0 > $841 >>> 0 ? $840 : $841;
     $843 = 3 - $umax$i | 0;
     $uglygep296$i = $$39$i + 1 | 0;
     $uglygep300301$i = ($843 >>> 0 > $uglygep296$i >>> 0 ? $843 : $uglygep296$i) + $umax$i | 0;
     $845 = ~$umax$i;
     $d$4199$i = $r$0$a$8$i;
     while (1) {
      $846 = HEAP32[$d$4199$i >> 2] | 0;
      if (!$846) $$1$lcssa$i120$i = $14; else {
       $$12$i118$i = $14;
       $y$03$i117$i = $846;
       while (1) {
        $851 = $$12$i118$i + -1 | 0;
        HEAP8[$851 >> 0] = ($y$03$i117$i >>> 0) % 10 | 0 | 48;
        if ($y$03$i117$i >>> 0 < 10) {
         $$1$lcssa$i120$i = $851;
         break;
        } else {
         $$12$i118$i = $851;
         $y$03$i117$i = ($y$03$i117$i >>> 0) / 10 | 0;
        }
       }
      }
      do if (($d$4199$i | 0) == ($r$0$a$8$i | 0)) {
       if (($$1$lcssa$i120$i | 0) != ($14 | 0)) {
        $s7$1$i = $$1$lcssa$i120$i;
        break;
       }
       HEAP8[$16 >> 0] = 48;
       $s7$1$i = $16;
      } else {
       if ($$1$lcssa$i120$i >>> 0 > $buf$i >>> 0) $s7$0196$i = $$1$lcssa$i120$i; else {
        $s7$1$i = $$1$lcssa$i120$i;
        break;
       }
       while (1) {
        $856 = $s7$0196$i + -1 | 0;
        HEAP8[$856 >> 0] = 48;
        if ($856 >>> 0 > $buf$i >>> 0) $s7$0196$i = $856; else {
         $s7$1$i = $856;
         break;
        }
       }
      } while (0);
      ___fwritex($s7$1$i, $15 - $s7$1$i | 0, $f) | 0;
      $861 = $d$4199$i + 4 | 0;
      if ($861 >>> 0 > $$39$i >>> 0) {
       $$lcssa321 = $861;
       break;
      } else $d$4199$i = $861;
     }
     if (!(($fl$1$ & 8 | 0) == 0 & ($767 ^ 1))) ___fwritex(15424, 1, $f) | 0;
     if ($$lcssa321 >>> 0 < $z$6$i$lcssa >>> 0 & ($$317$i | 0) > 0) {
      $$418193$i = $$317$i;
      $884 = ($uglygep300301$i & -4) + $845 | 0;
      $d$5192$i = $$lcssa321;
      while (1) {
       $870 = HEAP32[$d$5192$i >> 2] | 0;
       if (!$870) {
        $s8$0188$i = $14;
        label = 300;
       } else {
        $$12$i127$i = $14;
        $y$03$i126$i = $870;
        while (1) {
         $875 = $$12$i127$i + -1 | 0;
         HEAP8[$875 >> 0] = ($y$03$i126$i >>> 0) % 10 | 0 | 48;
         if ($y$03$i126$i >>> 0 < 10) {
          $$lcssa322 = $875;
          break;
         } else {
          $$12$i127$i = $875;
          $y$03$i126$i = ($y$03$i126$i >>> 0) / 10 | 0;
         }
        }
        if ($$lcssa322 >>> 0 > $buf$i >>> 0) {
         $s8$0188$i = $$lcssa322;
         label = 300;
        } else $s8$0$lcssa$i = $$lcssa322;
       }
       if ((label | 0) == 300) while (1) {
        label = 0;
        $879 = $s8$0188$i + -1 | 0;
        HEAP8[$879 >> 0] = 48;
        if ($879 >>> 0 > $buf$i >>> 0) {
         $s8$0188$i = $879;
         label = 300;
        } else {
         $s8$0$lcssa$i = $879;
         break;
        }
       }
       ___fwritex($s8$0$lcssa$i, ($$418193$i | 0) > 9 ? 9 : $$418193$i, $f) | 0;
       $883 = $884 + 8 | 0;
       $885 = $$418193$i + -9 | 0;
       if ($883 >>> 0 < $z$6$i$lcssa >>> 0 & ($885 | 0) > 0) {
        $884$phi = $d$5192$i;
        $$418193$i = $885;
        $d$5192$i = $883;
        $884 = $884$phi;
       } else {
        $$418$lcssa$i = $885;
        break;
       }
      }
     } else $$418$lcssa$i = $$317$i;
     if (($$418$lcssa$i | 0) <= 0) break;
     _memset($pad$i | 0, 48, ($$418$lcssa$i >>> 0 > 256 ? 256 : $$418$lcssa$i) | 0) | 0;
     if ($$418$lcssa$i >>> 0 > 255) {
      $$01$i134$i = $$418$lcssa$i;
      do {
       ___fwritex($pad$i, 256, $f) | 0;
       $$01$i134$i = $$01$i134$i + -256 | 0;
      } while ($$01$i134$i >>> 0 > 255);
      $$0$lcssa$i136$i = $$418$lcssa$i & 255;
     } else $$0$lcssa$i136$i = $$418$lcssa$i;
     ___fwritex($pad$i, $$0$lcssa$i136$i, $f) | 0;
    } else {
     $z$6$$i = $$lcssa283$i ? $z$6$i$lcssa : $a$8$ph$i + 4 | 0;
     do if (($$317$i | 0) > -1) {
      $898 = ($fl$1$ & 8 | 0) == 0;
      $$5205$i = $$317$i;
      $d$6204$i = $a$8$ph$i;
      while (1) {
       $899 = HEAP32[$d$6204$i >> 2] | 0;
       if (!$899) label = 312; else {
        $$12$i142$i = $14;
        $y$03$i141$i = $899;
        while (1) {
         $904 = $$12$i142$i + -1 | 0;
         HEAP8[$904 >> 0] = ($y$03$i141$i >>> 0) % 10 | 0 | 48;
         if ($y$03$i141$i >>> 0 < 10) {
          $$12$i142$i$lcssa = $$12$i142$i;
          $$lcssa316 = $904;
          break;
         } else {
          $$12$i142$i = $904;
          $y$03$i141$i = ($y$03$i141$i >>> 0) / 10 | 0;
         }
        }
        if (($$lcssa316 | 0) == ($14 | 0)) label = 312; else {
         $1065 = $$12$i142$i$lcssa;
         $s9$0$i = $$lcssa316;
        }
       }
       if ((label | 0) == 312) {
        label = 0;
        HEAP8[$16 >> 0] = 48;
        $1065 = $14;
        $s9$0$i = $16;
       }
       do if (($d$6204$i | 0) == ($a$8$ph$i | 0)) {
        ___fwritex($s9$0$i, 1, $f) | 0;
        if (($$5205$i | 0) < 1 & $898) {
         $s9$2$i = $1065;
         break;
        }
        ___fwritex(15424, 1, $f) | 0;
        $s9$2$i = $1065;
       } else {
        if ($s9$0$i >>> 0 > $buf$i >>> 0) $s9$1200$i = $s9$0$i; else {
         $s9$2$i = $s9$0$i;
         break;
        }
        while (1) {
         $910 = $s9$1200$i + -1 | 0;
         HEAP8[$910 >> 0] = 48;
         if ($910 >>> 0 > $buf$i >>> 0) $s9$1200$i = $910; else {
          $s9$2$i = $910;
          break;
         }
        }
       } while (0);
       $914 = $15 - $s9$2$i | 0;
       ___fwritex($s9$2$i, ($$5205$i | 0) > ($914 | 0) ? $914 : $$5205$i, $f) | 0;
       $916 = $$5205$i - $914 | 0;
       $d$6204$i = $d$6204$i + 4 | 0;
       if (!($d$6204$i >>> 0 < $z$6$$i >>> 0 & ($916 | 0) > -1)) {
        $$lcssa318 = $916;
        break;
       } else $$5205$i = $916;
      }
      if (($$lcssa318 | 0) <= 0) break;
      _memset($pad$i | 0, 48, ($$lcssa318 >>> 0 > 256 ? 256 : $$lcssa318) | 0) | 0;
      if ($$lcssa318 >>> 0 > 255) {
       $$01$i149$i = $$lcssa318;
       do {
        ___fwritex($pad$i, 256, $f) | 0;
        $$01$i149$i = $$01$i149$i + -256 | 0;
       } while ($$01$i149$i >>> 0 > 255);
       $$0$lcssa$i151$i = $$lcssa318 & 255;
      } else $$0$lcssa$i151$i = $$lcssa318;
      ___fwritex($pad$i, $$0$lcssa$i151$i, $f) | 0;
     } while (0);
     ___fwritex($estr$2$i, $9 - $estr$2$i | 0, $f) | 0;
    } while (0);
    if (($821 | 0) == 8192 & $823) {
     $930 = $w$1 - $820 | 0;
     _memset($pad$i | 0, 32, ($930 >>> 0 > 256 ? 256 : $930) | 0) | 0;
     if ($930 >>> 0 > 255) {
      $$01$i$i = $930;
      do {
       ___fwritex($pad$i, 256, $f) | 0;
       $$01$i$i = $$01$i$i + -256 | 0;
      } while ($$01$i$i >>> 0 > 255);
      $$0$lcssa$i$i = $930 & 255;
     } else $$0$lcssa$i$i = $930;
     ___fwritex($pad$i, $$0$lcssa$i$i, $f) | 0;
    }
    $1044 = $195;
    $1045 = $222;
    $23 = $$lcssa299;
    $cnt$0 = $cnt$1;
    $l$0 = $823 ? $w$1 : $820;
    $l10n$0 = $l10n$3;
    continue L1;
    break;
   }
  case 88:
  case 120:
   {
    $fl$3 = $fl$1$;
    $p$1 = $p$0;
    $t$1 = $t$0;
    label = 74;
    break;
   }
  case 117:
   {
    $267 = $222;
    $269 = $195;
    $pl$0 = 0;
    $prefix$0 = 15328;
    label = 85;
    break;
   }
  case 109:
   {
    $a$1 = _strerror(HEAP32[(___errno_location() | 0) >> 2] | 0) | 0;
    label = 95;
    break;
   }
  case 115:
   {
    $a$1 = ($195 | 0) == 0 ? 15344 : $195;
    label = 95;
    break;
   }
  default:
   {
    $1053 = $195;
    $1054 = $222;
    $a$2 = $23;
    $fl$6 = $fl$1$;
    $p$5 = $p$0;
    $pl$2 = 0;
    $prefix$2 = 15328;
    $z$2 = $2;
   }
  } while (0);
  do if ((label | 0) == 74) {
   label = 0;
   $220 = $t$1 & 32;
   if (($195 | 0) == 0 & ($222 | 0) == 0) {
    $297 = $195;
    $299 = $222;
    $a$0 = $2;
    $fl$4 = $fl$3;
    $p$2 = $p$1;
    $pl$1 = 0;
    $prefix$1 = 15328;
    label = 90;
   } else {
    $$012$i = $2;
    $226 = $195;
    $233 = $222;
    while (1) {
     $232 = $$012$i + -1 | 0;
     HEAP8[$232 >> 0] = HEAPU8[15408 + ($226 & 15) >> 0] | $220;
     $226 = _bitshift64Lshr($226 | 0, $233 | 0, 4) | 0;
     $233 = tempRet0;
     if (($226 | 0) == 0 & ($233 | 0) == 0) {
      $$lcssa333 = $232;
      break;
     } else $$012$i = $232;
    }
    if (!($fl$3 & 8)) {
     $297 = $195;
     $299 = $222;
     $a$0 = $$lcssa333;
     $fl$4 = $fl$3;
     $p$2 = $p$1;
     $pl$1 = 0;
     $prefix$1 = 15328;
     label = 90;
    } else {
     $297 = $195;
     $299 = $222;
     $a$0 = $$lcssa333;
     $fl$4 = $fl$3;
     $p$2 = $p$1;
     $pl$1 = 2;
     $prefix$1 = 15328 + ($t$1 >> 4) | 0;
     label = 90;
    }
   }
  } else if ((label | 0) == 85) {
   label = 0;
   if ($267 >>> 0 > 0 | ($267 | 0) == 0 & $269 >>> 0 > 4294967295) {
    $$05$i = $2;
    $274 = $269;
    $275 = $267;
    while (1) {
     $276 = ___uremdi3($274 | 0, $275 | 0, 10, 0) | 0;
     $280 = $$05$i + -1 | 0;
     HEAP8[$280 >> 0] = $276 | 48;
     $281 = ___udivdi3($274 | 0, $275 | 0, 10, 0) | 0;
     if ($275 >>> 0 > 9 | ($275 | 0) == 9 & $274 >>> 0 > 4294967295) {
      $$05$i = $280;
      $274 = $281;
      $275 = tempRet0;
     } else {
      $$lcssa329 = $280;
      $1055 = $281;
      break;
     }
    }
    $$0$lcssa$i54 = $$lcssa329;
    $$01$lcssa$off0$i = $1055;
   } else {
    $$0$lcssa$i54 = $2;
    $$01$lcssa$off0$i = $269;
   }
   if (!$$01$lcssa$off0$i) {
    $297 = $269;
    $299 = $267;
    $a$0 = $$0$lcssa$i54;
    $fl$4 = $fl$1$;
    $p$2 = $p$0;
    $pl$1 = $pl$0;
    $prefix$1 = $prefix$0;
    label = 90;
   } else {
    $$12$i = $$0$lcssa$i54;
    $y$03$i = $$01$lcssa$off0$i;
    while (1) {
     $292 = $$12$i + -1 | 0;
     HEAP8[$292 >> 0] = ($y$03$i >>> 0) % 10 | 0 | 48;
     if ($y$03$i >>> 0 < 10) {
      $297 = $269;
      $299 = $267;
      $a$0 = $292;
      $fl$4 = $fl$1$;
      $p$2 = $p$0;
      $pl$1 = $pl$0;
      $prefix$1 = $prefix$0;
      label = 90;
      break;
     } else {
      $$12$i = $292;
      $y$03$i = ($y$03$i >>> 0) / 10 | 0;
     }
    }
   }
  } else if ((label | 0) == 95) {
   label = 0;
   $315 = _memchr($a$1, 0, $p$0) | 0;
   if (!$315) {
    $1053 = $195;
    $1054 = $222;
    $a$2 = $a$1;
    $fl$6 = $194;
    $p$5 = $p$0;
    $pl$2 = 0;
    $prefix$2 = 15328;
    $z$2 = $a$1 + $p$0 | 0;
    break;
   } else {
    $1053 = $195;
    $1054 = $222;
    $a$2 = $a$1;
    $fl$6 = $194;
    $p$5 = $315 - $a$1 | 0;
    $pl$2 = 0;
    $prefix$2 = 15328;
    $z$2 = $315;
    break;
   }
  } else if ((label | 0) == 100) {
   label = 0;
   $i$0175 = 0;
   $l$1174 = 0;
   $ws$0176 = $1057;
   while (1) {
    $323 = HEAP32[$ws$0176 >> 2] | 0;
    if (!$323) {
     $i$0$lcssa = $i$0175;
     $l$2 = $l$1174;
     break;
    }
    $325 = _wctomb($mb, $323) | 0;
    if (($325 | 0) < 0 | $325 >>> 0 > ($p$4272 - $i$0175 | 0) >>> 0) {
     $i$0$lcssa = $i$0175;
     $l$2 = $325;
     break;
    }
    $330 = $325 + $i$0175 | 0;
    if ($p$4272 >>> 0 > $330 >>> 0) {
     $i$0175 = $330;
     $l$1174 = $325;
     $ws$0176 = $ws$0176 + 4 | 0;
    } else {
     $i$0$lcssa = $330;
     $l$2 = $325;
     break;
    }
   }
   if (($l$2 | 0) < 0) {
    $$0 = -1;
    label = 369;
    break L1;
   } else {
    $1059 = $1058;
    $1060 = $1057;
    $i$0$lcssa273 = $i$0$lcssa;
    label = 105;
   }
  } while (0);
  if ((label | 0) == 90) {
   label = 0;
   $$fl$4 = ($p$2 | 0) > -1 ? $fl$4 & -65537 : $fl$4;
   $301 = ($297 | 0) != 0 | ($299 | 0) != 0;
   if ($301 | ($p$2 | 0) != 0) {
    $307 = ($301 & 1 ^ 1) + ($3 - $a$0) | 0;
    $1053 = $297;
    $1054 = $299;
    $a$2 = $a$0;
    $fl$6 = $$fl$4;
    $p$5 = ($p$2 | 0) > ($307 | 0) ? $p$2 : $307;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $z$2 = $2;
   } else {
    $1053 = $297;
    $1054 = $299;
    $a$2 = $2;
    $fl$6 = $$fl$4;
    $p$5 = 0;
    $pl$2 = $pl$1;
    $prefix$2 = $prefix$1;
    $z$2 = $2;
   }
  } else if ((label | 0) == 105) {
   label = 0;
   $333 = $fl$1$ & 73728;
   $335 = ($w$1 | 0) > ($i$0$lcssa273 | 0);
   if (($333 | 0) == 0 & $335) {
    $336 = $w$1 - $i$0$lcssa273 | 0;
    _memset($pad$i | 0, 32, ($336 >>> 0 > 256 ? 256 : $336) | 0) | 0;
    if ($336 >>> 0 > 255) {
     $$01$i67 = $336;
     do {
      ___fwritex($pad$i, 256, $f) | 0;
      $$01$i67 = $$01$i67 + -256 | 0;
     } while ($$01$i67 >>> 0 > 255);
     $$0$lcssa$i69 = $336 & 255;
    } else $$0$lcssa$i69 = $336;
    ___fwritex($pad$i, $$0$lcssa$i69, $f) | 0;
   }
   L478 : do if ($i$0$lcssa273) {
    $i$1186 = 0;
    $ws$1187 = $1060;
    while (1) {
     $344 = HEAP32[$ws$1187 >> 2] | 0;
     if (!$344) break L478;
     $346 = _wctomb($mb, $344) | 0;
     $i$1186 = $346 + $i$1186 | 0;
     if (($i$1186 | 0) > ($i$0$lcssa273 | 0)) break L478;
     ___fwritex($mb, $346, $f) | 0;
     if ($i$1186 >>> 0 >= $i$0$lcssa273 >>> 0) break; else $ws$1187 = $ws$1187 + 4 | 0;
    }
   } while (0);
   if (($333 | 0) == 8192 & $335) {
    $352 = $w$1 - $i$0$lcssa273 | 0;
    _memset($pad$i | 0, 32, ($352 >>> 0 > 256 ? 256 : $352) | 0) | 0;
    if ($352 >>> 0 > 255) {
     $$01$i74 = $352;
     do {
      ___fwritex($pad$i, 256, $f) | 0;
      $$01$i74 = $$01$i74 + -256 | 0;
     } while ($$01$i74 >>> 0 > 255);
     $$0$lcssa$i76 = $352 & 255;
    } else $$0$lcssa$i76 = $352;
    ___fwritex($pad$i, $$0$lcssa$i76, $f) | 0;
   }
   $1044 = $1059;
   $1045 = $222;
   $23 = $$lcssa299;
   $cnt$0 = $cnt$1;
   $l$0 = $335 ? $w$1 : $i$0$lcssa273;
   $l10n$0 = $l10n$3;
   continue;
  }
  $939 = $z$2 - $a$2 | 0;
  $$p$5 = ($p$5 | 0) < ($939 | 0) ? $939 : $p$5;
  $941 = $pl$2 + $$p$5 | 0;
  $w$2 = ($w$1 | 0) < ($941 | 0) ? $941 : $w$1;
  $943 = $fl$6 & 73728;
  $945 = ($w$2 | 0) > ($941 | 0);
  if (($943 | 0) == 0 & $945) {
   $946 = $w$2 - $941 | 0;
   _memset($pad$i | 0, 32, ($946 >>> 0 > 256 ? 256 : $946) | 0) | 0;
   if ($946 >>> 0 > 255) {
    $$01$i84 = $946;
    do {
     ___fwritex($pad$i, 256, $f) | 0;
     $$01$i84 = $$01$i84 + -256 | 0;
    } while ($$01$i84 >>> 0 > 255);
    $$0$lcssa$i86 = $946 & 255;
   } else $$0$lcssa$i86 = $946;
   ___fwritex($pad$i, $$0$lcssa$i86, $f) | 0;
  }
  ___fwritex($prefix$2, $pl$2, $f) | 0;
  if (($943 | 0) == 65536 & $945) {
   $954 = $w$2 - $941 | 0;
   _memset($pad$i | 0, 48, ($954 >>> 0 > 256 ? 256 : $954) | 0) | 0;
   if ($954 >>> 0 > 255) {
    $$01$i60 = $954;
    do {
     ___fwritex($pad$i, 256, $f) | 0;
     $$01$i60 = $$01$i60 + -256 | 0;
    } while ($$01$i60 >>> 0 > 255);
    $$0$lcssa$i62 = $954 & 255;
   } else $$0$lcssa$i62 = $954;
   ___fwritex($pad$i, $$0$lcssa$i62, $f) | 0;
  }
  if (($$p$5 | 0) > ($939 | 0)) {
   $962 = $$p$5 - $939 | 0;
   _memset($pad$i | 0, 48, ($962 >>> 0 > 256 ? 256 : $962) | 0) | 0;
   if ($962 >>> 0 > 255) {
    $$01$i45 = $962;
    do {
     ___fwritex($pad$i, 256, $f) | 0;
     $$01$i45 = $$01$i45 + -256 | 0;
    } while ($$01$i45 >>> 0 > 255);
    $$0$lcssa$i47 = $962 & 255;
   } else $$0$lcssa$i47 = $962;
   ___fwritex($pad$i, $$0$lcssa$i47, $f) | 0;
  }
  ___fwritex($a$2, $939, $f) | 0;
  if (!(($943 | 0) == 8192 & $945)) {
   $1044 = $1053;
   $1045 = $1054;
   $23 = $$lcssa299;
   $cnt$0 = $cnt$1;
   $l$0 = $w$2;
   $l10n$0 = $l10n$3;
   continue;
  }
  $970 = $w$2 - $941 | 0;
  _memset($pad$i | 0, 32, ($970 >>> 0 > 256 ? 256 : $970) | 0) | 0;
  if ($970 >>> 0 > 255) {
   $$01$i = $970;
   do {
    ___fwritex($pad$i, 256, $f) | 0;
    $$01$i = $$01$i + -256 | 0;
   } while ($$01$i >>> 0 > 255);
   $$0$lcssa$i = $970 & 255;
  } else $$0$lcssa$i = $970;
  ___fwritex($pad$i, $$0$lcssa$i, $f) | 0;
  $1044 = $1053;
  $1045 = $1054;
  $23 = $$lcssa299;
  $cnt$0 = $cnt$1;
  $l$0 = $w$2;
  $l10n$0 = $l10n$3;
 }
 if ((label | 0) == 351) {
  if ($f) {
   $$0 = $cnt$1$lcssa;
   STACKTOP = sp;
   return $$0 | 0;
  }
  if (!$l10n$0$lcssa) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else $i$2162 = 1;
  while (1) {
   $980 = HEAP32[$nl_type + ($i$2162 << 2) >> 2] | 0;
   if (!$980) {
    $i$3160 = $i$2162;
    break;
   }
   $982 = $nl_arg + ($i$2162 << 3) | 0;
   L533 : do if ($980 >>> 0 <= 20) do switch ($980 | 0) {
   case 9:
    {
     $arglist_current35 = HEAP32[$ap >> 2] | 0;
     $984 = HEAP32[$arglist_current35 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current35 + 4;
     HEAP32[$982 >> 2] = $984;
     break L533;
     break;
    }
   case 10:
    {
     $arglist_current38 = HEAP32[$ap >> 2] | 0;
     $985 = HEAP32[$arglist_current38 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current38 + 4;
     $988 = $982;
     HEAP32[$988 >> 2] = $985;
     HEAP32[$988 + 4 >> 2] = (($985 | 0) < 0) << 31 >> 31;
     break L533;
     break;
    }
   case 11:
    {
     $arglist_current41 = HEAP32[$ap >> 2] | 0;
     $992 = HEAP32[$arglist_current41 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current41 + 4;
     $993 = $982;
     HEAP32[$993 >> 2] = $992;
     HEAP32[$993 + 4 >> 2] = 0;
     break L533;
     break;
    }
   case 12:
    {
     $arglist_current44 = HEAP32[$ap >> 2] | 0;
     $997 = $arglist_current44;
     $999 = HEAP32[$997 >> 2] | 0;
     $1002 = HEAP32[$997 + 4 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current44 + 8;
     $1003 = $982;
     HEAP32[$1003 >> 2] = $999;
     HEAP32[$1003 + 4 >> 2] = $1002;
     break L533;
     break;
    }
   case 13:
    {
     $arglist_current47 = HEAP32[$ap >> 2] | 0;
     $1007 = HEAP32[$arglist_current47 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current47 + 4;
     $1009 = ($1007 & 65535) << 16 >> 16;
     $1012 = $982;
     HEAP32[$1012 >> 2] = $1009;
     HEAP32[$1012 + 4 >> 2] = (($1009 | 0) < 0) << 31 >> 31;
     break L533;
     break;
    }
   case 14:
    {
     $arglist_current50 = HEAP32[$ap >> 2] | 0;
     $1016 = HEAP32[$arglist_current50 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current50 + 4;
     $1017 = $982;
     HEAP32[$1017 >> 2] = $1016 & 65535;
     HEAP32[$1017 + 4 >> 2] = 0;
     break L533;
     break;
    }
   case 15:
    {
     $arglist_current53 = HEAP32[$ap >> 2] | 0;
     $1021 = HEAP32[$arglist_current53 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current53 + 4;
     $1023 = ($1021 & 255) << 24 >> 24;
     $1026 = $982;
     HEAP32[$1026 >> 2] = $1023;
     HEAP32[$1026 + 4 >> 2] = (($1023 | 0) < 0) << 31 >> 31;
     break L533;
     break;
    }
   case 16:
    {
     $arglist_current56 = HEAP32[$ap >> 2] | 0;
     $1030 = HEAP32[$arglist_current56 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current56 + 4;
     $1031 = $982;
     HEAP32[$1031 >> 2] = $1030 & 255;
     HEAP32[$1031 + 4 >> 2] = 0;
     break L533;
     break;
    }
   case 17:
    {
     $arglist_current59 = HEAP32[$ap >> 2] | 0;
     HEAP32[tempDoublePtr >> 2] = HEAP32[$arglist_current59 >> 2];
     HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arglist_current59 + 4 >> 2];
     $1035 = +HEAPF64[tempDoublePtr >> 3];
     HEAP32[$ap >> 2] = $arglist_current59 + 8;
     HEAPF64[$982 >> 3] = $1035;
     break L533;
     break;
    }
   case 18:
    {
     $arglist_current62 = HEAP32[$ap >> 2] | 0;
     HEAP32[tempDoublePtr >> 2] = HEAP32[$arglist_current62 >> 2];
     HEAP32[tempDoublePtr + 4 >> 2] = HEAP32[$arglist_current62 + 4 >> 2];
     $1036 = +HEAPF64[tempDoublePtr >> 3];
     HEAP32[$ap >> 2] = $arglist_current62 + 8;
     HEAPF64[$982 >> 3] = $1036;
     break L533;
     break;
    }
   default:
    break L533;
   } while (0); while (0);
   $i$2162 = $i$2162 + 1 | 0;
   if (($i$2162 | 0) >= 10) {
    $$0 = 1;
    label = 369;
    break;
   }
  }
  if ((label | 0) == 369) {
   STACKTOP = sp;
   return $$0 | 0;
  }
  while (1) {
   if (HEAP32[$nl_type + ($i$3160 << 2) >> 2] | 0) {
    $$0 = -1;
    label = 369;
    break;
   }
   $i$3160 = $i$3160 + 1 | 0;
   if (($i$3160 | 0) >= 10) {
    $$0 = 1;
    label = 369;
    break;
   }
  }
  if ((label | 0) == 369) {
   STACKTOP = sp;
   return $$0 | 0;
  }
 } else if ((label | 0) == 369) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$lcssa = 0, $$lcssa112 = 0, $$lcssa116 = 0, $$lcssa117 = 0, $$lcssa118 = 0, $$lcssa120 = 0, $$lcssa123 = 0, $$lcssa125 = 0, $$lcssa127 = 0, $$lcssa130 = 0, $$lcssa132 = 0, $$lcssa134 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i24$iZ2D = 0, $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi59$i$iZ2D = 0, $$pre$phiZ2D = 0, $$rsize$3$i = 0, $$sum$i19$i = 0, $$sum2$i21$i = 0, $$sum3132$i$i = 0, $$sum67$i$i = 0, $100 = 0, $1000 = 0, $1003 = 0, $1005 = 0, $1008 = 0, $1013 = 0, $1019 = 0, $1023 = 0, $1024 = 0, $1031 = 0, $1040 = 0, $1043 = 0, $1048 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $106 = 0, $1064 = 0, $1066 = 0, $1067 = 0, $110 = 0, $112 = 0, $113 = 0, $115 = 0, $117 = 0, $119 = 0, $12 = 0, $121 = 0, $123 = 0, $125 = 0, $127 = 0, $13 = 0, $132 = 0, $138 = 0, $14 = 0, $141 = 0, $144 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $151 = 0, $154 = 0, $156 = 0, $159 = 0, $16 = 0, $161 = 0, $164 = 0, $167 = 0, $168 = 0, $17 = 0, $170 = 0, $171 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $18 = 0, $182 = 0, $183 = 0, $192 = 0, $197 = 0, $201 = 0, $207 = 0, $214 = 0, $217 = 0, $225 = 0, $227 = 0, $228 = 0, $229 = 0, $230 = 0, $231 = 0, $232 = 0, $236 = 0, $237 = 0, $245 = 0, $246 = 0, $247 = 0, $249 = 0, $25 = 0, $250 = 0, $255 = 0, $256 = 0, $259 = 0, $261 = 0, $264 = 0, $269 = 0, $276 = 0, $28 = 0, $282 = 0, $285 = 0, $286 = 0, $290 = 0, $300 = 0, $303 = 0, $307 = 0, $309 = 0, $31 = 0, $310 = 0, $312 = 0, $314 = 0, $316 = 0, $318 = 0, $320 = 0, $322 = 0, $324 = 0, $334 = 0, $335 = 0, $337 = 0, $34 = 0, $346 = 0, $348 = 0, $351 = 0, $353 = 0, $356 = 0, $358 = 0, $361 = 0, $364 = 0, $365 = 0, $367 = 0, $368 = 0, $370 = 0, $371 = 0, $373 = 0, $374 = 0, $379 = 0, $38 = 0, $380 = 0, $389 = 0, $394 = 0, $398 = 0, $4 = 0, $404 = 0, $41 = 0, $411 = 0, $414 = 0, $422 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $431 = 0, $432 = 0, $438 = 0, $44 = 0, $443 = 0, $444 = 0, $447 = 0, $449 = 0, $452 = 0, $457 = 0, $46 = 0, $463 = 0, $467 = 0, $468 = 0, $47 = 0, $475 = 0, $484 = 0, $487 = 0, $49 = 0, $492 = 0, $499 = 0, $5 = 0, $500 = 0, $501 = 0, $509 = 0, $51 = 0, $511 = 0, $512 = 0, $522 = 0, $526 = 0, $528 = 0, $529 = 0, $53 = 0, $538 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $552 = 0, $554 = 0, $555 = 0, $561 = 0, $563 = 0, $565 = 0, $57 = 0, $573 = 0, $575 = 0, $576 = 0, $577 = 0, $585 = 0, $586 = 0, $589 = 0, $59 = 0, $593 = 0, $597 = 0, $599 = 0, $6 = 0, $605 = 0, $609 = 0, $61 = 0, $613 = 0, $622 = 0, $623 = 0, $629 = 0, $631 = 0, $633 = 0, $636 = 0, $638 = 0, $64 = 0, $642 = 0, $643 = 0, $649 = 0, $65 = 0, $655 = 0, $656 = 0, $66 = 0, $661 = 0, $662 = 0, $663 = 0, $67 = 0, $677 = 0, $679 = 0, $68 = 0, $685 = 0, $686 = 0, $69 = 0, $691 = 0, $693 = 0, $7 = 0, $70 = 0, $703 = 0, $707 = 0, $713 = 0, $715 = 0, $720 = 0, $721 = 0, $725 = 0, $726 = 0, $731 = 0, $737 = 0, $742 = 0, $745 = 0, $746 = 0, $749 = 0, $751 = 0, $753 = 0, $756 = 0, $767 = 0, $77 = 0, $772 = 0, $774 = 0, $777 = 0, $779 = 0, $782 = 0, $785 = 0, $786 = 0, $788 = 0, $789 = 0, $791 = 0, $792 = 0, $794 = 0, $795 = 0, $80 = 0, $800 = 0, $801 = 0, $81 = 0, $810 = 0, $815 = 0, $819 = 0, $825 = 0, $833 = 0, $839 = 0, $84 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $848 = 0, $849 = 0, $855 = 0, $860 = 0, $861 = 0, $864 = 0, $866 = 0, $869 = 0, $874 = 0, $88 = 0, $880 = 0, $884 = 0, $885 = 0, $892 = 0, $90 = 0, $901 = 0, $904 = 0, $909 = 0, $91 = 0, $916 = 0, $917 = 0, $918 = 0, $92 = 0, $926 = 0, $929 = 0, $93 = 0, $930 = 0, $935 = 0, $94 = 0, $940 = 0, $941 = 0, $944 = 0, $945 = 0, $948 = 0, $95 = 0, $954 = 0, $955 = 0, $961 = 0, $965 = 0, $971 = 0, $973 = 0, $978 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $987 = 0, $988 = 0, $99 = 0, $994 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0, $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$015$i$i = 0, $K8$053$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0, $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i26$i = 0, $T$014$i$i = 0, $T$014$i$i$lcssa = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$052$i$i = 0, $T$052$i$i$lcssa = 0, $br$0$i = 0, $br$030$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0, $oldfirst$0$i$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0, $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$0$i$i$lcssa = 0, $sp$074$i = 0, $sp$074$i$lcssa = 0, $sp$173$i = 0, $sp$173$i$lcssa = 0, $ssize$0$i = 0, $ssize$1$i = 0, $ssize$129$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0, $t$2$v$3$i = 0, $t$230$i = 0, $tbase$245$i = 0, $tsize$03141$i = 0, $tsize$1$i = 0, $tsize$244$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$332$i = 0, label = 0, $965$looptemp = 0;
 do if ($bytes >>> 0 < 245) {
  if ($bytes >>> 0 < 11) $5 = 16; else $5 = $bytes + 11 & -8;
  $4 = $5 >>> 3;
  $6 = HEAP32[3508] | 0;
  $7 = $6 >>> $4;
  if ($7 & 3) {
   $12 = ($7 & 1 ^ 1) + $4 | 0;
   $13 = $12 << 1;
   $14 = 14072 + ($13 << 2) | 0;
   $15 = 14072 + ($13 + 2 << 2) | 0;
   $16 = HEAP32[$15 >> 2] | 0;
   $17 = $16 + 8 | 0;
   $18 = HEAP32[$17 >> 2] | 0;
   do if (($14 | 0) == ($18 | 0)) HEAP32[3508] = $6 & ~(1 << $12); else {
    if ($18 >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort();
    $25 = $18 + 12 | 0;
    if ((HEAP32[$25 >> 2] | 0) == ($16 | 0)) {
     HEAP32[$25 >> 2] = $14;
     HEAP32[$15 >> 2] = $18;
     break;
    } else _abort();
   } while (0);
   $28 = $12 << 3;
   HEAP32[$16 + 4 >> 2] = $28 | 3;
   $31 = $16 + ($28 | 4) | 0;
   HEAP32[$31 >> 2] = HEAP32[$31 >> 2] | 1;
   $mem$0 = $17;
   return $mem$0 | 0;
  }
  $34 = HEAP32[3510] | 0;
  if ($5 >>> 0 > $34 >>> 0) {
   if ($7) {
    $38 = 2 << $4;
    $41 = $7 << $4 & ($38 | 0 - $38);
    $44 = ($41 & 0 - $41) + -1 | 0;
    $46 = $44 >>> 12 & 16;
    $47 = $44 >>> $46;
    $49 = $47 >>> 5 & 8;
    $51 = $47 >>> $49;
    $53 = $51 >>> 2 & 4;
    $55 = $51 >>> $53;
    $57 = $55 >>> 1 & 2;
    $59 = $55 >>> $57;
    $61 = $59 >>> 1 & 1;
    $64 = ($49 | $46 | $53 | $57 | $61) + ($59 >>> $61) | 0;
    $65 = $64 << 1;
    $66 = 14072 + ($65 << 2) | 0;
    $67 = 14072 + ($65 + 2 << 2) | 0;
    $68 = HEAP32[$67 >> 2] | 0;
    $69 = $68 + 8 | 0;
    $70 = HEAP32[$69 >> 2] | 0;
    do if (($66 | 0) == ($70 | 0)) {
     HEAP32[3508] = $6 & ~(1 << $64);
     $88 = $34;
    } else {
     if ($70 >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort();
     $77 = $70 + 12 | 0;
     if ((HEAP32[$77 >> 2] | 0) == ($68 | 0)) {
      HEAP32[$77 >> 2] = $66;
      HEAP32[$67 >> 2] = $70;
      $88 = HEAP32[3510] | 0;
      break;
     } else _abort();
    } while (0);
    $80 = $64 << 3;
    $81 = $80 - $5 | 0;
    HEAP32[$68 + 4 >> 2] = $5 | 3;
    $84 = $68 + $5 | 0;
    HEAP32[$68 + ($5 | 4) >> 2] = $81 | 1;
    HEAP32[$68 + $80 >> 2] = $81;
    if ($88) {
     $90 = HEAP32[3513] | 0;
     $91 = $88 >>> 3;
     $92 = $91 << 1;
     $93 = 14072 + ($92 << 2) | 0;
     $94 = HEAP32[3508] | 0;
     $95 = 1 << $91;
     if (!($94 & $95)) {
      HEAP32[3508] = $94 | $95;
      $$pre$phiZ2D = 14072 + ($92 + 2 << 2) | 0;
      $F4$0 = $93;
     } else {
      $99 = 14072 + ($92 + 2 << 2) | 0;
      $100 = HEAP32[$99 >> 2] | 0;
      if ($100 >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort(); else {
       $$pre$phiZ2D = $99;
       $F4$0 = $100;
      }
     }
     HEAP32[$$pre$phiZ2D >> 2] = $90;
     HEAP32[$F4$0 + 12 >> 2] = $90;
     HEAP32[$90 + 8 >> 2] = $F4$0;
     HEAP32[$90 + 12 >> 2] = $93;
    }
    HEAP32[3510] = $81;
    HEAP32[3513] = $84;
    $mem$0 = $69;
    return $mem$0 | 0;
   }
   $106 = HEAP32[3509] | 0;
   if (!$106) $nb$0 = $5; else {
    $110 = ($106 & 0 - $106) + -1 | 0;
    $112 = $110 >>> 12 & 16;
    $113 = $110 >>> $112;
    $115 = $113 >>> 5 & 8;
    $117 = $113 >>> $115;
    $119 = $117 >>> 2 & 4;
    $121 = $117 >>> $119;
    $123 = $121 >>> 1 & 2;
    $125 = $121 >>> $123;
    $127 = $125 >>> 1 & 1;
    $132 = HEAP32[14336 + (($115 | $112 | $119 | $123 | $127) + ($125 >>> $127) << 2) >> 2] | 0;
    $rsize$0$i = (HEAP32[$132 + 4 >> 2] & -8) - $5 | 0;
    $t$0$i = $132;
    $v$0$i = $132;
    while (1) {
     $138 = HEAP32[$t$0$i + 16 >> 2] | 0;
     if (!$138) {
      $141 = HEAP32[$t$0$i + 20 >> 2] | 0;
      if (!$141) {
       $rsize$0$i$lcssa = $rsize$0$i;
       $v$0$i$lcssa = $v$0$i;
       break;
      } else $144 = $141;
     } else $144 = $138;
     $147 = (HEAP32[$144 + 4 >> 2] & -8) - $5 | 0;
     $148 = $147 >>> 0 < $rsize$0$i >>> 0;
     $rsize$0$i = $148 ? $147 : $rsize$0$i;
     $t$0$i = $144;
     $v$0$i = $148 ? $144 : $v$0$i;
    }
    $149 = HEAP32[3512] | 0;
    if ($v$0$i$lcssa >>> 0 < $149 >>> 0) _abort();
    $151 = $v$0$i$lcssa + $5 | 0;
    if ($v$0$i$lcssa >>> 0 >= $151 >>> 0) _abort();
    $154 = HEAP32[$v$0$i$lcssa + 24 >> 2] | 0;
    $156 = HEAP32[$v$0$i$lcssa + 12 >> 2] | 0;
    do if (($156 | 0) == ($v$0$i$lcssa | 0)) {
     $167 = $v$0$i$lcssa + 20 | 0;
     $168 = HEAP32[$167 >> 2] | 0;
     if (!$168) {
      $170 = $v$0$i$lcssa + 16 | 0;
      $171 = HEAP32[$170 >> 2] | 0;
      if (!$171) {
       $R$1$i = 0;
       break;
      } else {
       $R$0$i = $171;
       $RP$0$i = $170;
      }
     } else {
      $R$0$i = $168;
      $RP$0$i = $167;
     }
     while (1) {
      $173 = $R$0$i + 20 | 0;
      $174 = HEAP32[$173 >> 2] | 0;
      if ($174) {
       $R$0$i = $174;
       $RP$0$i = $173;
       continue;
      }
      $176 = $R$0$i + 16 | 0;
      $177 = HEAP32[$176 >> 2] | 0;
      if (!$177) {
       $R$0$i$lcssa = $R$0$i;
       $RP$0$i$lcssa = $RP$0$i;
       break;
      } else {
       $R$0$i = $177;
       $RP$0$i = $176;
      }
     }
     if ($RP$0$i$lcssa >>> 0 < $149 >>> 0) _abort(); else {
      HEAP32[$RP$0$i$lcssa >> 2] = 0;
      $R$1$i = $R$0$i$lcssa;
      break;
     }
    } else {
     $159 = HEAP32[$v$0$i$lcssa + 8 >> 2] | 0;
     if ($159 >>> 0 < $149 >>> 0) _abort();
     $161 = $159 + 12 | 0;
     if ((HEAP32[$161 >> 2] | 0) != ($v$0$i$lcssa | 0)) _abort();
     $164 = $156 + 8 | 0;
     if ((HEAP32[$164 >> 2] | 0) == ($v$0$i$lcssa | 0)) {
      HEAP32[$161 >> 2] = $156;
      HEAP32[$164 >> 2] = $159;
      $R$1$i = $156;
      break;
     } else _abort();
    } while (0);
    do if ($154) {
     $182 = HEAP32[$v$0$i$lcssa + 28 >> 2] | 0;
     $183 = 14336 + ($182 << 2) | 0;
     if (($v$0$i$lcssa | 0) == (HEAP32[$183 >> 2] | 0)) {
      HEAP32[$183 >> 2] = $R$1$i;
      if (!$R$1$i) {
       HEAP32[3509] = HEAP32[3509] & ~(1 << $182);
       break;
      }
     } else {
      if ($154 >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort();
      $192 = $154 + 16 | 0;
      if ((HEAP32[$192 >> 2] | 0) == ($v$0$i$lcssa | 0)) HEAP32[$192 >> 2] = $R$1$i; else HEAP32[$154 + 20 >> 2] = $R$1$i;
      if (!$R$1$i) break;
     }
     $197 = HEAP32[3512] | 0;
     if ($R$1$i >>> 0 < $197 >>> 0) _abort();
     HEAP32[$R$1$i + 24 >> 2] = $154;
     $201 = HEAP32[$v$0$i$lcssa + 16 >> 2] | 0;
     do if ($201) if ($201 >>> 0 < $197 >>> 0) _abort(); else {
      HEAP32[$R$1$i + 16 >> 2] = $201;
      HEAP32[$201 + 24 >> 2] = $R$1$i;
      break;
     } while (0);
     $207 = HEAP32[$v$0$i$lcssa + 20 >> 2] | 0;
     if ($207) if ($207 >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort(); else {
      HEAP32[$R$1$i + 20 >> 2] = $207;
      HEAP32[$207 + 24 >> 2] = $R$1$i;
      break;
     }
    } while (0);
    if ($rsize$0$i$lcssa >>> 0 < 16) {
     $214 = $rsize$0$i$lcssa + $5 | 0;
     HEAP32[$v$0$i$lcssa + 4 >> 2] = $214 | 3;
     $217 = $v$0$i$lcssa + ($214 + 4) | 0;
     HEAP32[$217 >> 2] = HEAP32[$217 >> 2] | 1;
    } else {
     HEAP32[$v$0$i$lcssa + 4 >> 2] = $5 | 3;
     HEAP32[$v$0$i$lcssa + ($5 | 4) >> 2] = $rsize$0$i$lcssa | 1;
     HEAP32[$v$0$i$lcssa + ($rsize$0$i$lcssa + $5) >> 2] = $rsize$0$i$lcssa;
     $225 = HEAP32[3510] | 0;
     if ($225) {
      $227 = HEAP32[3513] | 0;
      $228 = $225 >>> 3;
      $229 = $228 << 1;
      $230 = 14072 + ($229 << 2) | 0;
      $231 = HEAP32[3508] | 0;
      $232 = 1 << $228;
      if (!($231 & $232)) {
       HEAP32[3508] = $231 | $232;
       $$pre$phi$iZ2D = 14072 + ($229 + 2 << 2) | 0;
       $F1$0$i = $230;
      } else {
       $236 = 14072 + ($229 + 2 << 2) | 0;
       $237 = HEAP32[$236 >> 2] | 0;
       if ($237 >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort(); else {
        $$pre$phi$iZ2D = $236;
        $F1$0$i = $237;
       }
      }
      HEAP32[$$pre$phi$iZ2D >> 2] = $227;
      HEAP32[$F1$0$i + 12 >> 2] = $227;
      HEAP32[$227 + 8 >> 2] = $F1$0$i;
      HEAP32[$227 + 12 >> 2] = $230;
     }
     HEAP32[3510] = $rsize$0$i$lcssa;
     HEAP32[3513] = $151;
    }
    $mem$0 = $v$0$i$lcssa + 8 | 0;
    return $mem$0 | 0;
   }
  } else $nb$0 = $5;
 } else if ($bytes >>> 0 > 4294967231) $nb$0 = -1; else {
  $245 = $bytes + 11 | 0;
  $246 = $245 & -8;
  $247 = HEAP32[3509] | 0;
  if (!$247) $nb$0 = $246; else {
   $249 = 0 - $246 | 0;
   $250 = $245 >>> 8;
   if (!$250) $idx$0$i = 0; else if ($246 >>> 0 > 16777215) $idx$0$i = 31; else {
    $255 = ($250 + 1048320 | 0) >>> 16 & 8;
    $256 = $250 << $255;
    $259 = ($256 + 520192 | 0) >>> 16 & 4;
    $261 = $256 << $259;
    $264 = ($261 + 245760 | 0) >>> 16 & 2;
    $269 = 14 - ($259 | $255 | $264) + ($261 << $264 >>> 15) | 0;
    $idx$0$i = $246 >>> ($269 + 7 | 0) & 1 | $269 << 1;
   }
   $276 = HEAP32[14336 + ($idx$0$i << 2) >> 2] | 0;
   L126 : do if (!$276) {
    $rsize$2$i = $249;
    $t$1$i = 0;
    $v$2$i = 0;
   } else {
    if (($idx$0$i | 0) == 31) $282 = 0; else $282 = 25 - ($idx$0$i >>> 1) | 0;
    $rsize$0$i15 = $249;
    $rst$0$i = 0;
    $sizebits$0$i = $246 << $282;
    $t$0$i14 = $276;
    $v$0$i16 = 0;
    while (1) {
     $285 = HEAP32[$t$0$i14 + 4 >> 2] & -8;
     $286 = $285 - $246 | 0;
     if ($286 >>> 0 < $rsize$0$i15 >>> 0) if (($285 | 0) == ($246 | 0)) {
      $rsize$2$i = $286;
      $t$1$i = $t$0$i14;
      $v$2$i = $t$0$i14;
      break L126;
     } else {
      $rsize$1$i = $286;
      $v$1$i = $t$0$i14;
     } else {
      $rsize$1$i = $rsize$0$i15;
      $v$1$i = $v$0$i16;
     }
     $290 = HEAP32[$t$0$i14 + 20 >> 2] | 0;
     $t$0$i14 = HEAP32[$t$0$i14 + ($sizebits$0$i >>> 31 << 2) + 16 >> 2] | 0;
     $rst$1$i = ($290 | 0) == 0 | ($290 | 0) == ($t$0$i14 | 0) ? $rst$0$i : $290;
     if (!$t$0$i14) {
      $rsize$2$i = $rsize$1$i;
      $t$1$i = $rst$1$i;
      $v$2$i = $v$1$i;
      break;
     } else {
      $rsize$0$i15 = $rsize$1$i;
      $rst$0$i = $rst$1$i;
      $sizebits$0$i = $sizebits$0$i << 1;
      $v$0$i16 = $v$1$i;
     }
    }
   } while (0);
   if (($t$1$i | 0) == 0 & ($v$2$i | 0) == 0) {
    $300 = 2 << $idx$0$i;
    $303 = $247 & ($300 | 0 - $300);
    if (!$303) {
     $nb$0 = $246;
     break;
    }
    $307 = ($303 & 0 - $303) + -1 | 0;
    $309 = $307 >>> 12 & 16;
    $310 = $307 >>> $309;
    $312 = $310 >>> 5 & 8;
    $314 = $310 >>> $312;
    $316 = $314 >>> 2 & 4;
    $318 = $314 >>> $316;
    $320 = $318 >>> 1 & 2;
    $322 = $318 >>> $320;
    $324 = $322 >>> 1 & 1;
    $t$2$ph$i = HEAP32[14336 + (($312 | $309 | $316 | $320 | $324) + ($322 >>> $324) << 2) >> 2] | 0;
   } else $t$2$ph$i = $t$1$i;
   if (!$t$2$ph$i) {
    $rsize$3$lcssa$i = $rsize$2$i;
    $v$3$lcssa$i = $v$2$i;
   } else {
    $rsize$331$i = $rsize$2$i;
    $t$230$i = $t$2$ph$i;
    $v$332$i = $v$2$i;
    while (1) {
     $334 = (HEAP32[$t$230$i + 4 >> 2] & -8) - $246 | 0;
     $335 = $334 >>> 0 < $rsize$331$i >>> 0;
     $$rsize$3$i = $335 ? $334 : $rsize$331$i;
     $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
     $337 = HEAP32[$t$230$i + 16 >> 2] | 0;
     if ($337) {
      $rsize$331$i = $$rsize$3$i;
      $t$230$i = $337;
      $v$332$i = $t$2$v$3$i;
      continue;
     }
     $t$230$i = HEAP32[$t$230$i + 20 >> 2] | 0;
     if (!$t$230$i) {
      $rsize$3$lcssa$i = $$rsize$3$i;
      $v$3$lcssa$i = $t$2$v$3$i;
      break;
     } else {
      $rsize$331$i = $$rsize$3$i;
      $v$332$i = $t$2$v$3$i;
     }
    }
   }
   if (!$v$3$lcssa$i) $nb$0 = $246; else if ($rsize$3$lcssa$i >>> 0 < ((HEAP32[3510] | 0) - $246 | 0) >>> 0) {
    $346 = HEAP32[3512] | 0;
    if ($v$3$lcssa$i >>> 0 < $346 >>> 0) _abort();
    $348 = $v$3$lcssa$i + $246 | 0;
    if ($v$3$lcssa$i >>> 0 >= $348 >>> 0) _abort();
    $351 = HEAP32[$v$3$lcssa$i + 24 >> 2] | 0;
    $353 = HEAP32[$v$3$lcssa$i + 12 >> 2] | 0;
    do if (($353 | 0) == ($v$3$lcssa$i | 0)) {
     $364 = $v$3$lcssa$i + 20 | 0;
     $365 = HEAP32[$364 >> 2] | 0;
     if (!$365) {
      $367 = $v$3$lcssa$i + 16 | 0;
      $368 = HEAP32[$367 >> 2] | 0;
      if (!$368) {
       $R$1$i20 = 0;
       break;
      } else {
       $R$0$i18 = $368;
       $RP$0$i17 = $367;
      }
     } else {
      $R$0$i18 = $365;
      $RP$0$i17 = $364;
     }
     while (1) {
      $370 = $R$0$i18 + 20 | 0;
      $371 = HEAP32[$370 >> 2] | 0;
      if ($371) {
       $R$0$i18 = $371;
       $RP$0$i17 = $370;
       continue;
      }
      $373 = $R$0$i18 + 16 | 0;
      $374 = HEAP32[$373 >> 2] | 0;
      if (!$374) {
       $R$0$i18$lcssa = $R$0$i18;
       $RP$0$i17$lcssa = $RP$0$i17;
       break;
      } else {
       $R$0$i18 = $374;
       $RP$0$i17 = $373;
      }
     }
     if ($RP$0$i17$lcssa >>> 0 < $346 >>> 0) _abort(); else {
      HEAP32[$RP$0$i17$lcssa >> 2] = 0;
      $R$1$i20 = $R$0$i18$lcssa;
      break;
     }
    } else {
     $356 = HEAP32[$v$3$lcssa$i + 8 >> 2] | 0;
     if ($356 >>> 0 < $346 >>> 0) _abort();
     $358 = $356 + 12 | 0;
     if ((HEAP32[$358 >> 2] | 0) != ($v$3$lcssa$i | 0)) _abort();
     $361 = $353 + 8 | 0;
     if ((HEAP32[$361 >> 2] | 0) == ($v$3$lcssa$i | 0)) {
      HEAP32[$358 >> 2] = $353;
      HEAP32[$361 >> 2] = $356;
      $R$1$i20 = $353;
      break;
     } else _abort();
    } while (0);
    do if ($351) {
     $379 = HEAP32[$v$3$lcssa$i + 28 >> 2] | 0;
     $380 = 14336 + ($379 << 2) | 0;
     if (($v$3$lcssa$i | 0) == (HEAP32[$380 >> 2] | 0)) {
      HEAP32[$380 >> 2] = $R$1$i20;
      if (!$R$1$i20) {
       HEAP32[3509] = HEAP32[3509] & ~(1 << $379);
       break;
      }
     } else {
      if ($351 >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort();
      $389 = $351 + 16 | 0;
      if ((HEAP32[$389 >> 2] | 0) == ($v$3$lcssa$i | 0)) HEAP32[$389 >> 2] = $R$1$i20; else HEAP32[$351 + 20 >> 2] = $R$1$i20;
      if (!$R$1$i20) break;
     }
     $394 = HEAP32[3512] | 0;
     if ($R$1$i20 >>> 0 < $394 >>> 0) _abort();
     HEAP32[$R$1$i20 + 24 >> 2] = $351;
     $398 = HEAP32[$v$3$lcssa$i + 16 >> 2] | 0;
     do if ($398) if ($398 >>> 0 < $394 >>> 0) _abort(); else {
      HEAP32[$R$1$i20 + 16 >> 2] = $398;
      HEAP32[$398 + 24 >> 2] = $R$1$i20;
      break;
     } while (0);
     $404 = HEAP32[$v$3$lcssa$i + 20 >> 2] | 0;
     if ($404) if ($404 >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort(); else {
      HEAP32[$R$1$i20 + 20 >> 2] = $404;
      HEAP32[$404 + 24 >> 2] = $R$1$i20;
      break;
     }
    } while (0);
    L204 : do if ($rsize$3$lcssa$i >>> 0 < 16) {
     $411 = $rsize$3$lcssa$i + $246 | 0;
     HEAP32[$v$3$lcssa$i + 4 >> 2] = $411 | 3;
     $414 = $v$3$lcssa$i + ($411 + 4) | 0;
     HEAP32[$414 >> 2] = HEAP32[$414 >> 2] | 1;
    } else {
     HEAP32[$v$3$lcssa$i + 4 >> 2] = $246 | 3;
     HEAP32[$v$3$lcssa$i + ($246 | 4) >> 2] = $rsize$3$lcssa$i | 1;
     HEAP32[$v$3$lcssa$i + ($rsize$3$lcssa$i + $246) >> 2] = $rsize$3$lcssa$i;
     $422 = $rsize$3$lcssa$i >>> 3;
     if ($rsize$3$lcssa$i >>> 0 < 256) {
      $424 = $422 << 1;
      $425 = 14072 + ($424 << 2) | 0;
      $426 = HEAP32[3508] | 0;
      $427 = 1 << $422;
      do if (!($426 & $427)) {
       HEAP32[3508] = $426 | $427;
       $$pre$phi$i26Z2D = 14072 + ($424 + 2 << 2) | 0;
       $F5$0$i = $425;
      } else {
       $431 = 14072 + ($424 + 2 << 2) | 0;
       $432 = HEAP32[$431 >> 2] | 0;
       if ($432 >>> 0 >= (HEAP32[3512] | 0) >>> 0) {
        $$pre$phi$i26Z2D = $431;
        $F5$0$i = $432;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i26Z2D >> 2] = $348;
      HEAP32[$F5$0$i + 12 >> 2] = $348;
      HEAP32[$v$3$lcssa$i + ($246 + 8) >> 2] = $F5$0$i;
      HEAP32[$v$3$lcssa$i + ($246 + 12) >> 2] = $425;
      break;
     }
     $438 = $rsize$3$lcssa$i >>> 8;
     if (!$438) $I7$0$i = 0; else if ($rsize$3$lcssa$i >>> 0 > 16777215) $I7$0$i = 31; else {
      $443 = ($438 + 1048320 | 0) >>> 16 & 8;
      $444 = $438 << $443;
      $447 = ($444 + 520192 | 0) >>> 16 & 4;
      $449 = $444 << $447;
      $452 = ($449 + 245760 | 0) >>> 16 & 2;
      $457 = 14 - ($447 | $443 | $452) + ($449 << $452 >>> 15) | 0;
      $I7$0$i = $rsize$3$lcssa$i >>> ($457 + 7 | 0) & 1 | $457 << 1;
     }
     $463 = 14336 + ($I7$0$i << 2) | 0;
     HEAP32[$v$3$lcssa$i + ($246 + 28) >> 2] = $I7$0$i;
     HEAP32[$v$3$lcssa$i + ($246 + 20) >> 2] = 0;
     HEAP32[$v$3$lcssa$i + ($246 + 16) >> 2] = 0;
     $467 = HEAP32[3509] | 0;
     $468 = 1 << $I7$0$i;
     if (!($467 & $468)) {
      HEAP32[3509] = $467 | $468;
      HEAP32[$463 >> 2] = $348;
      HEAP32[$v$3$lcssa$i + ($246 + 24) >> 2] = $463;
      HEAP32[$v$3$lcssa$i + ($246 + 12) >> 2] = $348;
      HEAP32[$v$3$lcssa$i + ($246 + 8) >> 2] = $348;
      break;
     }
     $475 = HEAP32[$463 >> 2] | 0;
     if (($I7$0$i | 0) == 31) $484 = 0; else $484 = 25 - ($I7$0$i >>> 1) | 0;
     L225 : do if ((HEAP32[$475 + 4 >> 2] & -8 | 0) == ($rsize$3$lcssa$i | 0)) $T$0$lcssa$i = $475; else {
      $K12$029$i = $rsize$3$lcssa$i << $484;
      $T$028$i = $475;
      while (1) {
       $492 = $T$028$i + ($K12$029$i >>> 31 << 2) + 16 | 0;
       $487 = HEAP32[$492 >> 2] | 0;
       if (!$487) {
        $$lcssa134 = $492;
        $T$028$i$lcssa = $T$028$i;
        break;
       }
       if ((HEAP32[$487 + 4 >> 2] & -8 | 0) == ($rsize$3$lcssa$i | 0)) {
        $T$0$lcssa$i = $487;
        break L225;
       } else {
        $K12$029$i = $K12$029$i << 1;
        $T$028$i = $487;
       }
      }
      if ($$lcssa134 >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort(); else {
       HEAP32[$$lcssa134 >> 2] = $348;
       HEAP32[$v$3$lcssa$i + ($246 + 24) >> 2] = $T$028$i$lcssa;
       HEAP32[$v$3$lcssa$i + ($246 + 12) >> 2] = $348;
       HEAP32[$v$3$lcssa$i + ($246 + 8) >> 2] = $348;
       break L204;
      }
     } while (0);
     $499 = $T$0$lcssa$i + 8 | 0;
     $500 = HEAP32[$499 >> 2] | 0;
     $501 = HEAP32[3512] | 0;
     if ($T$0$lcssa$i >>> 0 >= $501 >>> 0 & $500 >>> 0 >= $501 >>> 0) {
      HEAP32[$500 + 12 >> 2] = $348;
      HEAP32[$499 >> 2] = $348;
      HEAP32[$v$3$lcssa$i + ($246 + 8) >> 2] = $500;
      HEAP32[$v$3$lcssa$i + ($246 + 12) >> 2] = $T$0$lcssa$i;
      HEAP32[$v$3$lcssa$i + ($246 + 24) >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $mem$0 = $v$3$lcssa$i + 8 | 0;
    return $mem$0 | 0;
   } else $nb$0 = $246;
  }
 } while (0);
 $509 = HEAP32[3510] | 0;
 if ($509 >>> 0 >= $nb$0 >>> 0) {
  $511 = $509 - $nb$0 | 0;
  $512 = HEAP32[3513] | 0;
  if ($511 >>> 0 > 15) {
   HEAP32[3513] = $512 + $nb$0;
   HEAP32[3510] = $511;
   HEAP32[$512 + ($nb$0 + 4) >> 2] = $511 | 1;
   HEAP32[$512 + $509 >> 2] = $511;
   HEAP32[$512 + 4 >> 2] = $nb$0 | 3;
  } else {
   HEAP32[3510] = 0;
   HEAP32[3513] = 0;
   HEAP32[$512 + 4 >> 2] = $509 | 3;
   $522 = $512 + ($509 + 4) | 0;
   HEAP32[$522 >> 2] = HEAP32[$522 >> 2] | 1;
  }
  $mem$0 = $512 + 8 | 0;
  return $mem$0 | 0;
 }
 $526 = HEAP32[3511] | 0;
 if ($526 >>> 0 > $nb$0 >>> 0) {
  $528 = $526 - $nb$0 | 0;
  HEAP32[3511] = $528;
  $529 = HEAP32[3514] | 0;
  HEAP32[3514] = $529 + $nb$0;
  HEAP32[$529 + ($nb$0 + 4) >> 2] = $528 | 1;
  HEAP32[$529 + 4 >> 2] = $nb$0 | 3;
  $mem$0 = $529 + 8 | 0;
  return $mem$0 | 0;
 }
 do if (!(HEAP32[3626] | 0)) {
  $538 = _sysconf(30) | 0;
  if (!($538 + -1 & $538)) {
   HEAP32[3628] = $538;
   HEAP32[3627] = $538;
   HEAP32[3629] = -1;
   HEAP32[3630] = -1;
   HEAP32[3631] = 0;
   HEAP32[3619] = 0;
   HEAP32[3626] = (_time(0) | 0) & -16 ^ 1431655768;
   break;
  } else _abort();
 } while (0);
 $545 = $nb$0 + 48 | 0;
 $546 = HEAP32[3628] | 0;
 $547 = $nb$0 + 47 | 0;
 $548 = $546 + $547 | 0;
 $549 = 0 - $546 | 0;
 $550 = $548 & $549;
 if ($550 >>> 0 <= $nb$0 >>> 0) {
  $mem$0 = 0;
  return $mem$0 | 0;
 }
 $552 = HEAP32[3618] | 0;
 if ($552) {
  $554 = HEAP32[3616] | 0;
  $555 = $554 + $550 | 0;
  if ($555 >>> 0 <= $554 >>> 0 | $555 >>> 0 > $552 >>> 0) {
   $mem$0 = 0;
   return $mem$0 | 0;
  }
 }
 L266 : do if (!(HEAP32[3619] & 4)) {
  $561 = HEAP32[3514] | 0;
  L268 : do if (!$561) label = 181; else {
   $sp$0$i$i = 14480 | 0;
   while (1) {
    $563 = HEAP32[$sp$0$i$i >> 2] | 0;
    if ($563 >>> 0 <= $561 >>> 0) {
     $565 = $sp$0$i$i + 4 | 0;
     if (($563 + (HEAP32[$565 >> 2] | 0) | 0) >>> 0 > $561 >>> 0) {
      $$lcssa130 = $sp$0$i$i;
      $$lcssa132 = $565;
      $sp$0$i$i$lcssa = $sp$0$i$i;
      break;
     }
    }
    $sp$0$i$i = HEAP32[$sp$0$i$i + 8 >> 2] | 0;
    if (!$sp$0$i$i) {
     label = 181;
     break L268;
    }
   }
   if (!$sp$0$i$i$lcssa) label = 181; else {
    $597 = $548 - (HEAP32[3511] | 0) & $549;
    if ($597 >>> 0 < 2147483647) {
     $599 = _sbrk($597 | 0) | 0;
     if (($599 | 0) == ((HEAP32[$$lcssa130 >> 2] | 0) + (HEAP32[$$lcssa132 >> 2] | 0) | 0)) {
      $br$0$i = $599;
      $ssize$1$i = $597;
      label = 190;
     } else {
      $br$030$i = $599;
      $ssize$129$i = $597;
      label = 191;
     }
    } else $tsize$03141$i = 0;
   }
  } while (0);
  do if ((label | 0) == 181) {
   $573 = _sbrk(0) | 0;
   if (($573 | 0) == (-1 | 0)) $tsize$03141$i = 0; else {
    $575 = $573;
    $576 = HEAP32[3627] | 0;
    $577 = $576 + -1 | 0;
    if (!($577 & $575)) $ssize$0$i = $550; else $ssize$0$i = $550 - $575 + ($577 + $575 & 0 - $576) | 0;
    $585 = HEAP32[3616] | 0;
    $586 = $585 + $ssize$0$i | 0;
    if ($ssize$0$i >>> 0 > $nb$0 >>> 0 & $ssize$0$i >>> 0 < 2147483647) {
     $589 = HEAP32[3618] | 0;
     if ($589) if ($586 >>> 0 <= $585 >>> 0 | $586 >>> 0 > $589 >>> 0) {
      $tsize$03141$i = 0;
      break;
     }
     $593 = _sbrk($ssize$0$i | 0) | 0;
     if (($593 | 0) == ($573 | 0)) {
      $br$0$i = $573;
      $ssize$1$i = $ssize$0$i;
      label = 190;
     } else {
      $br$030$i = $593;
      $ssize$129$i = $ssize$0$i;
      label = 191;
     }
    } else $tsize$03141$i = 0;
   }
  } while (0);
  L288 : do if ((label | 0) == 190) if (($br$0$i | 0) == (-1 | 0)) $tsize$03141$i = $ssize$1$i; else {
   $tbase$245$i = $br$0$i;
   $tsize$244$i = $ssize$1$i;
   label = 201;
   break L266;
  } else if ((label | 0) == 191) {
   $605 = 0 - $ssize$129$i | 0;
   do if (($br$030$i | 0) != (-1 | 0) & $ssize$129$i >>> 0 < 2147483647 & $545 >>> 0 > $ssize$129$i >>> 0) {
    $609 = HEAP32[3628] | 0;
    $613 = $547 - $ssize$129$i + $609 & 0 - $609;
    if ($613 >>> 0 < 2147483647) if ((_sbrk($613 | 0) | 0) == (-1 | 0)) {
     _sbrk($605 | 0) | 0;
     $tsize$03141$i = 0;
     break L288;
    } else {
     $ssize$2$i = $613 + $ssize$129$i | 0;
     break;
    } else $ssize$2$i = $ssize$129$i;
   } else $ssize$2$i = $ssize$129$i; while (0);
   if (($br$030$i | 0) == (-1 | 0)) $tsize$03141$i = 0; else {
    $tbase$245$i = $br$030$i;
    $tsize$244$i = $ssize$2$i;
    label = 201;
    break L266;
   }
  } while (0);
  HEAP32[3619] = HEAP32[3619] | 4;
  $tsize$1$i = $tsize$03141$i;
  label = 198;
 } else {
  $tsize$1$i = 0;
  label = 198;
 } while (0);
 if ((label | 0) == 198) if ($550 >>> 0 < 2147483647) {
  $622 = _sbrk($550 | 0) | 0;
  $623 = _sbrk(0) | 0;
  if (($622 | 0) != (-1 | 0) & ($623 | 0) != (-1 | 0) & $622 >>> 0 < $623 >>> 0) {
   $629 = $623 - $622 | 0;
   $631 = $629 >>> 0 > ($nb$0 + 40 | 0) >>> 0;
   if ($631) {
    $tbase$245$i = $622;
    $tsize$244$i = $631 ? $629 : $tsize$1$i;
    label = 201;
   }
  }
 }
 if ((label | 0) == 201) {
  $633 = (HEAP32[3616] | 0) + $tsize$244$i | 0;
  HEAP32[3616] = $633;
  if ($633 >>> 0 > (HEAP32[3617] | 0) >>> 0) HEAP32[3617] = $633;
  $636 = HEAP32[3514] | 0;
  L308 : do if (!$636) {
   $638 = HEAP32[3512] | 0;
   if (($638 | 0) == 0 | $tbase$245$i >>> 0 < $638 >>> 0) HEAP32[3512] = $tbase$245$i;
   HEAP32[3620] = $tbase$245$i;
   HEAP32[3621] = $tsize$244$i;
   HEAP32[3623] = 0;
   HEAP32[3517] = HEAP32[3626];
   HEAP32[3516] = -1;
   $i$02$i$i = 0;
   do {
    $642 = $i$02$i$i << 1;
    $643 = 14072 + ($642 << 2) | 0;
    HEAP32[14072 + ($642 + 3 << 2) >> 2] = $643;
    HEAP32[14072 + ($642 + 2 << 2) >> 2] = $643;
    $i$02$i$i = $i$02$i$i + 1 | 0;
   } while (($i$02$i$i | 0) != 32);
   $649 = $tbase$245$i + 8 | 0;
   if (!($649 & 7)) $655 = 0; else $655 = 0 - $649 & 7;
   $656 = $tsize$244$i + -40 - $655 | 0;
   HEAP32[3514] = $tbase$245$i + $655;
   HEAP32[3511] = $656;
   HEAP32[$tbase$245$i + ($655 + 4) >> 2] = $656 | 1;
   HEAP32[$tbase$245$i + ($tsize$244$i + -36) >> 2] = 40;
   HEAP32[3515] = HEAP32[3630];
  } else {
   $sp$074$i = 14480 | 0;
   do {
    $661 = HEAP32[$sp$074$i >> 2] | 0;
    $662 = $sp$074$i + 4 | 0;
    $663 = HEAP32[$662 >> 2] | 0;
    if (($tbase$245$i | 0) == ($661 + $663 | 0)) {
     $$lcssa123 = $661;
     $$lcssa125 = $662;
     $$lcssa127 = $663;
     $sp$074$i$lcssa = $sp$074$i;
     label = 213;
     break;
    }
    $sp$074$i = HEAP32[$sp$074$i + 8 >> 2] | 0;
   } while (($sp$074$i | 0) != 0);
   if ((label | 0) == 213) if (!(HEAP32[$sp$074$i$lcssa + 12 >> 2] & 8)) if ($636 >>> 0 >= $$lcssa123 >>> 0 & $636 >>> 0 < $tbase$245$i >>> 0) {
    HEAP32[$$lcssa125 >> 2] = $$lcssa127 + $tsize$244$i;
    $677 = (HEAP32[3511] | 0) + $tsize$244$i | 0;
    $679 = $636 + 8 | 0;
    if (!($679 & 7)) $685 = 0; else $685 = 0 - $679 & 7;
    $686 = $677 - $685 | 0;
    HEAP32[3514] = $636 + $685;
    HEAP32[3511] = $686;
    HEAP32[$636 + ($685 + 4) >> 2] = $686 | 1;
    HEAP32[$636 + ($677 + 4) >> 2] = 40;
    HEAP32[3515] = HEAP32[3630];
    break;
   }
   $691 = HEAP32[3512] | 0;
   if ($tbase$245$i >>> 0 < $691 >>> 0) {
    HEAP32[3512] = $tbase$245$i;
    $756 = $tbase$245$i;
   } else $756 = $691;
   $693 = $tbase$245$i + $tsize$244$i | 0;
   $sp$173$i = 14480 | 0;
   do {
    if ((HEAP32[$sp$173$i >> 2] | 0) == ($693 | 0)) {
     $$lcssa120 = $sp$173$i;
     $sp$173$i$lcssa = $sp$173$i;
     label = 223;
     break;
    }
    $sp$173$i = HEAP32[$sp$173$i + 8 >> 2] | 0;
   } while (($sp$173$i | 0) != 0);
   if ((label | 0) == 223) if (!(HEAP32[$sp$173$i$lcssa + 12 >> 2] & 8)) {
    HEAP32[$$lcssa120 >> 2] = $tbase$245$i;
    $703 = $sp$173$i$lcssa + 4 | 0;
    HEAP32[$703 >> 2] = (HEAP32[$703 >> 2] | 0) + $tsize$244$i;
    $707 = $tbase$245$i + 8 | 0;
    if (!($707 & 7)) $713 = 0; else $713 = 0 - $707 & 7;
    $715 = $tbase$245$i + ($tsize$244$i + 8) | 0;
    if (!($715 & 7)) $720 = 0; else $720 = 0 - $715 & 7;
    $721 = $tbase$245$i + ($720 + $tsize$244$i) | 0;
    $$sum$i19$i = $713 + $nb$0 | 0;
    $725 = $tbase$245$i + $$sum$i19$i | 0;
    $726 = $721 - ($tbase$245$i + $713) - $nb$0 | 0;
    HEAP32[$tbase$245$i + ($713 + 4) >> 2] = $nb$0 | 3;
    L345 : do if (($721 | 0) == ($636 | 0)) {
     $731 = (HEAP32[3511] | 0) + $726 | 0;
     HEAP32[3511] = $731;
     HEAP32[3514] = $725;
     HEAP32[$tbase$245$i + ($$sum$i19$i + 4) >> 2] = $731 | 1;
    } else {
     if (($721 | 0) == (HEAP32[3513] | 0)) {
      $737 = (HEAP32[3510] | 0) + $726 | 0;
      HEAP32[3510] = $737;
      HEAP32[3513] = $725;
      HEAP32[$tbase$245$i + ($$sum$i19$i + 4) >> 2] = $737 | 1;
      HEAP32[$tbase$245$i + ($737 + $$sum$i19$i) >> 2] = $737;
      break;
     }
     $$sum2$i21$i = $tsize$244$i + 4 | 0;
     $742 = HEAP32[$tbase$245$i + ($$sum2$i21$i + $720) >> 2] | 0;
     if (($742 & 3 | 0) == 1) {
      $745 = $742 & -8;
      $746 = $742 >>> 3;
      L353 : do if ($742 >>> 0 < 256) {
       $749 = HEAP32[$tbase$245$i + (($720 | 8) + $tsize$244$i) >> 2] | 0;
       $751 = HEAP32[$tbase$245$i + ($tsize$244$i + 12 + $720) >> 2] | 0;
       $753 = 14072 + ($746 << 1 << 2) | 0;
       do if (($749 | 0) != ($753 | 0)) {
        if ($749 >>> 0 < $756 >>> 0) _abort();
        if ((HEAP32[$749 + 12 >> 2] | 0) == ($721 | 0)) break;
        _abort();
       } while (0);
       if (($751 | 0) == ($749 | 0)) {
        HEAP32[3508] = HEAP32[3508] & ~(1 << $746);
        break;
       }
       do if (($751 | 0) == ($753 | 0)) $$pre$phi59$i$iZ2D = $751 + 8 | 0; else {
        if ($751 >>> 0 < $756 >>> 0) _abort();
        $767 = $751 + 8 | 0;
        if ((HEAP32[$767 >> 2] | 0) == ($721 | 0)) {
         $$pre$phi59$i$iZ2D = $767;
         break;
        }
        _abort();
       } while (0);
       HEAP32[$749 + 12 >> 2] = $751;
       HEAP32[$$pre$phi59$i$iZ2D >> 2] = $749;
      } else {
       $772 = HEAP32[$tbase$245$i + (($720 | 24) + $tsize$244$i) >> 2] | 0;
       $774 = HEAP32[$tbase$245$i + ($tsize$244$i + 12 + $720) >> 2] | 0;
       do if (($774 | 0) == ($721 | 0)) {
        $$sum67$i$i = $720 | 16;
        $785 = $tbase$245$i + ($$sum2$i21$i + $$sum67$i$i) | 0;
        $786 = HEAP32[$785 >> 2] | 0;
        if (!$786) {
         $788 = $tbase$245$i + ($$sum67$i$i + $tsize$244$i) | 0;
         $789 = HEAP32[$788 >> 2] | 0;
         if (!$789) {
          $R$1$i$i = 0;
          break;
         } else {
          $R$0$i$i = $789;
          $RP$0$i$i = $788;
         }
        } else {
         $R$0$i$i = $786;
         $RP$0$i$i = $785;
        }
        while (1) {
         $791 = $R$0$i$i + 20 | 0;
         $792 = HEAP32[$791 >> 2] | 0;
         if ($792) {
          $R$0$i$i = $792;
          $RP$0$i$i = $791;
          continue;
         }
         $794 = $R$0$i$i + 16 | 0;
         $795 = HEAP32[$794 >> 2] | 0;
         if (!$795) {
          $R$0$i$i$lcssa = $R$0$i$i;
          $RP$0$i$i$lcssa = $RP$0$i$i;
          break;
         } else {
          $R$0$i$i = $795;
          $RP$0$i$i = $794;
         }
        }
        if ($RP$0$i$i$lcssa >>> 0 < $756 >>> 0) _abort(); else {
         HEAP32[$RP$0$i$i$lcssa >> 2] = 0;
         $R$1$i$i = $R$0$i$i$lcssa;
         break;
        }
       } else {
        $777 = HEAP32[$tbase$245$i + (($720 | 8) + $tsize$244$i) >> 2] | 0;
        if ($777 >>> 0 < $756 >>> 0) _abort();
        $779 = $777 + 12 | 0;
        if ((HEAP32[$779 >> 2] | 0) != ($721 | 0)) _abort();
        $782 = $774 + 8 | 0;
        if ((HEAP32[$782 >> 2] | 0) == ($721 | 0)) {
         HEAP32[$779 >> 2] = $774;
         HEAP32[$782 >> 2] = $777;
         $R$1$i$i = $774;
         break;
        } else _abort();
       } while (0);
       if (!$772) break;
       $800 = HEAP32[$tbase$245$i + ($tsize$244$i + 28 + $720) >> 2] | 0;
       $801 = 14336 + ($800 << 2) | 0;
       do if (($721 | 0) == (HEAP32[$801 >> 2] | 0)) {
        HEAP32[$801 >> 2] = $R$1$i$i;
        if ($R$1$i$i) break;
        HEAP32[3509] = HEAP32[3509] & ~(1 << $800);
        break L353;
       } else {
        if ($772 >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort();
        $810 = $772 + 16 | 0;
        if ((HEAP32[$810 >> 2] | 0) == ($721 | 0)) HEAP32[$810 >> 2] = $R$1$i$i; else HEAP32[$772 + 20 >> 2] = $R$1$i$i;
        if (!$R$1$i$i) break L353;
       } while (0);
       $815 = HEAP32[3512] | 0;
       if ($R$1$i$i >>> 0 < $815 >>> 0) _abort();
       HEAP32[$R$1$i$i + 24 >> 2] = $772;
       $$sum3132$i$i = $720 | 16;
       $819 = HEAP32[$tbase$245$i + ($$sum3132$i$i + $tsize$244$i) >> 2] | 0;
       do if ($819) if ($819 >>> 0 < $815 >>> 0) _abort(); else {
        HEAP32[$R$1$i$i + 16 >> 2] = $819;
        HEAP32[$819 + 24 >> 2] = $R$1$i$i;
        break;
       } while (0);
       $825 = HEAP32[$tbase$245$i + ($$sum2$i21$i + $$sum3132$i$i) >> 2] | 0;
       if (!$825) break;
       if ($825 >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort(); else {
        HEAP32[$R$1$i$i + 20 >> 2] = $825;
        HEAP32[$825 + 24 >> 2] = $R$1$i$i;
        break;
       }
      } while (0);
      $oldfirst$0$i$i = $tbase$245$i + (($745 | $720) + $tsize$244$i) | 0;
      $qsize$0$i$i = $745 + $726 | 0;
     } else {
      $oldfirst$0$i$i = $721;
      $qsize$0$i$i = $726;
     }
     $833 = $oldfirst$0$i$i + 4 | 0;
     HEAP32[$833 >> 2] = HEAP32[$833 >> 2] & -2;
     HEAP32[$tbase$245$i + ($$sum$i19$i + 4) >> 2] = $qsize$0$i$i | 1;
     HEAP32[$tbase$245$i + ($qsize$0$i$i + $$sum$i19$i) >> 2] = $qsize$0$i$i;
     $839 = $qsize$0$i$i >>> 3;
     if ($qsize$0$i$i >>> 0 < 256) {
      $841 = $839 << 1;
      $842 = 14072 + ($841 << 2) | 0;
      $843 = HEAP32[3508] | 0;
      $844 = 1 << $839;
      do if (!($843 & $844)) {
       HEAP32[3508] = $843 | $844;
       $$pre$phi$i24$iZ2D = 14072 + ($841 + 2 << 2) | 0;
       $F4$0$i$i = $842;
      } else {
       $848 = 14072 + ($841 + 2 << 2) | 0;
       $849 = HEAP32[$848 >> 2] | 0;
       if ($849 >>> 0 >= (HEAP32[3512] | 0) >>> 0) {
        $$pre$phi$i24$iZ2D = $848;
        $F4$0$i$i = $849;
        break;
       }
       _abort();
      } while (0);
      HEAP32[$$pre$phi$i24$iZ2D >> 2] = $725;
      HEAP32[$F4$0$i$i + 12 >> 2] = $725;
      HEAP32[$tbase$245$i + ($$sum$i19$i + 8) >> 2] = $F4$0$i$i;
      HEAP32[$tbase$245$i + ($$sum$i19$i + 12) >> 2] = $842;
      break;
     }
     $855 = $qsize$0$i$i >>> 8;
     do if (!$855) $I7$0$i$i = 0; else {
      if ($qsize$0$i$i >>> 0 > 16777215) {
       $I7$0$i$i = 31;
       break;
      }
      $860 = ($855 + 1048320 | 0) >>> 16 & 8;
      $861 = $855 << $860;
      $864 = ($861 + 520192 | 0) >>> 16 & 4;
      $866 = $861 << $864;
      $869 = ($866 + 245760 | 0) >>> 16 & 2;
      $874 = 14 - ($864 | $860 | $869) + ($866 << $869 >>> 15) | 0;
      $I7$0$i$i = $qsize$0$i$i >>> ($874 + 7 | 0) & 1 | $874 << 1;
     } while (0);
     $880 = 14336 + ($I7$0$i$i << 2) | 0;
     HEAP32[$tbase$245$i + ($$sum$i19$i + 28) >> 2] = $I7$0$i$i;
     HEAP32[$tbase$245$i + ($$sum$i19$i + 20) >> 2] = 0;
     HEAP32[$tbase$245$i + ($$sum$i19$i + 16) >> 2] = 0;
     $884 = HEAP32[3509] | 0;
     $885 = 1 << $I7$0$i$i;
     if (!($884 & $885)) {
      HEAP32[3509] = $884 | $885;
      HEAP32[$880 >> 2] = $725;
      HEAP32[$tbase$245$i + ($$sum$i19$i + 24) >> 2] = $880;
      HEAP32[$tbase$245$i + ($$sum$i19$i + 12) >> 2] = $725;
      HEAP32[$tbase$245$i + ($$sum$i19$i + 8) >> 2] = $725;
      break;
     }
     $892 = HEAP32[$880 >> 2] | 0;
     if (($I7$0$i$i | 0) == 31) $901 = 0; else $901 = 25 - ($I7$0$i$i >>> 1) | 0;
     L442 : do if ((HEAP32[$892 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) $T$0$lcssa$i26$i = $892; else {
      $K8$053$i$i = $qsize$0$i$i << $901;
      $T$052$i$i = $892;
      while (1) {
       $909 = $T$052$i$i + ($K8$053$i$i >>> 31 << 2) + 16 | 0;
       $904 = HEAP32[$909 >> 2] | 0;
       if (!$904) {
        $$lcssa = $909;
        $T$052$i$i$lcssa = $T$052$i$i;
        break;
       }
       if ((HEAP32[$904 + 4 >> 2] & -8 | 0) == ($qsize$0$i$i | 0)) {
        $T$0$lcssa$i26$i = $904;
        break L442;
       } else {
        $K8$053$i$i = $K8$053$i$i << 1;
        $T$052$i$i = $904;
       }
      }
      if ($$lcssa >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort(); else {
       HEAP32[$$lcssa >> 2] = $725;
       HEAP32[$tbase$245$i + ($$sum$i19$i + 24) >> 2] = $T$052$i$i$lcssa;
       HEAP32[$tbase$245$i + ($$sum$i19$i + 12) >> 2] = $725;
       HEAP32[$tbase$245$i + ($$sum$i19$i + 8) >> 2] = $725;
       break L345;
      }
     } while (0);
     $916 = $T$0$lcssa$i26$i + 8 | 0;
     $917 = HEAP32[$916 >> 2] | 0;
     $918 = HEAP32[3512] | 0;
     if ($T$0$lcssa$i26$i >>> 0 >= $918 >>> 0 & $917 >>> 0 >= $918 >>> 0) {
      HEAP32[$917 + 12 >> 2] = $725;
      HEAP32[$916 >> 2] = $725;
      HEAP32[$tbase$245$i + ($$sum$i19$i + 8) >> 2] = $917;
      HEAP32[$tbase$245$i + ($$sum$i19$i + 12) >> 2] = $T$0$lcssa$i26$i;
      HEAP32[$tbase$245$i + ($$sum$i19$i + 24) >> 2] = 0;
      break;
     } else _abort();
    } while (0);
    $mem$0 = $tbase$245$i + ($713 | 8) | 0;
    return $mem$0 | 0;
   }
   $sp$0$i$i$i = 14480 | 0;
   while (1) {
    $926 = HEAP32[$sp$0$i$i$i >> 2] | 0;
    if ($926 >>> 0 <= $636 >>> 0) {
     $929 = HEAP32[$sp$0$i$i$i + 4 >> 2] | 0;
     $930 = $926 + $929 | 0;
     if ($930 >>> 0 > $636 >>> 0) {
      $$lcssa116 = $926;
      $$lcssa117 = $929;
      $$lcssa118 = $930;
      break;
     }
    }
    $sp$0$i$i$i = HEAP32[$sp$0$i$i$i + 8 >> 2] | 0;
   }
   $935 = $$lcssa116 + ($$lcssa117 + -39) | 0;
   if (!($935 & 7)) $940 = 0; else $940 = 0 - $935 & 7;
   $941 = $$lcssa116 + ($$lcssa117 + -47 + $940) | 0;
   $944 = $941 >>> 0 < ($636 + 16 | 0) >>> 0 ? $636 : $941;
   $945 = $944 + 8 | 0;
   $948 = $tbase$245$i + 8 | 0;
   if (!($948 & 7)) $954 = 0; else $954 = 0 - $948 & 7;
   $955 = $tsize$244$i + -40 - $954 | 0;
   HEAP32[3514] = $tbase$245$i + $954;
   HEAP32[3511] = $955;
   HEAP32[$tbase$245$i + ($954 + 4) >> 2] = $955 | 1;
   HEAP32[$tbase$245$i + ($tsize$244$i + -36) >> 2] = 40;
   HEAP32[3515] = HEAP32[3630];
   HEAP32[$944 + 4 >> 2] = 27;
   HEAP32[$945 + 0 >> 2] = HEAP32[3620];
   HEAP32[$945 + 4 >> 2] = HEAP32[3621];
   HEAP32[$945 + 8 >> 2] = HEAP32[3622];
   HEAP32[$945 + 12 >> 2] = HEAP32[3623];
   HEAP32[3620] = $tbase$245$i;
   HEAP32[3621] = $tsize$244$i;
   HEAP32[3623] = 0;
   HEAP32[3622] = $945;
   $961 = $944 + 28 | 0;
   HEAP32[$961 >> 2] = 7;
   if (($944 + 32 | 0) >>> 0 < $$lcssa118 >>> 0) {
    $965 = $961;
    do {
     $965$looptemp = $965;
     $965 = $965 + 4 | 0;
     HEAP32[$965 >> 2] = 7;
    } while (($965$looptemp + 8 | 0) >>> 0 < $$lcssa118 >>> 0);
   }
   if (($944 | 0) != ($636 | 0)) {
    $971 = $944 - $636 | 0;
    $973 = $636 + ($971 + 4) | 0;
    HEAP32[$973 >> 2] = HEAP32[$973 >> 2] & -2;
    HEAP32[$636 + 4 >> 2] = $971 | 1;
    HEAP32[$636 + $971 >> 2] = $971;
    $978 = $971 >>> 3;
    if ($971 >>> 0 < 256) {
     $980 = $978 << 1;
     $981 = 14072 + ($980 << 2) | 0;
     $982 = HEAP32[3508] | 0;
     $983 = 1 << $978;
     do if (!($982 & $983)) {
      HEAP32[3508] = $982 | $983;
      $$pre$phi$i$iZ2D = 14072 + ($980 + 2 << 2) | 0;
      $F$0$i$i = $981;
     } else {
      $987 = 14072 + ($980 + 2 << 2) | 0;
      $988 = HEAP32[$987 >> 2] | 0;
      if ($988 >>> 0 >= (HEAP32[3512] | 0) >>> 0) {
       $$pre$phi$i$iZ2D = $987;
       $F$0$i$i = $988;
       break;
      }
      _abort();
     } while (0);
     HEAP32[$$pre$phi$i$iZ2D >> 2] = $636;
     HEAP32[$F$0$i$i + 12 >> 2] = $636;
     HEAP32[$636 + 8 >> 2] = $F$0$i$i;
     HEAP32[$636 + 12 >> 2] = $981;
     break;
    }
    $994 = $971 >>> 8;
    if (!$994) $I1$0$i$i = 0; else if ($971 >>> 0 > 16777215) $I1$0$i$i = 31; else {
     $999 = ($994 + 1048320 | 0) >>> 16 & 8;
     $1000 = $994 << $999;
     $1003 = ($1000 + 520192 | 0) >>> 16 & 4;
     $1005 = $1000 << $1003;
     $1008 = ($1005 + 245760 | 0) >>> 16 & 2;
     $1013 = 14 - ($1003 | $999 | $1008) + ($1005 << $1008 >>> 15) | 0;
     $I1$0$i$i = $971 >>> ($1013 + 7 | 0) & 1 | $1013 << 1;
    }
    $1019 = 14336 + ($I1$0$i$i << 2) | 0;
    HEAP32[$636 + 28 >> 2] = $I1$0$i$i;
    HEAP32[$636 + 20 >> 2] = 0;
    HEAP32[$636 + 16 >> 2] = 0;
    $1023 = HEAP32[3509] | 0;
    $1024 = 1 << $I1$0$i$i;
    if (!($1023 & $1024)) {
     HEAP32[3509] = $1023 | $1024;
     HEAP32[$1019 >> 2] = $636;
     HEAP32[$636 + 24 >> 2] = $1019;
     HEAP32[$636 + 12 >> 2] = $636;
     HEAP32[$636 + 8 >> 2] = $636;
     break;
    }
    $1031 = HEAP32[$1019 >> 2] | 0;
    if (($I1$0$i$i | 0) == 31) $1040 = 0; else $1040 = 25 - ($I1$0$i$i >>> 1) | 0;
    L493 : do if ((HEAP32[$1031 + 4 >> 2] & -8 | 0) == ($971 | 0)) $T$0$lcssa$i$i = $1031; else {
     $K2$015$i$i = $971 << $1040;
     $T$014$i$i = $1031;
     while (1) {
      $1048 = $T$014$i$i + ($K2$015$i$i >>> 31 << 2) + 16 | 0;
      $1043 = HEAP32[$1048 >> 2] | 0;
      if (!$1043) {
       $$lcssa112 = $1048;
       $T$014$i$i$lcssa = $T$014$i$i;
       break;
      }
      if ((HEAP32[$1043 + 4 >> 2] & -8 | 0) == ($971 | 0)) {
       $T$0$lcssa$i$i = $1043;
       break L493;
      } else {
       $K2$015$i$i = $K2$015$i$i << 1;
       $T$014$i$i = $1043;
      }
     }
     if ($$lcssa112 >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort(); else {
      HEAP32[$$lcssa112 >> 2] = $636;
      HEAP32[$636 + 24 >> 2] = $T$014$i$i$lcssa;
      HEAP32[$636 + 12 >> 2] = $636;
      HEAP32[$636 + 8 >> 2] = $636;
      break L308;
     }
    } while (0);
    $1055 = $T$0$lcssa$i$i + 8 | 0;
    $1056 = HEAP32[$1055 >> 2] | 0;
    $1057 = HEAP32[3512] | 0;
    if ($T$0$lcssa$i$i >>> 0 >= $1057 >>> 0 & $1056 >>> 0 >= $1057 >>> 0) {
     HEAP32[$1056 + 12 >> 2] = $636;
     HEAP32[$1055 >> 2] = $636;
     HEAP32[$636 + 8 >> 2] = $1056;
     HEAP32[$636 + 12 >> 2] = $T$0$lcssa$i$i;
     HEAP32[$636 + 24 >> 2] = 0;
     break;
    } else _abort();
   }
  } while (0);
  $1064 = HEAP32[3511] | 0;
  if ($1064 >>> 0 > $nb$0 >>> 0) {
   $1066 = $1064 - $nb$0 | 0;
   HEAP32[3511] = $1066;
   $1067 = HEAP32[3514] | 0;
   HEAP32[3514] = $1067 + $nb$0;
   HEAP32[$1067 + ($nb$0 + 4) >> 2] = $1066 | 1;
   HEAP32[$1067 + 4 >> 2] = $nb$0 | 3;
   $mem$0 = $1067 + 8 | 0;
   return $mem$0 | 0;
  }
 }
 HEAP32[(___errno_location() | 0) >> 2] = 12;
 $mem$0 = 0;
 return $mem$0 | 0;
}

function ___floatscan($f, $prec, $pok) {
 $f = $f | 0;
 $prec = $prec | 0;
 $pok = $pok | 0;
 var $$0 = 0.0, $$012$i = 0, $$013$i = 0, $$01332$i = 0, $$01333$i = 0, $$07$i = 0, $$0711$i = 0, $$0712$i = 0, $$1$be$i = 0, $$1$ph$i = 0, $$2$i = 0, $$21$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3127$i = 0, $$in = 0, $$lcssa = 0, $$lcssa120 = 0, $$lcssa120$lcssa = 0, $$lcssa121 = 0, $$lcssa121$lcssa = 0, $$lcssa122 = 0, $$lcssa132 = 0, $$lcssa133 = 0, $$lcssa143 = 0, $$lcssa55$i = 0, $$pn$i = 0.0, $$pre$i18 = 0, $$pre$phi$iZ2D = 0.0, $$sink$off0$us$i = 0, $$sink$off0$us98$i = 0, $0 = 0, $1 = 0, $113 = 0, $121 = 0, $123 = 0, $130 = 0, $137 = 0, $145 = 0, $15 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $158 = 0, $16 = 0, $160 = 0, $163 = 0, $167 = 0, $169 = 0, $182 = 0.0, $189 = 0, $191 = 0, $2 = 0, $200 = 0, $204 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $222 = 0, $223 = 0, $224 = 0, $234 = 0, $235 = 0, $248 = 0, $250 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $269 = 0, $271 = 0, $283 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $293 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $308 = 0.0, $320 = 0.0, $328 = 0, $329 = 0, $336 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $356 = 0, $358 = 0, $359 = 0, $36 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $368 = 0, $373 = 0, $374 = 0, $378 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $398 = 0, $399 = 0, $408 = 0, $409 = 0, $410 = 0, $418 = 0, $42 = 0, $422 = 0, $424 = 0, $425 = 0, $427 = 0, $440 = 0, $442 = 0, $452 = 0, $454 = 0, $466 = 0, $467 = 0, $468 = 0, $490 = 0, $502 = 0, $506 = 0, $509 = 0, $511 = 0, $512 = 0, $513 = 0, $516 = 0, $517 = 0, $530 = 0, $533 = 0, $535 = 0, $537 = 0, $538 = 0, $544 = 0, $546 = 0, $551 = 0, $554 = 0, $559 = 0, $561 = 0, $563 = 0, $564 = 0, $570 = 0, $572 = 0, $577 = 0, $58 = 0, $580 = 0, $584 = 0, $587 = 0, $592 = 0, $596 = 0, $599 = 0, $602 = 0, $604 = 0, $608 = 0, $609 = 0, $611 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $620 = 0, $621 = 0, $629 = 0, $635 = 0, $643 = 0.0, $645 = 0, $647 = 0, $65 = 0, $652 = 0.0, $653 = 0.0, $656 = 0.0, $660 = 0, $663 = 0, $67 = 0, $670 = 0.0, $688 = 0.0, $690 = 0, $706 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $80 = 0, $88 = 0, $9 = 0, $97 = 0, $a$0$lcssa180$i = 0, $a$0106$i = 0, $a$1$i = 0, $a$1$i$lcssa = 0, $a$2$ph44$i = 0, $a$3$i = 0, $a$3$i$lcssa = 0, $a$3$i$lcssa119 = 0, $a$3$i$ph = 0, $a$3$ph$i = 0, $a$483$i = 0, $a$5$i = 0, $a$5$i$lcssa = 0, $a$5$i$lcssa$lcssa = 0, $bias$0$i = 0.0, $bias$0$i24 = 0.0, $bits$0$ph = 0, $c$0 = 0, $c$0$i = 0, $c$1$lcssa = 0, $c$1$ph$i = 0, $c$174 = 0, $c$2 = 0, $c$2$i = 0, $c$2$lcssa$i = 0, $c$372 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $carry$0108$i = 0, $carry1$0$us$i = 0, $carry1$0$us94$i = 0, $carry1$1$lcssa$lcssa$i = 0, $carry1$1$us$i = 0, $carry1$1$us$i$lcssa = 0, $carry1$1$us99$i = 0, $carry1$1$us99$i$lcssa = 0, $carry3$086$i = 0, $d$0$i = 0, $denormal$0$i = 0, $denormal$030$i = 0, $denormal$031$i = 0, $denormal$2$i = 0, $e2$0$ph$i = 0, $e2$0$us$i = 0, $e2$0$us89$i = 0, $e2$1$i = 0, $e2$1$i$lcssa = 0, $e2$1$i$ph = 0, $e2$1$ph$i = 0, $e2$2$i = 0, $e2$3$i = 0, $emin$0$ph = 0, $frac$0$i = 0.0, $frac$1$i = 0.0, $frac$2$i = 0.0, $gotdig$0$i = 0, $gotdig$0$i$lcssa116 = 0, $gotdig$0$i12 = 0, $gotdig$0$i12$lcssa141 = 0, $gotdig$2$i = 0, $gotdig$2$i$lcssa = 0, $gotdig$2$i13 = 0, $gotdig$3$i = 0, $gotdig$3$lcssa$i = 0, $gotdig$3123$i = 0, $gotdig$3123$i$lcssa = 0, $gotdig$4$i = 0, $gotrad$0$i = 0, $gotrad$0$i$lcssa = 0, $gotrad$0$i14 = 0, $gotrad$1$i = 0, $gotrad$1$lcssa$i = 0, $gotrad$1124$i = 0, $gotrad$2$i = 0, $gottail$0$i = 0, $gottail$1$i = 0, $gottail$2$i = 0, $i$0$lcssa = 0, $i$073 = 0, $i$081$i = 0, $i$1 = 0, $i$1$i = 0, $i$271 = 0, $i$3 = 0, $i$4 = 0, $i$4$lcssa = 0, $j$0$lcssa$i = 0, $j$0126$i = 0, $j$0126$i$lcssa = 0, $j$072$i = 0, $j$073$i = 0, $j$074$i = 0, $j$2$i = 0, $j$3115$i = 0, $k$0$lcssa$i = 0, $k$0125$i = 0, $k$0125$i$lcssa = 0, $k$068$i = 0, $k$069$i = 0, $k$070$i = 0, $k$2$i = 0, $k$3$i = 0, $k$4107$i = 0, $k$5$in$us$i = 0, $k$5$in$us93$i = 0, $k$5$us$i = 0, $k$5$us95$i = 0, $k$684$i = 0, $lnz$0$lcssa$i = 0, $lnz$0122$i = 0, $lnz$0122$i$lcssa = 0, $lnz$062$i = 0, $lnz$063$i = 0, $lnz$064$i = 0, $lnz$2$i = 0, $or$cond22$i = 0, $or$cond9$i = 0, $rp$0$lcssa181$i = 0, $rp$0105$i = 0, $rp$1$i19 = 0, $rp$1$i19$lcssa = 0, $rp$2$ph42$i = 0, $rp$3$i$ph = 0, $rp$3$ph40$i = 0, $rp$482$i = 0, $rp$5$i = 0, $rp$5$i$lcssa = 0, $rp$5$i$lcssa$lcssa = 0, $scale$0$i = 0.0, $scale$1$i = 0.0, $scale$2$i = 0.0, $sign$0 = 0, $storemerge$i = 0, $sum$i = 0, $x$0$i = 0, $x$0$i$lcssa = 0, $x$1$i = 0, $x$2$i = 0, $x$3$lcssa$i = 0, $x$325$i = 0, $x$4$lcssa$i = 0, $x$420$i = 0, $x$5$i = 0, $x$i = 0, $y$0$i = 0.0, $y$0$i$lcssa = 0.0, $y$1$i = 0.0, $y$1$i23 = 0.0, $y$2$i = 0.0, $y$2$i25 = 0.0, $y$3$i = 0.0, $y$3$lcssa$i = 0.0, $y$321$i = 0.0, $y$4$i = 0.0, $z$0$i = 0, $z$1$ph43$i = 0, $z$1$us$i = 0, $z$1$us90$i = 0, $z$2$us$i = 0, $z$2$us92$i = 0, $z$3$lcssa$lcssa$i = 0, $z$3$us$i = 0, $z$3$us$i$lcssa = 0, $z$3$us102$i = 0, $z$3$us102$i$lcssa = 0, $z$4$i = 0, $z$5$ph$i = 0, $z$5$ph$i$lcssa = 0, $z$7$1$i = 0, $z$7$i = 0, label = 0, sp = 0, $k$4107$i$looptemp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 $x$i = sp;
 if (($prec | 0) == 2) {
  $bits$0$ph = 53;
  $emin$0$ph = -1074;
 } else if (!$prec) {
  $bits$0$ph = 24;
  $emin$0$ph = -149;
 } else if (($prec | 0) == 1) {
  $bits$0$ph = 53;
  $emin$0$ph = -1074;
 } else {
  $$0 = 0.0;
  STACKTOP = sp;
  return +$$0;
 }
 $0 = $f + 4 | 0;
 $1 = $f + 100 | 0;
 do {
  $2 = HEAP32[$0 >> 2] | 0;
  if ($2 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $2 + 1;
   $9 = HEAPU8[$2 >> 0] | 0;
  } else $9 = ___shgetc($f) | 0;
 } while ((_isspace($9) | 0) != 0);
 $$lcssa143 = $9;
 do if (($$lcssa143 | 0) == 43 | ($$lcssa143 | 0) == 45) {
  $15 = 1 - ((($$lcssa143 | 0) == 45 & 1) << 1) | 0;
  $16 = HEAP32[$0 >> 2] | 0;
  if ($16 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $16 + 1;
   $c$0 = HEAPU8[$16 >> 0] | 0;
   $sign$0 = $15;
   break;
  } else {
   $c$0 = ___shgetc($f) | 0;
   $sign$0 = $15;
   break;
  }
 } else {
  $c$0 = $$lcssa143;
  $sign$0 = 1;
 } while (0);
 $c$174 = $c$0;
 $i$073 = 0;
 while (1) {
  if (($c$174 | 32 | 0) != (HEAP8[14808 + $i$073 >> 0] | 0)) {
   $c$1$lcssa = $c$174;
   $i$0$lcssa = $i$073;
   break;
  }
  do if ($i$073 >>> 0 < 7) {
   $29 = HEAP32[$0 >> 2] | 0;
   if ($29 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $29 + 1;
    $c$2 = HEAPU8[$29 >> 0] | 0;
    break;
   } else {
    $c$2 = ___shgetc($f) | 0;
    break;
   }
  } else $c$2 = $c$174; while (0);
  $36 = $i$073 + 1 | 0;
  if ($36 >>> 0 < 8) {
   $c$174 = $c$2;
   $i$073 = $36;
  } else {
   $c$1$lcssa = $c$2;
   $i$0$lcssa = $36;
   break;
  }
 }
 do if (($i$0$lcssa | 0) == 3) label = 23; else if (($i$0$lcssa | 0) != 8) {
  $39 = ($pok | 0) != 0;
  if ($i$0$lcssa >>> 0 > 3 & $39) if (($i$0$lcssa | 0) == 8) break; else {
   label = 23;
   break;
  }
  L34 : do if (!$i$0$lcssa) {
   $c$372 = $c$1$lcssa;
   $i$271 = 0;
   while (1) {
    if (($c$372 | 32 | 0) != (HEAP8[15392 + $i$271 >> 0] | 0)) {
     $c$5 = $c$372;
     $i$3 = $i$271;
     break L34;
    }
    do if ($i$271 >>> 0 < 2) {
     $58 = HEAP32[$0 >> 2] | 0;
     if ($58 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
      HEAP32[$0 >> 2] = $58 + 1;
      $c$4 = HEAPU8[$58 >> 0] | 0;
      break;
     } else {
      $c$4 = ___shgetc($f) | 0;
      break;
     }
    } else $c$4 = $c$372; while (0);
    $65 = $i$271 + 1 | 0;
    if ($65 >>> 0 < 3) {
     $c$372 = $c$4;
     $i$271 = $65;
    } else {
     $c$5 = $c$4;
     $i$3 = $65;
     break;
    }
   }
  } else {
   $c$5 = $c$1$lcssa;
   $i$3 = $i$0$lcssa;
  } while (0);
  if (!$i$3) {
   do if (($c$5 | 0) == 48) {
    $113 = HEAP32[$0 >> 2] | 0;
    if ($113 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $113 + 1;
     $121 = HEAPU8[$113 >> 0] | 0;
    } else $121 = ___shgetc($f) | 0;
    if (($121 | 32 | 0) != 120) {
     if (!(HEAP32[$1 >> 2] | 0)) {
      $c$6 = 48;
      break;
     }
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
     $c$6 = 48;
     break;
    }
    $123 = HEAP32[$0 >> 2] | 0;
    if ($123 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $123 + 1;
     $c$0$i = HEAPU8[$123 >> 0] | 0;
     $gotdig$0$i = 0;
    } else {
     $c$0$i = ___shgetc($f) | 0;
     $gotdig$0$i = 0;
    }
    while (1) {
     if (($c$0$i | 0) == 46) {
      $gotdig$0$i$lcssa116 = $gotdig$0$i;
      label = 70;
      break;
     } else if (($c$0$i | 0) != 48) {
      $167 = 0;
      $169 = 0;
      $715 = 0;
      $716 = 0;
      $c$2$i = $c$0$i;
      $gotdig$2$i = $gotdig$0$i;
      $gotrad$0$i = 0;
      $gottail$0$i = 0;
      $scale$0$i = 1.0;
      $x$0$i = 0;
      $y$0$i = 0.0;
      break;
     }
     $130 = HEAP32[$0 >> 2] | 0;
     if ($130 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
      HEAP32[$0 >> 2] = $130 + 1;
      $c$0$i = HEAPU8[$130 >> 0] | 0;
      $gotdig$0$i = 1;
      continue;
     } else {
      $c$0$i = ___shgetc($f) | 0;
      $gotdig$0$i = 1;
      continue;
     }
    }
    if ((label | 0) == 70) {
     $137 = HEAP32[$0 >> 2] | 0;
     if ($137 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
      HEAP32[$0 >> 2] = $137 + 1;
      $c$1$ph$i = HEAPU8[$137 >> 0] | 0;
     } else $c$1$ph$i = ___shgetc($f) | 0;
     if (($c$1$ph$i | 0) == 48) {
      $152 = 0;
      $153 = 0;
      while (1) {
       $145 = HEAP32[$0 >> 2] | 0;
       if ($145 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
        HEAP32[$0 >> 2] = $145 + 1;
        $156 = HEAPU8[$145 >> 0] | 0;
       } else $156 = ___shgetc($f) | 0;
       $154 = _i64Add($152 | 0, $153 | 0, -1, -1) | 0;
       $155 = tempRet0;
       if (($156 | 0) == 48) {
        $152 = $154;
        $153 = $155;
       } else {
        $167 = 0;
        $169 = 0;
        $715 = $154;
        $716 = $155;
        $c$2$i = $156;
        $gotdig$2$i = 1;
        $gotrad$0$i = 1;
        $gottail$0$i = 0;
        $scale$0$i = 1.0;
        $x$0$i = 0;
        $y$0$i = 0.0;
        break;
       }
      }
     } else {
      $167 = 0;
      $169 = 0;
      $715 = 0;
      $716 = 0;
      $c$2$i = $c$1$ph$i;
      $gotdig$2$i = $gotdig$0$i$lcssa116;
      $gotrad$0$i = 1;
      $gottail$0$i = 0;
      $scale$0$i = 1.0;
      $x$0$i = 0;
      $y$0$i = 0.0;
     }
    }
    L83 : while (1) {
     $158 = $c$2$i + -48 | 0;
     do if ($158 >>> 0 < 10) {
      $d$0$i = $158;
      label = 83;
     } else {
      $160 = $c$2$i | 32;
      $163 = ($c$2$i | 0) == 46;
      if (!(($160 + -97 | 0) >>> 0 < 6 | $163)) {
       $211 = $715;
       $212 = $169;
       $214 = $716;
       $215 = $167;
       $c$2$lcssa$i = $c$2$i;
       $gotdig$2$i$lcssa = $gotdig$2$i;
       $gotrad$0$i$lcssa = $gotrad$0$i;
       $x$0$i$lcssa = $x$0$i;
       $y$0$i$lcssa = $y$0$i;
       break L83;
      }
      if ($163) if (!$gotrad$0$i) {
       $717 = $169;
       $718 = $167;
       $719 = $169;
       $720 = $167;
       $gotdig$3$i = $gotdig$2$i;
       $gotrad$1$i = 1;
       $gottail$2$i = $gottail$0$i;
       $scale$2$i = $scale$0$i;
       $x$2$i = $x$0$i;
       $y$2$i = $y$0$i;
       break;
      } else {
       $211 = $715;
       $212 = $169;
       $214 = $716;
       $215 = $167;
       $c$2$lcssa$i = 46;
       $gotdig$2$i$lcssa = $gotdig$2$i;
       $gotrad$0$i$lcssa = $gotrad$0$i;
       $x$0$i$lcssa = $x$0$i;
       $y$0$i$lcssa = $y$0$i;
       break L83;
      } else {
       $d$0$i = ($c$2$i | 0) > 57 ? $160 + -87 | 0 : $158;
       label = 83;
       break;
      }
     } while (0);
     if ((label | 0) == 83) {
      label = 0;
      do if (($167 | 0) < 0 | ($167 | 0) == 0 & $169 >>> 0 < 8) {
       $gottail$1$i = $gottail$0$i;
       $scale$1$i = $scale$0$i;
       $x$1$i = $d$0$i + ($x$0$i << 4) | 0;
       $y$1$i = $y$0$i;
      } else {
       if (($167 | 0) < 0 | ($167 | 0) == 0 & $169 >>> 0 < 14) {
        $182 = $scale$0$i * .0625;
        $gottail$1$i = $gottail$0$i;
        $scale$1$i = $182;
        $x$1$i = $x$0$i;
        $y$1$i = $y$0$i + $182 * +($d$0$i | 0);
        break;
       }
       if (($d$0$i | 0) == 0 | ($gottail$0$i | 0) != 0) {
        $gottail$1$i = $gottail$0$i;
        $scale$1$i = $scale$0$i;
        $x$1$i = $x$0$i;
        $y$1$i = $y$0$i;
       } else {
        $gottail$1$i = 1;
        $scale$1$i = $scale$0$i;
        $x$1$i = $x$0$i;
        $y$1$i = $y$0$i + $scale$0$i * .5;
       }
      } while (0);
      $189 = _i64Add($169 | 0, $167 | 0, 1, 0) | 0;
      $717 = $715;
      $718 = $716;
      $719 = $189;
      $720 = tempRet0;
      $gotdig$3$i = 1;
      $gotrad$1$i = $gotrad$0$i;
      $gottail$2$i = $gottail$1$i;
      $scale$2$i = $scale$1$i;
      $x$2$i = $x$1$i;
      $y$2$i = $y$1$i;
     }
     $191 = HEAP32[$0 >> 2] | 0;
     if ($191 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
      HEAP32[$0 >> 2] = $191 + 1;
      $167 = $720;
      $169 = $719;
      $715 = $717;
      $716 = $718;
      $c$2$i = HEAPU8[$191 >> 0] | 0;
      $gotdig$2$i = $gotdig$3$i;
      $gotrad$0$i = $gotrad$1$i;
      $gottail$0$i = $gottail$2$i;
      $scale$0$i = $scale$2$i;
      $x$0$i = $x$2$i;
      $y$0$i = $y$2$i;
      continue;
     } else {
      $167 = $720;
      $169 = $719;
      $715 = $717;
      $716 = $718;
      $c$2$i = ___shgetc($f) | 0;
      $gotdig$2$i = $gotdig$3$i;
      $gotrad$0$i = $gotrad$1$i;
      $gottail$0$i = $gottail$2$i;
      $scale$0$i = $scale$2$i;
      $x$0$i = $x$2$i;
      $y$0$i = $y$2$i;
      continue;
     }
    }
    if (!$gotdig$2$i$lcssa) {
     $200 = (HEAP32[$1 >> 2] | 0) == 0;
     if (!$200) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
     if (!$pok) ___shlim($f, 0); else if (!$200) {
      $204 = HEAP32[$0 >> 2] | 0;
      HEAP32[$0 >> 2] = $204 + -1;
      if ($gotrad$0$i$lcssa) HEAP32[$0 >> 2] = $204 + -2;
     }
     $$0 = +($sign$0 | 0) * 0.0;
     STACKTOP = sp;
     return +$$0;
    }
    $210 = ($gotrad$0$i$lcssa | 0) == 0;
    $213 = $210 ? $212 : $211;
    $216 = $210 ? $215 : $214;
    if (($215 | 0) < 0 | ($215 | 0) == 0 & $212 >>> 0 < 8) {
     $223 = $212;
     $224 = $215;
     $x$325$i = $x$0$i$lcssa;
     while (1) {
      $222 = $x$325$i << 4;
      $223 = _i64Add($223 | 0, $224 | 0, 1, 0) | 0;
      $224 = tempRet0;
      if (!(($224 | 0) < 0 | ($224 | 0) == 0 & $223 >>> 0 < 8)) {
       $x$3$lcssa$i = $222;
       break;
      } else $x$325$i = $222;
     }
    } else $x$3$lcssa$i = $x$0$i$lcssa;
    do if (($c$2$lcssa$i | 32 | 0) == 112) {
     $234 = _scanexp($f, $pok) | 0;
     $235 = tempRet0;
     if (($234 | 0) == 0 & ($235 | 0) == -2147483648) if (!$pok) {
      ___shlim($f, 0);
      $$0 = 0.0;
      STACKTOP = sp;
      return +$$0;
     } else {
      if (!(HEAP32[$1 >> 2] | 0)) {
       $252 = 0;
       $253 = 0;
       break;
      }
      HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
      $252 = 0;
      $253 = 0;
      break;
     } else {
      $252 = $234;
      $253 = $235;
     }
    } else if (!(HEAP32[$1 >> 2] | 0)) {
     $252 = 0;
     $253 = 0;
    } else {
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
     $252 = 0;
     $253 = 0;
    } while (0);
    $248 = _bitshift64Shl($213 | 0, $216 | 0, 2) | 0;
    $250 = _i64Add($248 | 0, tempRet0 | 0, -32, -1) | 0;
    $254 = _i64Add($250 | 0, tempRet0 | 0, $252 | 0, $253 | 0) | 0;
    $255 = tempRet0;
    if (!$x$3$lcssa$i) {
     $$0 = +($sign$0 | 0) * 0.0;
     STACKTOP = sp;
     return +$$0;
    }
    if (($255 | 0) > 0 | ($255 | 0) == 0 & $254 >>> 0 > (0 - $emin$0$ph | 0) >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34;
     $$0 = +($sign$0 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
     STACKTOP = sp;
     return +$$0;
    }
    $269 = $emin$0$ph + -106 | 0;
    $271 = (($269 | 0) < 0) << 31 >> 31;
    if (($255 | 0) < ($271 | 0) | ($255 | 0) == ($271 | 0) & $254 >>> 0 < $269 >>> 0) {
     HEAP32[(___errno_location() | 0) >> 2] = 34;
     $$0 = +($sign$0 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
     STACKTOP = sp;
     return +$$0;
    }
    if (($x$3$lcssa$i | 0) > -1) {
     $286 = $254;
     $287 = $255;
     $x$420$i = $x$3$lcssa$i;
     $y$321$i = $y$0$i$lcssa;
     while (1) {
      $283 = $x$420$i << 1;
      if (!($y$321$i >= .5)) {
       $$pn$i = $y$321$i;
       $x$5$i = $283;
      } else {
       $$pn$i = $y$321$i + -1.0;
       $x$5$i = $283 | 1;
      }
      $y$4$i = $y$321$i + $$pn$i;
      $288 = _i64Add($286 | 0, $287 | 0, -1, -1) | 0;
      $289 = tempRet0;
      if (($x$5$i | 0) > -1) {
       $286 = $288;
       $287 = $289;
       $x$420$i = $x$5$i;
       $y$321$i = $y$4$i;
      } else {
       $295 = $288;
       $296 = $289;
       $x$4$lcssa$i = $x$5$i;
       $y$3$lcssa$i = $y$4$i;
       break;
      }
     }
    } else {
     $295 = $254;
     $296 = $255;
     $x$4$lcssa$i = $x$3$lcssa$i;
     $y$3$lcssa$i = $y$0$i$lcssa;
    }
    $293 = _i64Subtract(32, 0, $emin$0$ph | 0, (($emin$0$ph | 0) < 0) << 31 >> 31 | 0) | 0;
    $297 = _i64Add($295 | 0, $296 | 0, $293 | 0, tempRet0 | 0) | 0;
    $298 = tempRet0;
    if (0 > ($298 | 0) | 0 == ($298 | 0) & $bits$0$ph >>> 0 > $297 >>> 0) if (($297 | 0) < 0) {
     $$0711$i = 0;
     label = 126;
    } else {
     $$07$i = $297;
     label = 124;
    } else {
     $$07$i = $bits$0$ph;
     label = 124;
    }
    if ((label | 0) == 124) if (($$07$i | 0) < 53) {
     $$0711$i = $$07$i;
     label = 126;
    } else {
     $$0712$i = $$07$i;
     $$pre$phi$iZ2D = +($sign$0 | 0);
     $bias$0$i = 0.0;
    }
    if ((label | 0) == 126) {
     $308 = +($sign$0 | 0);
     $$0712$i = $$0711$i;
     $$pre$phi$iZ2D = $308;
     $bias$0$i = +_copysignl(+_scalbn(1.0, 84 - $$0711$i | 0), $308);
    }
    $or$cond9$i = ($$0712$i | 0) < 32 & $y$3$lcssa$i != 0.0 & ($x$4$lcssa$i & 1 | 0) == 0;
    $320 = $$pre$phi$iZ2D * ($or$cond9$i ? 0.0 : $y$3$lcssa$i) + ($bias$0$i + $$pre$phi$iZ2D * +((($or$cond9$i & 1) + $x$4$lcssa$i | 0) >>> 0)) - $bias$0$i;
    if (!($320 != 0.0)) HEAP32[(___errno_location() | 0) >> 2] = 34;
    $$0 = +_scalbnl($320, $295);
    STACKTOP = sp;
    return +$$0;
   } else $c$6 = $c$5; while (0);
   $sum$i = $emin$0$ph + $bits$0$ph | 0;
   $328 = 0 - $sum$i | 0;
   $$012$i = $c$6;
   $gotdig$0$i12 = 0;
   while (1) {
    if (($$012$i | 0) == 46) {
     $gotdig$0$i12$lcssa141 = $gotdig$0$i12;
     label = 137;
     break;
    } else if (($$012$i | 0) != 48) {
     $$2$i = $$012$i;
     $721 = 0;
     $722 = 0;
     $gotdig$2$i13 = $gotdig$0$i12;
     $gotrad$0$i14 = 0;
     break;
    }
    $329 = HEAP32[$0 >> 2] | 0;
    if ($329 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $329 + 1;
     $$012$i = HEAPU8[$329 >> 0] | 0;
     $gotdig$0$i12 = 1;
     continue;
    } else {
     $$012$i = ___shgetc($f) | 0;
     $gotdig$0$i12 = 1;
     continue;
    }
   }
   if ((label | 0) == 137) {
    $336 = HEAP32[$0 >> 2] | 0;
    if ($336 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $336 + 1;
     $$1$ph$i = HEAPU8[$336 >> 0] | 0;
    } else $$1$ph$i = ___shgetc($f) | 0;
    if (($$1$ph$i | 0) == 48) {
     $344 = 0;
     $345 = 0;
     while (1) {
      $346 = _i64Add($344 | 0, $345 | 0, -1, -1) | 0;
      $347 = tempRet0;
      $348 = HEAP32[$0 >> 2] | 0;
      if ($348 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
       HEAP32[$0 >> 2] = $348 + 1;
       $$1$be$i = HEAPU8[$348 >> 0] | 0;
      } else $$1$be$i = ___shgetc($f) | 0;
      if (($$1$be$i | 0) == 48) {
       $344 = $346;
       $345 = $347;
      } else {
       $$2$i = $$1$be$i;
       $721 = $346;
       $722 = $347;
       $gotdig$2$i13 = 1;
       $gotrad$0$i14 = 1;
       break;
      }
     }
    } else {
     $$2$i = $$1$ph$i;
     $721 = 0;
     $722 = 0;
     $gotdig$2$i13 = $gotdig$0$i12$lcssa141;
     $gotrad$0$i14 = 1;
    }
   }
   HEAP32[$x$i >> 2] = 0;
   $356 = $$2$i + -48 | 0;
   $358 = ($$2$i | 0) == 46;
   L185 : do if ($356 >>> 0 < 10 | $358) {
    $359 = $x$i + 496 | 0;
    $$3127$i = $$2$i;
    $362 = 0;
    $363 = 0;
    $723 = $358;
    $724 = $356;
    $725 = $721;
    $726 = $722;
    $gotdig$3123$i = $gotdig$2$i13;
    $gotrad$1124$i = $gotrad$0$i14;
    $j$0126$i = 0;
    $k$0125$i = 0;
    $lnz$0122$i = 0;
    L187 : while (1) {
     do if ($723) if (!$gotrad$1124$i) {
      $727 = $362;
      $728 = $363;
      $729 = $362;
      $730 = $363;
      $gotdig$4$i = $gotdig$3123$i;
      $gotrad$2$i = 1;
      $j$2$i = $j$0126$i;
      $k$2$i = $k$0125$i;
      $lnz$2$i = $lnz$0122$i;
     } else {
      $731 = $725;
      $732 = $726;
      $733 = $362;
      $734 = $363;
      $gotdig$3123$i$lcssa = $gotdig$3123$i;
      $j$0126$i$lcssa = $j$0126$i;
      $k$0125$i$lcssa = $k$0125$i;
      $lnz$0122$i$lcssa = $lnz$0122$i;
      break L187;
     } else {
      $364 = _i64Add($362 | 0, $363 | 0, 1, 0) | 0;
      $365 = tempRet0;
      $366 = ($$3127$i | 0) != 48;
      if (($k$0125$i | 0) >= 125) {
       if (!$366) {
        $727 = $725;
        $728 = $726;
        $729 = $364;
        $730 = $365;
        $gotdig$4$i = $gotdig$3123$i;
        $gotrad$2$i = $gotrad$1124$i;
        $j$2$i = $j$0126$i;
        $k$2$i = $k$0125$i;
        $lnz$2$i = $lnz$0122$i;
        break;
       }
       HEAP32[$359 >> 2] = HEAP32[$359 >> 2] | 1;
       $727 = $725;
       $728 = $726;
       $729 = $364;
       $730 = $365;
       $gotdig$4$i = $gotdig$3123$i;
       $gotrad$2$i = $gotrad$1124$i;
       $j$2$i = $j$0126$i;
       $k$2$i = $k$0125$i;
       $lnz$2$i = $lnz$0122$i;
       break;
      }
      $368 = $x$i + ($k$0125$i << 2) | 0;
      if (!$j$0126$i) $storemerge$i = $724; else $storemerge$i = $$3127$i + -48 + ((HEAP32[$368 >> 2] | 0) * 10 | 0) | 0;
      HEAP32[$368 >> 2] = $storemerge$i;
      $373 = $j$0126$i + 1 | 0;
      $374 = ($373 | 0) == 9;
      $727 = $725;
      $728 = $726;
      $729 = $364;
      $730 = $365;
      $gotdig$4$i = 1;
      $gotrad$2$i = $gotrad$1124$i;
      $j$2$i = $374 ? 0 : $373;
      $k$2$i = ($374 & 1) + $k$0125$i | 0;
      $lnz$2$i = $366 ? $364 : $lnz$0122$i;
     } while (0);
     $378 = HEAP32[$0 >> 2] | 0;
     if ($378 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
      HEAP32[$0 >> 2] = $378 + 1;
      $$3$be$i = HEAPU8[$378 >> 0] | 0;
     } else $$3$be$i = ___shgetc($f) | 0;
     $724 = $$3$be$i + -48 | 0;
     $723 = ($$3$be$i | 0) == 46;
     if (!($724 >>> 0 < 10 | $723)) {
      $$3$lcssa$i = $$3$be$i;
      $389 = $727;
      $390 = $729;
      $392 = $728;
      $393 = $730;
      $gotdig$3$lcssa$i = $gotdig$4$i;
      $gotrad$1$lcssa$i = $gotrad$2$i;
      $j$0$lcssa$i = $j$2$i;
      $k$0$lcssa$i = $k$2$i;
      $lnz$0$lcssa$i = $lnz$2$i;
      label = 160;
      break L185;
     } else {
      $$3127$i = $$3$be$i;
      $362 = $729;
      $363 = $730;
      $725 = $727;
      $726 = $728;
      $gotdig$3123$i = $gotdig$4$i;
      $gotrad$1124$i = $gotrad$2$i;
      $j$0126$i = $j$2$i;
      $k$0125$i = $k$2$i;
      $lnz$0122$i = $lnz$2$i;
     }
    }
    $735 = $733;
    $736 = $734;
    $737 = $731;
    $738 = $732;
    $739 = ($gotdig$3123$i$lcssa | 0) != 0;
    $j$074$i = $j$0126$i$lcssa;
    $k$070$i = $k$0125$i$lcssa;
    $lnz$064$i = $lnz$0122$i$lcssa;
    label = 168;
   } else {
    $$3$lcssa$i = $$2$i;
    $389 = $721;
    $390 = 0;
    $392 = $722;
    $393 = 0;
    $gotdig$3$lcssa$i = $gotdig$2$i13;
    $gotrad$1$lcssa$i = $gotrad$0$i14;
    $j$0$lcssa$i = 0;
    $k$0$lcssa$i = 0;
    $lnz$0$lcssa$i = 0;
    label = 160;
   } while (0);
   do if ((label | 0) == 160) {
    $388 = ($gotrad$1$lcssa$i | 0) == 0;
    $391 = $388 ? $390 : $389;
    $394 = $388 ? $393 : $392;
    $395 = ($gotdig$3$lcssa$i | 0) != 0;
    if (!($395 & ($$3$lcssa$i | 32 | 0) == 101)) if (($$3$lcssa$i | 0) > -1) {
     $735 = $390;
     $736 = $393;
     $737 = $391;
     $738 = $394;
     $739 = $395;
     $j$074$i = $j$0$lcssa$i;
     $k$070$i = $k$0$lcssa$i;
     $lnz$064$i = $lnz$0$lcssa$i;
     label = 168;
     break;
    } else {
     $740 = $390;
     $741 = $393;
     $742 = $395;
     $743 = $391;
     $744 = $394;
     $j$073$i = $j$0$lcssa$i;
     $k$069$i = $k$0$lcssa$i;
     $lnz$063$i = $lnz$0$lcssa$i;
     label = 170;
     break;
    }
    $398 = _scanexp($f, $pok) | 0;
    $399 = tempRet0;
    do if (($398 | 0) == 0 & ($399 | 0) == -2147483648) if (!$pok) {
     ___shlim($f, 0);
     $$0 = 0.0;
     STACKTOP = sp;
     return +$$0;
    } else {
     if (!(HEAP32[$1 >> 2] | 0)) {
      $408 = 0;
      $409 = 0;
      break;
     }
     HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
     $408 = 0;
     $409 = 0;
     break;
    } else {
     $408 = $398;
     $409 = $399;
    } while (0);
    $410 = _i64Add($408 | 0, $409 | 0, $391 | 0, $394 | 0) | 0;
    $422 = $410;
    $424 = $390;
    $425 = tempRet0;
    $427 = $393;
    $j$072$i = $j$0$lcssa$i;
    $k$068$i = $k$0$lcssa$i;
    $lnz$062$i = $lnz$0$lcssa$i;
   } while (0);
   if ((label | 0) == 168) if (!(HEAP32[$1 >> 2] | 0)) {
    $740 = $735;
    $741 = $736;
    $742 = $739;
    $743 = $737;
    $744 = $738;
    $j$073$i = $j$074$i;
    $k$069$i = $k$070$i;
    $lnz$063$i = $lnz$064$i;
    label = 170;
   } else {
    HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
    if ($739) {
     $422 = $737;
     $424 = $735;
     $425 = $738;
     $427 = $736;
     $j$072$i = $j$074$i;
     $k$068$i = $k$070$i;
     $lnz$062$i = $lnz$064$i;
    } else label = 171;
   }
   if ((label | 0) == 170) if ($742) {
    $422 = $743;
    $424 = $740;
    $425 = $744;
    $427 = $741;
    $j$072$i = $j$073$i;
    $k$068$i = $k$069$i;
    $lnz$062$i = $lnz$063$i;
   } else label = 171;
   if ((label | 0) == 171) {
    HEAP32[(___errno_location() | 0) >> 2] = 22;
    ___shlim($f, 0);
    $$0 = 0.0;
    STACKTOP = sp;
    return +$$0;
   }
   $418 = HEAP32[$x$i >> 2] | 0;
   if (!$418) {
    $$0 = +($sign$0 | 0) * 0.0;
    STACKTOP = sp;
    return +$$0;
   }
   if (($422 | 0) == ($424 | 0) & ($425 | 0) == ($427 | 0) & (($427 | 0) < 0 | ($427 | 0) == 0 & $424 >>> 0 < 10)) if ($bits$0$ph >>> 0 > 30 | ($418 >>> $bits$0$ph | 0) == 0) {
    $$0 = +($sign$0 | 0) * +($418 >>> 0);
    STACKTOP = sp;
    return +$$0;
   }
   $440 = ($emin$0$ph | 0) / -2 | 0;
   $442 = (($440 | 0) < 0) << 31 >> 31;
   if (($425 | 0) > ($442 | 0) | ($425 | 0) == ($442 | 0) & $422 >>> 0 > $440 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    $$0 = +($sign$0 | 0) * 1797693134862315708145274.0e284 * 1797693134862315708145274.0e284;
    STACKTOP = sp;
    return +$$0;
   }
   $452 = $emin$0$ph + -106 | 0;
   $454 = (($452 | 0) < 0) << 31 >> 31;
   if (($425 | 0) < ($454 | 0) | ($425 | 0) == ($454 | 0) & $422 >>> 0 < $452 >>> 0) {
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    $$0 = +($sign$0 | 0) * 2.2250738585072014e-308 * 2.2250738585072014e-308;
    STACKTOP = sp;
    return +$$0;
   }
   if (!$j$072$i) $k$3$i = $k$068$i; else {
    if (($j$072$i | 0) < 9) {
     $466 = $x$i + ($k$068$i << 2) | 0;
     $468 = HEAP32[$466 >> 2] | 0;
     $j$3115$i = $j$072$i;
     while (1) {
      $467 = $468 * 10 | 0;
      $j$3115$i = $j$3115$i + 1 | 0;
      if (($j$3115$i | 0) == 9) {
       $$lcssa133 = $467;
       break;
      } else $468 = $467;
     }
     HEAP32[$466 >> 2] = $$lcssa133;
    }
    $k$3$i = $k$068$i + 1 | 0;
   }
   if (($lnz$062$i | 0) < 9) if (($lnz$062$i | 0) <= ($422 | 0) & ($422 | 0) < 18) {
    if (($422 | 0) == 9) {
     $$0 = +($sign$0 | 0) * +((HEAP32[$x$i >> 2] | 0) >>> 0);
     STACKTOP = sp;
     return +$$0;
    }
    if (($422 | 0) < 9) {
     $$0 = +($sign$0 | 0) * +((HEAP32[$x$i >> 2] | 0) >>> 0) / +(HEAP32[14832 + (8 - $422 << 2) >> 2] | 0);
     STACKTOP = sp;
     return +$$0;
    }
    $490 = $bits$0$ph + 27 + (Math_imul($422, -3) | 0) | 0;
    $$pre$i18 = HEAP32[$x$i >> 2] | 0;
    if (($490 | 0) > 30 | ($$pre$i18 >>> $490 | 0) == 0) {
     $$0 = +($sign$0 | 0) * +($$pre$i18 >>> 0) * +(HEAP32[14832 + ($422 + -10 << 2) >> 2] | 0);
     STACKTOP = sp;
     return +$$0;
    }
   }
   $502 = ($422 | 0) % 9 | 0;
   if (!$502) {
    $a$2$ph44$i = 0;
    $e2$0$ph$i = 0;
    $rp$2$ph42$i = $422;
    $z$1$ph43$i = $k$3$i;
   } else {
    $506 = ($422 | 0) > -1 ? $502 : $502 + 9 | 0;
    $509 = HEAP32[14832 + (8 - $506 << 2) >> 2] | 0;
    if (!$k$3$i) {
     $a$0$lcssa180$i = 0;
     $rp$0$lcssa181$i = $422;
     $z$0$i = 0;
    } else {
     $511 = 1e9 / ($509 | 0) | 0;
     $a$0106$i = 0;
     $carry$0108$i = 0;
     $k$4107$i = 0;
     $rp$0105$i = $422;
     while (1) {
      $512 = $x$i + ($k$4107$i << 2) | 0;
      $513 = HEAP32[$512 >> 2] | 0;
      $516 = (($513 >>> 0) / ($509 >>> 0) | 0) + $carry$0108$i | 0;
      HEAP32[$512 >> 2] = $516;
      $517 = Math_imul(($513 >>> 0) % ($509 >>> 0) | 0, $511) | 0;
      $k$4107$i$looptemp = $k$4107$i;
      $k$4107$i = $k$4107$i + 1 | 0;
      if (($k$4107$i$looptemp | 0) == ($a$0106$i | 0) & ($516 | 0) == 0) {
       $a$1$i = $k$4107$i & 127;
       $rp$1$i19 = $rp$0105$i + -9 | 0;
      } else {
       $a$1$i = $a$0106$i;
       $rp$1$i19 = $rp$0105$i;
      }
      if (($k$4107$i | 0) == ($k$3$i | 0)) {
       $$lcssa132 = $517;
       $a$1$i$lcssa = $a$1$i;
       $rp$1$i19$lcssa = $rp$1$i19;
       break;
      } else {
       $a$0106$i = $a$1$i;
       $carry$0108$i = $517;
       $rp$0105$i = $rp$1$i19;
      }
     }
     if (!$$lcssa132) {
      $a$0$lcssa180$i = $a$1$i$lcssa;
      $rp$0$lcssa181$i = $rp$1$i19$lcssa;
      $z$0$i = $k$3$i;
     } else {
      HEAP32[$x$i + ($k$3$i << 2) >> 2] = $$lcssa132;
      $a$0$lcssa180$i = $a$1$i$lcssa;
      $rp$0$lcssa181$i = $rp$1$i19$lcssa;
      $z$0$i = $k$3$i + 1 | 0;
     }
    }
    $a$2$ph44$i = $a$0$lcssa180$i;
    $e2$0$ph$i = 0;
    $rp$2$ph42$i = 9 - $506 + $rp$0$lcssa181$i | 0;
    $z$1$ph43$i = $z$0$i;
   }
   L279 : while (1) {
    $530 = $x$i + ($a$2$ph44$i << 2) | 0;
    if (($rp$2$ph42$i | 0) < 18) {
     $e2$0$us$i = $e2$0$ph$i;
     $z$1$us$i = $z$1$ph43$i;
     while (1) {
      $carry1$0$us$i = 0;
      $k$5$in$us$i = $z$1$us$i + 127 | 0;
      $z$2$us$i = $z$1$us$i;
      while (1) {
       $k$5$us$i = $k$5$in$us$i & 127;
       $533 = $x$i + ($k$5$us$i << 2) | 0;
       $535 = _bitshift64Shl(HEAP32[$533 >> 2] | 0, 0, 29) | 0;
       $537 = _i64Add($535 | 0, tempRet0 | 0, $carry1$0$us$i | 0, 0) | 0;
       $538 = tempRet0;
       if ($538 >>> 0 > 0 | ($538 | 0) == 0 & $537 >>> 0 > 1e9) {
        $544 = ___udivdi3($537 | 0, $538 | 0, 1e9, 0) | 0;
        $546 = ___uremdi3($537 | 0, $538 | 0, 1e9, 0) | 0;
        $$sink$off0$us$i = $546;
        $carry1$1$us$i = $544;
       } else {
        $$sink$off0$us$i = $537;
        $carry1$1$us$i = 0;
       }
       HEAP32[$533 >> 2] = $$sink$off0$us$i;
       $551 = ($k$5$us$i | 0) == ($a$2$ph44$i | 0);
       if (($k$5$us$i | 0) != ($z$2$us$i + 127 & 127 | 0) | $551) $z$3$us$i = $z$2$us$i; else $z$3$us$i = ($$sink$off0$us$i | 0) == 0 ? $k$5$us$i : $z$2$us$i;
       if ($551) {
        $carry1$1$us$i$lcssa = $carry1$1$us$i;
        $z$3$us$i$lcssa = $z$3$us$i;
        break;
       } else {
        $carry1$0$us$i = $carry1$1$us$i;
        $k$5$in$us$i = $k$5$us$i + -1 | 0;
        $z$2$us$i = $z$3$us$i;
       }
      }
      $554 = $e2$0$us$i + -29 | 0;
      if (!$carry1$1$us$i$lcssa) {
       $e2$0$us$i = $554;
       $z$1$us$i = $z$3$us$i$lcssa;
      } else {
       $$lcssa55$i = $554;
       $carry1$1$lcssa$lcssa$i = $carry1$1$us$i$lcssa;
       $z$3$lcssa$lcssa$i = $z$3$us$i$lcssa;
       break;
      }
     }
    } else {
     if (($rp$2$ph42$i | 0) == 18) {
      $e2$0$us89$i = $e2$0$ph$i;
      $z$1$us90$i = $z$1$ph43$i;
     } else {
      $a$3$ph$i = $a$2$ph44$i;
      $e2$1$ph$i = $e2$0$ph$i;
      $rp$3$ph40$i = $rp$2$ph42$i;
      $z$5$ph$i = $z$1$ph43$i;
      break;
     }
     while (1) {
      if ((HEAP32[$530 >> 2] | 0) >>> 0 >= 9007199) {
       $a$3$ph$i = $a$2$ph44$i;
       $e2$1$ph$i = $e2$0$us89$i;
       $rp$3$ph40$i = 18;
       $z$5$ph$i = $z$1$us90$i;
       break L279;
      }
      $carry1$0$us94$i = 0;
      $k$5$in$us93$i = $z$1$us90$i + 127 | 0;
      $z$2$us92$i = $z$1$us90$i;
      while (1) {
       $k$5$us95$i = $k$5$in$us93$i & 127;
       $559 = $x$i + ($k$5$us95$i << 2) | 0;
       $561 = _bitshift64Shl(HEAP32[$559 >> 2] | 0, 0, 29) | 0;
       $563 = _i64Add($561 | 0, tempRet0 | 0, $carry1$0$us94$i | 0, 0) | 0;
       $564 = tempRet0;
       if ($564 >>> 0 > 0 | ($564 | 0) == 0 & $563 >>> 0 > 1e9) {
        $570 = ___udivdi3($563 | 0, $564 | 0, 1e9, 0) | 0;
        $572 = ___uremdi3($563 | 0, $564 | 0, 1e9, 0) | 0;
        $$sink$off0$us98$i = $572;
        $carry1$1$us99$i = $570;
       } else {
        $$sink$off0$us98$i = $563;
        $carry1$1$us99$i = 0;
       }
       HEAP32[$559 >> 2] = $$sink$off0$us98$i;
       $577 = ($k$5$us95$i | 0) == ($a$2$ph44$i | 0);
       if (($k$5$us95$i | 0) != ($z$2$us92$i + 127 & 127 | 0) | $577) $z$3$us102$i = $z$2$us92$i; else $z$3$us102$i = ($$sink$off0$us98$i | 0) == 0 ? $k$5$us95$i : $z$2$us92$i;
       if ($577) {
        $carry1$1$us99$i$lcssa = $carry1$1$us99$i;
        $z$3$us102$i$lcssa = $z$3$us102$i;
        break;
       } else {
        $carry1$0$us94$i = $carry1$1$us99$i;
        $k$5$in$us93$i = $k$5$us95$i + -1 | 0;
        $z$2$us92$i = $z$3$us102$i;
       }
      }
      $580 = $e2$0$us89$i + -29 | 0;
      if (!$carry1$1$us99$i$lcssa) {
       $e2$0$us89$i = $580;
       $z$1$us90$i = $z$3$us102$i$lcssa;
      } else {
       $$lcssa55$i = $580;
       $carry1$1$lcssa$lcssa$i = $carry1$1$us99$i$lcssa;
       $z$3$lcssa$lcssa$i = $z$3$us102$i$lcssa;
       break;
      }
     }
    }
    $584 = $a$2$ph44$i + 127 & 127;
    if (($584 | 0) == ($z$3$lcssa$lcssa$i | 0)) {
     $587 = $z$3$lcssa$lcssa$i + 127 & 127;
     $592 = $x$i + (($z$3$lcssa$lcssa$i + 126 & 127) << 2) | 0;
     HEAP32[$592 >> 2] = HEAP32[$592 >> 2] | HEAP32[$x$i + ($587 << 2) >> 2];
     $z$4$i = $587;
    } else $z$4$i = $z$3$lcssa$lcssa$i;
    HEAP32[$x$i + ($584 << 2) >> 2] = $carry1$1$lcssa$lcssa$i;
    $a$2$ph44$i = $584;
    $e2$0$ph$i = $$lcssa55$i;
    $rp$2$ph42$i = $rp$2$ph42$i + 9 | 0;
    $z$1$ph43$i = $z$4$i;
   }
   L310 : while (1) {
    $629 = $z$5$ph$i + 1 & 127;
    $635 = $x$i + (($z$5$ph$i + 127 & 127) << 2) | 0;
    $a$3$i$ph = $a$3$ph$i;
    $e2$1$i$ph = $e2$1$ph$i;
    $rp$3$i$ph = $rp$3$ph40$i;
    while (1) {
     $608 = ($rp$3$i$ph | 0) == 18;
     $$21$i = ($rp$3$i$ph | 0) > 27 ? 9 : 1;
     $a$3$i = $a$3$i$ph;
     $e2$1$i = $e2$1$i$ph;
     while (1) {
      $i$081$i = 0;
      while (1) {
       $599 = $i$081$i + $a$3$i & 127;
       if (($599 | 0) == ($z$5$ph$i | 0)) {
        $i$1$i = 2;
        break;
       }
       $602 = HEAP32[$x$i + ($599 << 2) >> 2] | 0;
       $604 = HEAP32[14824 + ($i$081$i << 2) >> 2] | 0;
       if ($602 >>> 0 < $604 >>> 0) {
        $i$1$i = 2;
        break;
       }
       $596 = $i$081$i + 1 | 0;
       if ($602 >>> 0 > $604 >>> 0) {
        $i$1$i = $i$081$i;
        break;
       }
       if (($596 | 0) < 2) $i$081$i = $596; else {
        $i$1$i = $596;
        break;
       }
      }
      if (($i$1$i | 0) == 2 & $608) {
       $$lcssa122 = $629;
       $a$3$i$lcssa = $a$3$i;
       $e2$1$i$lcssa = $e2$1$i;
       $z$5$ph$i$lcssa = $z$5$ph$i;
       break L310;
      }
      $611 = $$21$i + $e2$1$i | 0;
      if (($a$3$i | 0) == ($z$5$ph$i | 0)) {
       $a$3$i = $z$5$ph$i;
       $e2$1$i = $611;
      } else {
       $$lcssa120 = $611;
       $a$3$i$lcssa119 = $a$3$i;
       break;
      }
     }
     $614 = (1 << $$21$i) + -1 | 0;
     $615 = 1e9 >>> $$21$i;
     $a$483$i = $a$3$i$lcssa119;
     $carry3$086$i = 0;
     $k$684$i = $a$3$i$lcssa119;
     $rp$482$i = $rp$3$i$ph;
     while (1) {
      $616 = $x$i + ($k$684$i << 2) | 0;
      $617 = HEAP32[$616 >> 2] | 0;
      $620 = ($617 >>> $$21$i) + $carry3$086$i | 0;
      HEAP32[$616 >> 2] = $620;
      $621 = Math_imul($617 & $614, $615) | 0;
      $or$cond22$i = ($k$684$i | 0) == ($a$483$i | 0) & ($620 | 0) == 0;
      $k$684$i = $k$684$i + 1 & 127;
      $rp$5$i = $or$cond22$i ? $rp$482$i + -9 | 0 : $rp$482$i;
      $a$5$i = $or$cond22$i ? $k$684$i : $a$483$i;
      if (($k$684$i | 0) == ($z$5$ph$i | 0)) {
       $$lcssa121 = $621;
       $a$5$i$lcssa = $a$5$i;
       $rp$5$i$lcssa = $rp$5$i;
       break;
      } else {
       $a$483$i = $a$5$i;
       $carry3$086$i = $621;
       $rp$482$i = $rp$5$i;
      }
     }
     if (!$$lcssa121) {
      $a$3$i$ph = $a$5$i$lcssa;
      $e2$1$i$ph = $$lcssa120;
      $rp$3$i$ph = $rp$5$i$lcssa;
      continue;
     }
     if (($629 | 0) != ($a$5$i$lcssa | 0)) {
      $$lcssa120$lcssa = $$lcssa120;
      $$lcssa121$lcssa = $$lcssa121;
      $a$5$i$lcssa$lcssa = $a$5$i$lcssa;
      $rp$5$i$lcssa$lcssa = $rp$5$i$lcssa;
      break;
     }
     HEAP32[$635 >> 2] = HEAP32[$635 >> 2] | 1;
     $a$3$i$ph = $a$5$i$lcssa;
     $e2$1$i$ph = $$lcssa120;
     $rp$3$i$ph = $rp$5$i$lcssa;
    }
    HEAP32[$x$i + ($z$5$ph$i << 2) >> 2] = $$lcssa121$lcssa;
    $a$3$ph$i = $a$5$i$lcssa$lcssa;
    $e2$1$ph$i = $$lcssa120$lcssa;
    $rp$3$ph40$i = $rp$5$i$lcssa$lcssa;
    $z$5$ph$i = $629;
   }
   $609 = $a$3$i$lcssa & 127;
   if (($609 | 0) == ($z$5$ph$i$lcssa | 0)) {
    HEAP32[$x$i + ($$lcssa122 + -1 << 2) >> 2] = 0;
    $z$7$i = $$lcssa122;
   } else $z$7$i = $z$5$ph$i$lcssa;
   $643 = +((HEAP32[$x$i + ($609 << 2) >> 2] | 0) >>> 0);
   $645 = $a$3$i$lcssa + 1 & 127;
   if (($645 | 0) == ($z$7$i | 0)) {
    $706 = $z$7$i + 1 & 127;
    HEAP32[$x$i + ($706 + -1 << 2) >> 2] = 0;
    $z$7$1$i = $706;
   } else $z$7$1$i = $z$7$i;
   $670 = +($sign$0 | 0);
   $652 = $670 * ($643 * 1.0e9 + +((HEAP32[$x$i + ($645 << 2) >> 2] | 0) >>> 0));
   $690 = $e2$1$i$lcssa + 53 | 0;
   $647 = $690 - $emin$0$ph | 0;
   if (($647 | 0) < ($bits$0$ph | 0)) if (($647 | 0) < 0) {
    $$01332$i = 0;
    $denormal$031$i = 1;
    label = 244;
   } else {
    $$013$i = $647;
    $denormal$0$i = 1;
    label = 243;
   } else {
    $$013$i = $bits$0$ph;
    $denormal$0$i = 0;
    label = 243;
   }
   if ((label | 0) == 243) if (($$013$i | 0) < 53) {
    $$01332$i = $$013$i;
    $denormal$031$i = $denormal$0$i;
    label = 244;
   } else {
    $$01333$i = $$013$i;
    $bias$0$i24 = 0.0;
    $denormal$030$i = $denormal$0$i;
    $frac$0$i = 0.0;
    $y$1$i23 = $652;
   }
   if ((label | 0) == 244) {
    $653 = +_copysignl(+_scalbn(1.0, 105 - $$01332$i | 0), $652);
    $656 = +_fmodl($652, +_scalbn(1.0, 53 - $$01332$i | 0));
    $$01333$i = $$01332$i;
    $bias$0$i24 = $653;
    $denormal$030$i = $denormal$031$i;
    $frac$0$i = $656;
    $y$1$i23 = $653 + ($652 - $656);
   }
   $660 = $a$3$i$lcssa + 2 & 127;
   do if (($660 | 0) == ($z$7$1$i | 0)) $frac$2$i = $frac$0$i; else {
    $663 = HEAP32[$x$i + ($660 << 2) >> 2] | 0;
    do if ($663 >>> 0 < 5e8) {
     if (!$663) if (($a$3$i$lcssa + 3 & 127 | 0) == ($z$7$1$i | 0)) {
      $frac$1$i = $frac$0$i;
      break;
     }
     $frac$1$i = $670 * .25 + $frac$0$i;
    } else {
     if ($663 >>> 0 > 5e8) {
      $frac$1$i = $670 * .75 + $frac$0$i;
      break;
     }
     if (($a$3$i$lcssa + 3 & 127 | 0) == ($z$7$1$i | 0)) {
      $frac$1$i = $670 * .5 + $frac$0$i;
      break;
     } else {
      $frac$1$i = $670 * .75 + $frac$0$i;
      break;
     }
    } while (0);
    if ((53 - $$01333$i | 0) <= 1) {
     $frac$2$i = $frac$1$i;
     break;
    }
    if (+_fmodl($frac$1$i, 1.0) != 0.0) {
     $frac$2$i = $frac$1$i;
     break;
    }
    $frac$2$i = $frac$1$i + 1.0;
   } while (0);
   $688 = $y$1$i23 + $frac$2$i - $bias$0$i24;
   do if (($690 & 2147483647 | 0) > (-2 - $sum$i | 0)) {
    if (!(+Math_abs(+$688) >= 9007199254740992.0)) {
     $denormal$2$i = $denormal$030$i;
     $e2$2$i = $e2$1$i$lcssa;
     $y$2$i25 = $688;
    } else {
     $denormal$2$i = ($denormal$030$i | 0) != 0 & ($$01333$i | 0) == ($647 | 0) ? 0 : $denormal$030$i;
     $e2$2$i = $e2$1$i$lcssa + 1 | 0;
     $y$2$i25 = $688 * .5;
    }
    if (($e2$2$i + 50 | 0) <= ($328 | 0)) if (!(($denormal$2$i | 0) != 0 & $frac$2$i != 0.0)) {
     $e2$3$i = $e2$2$i;
     $y$3$i = $y$2$i25;
     break;
    }
    HEAP32[(___errno_location() | 0) >> 2] = 34;
    $e2$3$i = $e2$2$i;
    $y$3$i = $y$2$i25;
   } else {
    $e2$3$i = $e2$1$i$lcssa;
    $y$3$i = $688;
   } while (0);
   $$0 = +_scalbnl($y$3$i, $e2$3$i);
   STACKTOP = sp;
   return +$$0;
  } else if (($i$3 | 0) == 3) {
   $67 = HEAP32[$0 >> 2] | 0;
   if ($67 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $67 + 1;
    $74 = HEAPU8[$67 >> 0] | 0;
   } else $74 = ___shgetc($f) | 0;
   if (($74 | 0) == 40) $i$4 = 1; else {
    if (!(HEAP32[$1 >> 2] | 0)) {
     $$0 = nan;
     STACKTOP = sp;
     return +$$0;
    }
    HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
    $$0 = nan;
    STACKTOP = sp;
    return +$$0;
   }
   while (1) {
    $80 = HEAP32[$0 >> 2] | 0;
    if ($80 >>> 0 < (HEAP32[$1 >> 2] | 0) >>> 0) {
     HEAP32[$0 >> 2] = $80 + 1;
     $88 = HEAPU8[$80 >> 0] | 0;
    } else $88 = ___shgetc($f) | 0;
    if (!(($88 + -48 | 0) >>> 0 < 10 | ($88 + -65 | 0) >>> 0 < 26)) if (!(($88 + -97 | 0) >>> 0 < 26 | ($88 | 0) == 95)) {
     $$lcssa = $88;
     $i$4$lcssa = $i$4;
     break;
    }
    $i$4 = $i$4 + 1 | 0;
   }
   if (($$lcssa | 0) == 41) {
    $$0 = nan;
    STACKTOP = sp;
    return +$$0;
   }
   $97 = (HEAP32[$1 >> 2] | 0) == 0;
   if (!$97) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
   if (!$39) {
    HEAP32[(___errno_location() | 0) >> 2] = 22;
    ___shlim($f, 0);
    $$0 = 0.0;
    STACKTOP = sp;
    return +$$0;
   }
   if (($i$4$lcssa | 0) == 0 | $97) {
    $$0 = nan;
    STACKTOP = sp;
    return +$$0;
   } else $$in = $i$4$lcssa;
   do {
    $$in = $$in + -1 | 0;
    HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
   } while (($$in | 0) != 0);
   $$0 = nan;
   STACKTOP = sp;
   return +$$0;
  } else {
   if (HEAP32[$1 >> 2] | 0) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
   HEAP32[(___errno_location() | 0) >> 2] = 22;
   ___shlim($f, 0);
   $$0 = 0.0;
   STACKTOP = sp;
   return +$$0;
  }
 } while (0);
 if ((label | 0) == 23) {
  $42 = (HEAP32[$1 >> 2] | 0) == 0;
  if (!$42) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
  if (!($i$0$lcssa >>> 0 < 4 | ($pok | 0) == 0 | $42)) {
   $i$1 = $i$0$lcssa;
   do {
    HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
    $i$1 = $i$1 + -1 | 0;
   } while ($i$1 >>> 0 > 3);
  }
 }
 $$0 = +Math_fround(Math_fround($sign$0 | 0) * Math_fround(inf));
 STACKTOP = sp;
 return +$$0;
}

function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $__e, $__intl, $__loc, $__flags, $__err, $__neg, $__ct, $__wb, $__wn, $__we) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__flags = $__flags | 0;
 $__err = $__err | 0;
 $__neg = $__neg | 0;
 $__ct = $__ct | 0;
 $__wb = $__wb | 0;
 $__wn = $__wn | 0;
 $__we = $__we | 0;
 var $$ = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i105 = 0, $$0$i$i112 = 0, $$0$i$i121 = 0, $$0$i$i131 = 0, $$0$i$i148 = 0, $$0$i$i34 = 0, $$0$i$i37 = 0, $$0$i$i50 = 0, $$0$i$i56 = 0, $$0$i$i59 = 0, $$0$i$i66 = 0, $$0$i$i85 = 0, $$0$i$i88 = 0, $$lcssa = 0, $$lcssa279 = 0, $$lcssa281 = 0, $$pre = 0, $$pre244 = 0, $$pre247 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $113 = 0, $115 = 0, $12 = 0, $13 = 0, $132 = 0, $133 = 0, $134 = 0, $14 = 0, $146 = 0, $147 = 0, $149 = 0, $15 = 0, $151 = 0, $155 = 0, $156 = 0, $158 = 0, $16 = 0, $160 = 0, $165 = 0, $166 = 0, $17 = 0, $171 = 0, $176 = 0, $18 = 0, $181 = 0, $183 = 0, $185 = 0, $188 = 0, $19 = 0, $192 = 0, $200 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $215 = 0, $221 = 0, $226 = 0, $234 = 0, $238 = 0, $239 = 0, $240 = 0, $241 = 0, $249 = 0, $255 = 0, $257 = 0, $259 = 0, $266 = 0, $274 = 0, $278 = 0, $279 = 0, $280 = 0, $281 = 0, $284 = 0, $289 = 0, $295 = 0, $304 = 0, $31 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $32 = 0, $322 = 0, $328 = 0, $33 = 0, $337 = 0, $338 = 0, $340 = 0, $347 = 0, $348 = 0, $349 = 0, $350 = 0, $352 = 0, $354 = 0, $363 = 0, $364 = 0, $366 = 0, $371 = 0, $372 = 0, $373 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $386 = 0, $388 = 0, $394 = 0, $4 = 0, $401 = 0, $402 = 0, $403 = 0, $405 = 0, $417 = 0, $418 = 0, $419 = 0, $432 = 0, $434 = 0, $447 = 0, $448 = 0, $449 = 0, $458 = 0, $466 = 0, $467 = 0, $471 = 0, $483 = 0, $484 = 0, $485 = 0, $49 = 0, $498 = 0, $5 = 0, $50 = 0, $500 = 0, $510 = 0, $517 = 0, $52 = 0, $521 = 0, $523 = 0, $529 = 0, $534 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $540 = 0, $553 = 0, $554 = 0, $555 = 0, $557 = 0, $569 = 0, $570 = 0, $571 = 0, $584 = 0, $586 = 0, $6 = 0, $601 = 0, $602 = 0, $603 = 0, $611 = 0, $623 = 0, $624 = 0, $625 = 0, $638 = 0, $640 = 0, $662 = 0, $664 = 0, $675 = 0, $678 = 0, $679 = 0, $680 = 0, $681 = 0, $69 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $708 = 0, $709 = 0, $71 = 0, $721 = 0, $722 = 0, $723 = 0, $736 = 0, $738 = 0, $754 = 0, $759 = 0, $760 = 0, $761 = 0, $762 = 0, $770 = 0, $772 = 0, $777 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $8 = 0, $86 = 0, $98 = 0, $99 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$0$lcssa280 = 0, $__ng$1 = 0, $__nsn = 0, $__p$0233 = 0, $__pat = 0, $__psn = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0235 = 0, $__trailing_sign$1 = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 $0 = sp + 488 | 0;
 $__gbuf = sp + 88 | 0;
 $__gb = sp + 80 | 0;
 $__gn = sp + 72 | 0;
 $__ge = sp + 68 | 0;
 $__pat = sp + 496 | 0;
 $__dp = sp + 493 | 0;
 $__ts = sp + 492 | 0;
 $__grp = sp + 56 | 0;
 $__sym = sp + 44 | 0;
 $__psn = sp + 32 | 0;
 $__nsn = sp + 20 | 0;
 $__spaces = sp + 8 | 0;
 $__fd = sp + 4 | 0;
 $__et = sp;
 HEAP32[$0 >> 2] = $__we;
 HEAP32[$__gb >> 2] = $__gbuf;
 $1 = $__gb + 4 | 0;
 HEAP32[$1 >> 2] = 113;
 HEAP32[$__gn >> 2] = $__gbuf;
 HEAP32[$__ge >> 2] = $__gbuf + 400;
 HEAP32[$__grp + 0 >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 HEAP32[$__sym + 0 >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 HEAP32[$__psn + 0 >> 2] = 0;
 HEAP32[$__psn + 4 >> 2] = 0;
 HEAP32[$__psn + 8 >> 2] = 0;
 HEAP32[$__nsn + 0 >> 2] = 0;
 HEAP32[$__nsn + 4 >> 2] = 0;
 HEAP32[$__nsn + 8 >> 2] = 0;
 HEAP32[$__spaces + 0 >> 2] = 0;
 HEAP32[$__spaces + 4 >> 2] = 0;
 HEAP32[$__spaces + 8 >> 2] = 0;
 __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd);
 HEAP32[$__wn >> 2] = HEAP32[$__wb >> 2];
 $4 = $__ct + 8 | 0;
 $5 = $__nsn + 4 | 0;
 $6 = $__nsn + 8 | 0;
 $7 = $__psn + 4 | 0;
 $8 = $__psn + 8 | 0;
 $10 = ($__flags & 512 | 0) != 0;
 $11 = $__sym + 1 | 0;
 $12 = $__sym + 8 | 0;
 $13 = $__sym + 4 | 0;
 $14 = $__spaces + 1 | 0;
 $15 = $__spaces + 8 | 0;
 $16 = $__spaces + 4 | 0;
 $17 = $__pat + 3 | 0;
 $18 = $__grp + 4 | 0;
 $780 = $__gbuf;
 $__p$0233 = 0;
 $__trailing_sign$0235 = 0;
 L1 : while (1) {
  $19 = HEAP32[$__b >> 2] | 0;
  do if (!$19) $31 = 0; else if ((HEAP32[$19 + 12 >> 2] | 0) == (HEAP32[$19 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$19 >> 2] | 0) + 36 >> 2] & 63]($19) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $31 = 0;
   break;
  } else {
   $31 = HEAP32[$__b >> 2] | 0;
   break;
  } else $31 = $19; while (0);
  $32 = ($31 | 0) == 0;
  $33 = HEAP32[$__e >> 2] | 0;
  do if (!$33) label = 12; else {
   if ((HEAP32[$33 + 12 >> 2] | 0) != (HEAP32[$33 + 16 >> 2] | 0)) if ($32) break; else {
    $772 = $780;
    $__trailing_sign$0$lcssa = $__trailing_sign$0235;
    label = 259;
    break L1;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$33 >> 2] | 0) + 36 >> 2] & 63]($33) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 12;
    break;
   } else if ($32 ^ (HEAP32[$__e >> 2] | 0) == 0) break; else {
    $772 = $780;
    $__trailing_sign$0$lcssa = $__trailing_sign$0235;
    label = 259;
    break L1;
   }
  } while (0);
  if ((label | 0) == 12) {
   label = 0;
   if ($32) {
    $772 = $780;
    $__trailing_sign$0$lcssa = $__trailing_sign$0235;
    label = 259;
    break;
   }
  }
  L21 : do switch (HEAP8[$__pat + $__p$0233 >> 0] | 0) {
  case 4:
   {
    $49 = HEAP8[$__ts >> 0] | 0;
    $534 = $780;
    $__ng$0 = 0;
    L23 : while (1) {
     $471 = HEAP32[$__b >> 2] | 0;
     do if (!$471) $483 = 0; else if ((HEAP32[$471 + 12 >> 2] | 0) == (HEAP32[$471 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$471 >> 2] | 0) + 36 >> 2] & 63]($471) | 0) == -1) {
      HEAP32[$__b >> 2] = 0;
      $483 = 0;
      break;
     } else {
      $483 = HEAP32[$__b >> 2] | 0;
      break;
     } else $483 = $471; while (0);
     $484 = ($483 | 0) == 0;
     $485 = HEAP32[$__e >> 2] | 0;
     do if (!$485) label = 184; else {
      if ((HEAP32[$485 + 12 >> 2] | 0) != (HEAP32[$485 + 16 >> 2] | 0)) if ($484) break; else {
       $$lcssa279 = $534;
       $__ng$0$lcssa280 = $__ng$0;
       break L23;
      }
      if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$485 >> 2] | 0) + 36 >> 2] & 63]($485) | 0) == -1) {
       HEAP32[$__e >> 2] = 0;
       label = 184;
       break;
      } else if ($484 ^ (HEAP32[$__e >> 2] | 0) == 0) break; else {
       $$lcssa279 = $534;
       $__ng$0$lcssa280 = $__ng$0;
       break L23;
      }
     } while (0);
     if ((label | 0) == 184) {
      label = 0;
      if ($484) {
       $$lcssa279 = $534;
       $__ng$0$lcssa280 = $__ng$0;
       break;
      }
     }
     $498 = HEAP32[$__b >> 2] | 0;
     $500 = HEAP32[$498 + 12 >> 2] | 0;
     if (($500 | 0) == (HEAP32[$498 + 16 >> 2] | 0)) $$0$i$i131 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$498 >> 2] | 0) + 36 >> 2] & 63]($498) | 0; else $$0$i$i131 = HEAPU8[$500 >> 0] | 0;
     $510 = $$0$i$i131 & 255;
     if ($510 << 24 >> 24 > -1) if (!(HEAP16[(HEAP32[$4 >> 2] | 0) + ($$0$i$i131 << 24 >> 24 << 1) >> 1] & 2048)) label = 194; else {
      $517 = HEAP32[$__wn >> 2] | 0;
      if (($517 | 0) == (HEAP32[$0 >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $0);
       $521 = HEAP32[$__wn >> 2] | 0;
      } else $521 = $517;
      HEAP32[$__wn >> 2] = $521 + 1;
      HEAP8[$521 >> 0] = $510;
      $785 = $534;
      $__ng$1 = $__ng$0 + 1 | 0;
     } else label = 194;
     if ((label | 0) == 194) {
      label = 0;
      $523 = HEAP8[$__grp >> 0] | 0;
      if (!($523 & 1)) $529 = ($523 & 255) >>> 1; else $529 = HEAP32[$18 >> 2] | 0;
      if (!(($529 | 0) != 0 & ($__ng$0 | 0) != 0 & $510 << 24 >> 24 == $49 << 24 >> 24)) {
       $$lcssa279 = $534;
       $__ng$0$lcssa280 = $__ng$0;
       break;
      }
      if (($534 | 0) == (HEAP32[$__ge >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge);
       $537 = HEAP32[$__gn >> 2] | 0;
      } else $537 = $534;
      $536 = $537 + 4 | 0;
      HEAP32[$__gn >> 2] = $536;
      HEAP32[$537 >> 2] = $__ng$0;
      $785 = $536;
      $__ng$1 = 0;
     }
     $538 = HEAP32[$__b >> 2] | 0;
     $539 = $538 + 12 | 0;
     $540 = HEAP32[$539 >> 2] | 0;
     if (($540 | 0) == (HEAP32[$538 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$538 >> 2] | 0) + 40 >> 2] & 63]($538) | 0;
      $534 = $785;
      $__ng$0 = $__ng$1;
      continue;
     } else {
      HEAP32[$539 >> 2] = $540 + 1;
      $534 = $785;
      $__ng$0 = $__ng$1;
      continue;
     }
    }
    if (($__ng$0$lcssa280 | 0) != 0 ? (HEAP32[$__gb >> 2] | 0) != ($$lcssa279 | 0) : 0) {
     if (($$lcssa279 | 0) == (HEAP32[$__ge >> 2] | 0)) {
      __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge);
      $554 = HEAP32[$__gn >> 2] | 0;
     } else $554 = $$lcssa279;
     $553 = $554 + 4 | 0;
     HEAP32[$__gn >> 2] = $553;
     HEAP32[$554 >> 2] = $__ng$0$lcssa280;
     $786 = $553;
    } else $786 = $$lcssa279;
    $555 = HEAP32[$__fd >> 2] | 0;
    if (($555 | 0) > 0) {
     $557 = HEAP32[$__b >> 2] | 0;
     do if (!$557) $569 = 0; else if ((HEAP32[$557 + 12 >> 2] | 0) == (HEAP32[$557 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$557 >> 2] | 0) + 36 >> 2] & 63]($557) | 0) == -1) {
      HEAP32[$__b >> 2] = 0;
      $569 = 0;
      break;
     } else {
      $569 = HEAP32[$__b >> 2] | 0;
      break;
     } else $569 = $557; while (0);
     $570 = ($569 | 0) == 0;
     $571 = HEAP32[$__e >> 2] | 0;
     do if (!$571) label = 219; else {
      if ((HEAP32[$571 + 12 >> 2] | 0) != (HEAP32[$571 + 16 >> 2] | 0)) if ($570) break; else {
       label = 225;
       break L1;
      }
      if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$571 >> 2] | 0) + 36 >> 2] & 63]($571) | 0) == -1) {
       HEAP32[$__e >> 2] = 0;
       label = 219;
       break;
      } else if ($570 ^ (HEAP32[$__e >> 2] | 0) == 0) break; else {
       label = 225;
       break L1;
      }
     } while (0);
     if ((label | 0) == 219) {
      label = 0;
      if ($570) {
       label = 225;
       break L1;
      }
     }
     $584 = HEAP32[$__b >> 2] | 0;
     $586 = HEAP32[$584 + 12 >> 2] | 0;
     if (($586 | 0) == (HEAP32[$584 + 16 >> 2] | 0)) $$0$i$i88 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$584 >> 2] | 0) + 36 >> 2] & 63]($584) | 0; else $$0$i$i88 = HEAPU8[$586 >> 0] | 0;
     if (($$0$i$i88 & 255) << 24 >> 24 != (HEAP8[$__dp >> 0] | 0)) {
      label = 225;
      break L1;
     }
     $601 = HEAP32[$__b >> 2] | 0;
     $602 = $601 + 12 | 0;
     $603 = HEAP32[$602 >> 2] | 0;
     if (($603 | 0) == (HEAP32[$601 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$601 >> 2] | 0) + 40 >> 2] & 63]($601) | 0;
      $678 = $555;
     } else {
      HEAP32[$602 >> 2] = $603 + 1;
      $678 = $555;
     }
     do {
      $611 = HEAP32[$__b >> 2] | 0;
      do if (!$611) $623 = 0; else if ((HEAP32[$611 + 12 >> 2] | 0) == (HEAP32[$611 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$611 >> 2] | 0) + 36 >> 2] & 63]($611) | 0) == -1) {
       HEAP32[$__b >> 2] = 0;
       $623 = 0;
       break;
      } else {
       $623 = HEAP32[$__b >> 2] | 0;
       break;
      } else $623 = $611; while (0);
      $624 = ($623 | 0) == 0;
      $625 = HEAP32[$__e >> 2] | 0;
      do if (!$625) label = 239; else {
       if ((HEAP32[$625 + 12 >> 2] | 0) != (HEAP32[$625 + 16 >> 2] | 0)) if ($624) break; else {
        label = 246;
        break L1;
       }
       if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$625 >> 2] | 0) + 36 >> 2] & 63]($625) | 0) == -1) {
        HEAP32[$__e >> 2] = 0;
        label = 239;
        break;
       } else if ($624 ^ (HEAP32[$__e >> 2] | 0) == 0) break; else {
        label = 246;
        break L1;
       }
      } while (0);
      if ((label | 0) == 239) {
       label = 0;
       if ($624) {
        label = 246;
        break L1;
       }
      }
      $638 = HEAP32[$__b >> 2] | 0;
      $640 = HEAP32[$638 + 12 >> 2] | 0;
      if (($640 | 0) == (HEAP32[$638 + 16 >> 2] | 0)) $$0$i$i66 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$638 >> 2] | 0) + 36 >> 2] & 63]($638) | 0; else $$0$i$i66 = HEAPU8[$640 >> 0] | 0;
      if (($$0$i$i66 & 255) << 24 >> 24 <= -1) {
       label = 246;
       break L1;
      }
      if (!(HEAP16[(HEAP32[$4 >> 2] | 0) + ($$0$i$i66 << 24 >> 24 << 1) >> 1] & 2048)) {
       label = 246;
       break L1;
      }
      if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$0 >> 2] | 0)) __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $0);
      $662 = HEAP32[$__b >> 2] | 0;
      $664 = HEAP32[$662 + 12 >> 2] | 0;
      if (($664 | 0) == (HEAP32[$662 + 16 >> 2] | 0)) $$0$i$i59 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$662 >> 2] | 0) + 36 >> 2] & 63]($662) | 0; else $$0$i$i59 = HEAPU8[$664 >> 0] | 0;
      $675 = HEAP32[$__wn >> 2] | 0;
      HEAP32[$__wn >> 2] = $675 + 1;
      HEAP8[$675 >> 0] = $$0$i$i59;
      $678 = $678 + -1 | 0;
      HEAP32[$__fd >> 2] = $678;
      $679 = HEAP32[$__b >> 2] | 0;
      $680 = $679 + 12 | 0;
      $681 = HEAP32[$680 >> 2] | 0;
      if (($681 | 0) == (HEAP32[$679 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$679 >> 2] | 0) + 40 >> 2] & 63]($679) | 0; else HEAP32[$680 >> 2] = $681 + 1;
     } while (($678 | 0) > 0);
    }
    if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$__wb >> 2] | 0)) {
     label = 257;
     break L1;
    } else {
     $781 = $786;
     $__trailing_sign$1 = $__trailing_sign$0235;
    }
    break;
   }
  case 1:
   {
    if (($__p$0233 | 0) == 3) {
     $772 = $780;
     $__trailing_sign$0$lcssa = $__trailing_sign$0235;
     label = 259;
     break L1;
    }
    $50 = HEAP32[$__b >> 2] | 0;
    $52 = HEAP32[$50 + 12 >> 2] | 0;
    if (($52 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) $$0$i$i34 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] & 63]($50) | 0; else $$0$i$i34 = HEAPU8[$52 >> 0] | 0;
    if (($$0$i$i34 & 255) << 24 >> 24 <= -1) {
     label = 26;
     break L1;
    }
    if (!(HEAP16[(HEAP32[$4 >> 2] | 0) + ($$0$i$i34 << 24 >> 24 << 1) >> 1] & 8192)) {
     label = 26;
     break L1;
    }
    $69 = HEAP32[$__b >> 2] | 0;
    $70 = $69 + 12 | 0;
    $71 = HEAP32[$70 >> 2] | 0;
    if (($71 | 0) == (HEAP32[$69 + 16 >> 2] | 0)) $$0$i$i37 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$69 >> 2] | 0) + 40 >> 2] & 63]($69) | 0; else {
     HEAP32[$70 >> 2] = $71 + 1;
     $$0$i$i37 = HEAPU8[$71 >> 0] | 0;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces, $$0$i$i37 & 255);
    label = 27;
    break;
   }
  case 3:
   {
    $146 = HEAP16[$__psn >> 1] | 0;
    $147 = $146 & 255;
    $149 = ($147 & 1) == 0;
    $151 = ($146 & 65535) >>> 8 & 255;
    if ($149) $166 = ($146 & 254) >>> 1; else $166 = HEAP32[$7 >> 2] | 0;
    $155 = HEAP16[$__nsn >> 1] | 0;
    $156 = $155 & 255;
    $158 = ($156 & 1) == 0;
    $160 = ($155 & 65535) >>> 8 & 255;
    if ($158) $165 = ($155 & 254) >>> 1; else $165 = HEAP32[$5 >> 2] | 0;
    if (($166 | 0) == (0 - $165 | 0)) {
     $781 = $780;
     $__trailing_sign$1 = $__trailing_sign$0235;
    } else {
     if ($149) $171 = ($146 & 254) >>> 1; else $171 = HEAP32[$7 >> 2] | 0;
     if ($171) {
      if ($158) $176 = ($155 & 254) >>> 1; else $176 = HEAP32[$5 >> 2] | 0;
      if ($176) {
       $257 = HEAP32[$__b >> 2] | 0;
       $259 = HEAP32[$257 + 12 >> 2] | 0;
       if (($259 | 0) == (HEAP32[$257 + 16 >> 2] | 0)) {
        $266 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$257 >> 2] | 0) + 36 >> 2] & 63]($257) | 0;
        $$pre247 = HEAP16[$__psn >> 1] | 0;
        $$0$i$i112 = $266;
        $274 = $$pre247 & 255;
        $784 = ($$pre247 & 65535) >>> 8 & 255;
       } else {
        $$0$i$i112 = HEAPU8[$259 >> 0] | 0;
        $274 = $147;
        $784 = $151;
       }
       if (!($274 & 1)) $278 = $784; else $278 = HEAP8[HEAP32[$8 >> 2] >> 0] | 0;
       $279 = HEAP32[$__b >> 2] | 0;
       $280 = $279 + 12 | 0;
       $281 = HEAP32[$280 >> 2] | 0;
       $284 = ($281 | 0) == (HEAP32[$279 + 16 >> 2] | 0);
       if (($$0$i$i112 & 255) << 24 >> 24 == $278 << 24 >> 24) {
        if ($284) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$279 >> 2] | 0) + 40 >> 2] & 63]($279) | 0; else HEAP32[$280 >> 2] = $281 + 1;
        $289 = HEAP8[$__psn >> 0] | 0;
        if (!($289 & 1)) $295 = ($289 & 255) >>> 1; else $295 = HEAP32[$7 >> 2] | 0;
        $781 = $780;
        $__trailing_sign$1 = $295 >>> 0 > 1 ? $__psn : $__trailing_sign$0235;
        break L21;
       }
       if ($284) $$0$i$i121 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$279 >> 2] | 0) + 36 >> 2] & 63]($279) | 0; else $$0$i$i121 = HEAPU8[$281 >> 0] | 0;
       $304 = HEAP16[$__nsn >> 1] | 0;
       if (!($304 & 1)) $311 = ($304 & 65535) >>> 8 & 255; else $311 = HEAP8[HEAP32[$6 >> 2] >> 0] | 0;
       if (($$0$i$i121 & 255) << 24 >> 24 != $311 << 24 >> 24) {
        label = 122;
        break L1;
       }
       $312 = HEAP32[$__b >> 2] | 0;
       $313 = $312 + 12 | 0;
       $314 = HEAP32[$313 >> 2] | 0;
       if (($314 | 0) == (HEAP32[$312 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$312 >> 2] | 0) + 40 >> 2] & 63]($312) | 0; else HEAP32[$313 >> 2] = $314 + 1;
       HEAP8[$__neg >> 0] = 1;
       $322 = HEAP8[$__nsn >> 0] | 0;
       if (!($322 & 1)) $328 = ($322 & 255) >>> 1; else $328 = HEAP32[$5 >> 2] | 0;
       $781 = $780;
       $__trailing_sign$1 = $328 >>> 0 > 1 ? $__nsn : $__trailing_sign$0235;
       break L21;
      }
     }
     if ($149) $181 = ($146 & 254) >>> 1; else $181 = HEAP32[$7 >> 2] | 0;
     $183 = HEAP32[$__b >> 2] | 0;
     $185 = HEAP32[$183 + 12 >> 2] | 0;
     $188 = ($185 | 0) == (HEAP32[$183 + 16 >> 2] | 0);
     if (!$181) {
      if ($188) {
       $226 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$183 >> 2] | 0) + 36 >> 2] & 63]($183) | 0;
       $$pre = HEAP16[$__nsn >> 1] | 0;
       $$0$i$i105 = $226;
       $234 = $$pre & 255;
       $783 = ($$pre & 65535) >>> 8 & 255;
      } else {
       $$0$i$i105 = HEAPU8[$185 >> 0] | 0;
       $234 = $156;
       $783 = $160;
      }
      if (!($234 & 1)) $238 = $783; else $238 = HEAP8[HEAP32[$6 >> 2] >> 0] | 0;
      if (($$0$i$i105 & 255) << 24 >> 24 != $238 << 24 >> 24) {
       $781 = $780;
       $__trailing_sign$1 = $__trailing_sign$0235;
       break L21;
      }
      $239 = HEAP32[$__b >> 2] | 0;
      $240 = $239 + 12 | 0;
      $241 = HEAP32[$240 >> 2] | 0;
      if (($241 | 0) == (HEAP32[$239 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$239 >> 2] | 0) + 40 >> 2] & 63]($239) | 0; else HEAP32[$240 >> 2] = $241 + 1;
      HEAP8[$__neg >> 0] = 1;
      $249 = HEAP8[$__nsn >> 0] | 0;
      if (!($249 & 1)) $255 = ($249 & 255) >>> 1; else $255 = HEAP32[$5 >> 2] | 0;
      $781 = $780;
      $__trailing_sign$1 = $255 >>> 0 > 1 ? $__nsn : $__trailing_sign$0235;
      break L21;
     }
     if ($188) {
      $192 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$183 >> 2] | 0) + 36 >> 2] & 63]($183) | 0;
      $$pre244 = HEAP16[$__psn >> 1] | 0;
      $$0$i$i85 = $192;
      $200 = $$pre244 & 255;
      $782 = ($$pre244 & 65535) >>> 8 & 255;
     } else {
      $$0$i$i85 = HEAPU8[$185 >> 0] | 0;
      $200 = $147;
      $782 = $151;
     }
     if (!($200 & 1)) $204 = $782; else $204 = HEAP8[HEAP32[$8 >> 2] >> 0] | 0;
     if (($$0$i$i85 & 255) << 24 >> 24 != $204 << 24 >> 24) {
      HEAP8[$__neg >> 0] = 1;
      $781 = $780;
      $__trailing_sign$1 = $__trailing_sign$0235;
      break L21;
     }
     $205 = HEAP32[$__b >> 2] | 0;
     $206 = $205 + 12 | 0;
     $207 = HEAP32[$206 >> 2] | 0;
     if (($207 | 0) == (HEAP32[$205 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$205 >> 2] | 0) + 40 >> 2] & 63]($205) | 0; else HEAP32[$206 >> 2] = $207 + 1;
     $215 = HEAP8[$__psn >> 0] | 0;
     if (!($215 & 1)) $221 = ($215 & 255) >>> 1; else $221 = HEAP32[$7 >> 2] | 0;
     $781 = $780;
     $__trailing_sign$1 = $221 >>> 0 > 1 ? $__psn : $__trailing_sign$0235;
    }
    break;
   }
  case 0:
   {
    label = 27;
    break;
   }
  case 2:
   {
    if (!(($__trailing_sign$0235 | 0) != 0 | $__p$0233 >>> 0 < 2)) {
     if (($__p$0233 | 0) == 2) $337 = (HEAP8[$17 >> 0] | 0) != 0; else $337 = 0;
     if (!($10 | $337)) {
      $781 = $780;
      $__trailing_sign$1 = 0;
      break L21;
     }
    }
    $338 = HEAP8[$__sym >> 0] | 0;
    $340 = ($338 & 1) == 0;
    $$ = $340 ? $11 : HEAP32[$12 >> 2] | 0;
    L257 : do if (!$__p$0233) {
     $394 = $338;
     $403 = $$;
    } else if ((HEAPU8[$__pat + ($__p$0233 + -1) >> 0] | 0) < 2) {
     $347 = ($338 & 255) >>> 1;
     $348 = HEAP32[$4 >> 2] | 0;
     $349 = HEAP32[$12 >> 2] | 0;
     $350 = HEAP32[$13 >> 2] | 0;
     $352 = $$;
     while (1) {
      if (($352 | 0) == (($340 ? $11 : $349) + ($340 ? $347 : $350) | 0)) {
       $$lcssa = $352;
       break;
      }
      $354 = HEAP8[$352 >> 0] | 0;
      if ($354 << 24 >> 24 <= -1) {
       $$lcssa = $352;
       break;
      }
      if (!(HEAP16[$348 + ($354 << 24 >> 24 << 1) >> 1] & 8192)) {
       $$lcssa = $352;
       break;
      } else $352 = $352 + 1 | 0;
     }
     $363 = $$lcssa - ($340 ? $11 : $349) | 0;
     $364 = HEAP8[$__spaces >> 0] | 0;
     $366 = ($364 & 1) == 0;
     if ($366) $371 = ($364 & 255) >>> 1; else $371 = HEAP32[$16 >> 2] | 0;
     L269 : do if ($363 >>> 0 <= $371 >>> 0) {
      if ($366) {
       $381 = $14;
       $382 = ($364 & 255) >>> 1;
       $383 = $__spaces + ((($364 & 255) >>> 1) - $363) + 1 | 0;
      } else {
       $372 = HEAP32[$15 >> 2] | 0;
       $373 = HEAP32[$16 >> 2] | 0;
       $381 = $372;
       $382 = $373;
       $383 = $372 + ($373 - $363) | 0;
      }
      $380 = $381 + $382 | 0;
      if (($383 | 0) == ($380 | 0)) {
       $394 = $338;
       $403 = $$lcssa;
       break L257;
      } else {
       $386 = $383;
       $388 = $340 ? $11 : $349;
      }
      while (1) {
       if ((HEAP8[$386 >> 0] | 0) != (HEAP8[$388 >> 0] | 0)) break L269;
       $386 = $386 + 1 | 0;
       if (($386 | 0) == ($380 | 0)) {
        $394 = $338;
        $403 = $$lcssa;
        break L257;
       } else $388 = $388 + 1 | 0;
      }
     } while (0);
     $394 = $338;
     $403 = $340 ? $11 : $349;
    } else {
     $394 = $338;
     $403 = $$;
    } while (0);
    L279 : while (1) {
     if (!($394 & 1)) {
      $401 = $11;
      $402 = ($394 & 255) >>> 1;
     } else {
      $401 = HEAP32[$12 >> 2] | 0;
      $402 = HEAP32[$13 >> 2] | 0;
     }
     if (($403 | 0) == ($401 + $402 | 0)) {
      $$lcssa281 = $403;
      break;
     }
     $405 = HEAP32[$__b >> 2] | 0;
     do if (!$405) $417 = 0; else if ((HEAP32[$405 + 12 >> 2] | 0) == (HEAP32[$405 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$405 >> 2] | 0) + 36 >> 2] & 63]($405) | 0) == -1) {
      HEAP32[$__b >> 2] = 0;
      $417 = 0;
      break;
     } else {
      $417 = HEAP32[$__b >> 2] | 0;
      break;
     } else $417 = $405; while (0);
     $418 = ($417 | 0) == 0;
     $419 = HEAP32[$__e >> 2] | 0;
     do if (!$419) label = 158; else {
      if ((HEAP32[$419 + 12 >> 2] | 0) != (HEAP32[$419 + 16 >> 2] | 0)) if ($418) break; else {
       $$lcssa281 = $403;
       break L279;
      }
      if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$419 >> 2] | 0) + 36 >> 2] & 63]($419) | 0) == -1) {
       HEAP32[$__e >> 2] = 0;
       label = 158;
       break;
      } else if ($418 ^ (HEAP32[$__e >> 2] | 0) == 0) break; else {
       $$lcssa281 = $403;
       break L279;
      }
     } while (0);
     if ((label | 0) == 158) {
      label = 0;
      if ($418) {
       $$lcssa281 = $403;
       break;
      }
     }
     $432 = HEAP32[$__b >> 2] | 0;
     $434 = HEAP32[$432 + 12 >> 2] | 0;
     if (($434 | 0) == (HEAP32[$432 + 16 >> 2] | 0)) $$0$i$i148 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$432 >> 2] | 0) + 36 >> 2] & 63]($432) | 0; else $$0$i$i148 = HEAPU8[$434 >> 0] | 0;
     if (($$0$i$i148 & 255) << 24 >> 24 != (HEAP8[$403 >> 0] | 0)) {
      $$lcssa281 = $403;
      break;
     }
     $447 = HEAP32[$__b >> 2] | 0;
     $448 = $447 + 12 | 0;
     $449 = HEAP32[$448 >> 2] | 0;
     if (($449 | 0) == (HEAP32[$447 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$447 >> 2] | 0) + 40 >> 2] & 63]($447) | 0; else HEAP32[$448 >> 2] = $449 + 1;
     $394 = HEAP8[$__sym >> 0] | 0;
     $403 = $403 + 1 | 0;
    }
    if ($10) {
     $458 = HEAP8[$__sym >> 0] | 0;
     if (!($458 & 1)) {
      $466 = $11;
      $467 = ($458 & 255) >>> 1;
     } else {
      $466 = HEAP32[$12 >> 2] | 0;
      $467 = HEAP32[$13 >> 2] | 0;
     }
     if (($$lcssa281 | 0) == ($466 + $467 | 0)) {
      $781 = $780;
      $__trailing_sign$1 = $__trailing_sign$0235;
     } else {
      label = 173;
      break L1;
     }
    } else {
     $781 = $780;
     $__trailing_sign$1 = $__trailing_sign$0235;
    }
    break;
   }
  default:
   {
    $781 = $780;
    $__trailing_sign$1 = $__trailing_sign$0235;
   }
  } while (0);
  L319 : do if ((label | 0) == 27) {
   label = 0;
   if (($__p$0233 | 0) == 3) {
    $772 = $780;
    $__trailing_sign$0$lcssa = $__trailing_sign$0235;
    label = 259;
    break L1;
   }
   while (1) {
    $86 = HEAP32[$__b >> 2] | 0;
    do if (!$86) $98 = 0; else if ((HEAP32[$86 + 12 >> 2] | 0) == (HEAP32[$86 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$86 >> 2] | 0) + 36 >> 2] & 63]($86) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $98 = 0;
     break;
    } else {
     $98 = HEAP32[$__b >> 2] | 0;
     break;
    } else $98 = $86; while (0);
    $99 = ($98 | 0) == 0;
    $100 = HEAP32[$__e >> 2] | 0;
    do if (!$100) label = 38; else {
     if ((HEAP32[$100 + 12 >> 2] | 0) != (HEAP32[$100 + 16 >> 2] | 0)) if ($99) break; else {
      $781 = $780;
      $__trailing_sign$1 = $__trailing_sign$0235;
      break L319;
     }
     if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$100 >> 2] | 0) + 36 >> 2] & 63]($100) | 0) == -1) {
      HEAP32[$__e >> 2] = 0;
      label = 38;
      break;
     } else if ($99 ^ (HEAP32[$__e >> 2] | 0) == 0) break; else {
      $781 = $780;
      $__trailing_sign$1 = $__trailing_sign$0235;
      break L319;
     }
    } while (0);
    if ((label | 0) == 38) {
     label = 0;
     if ($99) {
      $781 = $780;
      $__trailing_sign$1 = $__trailing_sign$0235;
      break L319;
     }
    }
    $113 = HEAP32[$__b >> 2] | 0;
    $115 = HEAP32[$113 + 12 >> 2] | 0;
    if (($115 | 0) == (HEAP32[$113 + 16 >> 2] | 0)) $$0$i$i50 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$113 >> 2] | 0) + 36 >> 2] & 63]($113) | 0; else $$0$i$i50 = HEAPU8[$115 >> 0] | 0;
    if (($$0$i$i50 & 255) << 24 >> 24 <= -1) {
     $781 = $780;
     $__trailing_sign$1 = $__trailing_sign$0235;
     break L319;
    }
    if (!(HEAP16[(HEAP32[$4 >> 2] | 0) + ($$0$i$i50 << 24 >> 24 << 1) >> 1] & 8192)) {
     $781 = $780;
     $__trailing_sign$1 = $__trailing_sign$0235;
     break L319;
    }
    $132 = HEAP32[$__b >> 2] | 0;
    $133 = $132 + 12 | 0;
    $134 = HEAP32[$133 >> 2] | 0;
    if (($134 | 0) == (HEAP32[$132 + 16 >> 2] | 0)) $$0$i$i56 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$132 >> 2] | 0) + 40 >> 2] & 63]($132) | 0; else {
     HEAP32[$133 >> 2] = $134 + 1;
     $$0$i$i56 = HEAPU8[$134 >> 0] | 0;
    }
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__spaces, $$0$i$i56 & 255);
   }
  } while (0);
  $__p$0233 = $__p$0233 + 1 | 0;
  if ($__p$0233 >>> 0 >= 4) {
   $772 = $781;
   $__trailing_sign$0$lcssa = $__trailing_sign$1;
   label = 259;
   break;
  } else {
   $780 = $781;
   $__trailing_sign$0235 = $__trailing_sign$1;
  }
 }
 L352 : do if ((label | 0) == 26) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$0 = 0;
 } else if ((label | 0) == 122) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$0 = 0;
 } else if ((label | 0) == 173) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$0 = 0;
 } else if ((label | 0) == 225) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$0 = 0;
 } else if ((label | 0) == 246) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$0 = 0;
 } else if ((label | 0) == 257) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$0 = 0;
 } else if ((label | 0) == 259) {
  L360 : do if ($__trailing_sign$0$lcssa) {
   $698 = $__trailing_sign$0$lcssa + 1 | 0;
   $699 = $__trailing_sign$0$lcssa + 8 | 0;
   $700 = $__trailing_sign$0$lcssa + 4 | 0;
   $__i$0 = 1;
   L362 : while (1) {
    $701 = HEAP8[$__trailing_sign$0$lcssa >> 0] | 0;
    if (!($701 & 1)) $708 = ($701 & 255) >>> 1; else $708 = HEAP32[$700 >> 2] | 0;
    if ($__i$0 >>> 0 >= $708 >>> 0) break L360;
    $709 = HEAP32[$__b >> 2] | 0;
    do if (!$709) $721 = 0; else if ((HEAP32[$709 + 12 >> 2] | 0) == (HEAP32[$709 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$709 >> 2] | 0) + 36 >> 2] & 63]($709) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $721 = 0;
     break;
    } else {
     $721 = HEAP32[$__b >> 2] | 0;
     break;
    } else $721 = $709; while (0);
    $722 = ($721 | 0) == 0;
    $723 = HEAP32[$__e >> 2] | 0;
    do if (!$723) label = 275; else {
     if ((HEAP32[$723 + 12 >> 2] | 0) != (HEAP32[$723 + 16 >> 2] | 0)) if ($722) break; else break L362;
     if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$723 >> 2] | 0) + 36 >> 2] & 63]($723) | 0) == -1) {
      HEAP32[$__e >> 2] = 0;
      label = 275;
      break;
     } else if ($722 ^ (HEAP32[$__e >> 2] | 0) == 0) break; else break L362;
    } while (0);
    if ((label | 0) == 275) {
     label = 0;
     if ($722) break;
    }
    $736 = HEAP32[$__b >> 2] | 0;
    $738 = HEAP32[$736 + 12 >> 2] | 0;
    if (($738 | 0) == (HEAP32[$736 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$736 >> 2] | 0) + 36 >> 2] & 63]($736) | 0; else $$0$i$i = HEAPU8[$738 >> 0] | 0;
    if (!(HEAP8[$__trailing_sign$0$lcssa >> 0] & 1)) $754 = $698; else $754 = HEAP32[$699 >> 2] | 0;
    if (($$0$i$i & 255) << 24 >> 24 != (HEAP8[$754 + $__i$0 >> 0] | 0)) break;
    $759 = $__i$0 + 1 | 0;
    $760 = HEAP32[$__b >> 2] | 0;
    $761 = $760 + 12 | 0;
    $762 = HEAP32[$761 >> 2] | 0;
    if (($762 | 0) == (HEAP32[$760 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[$760 >> 2] | 0) + 40 >> 2] & 63]($760) | 0;
     $__i$0 = $759;
     continue;
    } else {
     HEAP32[$761 >> 2] = $762 + 1;
     $__i$0 = $759;
     continue;
    }
   }
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $$0 = 0;
   break L352;
  } while (0);
  $770 = HEAP32[$__gb >> 2] | 0;
  if (($770 | 0) == ($772 | 0)) $$0 = 1; else {
   HEAP32[$__et >> 2] = 0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp, $770, $772, $__et);
   if (!(HEAP32[$__et >> 2] | 0)) $$0 = 1; else {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
    $$0 = 0;
   }
  }
 } while (0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__psn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $777 = HEAP32[$__gb >> 2] | 0;
 HEAP32[$__gb >> 2] = 0;
 if ($777) FUNCTION_TABLE_vi[HEAP32[$1 >> 2] & 127]($777);
 STACKTOP = sp;
 return $$0 | 0;
}
function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $__e, $__intl, $__loc, $__flags, $__err, $__neg, $__ct, $__wb, $__wn, $__we) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__flags = $__flags | 0;
 $__err = $__err | 0;
 $__neg = $__neg | 0;
 $__ct = $__ct | 0;
 $__wb = $__wb | 0;
 $__wn = $__wn | 0;
 $__we = $__we | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i118 = 0, $$0$i$i$i$i150 = 0, $$0$i$i$i$i175 = 0, $$0$i$i$i$i23 = 0, $$0$i$i$i$i44 = 0, $$0$i$i$i$i84 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i124 = 0, $$0$i$i1$i$i156 = 0, $$0$i$i1$i$i181 = 0, $$0$i$i1$i$i29 = 0, $$0$i$i1$i$i50 = 0, $$0$i$i1$i$i90 = 0, $$0$i$i102 = 0, $$0$i$i111 = 0, $$0$i$i114 = 0, $$0$i$i136 = 0, $$0$i$i147 = 0, $$0$i$i171 = 0, $$0$i$i38 = 0, $$0$i$i42 = 0, $$0$i$i59 = 0, $$0$i$i65 = 0, $$0$i$i70 = 0, $$0$i$i78 = 0, $$0$i$i81 = 0, $$281 = 0, $$lcssa286 = 0, $$lcssa292 = 0, $$lcssa293 = 0, $0 = 0, $1 = 0, $10 = 0, $103 = 0, $104 = 0, $106 = 0, $11 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $131 = 0, $133 = 0, $137 = 0, $139 = 0, $14 = 0, $144 = 0, $145 = 0, $15 = 0, $150 = 0, $155 = 0, $16 = 0, $160 = 0, $162 = 0, $164 = 0, $167 = 0, $171 = 0, $174 = 0, $179 = 0, $180 = 0, $181 = 0, $189 = 0, $19 = 0, $195 = 0, $200 = 0, $203 = 0, $208 = 0, $209 = 0, $210 = 0, $218 = 0, $224 = 0, $226 = 0, $228 = 0, $235 = 0, $238 = 0, $243 = 0, $244 = 0, $245 = 0, $248 = 0, $253 = 0, $259 = 0, $272 = 0, $273 = 0, $274 = 0, $282 = 0, $288 = 0, $29 = 0, $297 = 0, $298 = 0, $307 = 0, $314 = 0, $315 = 0, $316 = 0, $32 = 0, $325 = 0, $326 = 0, $328 = 0, $332 = 0, $333 = 0, $335 = 0, $340 = 0, $341 = 0, $342 = 0, $349 = 0, $350 = 0, $351 = 0, $353 = 0, $356 = 0, $358 = 0, $365 = 0, $372 = 0, $373 = 0, $374 = 0, $376 = 0, $379 = 0, $389 = 0, $392 = 0, $4 = 0, $402 = 0, $403 = 0, $405 = 0, $416 = 0, $417 = 0, $418 = 0, $42 = 0, $427 = 0, $435 = 0, $436 = 0, $440 = 0, $443 = 0, $453 = 0, $456 = 0, $46 = 0, $466 = 0, $467 = 0, $469 = 0, $47 = 0, $482 = 0, $486 = 0, $488 = 0, $49 = 0, $494 = 0, $499 = 0, $5 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $518 = 0, $519 = 0, $520 = 0, $522 = 0, $525 = 0, $535 = 0, $538 = 0, $548 = 0, $549 = 0, $551 = 0, $564 = 0, $565 = 0, $566 = 0, $574 = 0, $577 = 0, $587 = 0, $590 = 0, $6 = 0, $600 = 0, $601 = 0, $603 = 0, $62 = 0, $621 = 0, $623 = 0, $63 = 0, $632 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $64 = 0, $655 = 0, $656 = 0, $657 = 0, $664 = 0, $665 = 0, $668 = 0, $678 = 0, $681 = 0, $691 = 0, $692 = 0, $694 = 0, $7 = 0, $708 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $724 = 0, $726 = 0, $731 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $77 = 0, $80 = 0, $9 = 0, $90 = 0, $93 = 0, $__dp = 0, $__et = 0, $__fd = 0, $__gb = 0, $__gbuf = 0, $__ge = 0, $__gn = 0, $__grp = 0, $__i$0 = 0, $__ng$0 = 0, $__ng$0$lcssa287 = 0, $__ng$1 = 0, $__nsn = 0, $__p$0251 = 0, $__pat = 0, $__psn = 0, $__spaces = 0, $__sym = 0, $__trailing_sign$0$lcssa = 0, $__trailing_sign$0253 = 0, $__trailing_sign$1 = 0, $__ts = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512 | 0;
 $0 = sp + 496 | 0;
 $__gbuf = sp + 96 | 0;
 $__gb = sp + 88 | 0;
 $__gn = sp + 80 | 0;
 $__ge = sp + 76 | 0;
 $__pat = sp + 500 | 0;
 $__dp = sp + 72 | 0;
 $__ts = sp + 68 | 0;
 $__grp = sp + 56 | 0;
 $__sym = sp + 44 | 0;
 $__psn = sp + 32 | 0;
 $__nsn = sp + 20 | 0;
 $__spaces = sp + 8 | 0;
 $__fd = sp + 4 | 0;
 $__et = sp;
 HEAP32[$0 >> 2] = $__we;
 HEAP32[$__gb >> 2] = $__gbuf;
 $1 = $__gb + 4 | 0;
 HEAP32[$1 >> 2] = 113;
 HEAP32[$__gn >> 2] = $__gbuf;
 HEAP32[$__ge >> 2] = $__gbuf + 400;
 HEAP32[$__grp + 0 >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 HEAP32[$__sym + 0 >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 HEAP32[$__psn + 0 >> 2] = 0;
 HEAP32[$__psn + 4 >> 2] = 0;
 HEAP32[$__psn + 8 >> 2] = 0;
 HEAP32[$__nsn + 0 >> 2] = 0;
 HEAP32[$__nsn + 4 >> 2] = 0;
 HEAP32[$__nsn + 8 >> 2] = 0;
 HEAP32[$__spaces + 0 >> 2] = 0;
 HEAP32[$__spaces + 4 >> 2] = 0;
 HEAP32[$__spaces + 8 >> 2] = 0;
 __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd);
 HEAP32[$__wn >> 2] = HEAP32[$__wb >> 2];
 $4 = $__nsn + 4 | 0;
 $5 = $__nsn + 8 | 0;
 $6 = $__psn + 4 | 0;
 $7 = $__psn + 8 | 0;
 $9 = ($__flags & 512 | 0) != 0;
 $10 = $__sym + 4 | 0;
 $11 = $__sym + 8 | 0;
 $12 = $__spaces + 4 | 0;
 $13 = $__spaces + 8 | 0;
 $14 = $__pat + 3 | 0;
 $15 = $__grp + 4 | 0;
 $734 = $__gbuf;
 $__p$0251 = 0;
 $__trailing_sign$0253 = 0;
 L1 : while (1) {
  $16 = HEAP32[$__b >> 2] | 0;
  do if (!$16) $42 = 1; else {
   $19 = HEAP32[$16 + 12 >> 2] | 0;
   if (($19 | 0) == (HEAP32[$16 + 16 >> 2] | 0)) $$0$i$i$i$i23 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$16 >> 2] | 0) + 36 >> 2] & 63]($16) | 0; else $$0$i$i$i$i23 = HEAP32[$19 >> 2] | 0;
   if (($$0$i$i$i$i23 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $42 = 1;
    break;
   } else {
    $42 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  $29 = HEAP32[$__e >> 2] | 0;
  do if (!$29) label = 15; else {
   $32 = HEAP32[$29 + 12 >> 2] | 0;
   if (($32 | 0) == (HEAP32[$29 + 16 >> 2] | 0)) $$0$i$i1$i$i29 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$29 >> 2] | 0) + 36 >> 2] & 63]($29) | 0; else $$0$i$i1$i$i29 = HEAP32[$32 >> 2] | 0;
   if (($$0$i$i1$i$i29 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 15;
    break;
   } else if ($42 ^ (HEAP32[$__e >> 2] | 0) == 0) break; else {
    $726 = $734;
    $__trailing_sign$0$lcssa = $__trailing_sign$0253;
    label = 267;
    break L1;
   }
  } while (0);
  if ((label | 0) == 15) {
   label = 0;
   if ($42) {
    $726 = $734;
    $__trailing_sign$0$lcssa = $__trailing_sign$0253;
    label = 267;
    break;
   }
  }
  L25 : do switch (HEAP8[$__pat + $__p$0251 >> 0] | 0) {
  case 4:
   {
    $46 = HEAP32[$__ts >> 2] | 0;
    $499 = $734;
    $__ng$0 = 0;
    L27 : while (1) {
     $440 = HEAP32[$__b >> 2] | 0;
     do if (!$440) $466 = 1; else {
      $443 = HEAP32[$440 + 12 >> 2] | 0;
      if (($443 | 0) == (HEAP32[$440 + 16 >> 2] | 0)) $$0$i$i$i$i150 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$440 >> 2] | 0) + 36 >> 2] & 63]($440) | 0; else $$0$i$i$i$i150 = HEAP32[$443 >> 2] | 0;
      if (($$0$i$i$i$i150 | 0) == -1) {
       HEAP32[$__b >> 2] = 0;
       $466 = 1;
       break;
      } else {
       $466 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } while (0);
     $453 = HEAP32[$__e >> 2] | 0;
     do if (!$453) label = 188; else {
      $456 = HEAP32[$453 + 12 >> 2] | 0;
      if (($456 | 0) == (HEAP32[$453 + 16 >> 2] | 0)) $$0$i$i1$i$i156 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$453 >> 2] | 0) + 36 >> 2] & 63]($453) | 0; else $$0$i$i1$i$i156 = HEAP32[$456 >> 2] | 0;
      if (($$0$i$i1$i$i156 | 0) == -1) {
       HEAP32[$__e >> 2] = 0;
       label = 188;
       break;
      } else if ($466 ^ (HEAP32[$__e >> 2] | 0) == 0) break; else {
       $$lcssa286 = $499;
       $__ng$0$lcssa287 = $__ng$0;
       break L27;
      }
     } while (0);
     if ((label | 0) == 188) {
      label = 0;
      if ($466) {
       $$lcssa286 = $499;
       $__ng$0$lcssa287 = $__ng$0;
       break;
      }
     }
     $467 = HEAP32[$__b >> 2] | 0;
     $469 = HEAP32[$467 + 12 >> 2] | 0;
     if (($469 | 0) == (HEAP32[$467 + 16 >> 2] | 0)) $$0$i$i147 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$467 >> 2] | 0) + 36 >> 2] & 63]($467) | 0; else $$0$i$i147 = HEAP32[$469 >> 2] | 0;
     if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $$0$i$i147) | 0) {
      $482 = HEAP32[$__wn >> 2] | 0;
      if (($482 | 0) == (HEAP32[$0 >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $0);
       $486 = HEAP32[$__wn >> 2] | 0;
      } else $486 = $482;
      HEAP32[$__wn >> 2] = $486 + 4;
      HEAP32[$486 >> 2] = $$0$i$i147;
      $736 = $499;
      $__ng$1 = $__ng$0 + 1 | 0;
     } else {
      $488 = HEAP8[$__grp >> 0] | 0;
      if (!($488 & 1)) $494 = ($488 & 255) >>> 1; else $494 = HEAP32[$15 >> 2] | 0;
      if (!(($494 | 0) != 0 & ($__ng$0 | 0) != 0 & ($$0$i$i147 | 0) == ($46 | 0))) {
       $$lcssa286 = $499;
       $__ng$0$lcssa287 = $__ng$0;
       break;
      }
      if (($499 | 0) == (HEAP32[$__ge >> 2] | 0)) {
       __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge);
       $502 = HEAP32[$__gn >> 2] | 0;
      } else $502 = $499;
      $501 = $502 + 4 | 0;
      HEAP32[$__gn >> 2] = $501;
      HEAP32[$502 >> 2] = $__ng$0;
      $736 = $501;
      $__ng$1 = 0;
     }
     $503 = HEAP32[$__b >> 2] | 0;
     $504 = $503 + 12 | 0;
     $505 = HEAP32[$504 >> 2] | 0;
     if (($505 | 0) == (HEAP32[$503 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$503 >> 2] | 0) + 40 >> 2] & 63]($503) | 0;
      $499 = $736;
      $__ng$0 = $__ng$1;
      continue;
     } else {
      HEAP32[$504 >> 2] = $505 + 4;
      $499 = $736;
      $__ng$0 = $__ng$1;
      continue;
     }
    }
    if (($__ng$0$lcssa287 | 0) != 0 ? (HEAP32[$__gb >> 2] | 0) != ($$lcssa286 | 0) : 0) {
     if (($$lcssa286 | 0) == (HEAP32[$__ge >> 2] | 0)) {
      __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__gb, $__gn, $__ge);
      $519 = HEAP32[$__gn >> 2] | 0;
     } else $519 = $$lcssa286;
     $518 = $519 + 4 | 0;
     HEAP32[$__gn >> 2] = $518;
     HEAP32[$519 >> 2] = $__ng$0$lcssa287;
     $737 = $518;
    } else $737 = $$lcssa286;
    $520 = HEAP32[$__fd >> 2] | 0;
    if (($520 | 0) > 0) {
     $522 = HEAP32[$__b >> 2] | 0;
     do if (!$522) $548 = 1; else {
      $525 = HEAP32[$522 + 12 >> 2] | 0;
      if (($525 | 0) == (HEAP32[$522 + 16 >> 2] | 0)) $$0$i$i$i$i118 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$522 >> 2] | 0) + 36 >> 2] & 63]($522) | 0; else $$0$i$i$i$i118 = HEAP32[$525 >> 2] | 0;
      if (($$0$i$i$i$i118 | 0) == -1) {
       HEAP32[$__b >> 2] = 0;
       $548 = 1;
       break;
      } else {
       $548 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } while (0);
     $535 = HEAP32[$__e >> 2] | 0;
     do if (!$535) label = 225; else {
      $538 = HEAP32[$535 + 12 >> 2] | 0;
      if (($538 | 0) == (HEAP32[$535 + 16 >> 2] | 0)) $$0$i$i1$i$i124 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$535 >> 2] | 0) + 36 >> 2] & 63]($535) | 0; else $$0$i$i1$i$i124 = HEAP32[$538 >> 2] | 0;
      if (($$0$i$i1$i$i124 | 0) == -1) {
       HEAP32[$__e >> 2] = 0;
       label = 225;
       break;
      } else if ($548 ^ (HEAP32[$__e >> 2] | 0) == 0) break; else {
       label = 231;
       break L1;
      }
     } while (0);
     if ((label | 0) == 225) {
      label = 0;
      if ($548) {
       label = 231;
       break L1;
      }
     }
     $549 = HEAP32[$__b >> 2] | 0;
     $551 = HEAP32[$549 + 12 >> 2] | 0;
     if (($551 | 0) == (HEAP32[$549 + 16 >> 2] | 0)) $$0$i$i111 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$549 >> 2] | 0) + 36 >> 2] & 63]($549) | 0; else $$0$i$i111 = HEAP32[$551 >> 2] | 0;
     if (($$0$i$i111 | 0) != (HEAP32[$__dp >> 2] | 0)) {
      label = 231;
      break L1;
     }
     $564 = HEAP32[$__b >> 2] | 0;
     $565 = $564 + 12 | 0;
     $566 = HEAP32[$565 >> 2] | 0;
     if (($566 | 0) == (HEAP32[$564 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$564 >> 2] | 0) + 40 >> 2] & 63]($564) | 0;
      $635 = $520;
     } else {
      HEAP32[$565 >> 2] = $566 + 4;
      $635 = $520;
     }
     do {
      $574 = HEAP32[$__b >> 2] | 0;
      do if (!$574) $600 = 1; else {
       $577 = HEAP32[$574 + 12 >> 2] | 0;
       if (($577 | 0) == (HEAP32[$574 + 16 >> 2] | 0)) $$0$i$i$i$i84 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$574 >> 2] | 0) + 36 >> 2] & 63]($574) | 0; else $$0$i$i$i$i84 = HEAP32[$577 >> 2] | 0;
       if (($$0$i$i$i$i84 | 0) == -1) {
        HEAP32[$__b >> 2] = 0;
        $600 = 1;
        break;
       } else {
        $600 = (HEAP32[$__b >> 2] | 0) == 0;
        break;
       }
      } while (0);
      $587 = HEAP32[$__e >> 2] | 0;
      do if (!$587) label = 248; else {
       $590 = HEAP32[$587 + 12 >> 2] | 0;
       if (($590 | 0) == (HEAP32[$587 + 16 >> 2] | 0)) $$0$i$i1$i$i90 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$587 >> 2] | 0) + 36 >> 2] & 63]($587) | 0; else $$0$i$i1$i$i90 = HEAP32[$590 >> 2] | 0;
       if (($$0$i$i1$i$i90 | 0) == -1) {
        HEAP32[$__e >> 2] = 0;
        label = 248;
        break;
       } else if ($600 ^ (HEAP32[$__e >> 2] | 0) == 0) break; else {
        label = 254;
        break L1;
       }
      } while (0);
      if ((label | 0) == 248) {
       label = 0;
       if ($600) {
        label = 254;
        break L1;
       }
      }
      $601 = HEAP32[$__b >> 2] | 0;
      $603 = HEAP32[$601 + 12 >> 2] | 0;
      if (($603 | 0) == (HEAP32[$601 + 16 >> 2] | 0)) $$0$i$i78 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$601 >> 2] | 0) + 36 >> 2] & 63]($601) | 0; else $$0$i$i78 = HEAP32[$603 >> 2] | 0;
      if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $$0$i$i78) | 0)) {
       label = 254;
       break L1;
      }
      if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$0 >> 2] | 0)) __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb, $__wn, $0);
      $621 = HEAP32[$__b >> 2] | 0;
      $623 = HEAP32[$621 + 12 >> 2] | 0;
      if (($623 | 0) == (HEAP32[$621 + 16 >> 2] | 0)) $$0$i$i70 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$621 >> 2] | 0) + 36 >> 2] & 63]($621) | 0; else $$0$i$i70 = HEAP32[$623 >> 2] | 0;
      $632 = HEAP32[$__wn >> 2] | 0;
      HEAP32[$__wn >> 2] = $632 + 4;
      HEAP32[$632 >> 2] = $$0$i$i70;
      $635 = $635 + -1 | 0;
      HEAP32[$__fd >> 2] = $635;
      $636 = HEAP32[$__b >> 2] | 0;
      $637 = $636 + 12 | 0;
      $638 = HEAP32[$637 >> 2] | 0;
      if (($638 | 0) == (HEAP32[$636 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$636 >> 2] | 0) + 40 >> 2] & 63]($636) | 0; else HEAP32[$637 >> 2] = $638 + 4;
     } while (($635 | 0) > 0);
    }
    if ((HEAP32[$__wn >> 2] | 0) == (HEAP32[$__wb >> 2] | 0)) {
     label = 265;
     break L1;
    } else {
     $735 = $737;
     $__trailing_sign$1 = $__trailing_sign$0253;
    }
    break;
   }
  case 1:
   {
    if (($__p$0251 | 0) == 3) {
     $726 = $734;
     $__trailing_sign$0$lcssa = $__trailing_sign$0253;
     label = 267;
     break L1;
    }
    $47 = HEAP32[$__b >> 2] | 0;
    $49 = HEAP32[$47 + 12 >> 2] | 0;
    if (($49 | 0) == (HEAP32[$47 + 16 >> 2] | 0)) $$0$i$i38 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$47 >> 2] | 0) + 36 >> 2] & 63]($47) | 0; else $$0$i$i38 = HEAP32[$49 >> 2] | 0;
    if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, $$0$i$i38) | 0)) {
     label = 28;
     break L1;
    }
    $62 = HEAP32[$__b >> 2] | 0;
    $63 = $62 + 12 | 0;
    $64 = HEAP32[$63 >> 2] | 0;
    if (($64 | 0) == (HEAP32[$62 + 16 >> 2] | 0)) $$0$i$i42 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$62 >> 2] | 0) + 40 >> 2] & 63]($62) | 0; else {
     HEAP32[$63 >> 2] = $64 + 4;
     $$0$i$i42 = HEAP32[$64 >> 2] | 0;
    }
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces, $$0$i$i42);
    label = 29;
    break;
   }
  case 3:
   {
    $131 = HEAP8[$__psn >> 0] | 0;
    $133 = ($131 & 1) == 0;
    if ($133) $145 = ($131 & 255) >>> 1; else $145 = HEAP32[$6 >> 2] | 0;
    $137 = HEAP8[$__nsn >> 0] | 0;
    $139 = ($137 & 1) == 0;
    if ($139) $144 = ($137 & 255) >>> 1; else $144 = HEAP32[$4 >> 2] | 0;
    if (($145 | 0) == (0 - $144 | 0)) {
     $735 = $734;
     $__trailing_sign$1 = $__trailing_sign$0253;
    } else {
     if ($133) $150 = ($131 & 255) >>> 1; else $150 = HEAP32[$6 >> 2] | 0;
     if ($150) {
      if ($139) $155 = ($137 & 255) >>> 1; else $155 = HEAP32[$4 >> 2] | 0;
      if ($155) {
       $226 = HEAP32[$__b >> 2] | 0;
       $228 = HEAP32[$226 + 12 >> 2] | 0;
       if (($228 | 0) == (HEAP32[$226 + 16 >> 2] | 0)) {
        $235 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$226 >> 2] | 0) + 36 >> 2] & 63]($226) | 0;
        $$0$i$i114 = $235;
        $238 = HEAP8[$__psn >> 0] | 0;
       } else {
        $$0$i$i114 = HEAP32[$228 >> 2] | 0;
        $238 = $131;
       }
       $243 = HEAP32[$__b >> 2] | 0;
       $244 = $243 + 12 | 0;
       $245 = HEAP32[$244 >> 2] | 0;
       $248 = ($245 | 0) == (HEAP32[$243 + 16 >> 2] | 0);
       if (($$0$i$i114 | 0) == (HEAP32[(($238 & 1) == 0 ? $6 : HEAP32[$7 >> 2] | 0) >> 2] | 0)) {
        if ($248) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$243 >> 2] | 0) + 40 >> 2] & 63]($243) | 0; else HEAP32[$244 >> 2] = $245 + 4;
        $253 = HEAP8[$__psn >> 0] | 0;
        if (!($253 & 1)) $259 = ($253 & 255) >>> 1; else $259 = HEAP32[$6 >> 2] | 0;
        $735 = $734;
        $__trailing_sign$1 = $259 >>> 0 > 1 ? $__psn : $__trailing_sign$0253;
        break L25;
       }
       if ($248) $$0$i$i136 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$243 >> 2] | 0) + 36 >> 2] & 63]($243) | 0; else $$0$i$i136 = HEAP32[$245 >> 2] | 0;
       if (($$0$i$i136 | 0) != (HEAP32[((HEAP8[$__nsn >> 0] & 1) == 0 ? $4 : HEAP32[$5 >> 2] | 0) >> 2] | 0)) {
        label = 117;
        break L1;
       }
       $272 = HEAP32[$__b >> 2] | 0;
       $273 = $272 + 12 | 0;
       $274 = HEAP32[$273 >> 2] | 0;
       if (($274 | 0) == (HEAP32[$272 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$272 >> 2] | 0) + 40 >> 2] & 63]($272) | 0; else HEAP32[$273 >> 2] = $274 + 4;
       HEAP8[$__neg >> 0] = 1;
       $282 = HEAP8[$__nsn >> 0] | 0;
       if (!($282 & 1)) $288 = ($282 & 255) >>> 1; else $288 = HEAP32[$4 >> 2] | 0;
       $735 = $734;
       $__trailing_sign$1 = $288 >>> 0 > 1 ? $__nsn : $__trailing_sign$0253;
       break L25;
      }
     }
     if ($133) $160 = ($131 & 255) >>> 1; else $160 = HEAP32[$6 >> 2] | 0;
     $162 = HEAP32[$__b >> 2] | 0;
     $164 = HEAP32[$162 + 12 >> 2] | 0;
     $167 = ($164 | 0) == (HEAP32[$162 + 16 >> 2] | 0);
     if (!$160) {
      if ($167) {
       $200 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$162 >> 2] | 0) + 36 >> 2] & 63]($162) | 0;
       $$0$i$i102 = $200;
       $203 = HEAP8[$__nsn >> 0] | 0;
      } else {
       $$0$i$i102 = HEAP32[$164 >> 2] | 0;
       $203 = $137;
      }
      if (($$0$i$i102 | 0) != (HEAP32[(($203 & 1) == 0 ? $4 : HEAP32[$5 >> 2] | 0) >> 2] | 0)) {
       $735 = $734;
       $__trailing_sign$1 = $__trailing_sign$0253;
       break L25;
      }
      $208 = HEAP32[$__b >> 2] | 0;
      $209 = $208 + 12 | 0;
      $210 = HEAP32[$209 >> 2] | 0;
      if (($210 | 0) == (HEAP32[$208 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$208 >> 2] | 0) + 40 >> 2] & 63]($208) | 0; else HEAP32[$209 >> 2] = $210 + 4;
      HEAP8[$__neg >> 0] = 1;
      $218 = HEAP8[$__nsn >> 0] | 0;
      if (!($218 & 1)) $224 = ($218 & 255) >>> 1; else $224 = HEAP32[$4 >> 2] | 0;
      $735 = $734;
      $__trailing_sign$1 = $224 >>> 0 > 1 ? $__nsn : $__trailing_sign$0253;
      break L25;
     }
     if ($167) {
      $171 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$162 >> 2] | 0) + 36 >> 2] & 63]($162) | 0;
      $$0$i$i81 = $171;
      $174 = HEAP8[$__psn >> 0] | 0;
     } else {
      $$0$i$i81 = HEAP32[$164 >> 2] | 0;
      $174 = $131;
     }
     if (($$0$i$i81 | 0) != (HEAP32[(($174 & 1) == 0 ? $6 : HEAP32[$7 >> 2] | 0) >> 2] | 0)) {
      HEAP8[$__neg >> 0] = 1;
      $735 = $734;
      $__trailing_sign$1 = $__trailing_sign$0253;
      break L25;
     }
     $179 = HEAP32[$__b >> 2] | 0;
     $180 = $179 + 12 | 0;
     $181 = HEAP32[$180 >> 2] | 0;
     if (($181 | 0) == (HEAP32[$179 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$179 >> 2] | 0) + 40 >> 2] & 63]($179) | 0; else HEAP32[$180 >> 2] = $181 + 4;
     $189 = HEAP8[$__psn >> 0] | 0;
     if (!($189 & 1)) $195 = ($189 & 255) >>> 1; else $195 = HEAP32[$6 >> 2] | 0;
     $735 = $734;
     $__trailing_sign$1 = $195 >>> 0 > 1 ? $__psn : $__trailing_sign$0253;
    }
    break;
   }
  case 0:
   {
    label = 29;
    break;
   }
  case 2:
   {
    if (!(($__trailing_sign$0253 | 0) != 0 | $__p$0251 >>> 0 < 2)) {
     if (($__p$0251 | 0) == 2) $297 = (HEAP8[$14 >> 0] | 0) != 0; else $297 = 0;
     if (!($9 | $297)) {
      $735 = $734;
      $__trailing_sign$1 = 0;
      break L25;
     }
    }
    $298 = HEAP8[$__sym >> 0] | 0;
    $$281 = ($298 & 1) == 0 ? $10 : HEAP32[$11 >> 2] | 0;
    L256 : do if (!$__p$0251) {
     $365 = $298;
     $374 = $$281;
    } else if ((HEAPU8[$__pat + ($__p$0251 + -1) >> 0] | 0) < 2) {
     $307 = $298;
     $316 = $$281;
     while (1) {
      if (!($307 & 1)) {
       $314 = $10;
       $315 = ($307 & 255) >>> 1;
      } else {
       $314 = HEAP32[$11 >> 2] | 0;
       $315 = HEAP32[$10 >> 2] | 0;
      }
      if (($316 | 0) == ($314 + ($315 << 2) | 0)) {
       $325 = $307;
       $328 = $316;
       break;
      }
      if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, HEAP32[$316 >> 2] | 0) | 0)) {
       $$lcssa292 = $316;
       label = 129;
       break;
      }
      $307 = HEAP8[$__sym >> 0] | 0;
      $316 = $316 + 4 | 0;
     }
     if ((label | 0) == 129) {
      label = 0;
      $325 = HEAP8[$__sym >> 0] | 0;
      $328 = $$lcssa292;
     }
     $326 = ($325 & 1) == 0;
     $332 = $328 - ($326 ? $10 : HEAP32[$11 >> 2] | 0) >> 2;
     $333 = HEAP8[$__spaces >> 0] | 0;
     $335 = ($333 & 1) == 0;
     if ($335) $340 = ($333 & 255) >>> 1; else $340 = HEAP32[$12 >> 2] | 0;
     L273 : do if ($332 >>> 0 <= $340 >>> 0) {
      if ($335) {
       $350 = $12;
       $351 = ($333 & 255) >>> 1;
       $353 = $12 + ((($333 & 255) >>> 1) - $332 << 2) | 0;
      } else {
       $341 = HEAP32[$13 >> 2] | 0;
       $342 = HEAP32[$12 >> 2] | 0;
       $350 = $341;
       $351 = $342;
       $353 = $341 + ($342 - $332 << 2) | 0;
      }
      $349 = $350 + ($351 << 2) | 0;
      if (($353 | 0) == ($349 | 0)) {
       $365 = $325;
       $374 = $328;
       break L256;
      } else {
       $356 = $353;
       $358 = $326 ? $10 : HEAP32[$11 >> 2] | 0;
      }
      while (1) {
       if ((HEAP32[$356 >> 2] | 0) != (HEAP32[$358 >> 2] | 0)) break L273;
       $356 = $356 + 4 | 0;
       if (($356 | 0) == ($349 | 0)) {
        $365 = $325;
        $374 = $328;
        break L256;
       } else $358 = $358 + 4 | 0;
      }
     } while (0);
     $365 = $325;
     $374 = $326 ? $10 : HEAP32[$11 >> 2] | 0;
    } else {
     $365 = $298;
     $374 = $$281;
    } while (0);
    L283 : while (1) {
     if (!($365 & 1)) {
      $372 = $10;
      $373 = ($365 & 255) >>> 1;
     } else {
      $372 = HEAP32[$11 >> 2] | 0;
      $373 = HEAP32[$10 >> 2] | 0;
     }
     if (($374 | 0) == ($372 + ($373 << 2) | 0)) {
      $$lcssa293 = $374;
      break;
     }
     $376 = HEAP32[$__b >> 2] | 0;
     do if (!$376) $402 = 1; else {
      $379 = HEAP32[$376 + 12 >> 2] | 0;
      if (($379 | 0) == (HEAP32[$376 + 16 >> 2] | 0)) $$0$i$i$i$i175 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$376 >> 2] | 0) + 36 >> 2] & 63]($376) | 0; else $$0$i$i$i$i175 = HEAP32[$379 >> 2] | 0;
      if (($$0$i$i$i$i175 | 0) == -1) {
       HEAP32[$__b >> 2] = 0;
       $402 = 1;
       break;
      } else {
       $402 = (HEAP32[$__b >> 2] | 0) == 0;
       break;
      }
     } while (0);
     $389 = HEAP32[$__e >> 2] | 0;
     do if (!$389) label = 159; else {
      $392 = HEAP32[$389 + 12 >> 2] | 0;
      if (($392 | 0) == (HEAP32[$389 + 16 >> 2] | 0)) $$0$i$i1$i$i181 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$389 >> 2] | 0) + 36 >> 2] & 63]($389) | 0; else $$0$i$i1$i$i181 = HEAP32[$392 >> 2] | 0;
      if (($$0$i$i1$i$i181 | 0) == -1) {
       HEAP32[$__e >> 2] = 0;
       label = 159;
       break;
      } else if ($402 ^ (HEAP32[$__e >> 2] | 0) == 0) break; else {
       $$lcssa293 = $374;
       break L283;
      }
     } while (0);
     if ((label | 0) == 159) {
      label = 0;
      if ($402) {
       $$lcssa293 = $374;
       break;
      }
     }
     $403 = HEAP32[$__b >> 2] | 0;
     $405 = HEAP32[$403 + 12 >> 2] | 0;
     if (($405 | 0) == (HEAP32[$403 + 16 >> 2] | 0)) $$0$i$i171 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$403 >> 2] | 0) + 36 >> 2] & 63]($403) | 0; else $$0$i$i171 = HEAP32[$405 >> 2] | 0;
     if (($$0$i$i171 | 0) != (HEAP32[$374 >> 2] | 0)) {
      $$lcssa293 = $374;
      break;
     }
     $416 = HEAP32[$__b >> 2] | 0;
     $417 = $416 + 12 | 0;
     $418 = HEAP32[$417 >> 2] | 0;
     if (($418 | 0) == (HEAP32[$416 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$416 >> 2] | 0) + 40 >> 2] & 63]($416) | 0; else HEAP32[$417 >> 2] = $418 + 4;
     $365 = HEAP8[$__sym >> 0] | 0;
     $374 = $374 + 4 | 0;
    }
    if ($9) {
     $427 = HEAP8[$__sym >> 0] | 0;
     if (!($427 & 1)) {
      $435 = $10;
      $436 = ($427 & 255) >>> 1;
     } else {
      $435 = HEAP32[$11 >> 2] | 0;
      $436 = HEAP32[$10 >> 2] | 0;
     }
     if (($$lcssa293 | 0) == ($435 + ($436 << 2) | 0)) {
      $735 = $734;
      $__trailing_sign$1 = $__trailing_sign$0253;
     } else {
      label = 174;
      break L1;
     }
    } else {
     $735 = $734;
     $__trailing_sign$1 = $__trailing_sign$0253;
    }
    break;
   }
  default:
   {
    $735 = $734;
    $__trailing_sign$1 = $__trailing_sign$0253;
   }
  } while (0);
  L327 : do if ((label | 0) == 29) {
   label = 0;
   if (($__p$0251 | 0) == 3) {
    $726 = $734;
    $__trailing_sign$0$lcssa = $__trailing_sign$0253;
    label = 267;
    break L1;
   }
   while (1) {
    $77 = HEAP32[$__b >> 2] | 0;
    do if (!$77) $103 = 1; else {
     $80 = HEAP32[$77 + 12 >> 2] | 0;
     if (($80 | 0) == (HEAP32[$77 + 16 >> 2] | 0)) $$0$i$i$i$i44 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$77 >> 2] | 0) + 36 >> 2] & 63]($77) | 0; else $$0$i$i$i$i44 = HEAP32[$80 >> 2] | 0;
     if (($$0$i$i$i$i44 | 0) == -1) {
      HEAP32[$__b >> 2] = 0;
      $103 = 1;
      break;
     } else {
      $103 = (HEAP32[$__b >> 2] | 0) == 0;
      break;
     }
    } while (0);
    $90 = HEAP32[$__e >> 2] | 0;
    do if (!$90) label = 43; else {
     $93 = HEAP32[$90 + 12 >> 2] | 0;
     if (($93 | 0) == (HEAP32[$90 + 16 >> 2] | 0)) $$0$i$i1$i$i50 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$90 >> 2] | 0) + 36 >> 2] & 63]($90) | 0; else $$0$i$i1$i$i50 = HEAP32[$93 >> 2] | 0;
     if (($$0$i$i1$i$i50 | 0) == -1) {
      HEAP32[$__e >> 2] = 0;
      label = 43;
      break;
     } else if ($103 ^ (HEAP32[$__e >> 2] | 0) == 0) break; else {
      $735 = $734;
      $__trailing_sign$1 = $__trailing_sign$0253;
      break L327;
     }
    } while (0);
    if ((label | 0) == 43) {
     label = 0;
     if ($103) {
      $735 = $734;
      $__trailing_sign$1 = $__trailing_sign$0253;
      break L327;
     }
    }
    $104 = HEAP32[$__b >> 2] | 0;
    $106 = HEAP32[$104 + 12 >> 2] | 0;
    if (($106 | 0) == (HEAP32[$104 + 16 >> 2] | 0)) $$0$i$i59 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$104 >> 2] | 0) + 36 >> 2] & 63]($104) | 0; else $$0$i$i59 = HEAP32[$106 >> 2] | 0;
    if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, $$0$i$i59) | 0)) {
     $735 = $734;
     $__trailing_sign$1 = $__trailing_sign$0253;
     break L327;
    }
    $119 = HEAP32[$__b >> 2] | 0;
    $120 = $119 + 12 | 0;
    $121 = HEAP32[$120 >> 2] | 0;
    if (($121 | 0) == (HEAP32[$119 + 16 >> 2] | 0)) $$0$i$i65 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$119 >> 2] | 0) + 40 >> 2] & 63]($119) | 0; else {
     HEAP32[$120 >> 2] = $121 + 4;
     $$0$i$i65 = HEAP32[$121 >> 2] | 0;
    }
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__spaces, $$0$i$i65);
   }
  } while (0);
  $__p$0251 = $__p$0251 + 1 | 0;
  if ($__p$0251 >>> 0 >= 4) {
   $726 = $735;
   $__trailing_sign$0$lcssa = $__trailing_sign$1;
   label = 267;
   break;
  } else {
   $734 = $735;
   $__trailing_sign$0253 = $__trailing_sign$1;
  }
 }
 L363 : do if ((label | 0) == 28) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$0 = 0;
 } else if ((label | 0) == 117) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$0 = 0;
 } else if ((label | 0) == 174) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$0 = 0;
 } else if ((label | 0) == 231) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$0 = 0;
 } else if ((label | 0) == 254) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$0 = 0;
 } else if ((label | 0) == 265) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$0 = 0;
 } else if ((label | 0) == 267) {
  L371 : do if ($__trailing_sign$0$lcssa) {
   $655 = $__trailing_sign$0$lcssa + 4 | 0;
   $656 = $__trailing_sign$0$lcssa + 8 | 0;
   $__i$0 = 1;
   L373 : while (1) {
    $657 = HEAP8[$__trailing_sign$0$lcssa >> 0] | 0;
    if (!($657 & 1)) $664 = ($657 & 255) >>> 1; else $664 = HEAP32[$655 >> 2] | 0;
    if ($__i$0 >>> 0 >= $664 >>> 0) break L371;
    $665 = HEAP32[$__b >> 2] | 0;
    do if (!$665) $691 = 1; else {
     $668 = HEAP32[$665 + 12 >> 2] | 0;
     if (($668 | 0) == (HEAP32[$665 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$665 >> 2] | 0) + 36 >> 2] & 63]($665) | 0; else $$0$i$i$i$i = HEAP32[$668 >> 2] | 0;
     if (($$0$i$i$i$i | 0) == -1) {
      HEAP32[$__b >> 2] = 0;
      $691 = 1;
      break;
     } else {
      $691 = (HEAP32[$__b >> 2] | 0) == 0;
      break;
     }
    } while (0);
    $678 = HEAP32[$__e >> 2] | 0;
    do if (!$678) label = 286; else {
     $681 = HEAP32[$678 + 12 >> 2] | 0;
     if (($681 | 0) == (HEAP32[$678 + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$678 >> 2] | 0) + 36 >> 2] & 63]($678) | 0; else $$0$i$i1$i$i = HEAP32[$681 >> 2] | 0;
     if (($$0$i$i1$i$i | 0) == -1) {
      HEAP32[$__e >> 2] = 0;
      label = 286;
      break;
     } else if ($691 ^ (HEAP32[$__e >> 2] | 0) == 0) break; else break L373;
    } while (0);
    if ((label | 0) == 286) {
     label = 0;
     if ($691) break;
    }
    $692 = HEAP32[$__b >> 2] | 0;
    $694 = HEAP32[$692 + 12 >> 2] | 0;
    if (($694 | 0) == (HEAP32[$692 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$692 >> 2] | 0) + 36 >> 2] & 63]($692) | 0; else $$0$i$i = HEAP32[$694 >> 2] | 0;
    if (!(HEAP8[$__trailing_sign$0$lcssa >> 0] & 1)) $708 = $655; else $708 = HEAP32[$656 >> 2] | 0;
    if (($$0$i$i | 0) != (HEAP32[$708 + ($__i$0 << 2) >> 2] | 0)) break;
    $713 = $__i$0 + 1 | 0;
    $714 = HEAP32[$__b >> 2] | 0;
    $715 = $714 + 12 | 0;
    $716 = HEAP32[$715 >> 2] | 0;
    if (($716 | 0) == (HEAP32[$714 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[$714 >> 2] | 0) + 40 >> 2] & 63]($714) | 0;
     $__i$0 = $713;
     continue;
    } else {
     HEAP32[$715 >> 2] = $716 + 4;
     $__i$0 = $713;
     continue;
    }
   }
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $$0 = 0;
   break L363;
  } while (0);
  $724 = HEAP32[$__gb >> 2] | 0;
  if (($724 | 0) == ($726 | 0)) $$0 = 1; else {
   HEAP32[$__et >> 2] = 0;
   __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp, $724, $726, $__et);
   if (!(HEAP32[$__et >> 2] | 0)) $$0 = 1; else {
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
    $$0 = 0;
   }
  }
 } while (0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__spaces);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nsn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__psn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 $731 = HEAP32[$__gb >> 2] | 0;
 HEAP32[$__gb >> 2] = 0;
 if ($731) FUNCTION_TABLE_vi[HEAP32[$1 >> 2] & 127]($731);
 STACKTOP = sp;
 return $$0 | 0;
}

function _MUSL_vfscanf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$ = 0, $$8 = 0, $$lcssa = 0, $$lcssa280 = 0, $$lcssa39 = 0, $$pre$phi219Z2D = 0, $$pre205 = 0, $$pre211 = 0, $$pre216 = 0, $$size$0 = 0, $0 = 0, $1 = 0, $10 = 0, $101 = 0, $109 = 0, $11 = 0, $113 = 0, $120 = 0, $125 = 0, $128 = 0, $13 = 0, $134 = 0, $135 = 0, $140 = 0, $144 = 0, $148 = 0, $150 = 0, $152 = 0, $154 = 0, $157 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $165 = 0, $170 = 0, $174 = 0, $179 = 0, $180 = 0, $182 = 0, $187 = 0, $191 = 0, $196 = 0, $202 = 0, $206 = 0, $21 = 0, $211 = 0, $218 = 0, $226 = 0, $231 = 0, $235 = 0, $237 = 0, $241 = 0, $243 = 0, $251 = 0, $259 = 0, $260 = 0, $263 = 0, $265 = 0, $271 = 0, $278 = 0, $28 = 0, $280 = 0, $286 = 0, $292 = 0, $295 = 0, $299 = 0, $3 = 0, $306 = 0, $321 = 0, $325 = 0.0, $33 = 0, $36 = 0, $4 = 0, $43 = 0, $44 = 0, $45 = 0, $47 = 0, $48 = 0, $5 = 0, $57 = 0, $6 = 0, $7 = 0, $72 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $88 = 0, $89 = 0, $9 = 0, $91 = 0, $93 = 0, $96 = 0, $99 = 0, $alloc$0 = 0, $alloc$0200 = 0, $alloc$1 = 0, $alloc$2 = 0, $ap2$i = 0, $arglist_current = 0, $arglist_current2 = 0, $base$0 = 0, $c$0101 = 0, $dest$0 = 0, $i$0$i = 0, $i$0$ph = 0, $i$0$ph$lcssa = 0, $i$0$ph21 = 0, $i$0$ph21$lcssa = 0, $i$0$ph21$us106 = 0, $i$1$lcssa = 0, $i$2 = 0, $i$2$ph = 0, $i$2$ph$phi = 0, $i$3 = 0, $i$4 = 0, $invert$0 = 0, $isdigittmp = 0, $k$0$ph = 0, $k$1$ph = 0, $matches$0111 = 0, $matches$0111$lcssa = 0, $matches$0111261 = 0, $matches$1 = 0, $matches$2 = 0, $matches$3 = 0, $p$0117 = 0, $p$1 = 0, $p$1$lcssa = 0, $p$10 = 0, $p$11 = 0, $p$2 = 0, $p$3$lcssa = 0, $p$397 = 0, $p$4 = 0, $p$5 = 0, $p$6 = 0, $p$7 = 0, $p$7$ph = 0, $p$8 = 0, $p$9 = 0, $pos$0116 = 0, $pos$1 = 0, $pos$2 = 0, $s$0109 = 0, $s$0109$lcssa = 0, $s$1 = 0, $s$2$ph = 0, $s$3 = 0, $s$4 = 0, $s$5 = 0, $s$6 = 0, $s$7 = 0, $s$8 = 0, $scanset = 0, $size$0 = 0, $st = 0, $wc = 0, $wcs$0110 = 0, $wcs$0110$lcssa = 0, $wcs$1 = 0, $wcs$2 = 0, $wcs$3$ph = 0, $wcs$3$ph$lcssa = 0, $wcs$3$ph141 = 0, $wcs$4 = 0, $wcs$5 = 0, $wcs$6 = 0, $wcs$7 = 0, $wcs$8 = 0, $wcs$9 = 0, $width$0$lcssa = 0, $width$098 = 0, $width$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $ap2$i = sp + 16 | 0;
 $st = sp + 8 | 0;
 $scanset = sp + 33 | 0;
 $wc = sp;
 $0 = sp + 32 | 0;
 $1 = HEAP8[$fmt >> 0] | 0;
 if (!($1 << 24 >> 24)) {
  $matches$3 = 0;
  STACKTOP = sp;
  return $matches$3 | 0;
 }
 $3 = $f + 4 | 0;
 $4 = $f + 100 | 0;
 $5 = $f + 108 | 0;
 $6 = $f + 8 | 0;
 $7 = $scanset + 10 | 0;
 $8 = $scanset + 33 | 0;
 $9 = $st + 4 | 0;
 $10 = $scanset + 46 | 0;
 $11 = $scanset + 94 | 0;
 $13 = $1;
 $matches$0111 = 0;
 $p$0117 = $fmt;
 $pos$0116 = 0;
 $s$0109 = 0;
 $wcs$0110 = 0;
 L4 : while (1) {
  L6 : do if (!(_isspace($13 & 255) | 0)) {
   $43 = (HEAP8[$p$0117 >> 0] | 0) == 37;
   L8 : do if ($43) {
    $44 = $p$0117 + 1 | 0;
    $45 = HEAP8[$44 >> 0] | 0;
    do if ($45 << 24 >> 24 == 42) {
     $dest$0 = 0;
     $p$2 = $p$0117 + 2 | 0;
    } else if ($45 << 24 >> 24 == 37) break L8; else {
     $isdigittmp = ($45 & 255) + -48 | 0;
     if ($isdigittmp >>> 0 < 10) if ((HEAP8[$p$0117 + 2 >> 0] | 0) == 36) {
      HEAP32[$ap2$i >> 2] = HEAP32[$ap >> 2];
      $i$0$i = $isdigittmp;
      while (1) {
       $arglist_current = HEAP32[$ap2$i >> 2] | 0;
       $72 = HEAP32[$arglist_current >> 2] | 0;
       HEAP32[$ap2$i >> 2] = $arglist_current + 4;
       if ($i$0$i >>> 0 > 1) $i$0$i = $i$0$i + -1 | 0; else {
        $$lcssa = $72;
        break;
       }
      }
      $dest$0 = $$lcssa;
      $p$2 = $p$0117 + 3 | 0;
      break;
     }
     $arglist_current2 = HEAP32[$ap >> 2] | 0;
     $75 = HEAP32[$arglist_current2 >> 2] | 0;
     HEAP32[$ap >> 2] = $arglist_current2 + 4;
     $dest$0 = $75;
     $p$2 = $44;
    } while (0);
    $76 = HEAP8[$p$2 >> 0] | 0;
    $77 = $76 & 255;
    if (($77 + -48 | 0) >>> 0 < 10) {
     $81 = $77;
     $p$397 = $p$2;
     $width$098 = 0;
     while (1) {
      $80 = ($width$098 * 10 | 0) + -48 + $81 | 0;
      $82 = $p$397 + 1 | 0;
      $83 = HEAP8[$82 >> 0] | 0;
      $81 = $83 & 255;
      if (($81 + -48 | 0) >>> 0 >= 10) {
       $$lcssa39 = $83;
       $p$3$lcssa = $82;
       $width$0$lcssa = $80;
       break;
      } else {
       $p$397 = $82;
       $width$098 = $80;
      }
     }
    } else {
     $$lcssa39 = $76;
     $p$3$lcssa = $p$2;
     $width$0$lcssa = 0;
    }
    if ($$lcssa39 << 24 >> 24 == 109) {
     $88 = $p$3$lcssa + 1 | 0;
     $91 = HEAP8[$88 >> 0] | 0;
     $alloc$0 = ($dest$0 | 0) != 0 & 1;
     $p$4 = $88;
     $s$1 = 0;
     $wcs$1 = 0;
    } else {
     $91 = $$lcssa39;
     $alloc$0 = 0;
     $p$4 = $p$3$lcssa;
     $s$1 = $s$0109;
     $wcs$1 = $wcs$0110;
    }
    $89 = $p$4 + 1 | 0;
    switch ($91 & 255 | 0) {
    case 104:
     {
      $93 = (HEAP8[$89 >> 0] | 0) == 104;
      $p$5 = $93 ? $p$4 + 2 | 0 : $89;
      $size$0 = $93 ? -2 : -1;
      break;
     }
    case 108:
     {
      $96 = (HEAP8[$89 >> 0] | 0) == 108;
      $p$5 = $96 ? $p$4 + 2 | 0 : $89;
      $size$0 = $96 ? 3 : 1;
      break;
     }
    case 116:
    case 122:
     {
      $p$5 = $89;
      $size$0 = 1;
      break;
     }
    case 76:
     {
      $p$5 = $89;
      $size$0 = 2;
      break;
     }
    case 110:
    case 112:
    case 67:
    case 83:
    case 91:
    case 99:
    case 115:
    case 88:
    case 71:
    case 70:
    case 69:
    case 65:
    case 103:
    case 102:
    case 101:
    case 97:
    case 120:
    case 117:
    case 111:
    case 105:
    case 100:
     {
      $p$5 = $p$4;
      $size$0 = 0;
      break;
     }
    case 106:
     {
      $p$5 = $89;
      $size$0 = 3;
      break;
     }
    default:
     {
      $alloc$0200 = $alloc$0;
      $matches$0111261 = $matches$0111;
      $s$6 = $s$1;
      $wcs$7 = $wcs$1;
      label = 163;
      break L4;
     }
    }
    $99 = HEAPU8[$p$5 >> 0] | 0;
    $101 = ($99 & 47 | 0) == 3;
    $$ = $101 ? $99 | 32 : $99;
    $$size$0 = $101 ? 1 : $size$0;
    if (($$ | 0) == 99) {
     $pos$1 = $pos$0116;
     $width$1 = ($width$0$lcssa | 0) < 1 ? 1 : $width$0$lcssa;
    } else if (($$ | 0) == 110) {
     if (!$dest$0) {
      $matches$1 = $matches$0111;
      $p$11 = $p$5;
      $pos$2 = $pos$0116;
      $s$5 = $s$1;
      $wcs$6 = $wcs$1;
      break L6;
     }
     switch ($$size$0 | 0) {
     case -2:
      {
       HEAP8[$dest$0 >> 0] = $pos$0116;
       $matches$1 = $matches$0111;
       $p$11 = $p$5;
       $pos$2 = $pos$0116;
       $s$5 = $s$1;
       $wcs$6 = $wcs$1;
       break L6;
       break;
      }
     case -1:
      {
       HEAP16[$dest$0 >> 1] = $pos$0116;
       $matches$1 = $matches$0111;
       $p$11 = $p$5;
       $pos$2 = $pos$0116;
       $s$5 = $s$1;
       $wcs$6 = $wcs$1;
       break L6;
       break;
      }
     case 0:
      {
       HEAP32[$dest$0 >> 2] = $pos$0116;
       $matches$1 = $matches$0111;
       $p$11 = $p$5;
       $pos$2 = $pos$0116;
       $s$5 = $s$1;
       $wcs$6 = $wcs$1;
       break L6;
       break;
      }
     case 1:
      {
       HEAP32[$dest$0 >> 2] = $pos$0116;
       $matches$1 = $matches$0111;
       $p$11 = $p$5;
       $pos$2 = $pos$0116;
       $s$5 = $s$1;
       $wcs$6 = $wcs$1;
       break L6;
       break;
      }
     case 3:
      {
       $109 = $dest$0;
       HEAP32[$109 >> 2] = $pos$0116;
       HEAP32[$109 + 4 >> 2] = (($pos$0116 | 0) < 0) << 31 >> 31;
       $matches$1 = $matches$0111;
       $p$11 = $p$5;
       $pos$2 = $pos$0116;
       $s$5 = $s$1;
       $wcs$6 = $wcs$1;
       break L6;
       break;
      }
     default:
      {
       $matches$1 = $matches$0111;
       $p$11 = $p$5;
       $pos$2 = $pos$0116;
       $s$5 = $s$1;
       $wcs$6 = $wcs$1;
       break L6;
      }
     }
    } else if (($$ | 0) == 91) {
     $pos$1 = $pos$0116;
     $width$1 = $width$0$lcssa;
    } else {
     ___shlim($f, 0);
     do {
      $113 = HEAP32[$3 >> 2] | 0;
      if ($113 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
       HEAP32[$3 >> 2] = $113 + 1;
       $120 = HEAPU8[$113 >> 0] | 0;
      } else $120 = ___shgetc($f) | 0;
     } while ((_isspace($120) | 0) != 0);
     $$pre205 = HEAP32[$3 >> 2] | 0;
     if (!(HEAP32[$4 >> 2] | 0)) $128 = $$pre205; else {
      $125 = $$pre205 + -1 | 0;
      HEAP32[$3 >> 2] = $125;
      $128 = $125;
     }
     $pos$1 = (HEAP32[$5 >> 2] | 0) + $pos$0116 + $128 - (HEAP32[$6 >> 2] | 0) | 0;
     $width$1 = $width$0$lcssa;
    }
    ___shlim($f, $width$1);
    $134 = HEAP32[$3 >> 2] | 0;
    $135 = HEAP32[$4 >> 2] | 0;
    if ($134 >>> 0 < $135 >>> 0) {
     HEAP32[$3 >> 2] = $134 + 1;
     $140 = $135;
    } else {
     if ((___shgetc($f) | 0) < 0) {
      $alloc$0200 = $alloc$0;
      $matches$0111261 = $matches$0111;
      $s$6 = $s$1;
      $wcs$7 = $wcs$1;
      label = 163;
      break L4;
     }
     $140 = HEAP32[$4 >> 2] | 0;
    }
    if ($140) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
    L65 : do switch ($$ | 0) {
    case 91:
    case 99:
    case 115:
     {
      $144 = ($$ | 0) == 99;
      L67 : do if (($$ & 239 | 0) == 99) {
       _memset($scanset | 0, -1, 257) | 0;
       HEAP8[$scanset >> 0] = 0;
       if (($$ | 0) == 115) {
        HEAP8[$8 >> 0] = 0;
        HEAP8[$7 + 0 >> 0] = 0;
        HEAP8[$7 + 1 >> 0] = 0;
        HEAP8[$7 + 2 >> 0] = 0;
        HEAP8[$7 + 3 >> 0] = 0;
        HEAP8[$7 + 4 >> 0] = 0;
        $p$9 = $p$5;
       } else $p$9 = $p$5;
      } else {
       $148 = $p$5 + 1 | 0;
       $150 = (HEAP8[$148 >> 0] | 0) == 94;
       $invert$0 = $150 & 1;
       $152 = $150 ? $148 : $p$5;
       $p$6 = $150 ? $p$5 + 2 | 0 : $148;
       _memset($scanset | 0, $150 & 1 | 0, 257) | 0;
       HEAP8[$scanset >> 0] = 0;
       $154 = HEAP8[$p$6 >> 0] | 0;
       if ($154 << 24 >> 24 == 45) {
        $157 = ($invert$0 ^ 1) & 255;
        HEAP8[$10 >> 0] = $157;
        $$pre$phi219Z2D = $157;
        $p$7$ph = $152 + 2 | 0;
       } else if ($154 << 24 >> 24 == 93) {
        $160 = ($invert$0 ^ 1) & 255;
        HEAP8[$11 >> 0] = $160;
        $$pre$phi219Z2D = $160;
        $p$7$ph = $152 + 2 | 0;
       } else {
        $$pre$phi219Z2D = ($invert$0 ^ 1) & 255;
        $p$7$ph = $p$6;
       }
       $p$7 = $p$7$ph;
       while (1) {
        $161 = HEAP8[$p$7 >> 0] | 0;
        if ($161 << 24 >> 24 == 93) {
         $p$9 = $p$7;
         break L67;
        } else if ($161 << 24 >> 24 == 45) {
         $162 = $p$7 + 1 | 0;
         $163 = HEAP8[$162 >> 0] | 0;
         if ($163 << 24 >> 24 == 93 | $163 << 24 >> 24 == 0) {
          $174 = 45;
          $p$8 = $p$7;
         } else {
          $165 = HEAP8[$p$7 + -1 >> 0] | 0;
          if (($165 & 255) < ($163 & 255)) {
           $c$0101 = $165 & 255;
           do {
            $c$0101 = $c$0101 + 1 | 0;
            HEAP8[$scanset + $c$0101 >> 0] = $$pre$phi219Z2D;
            $170 = HEAP8[$162 >> 0] | 0;
           } while (($c$0101 | 0) < ($170 & 255 | 0));
           $174 = $170;
           $p$8 = $162;
          } else {
           $174 = $163;
           $p$8 = $162;
          }
         }
        } else if (!($161 << 24 >> 24)) {
         $alloc$0200 = $alloc$0;
         $matches$0111261 = $matches$0111;
         $s$6 = $s$1;
         $wcs$7 = $wcs$1;
         label = 163;
         break L4;
        } else {
         $174 = $161;
         $p$8 = $p$7;
        }
        HEAP8[$scanset + (($174 & 255) + 1) >> 0] = $$pre$phi219Z2D;
        $p$7 = $p$8 + 1 | 0;
       }
      } while (0);
      $$8 = $144 ? $width$1 + 1 | 0 : 31;
      $179 = ($$size$0 | 0) == 1;
      $180 = ($alloc$0 | 0) != 0;
      L86 : do if ($179) {
       if ($180) {
        $182 = _malloc($$8 << 2) | 0;
        if (!$182) {
         $alloc$0200 = $alloc$0;
         $matches$0111261 = $matches$0111;
         $s$6 = 0;
         $wcs$7 = $182;
         label = 163;
         break L4;
        } else $wcs$2 = $182;
       } else $wcs$2 = $dest$0;
       HEAP32[$st >> 2] = 0;
       HEAP32[$9 >> 2] = 0;
       $i$0$ph = 0;
       $k$0$ph = $$8;
       $wcs$3$ph = $wcs$2;
       L92 : while (1) {
        if (!$wcs$3$ph) while (1) {
         $187 = HEAP32[$3 >> 2] | 0;
         if ($187 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
          HEAP32[$3 >> 2] = $187 + 1;
          $191 = HEAPU8[$187 >> 0] | 0;
         } else $191 = ___shgetc($f) | 0;
         if (!(HEAP8[$scanset + ($191 + 1) >> 0] | 0)) {
          $i$0$ph21$lcssa = $i$0$ph;
          $wcs$3$ph141 = 0;
          break L92;
         }
         HEAP8[$0 >> 0] = $191;
         $196 = _mbrtowc($wc, $0, 1, $st) | 0;
         if (($196 | 0) == -2) continue; else if (($196 | 0) == -1) {
          $alloc$0200 = $alloc$0;
          $matches$0111261 = $matches$0111;
          $s$6 = 0;
          $wcs$7 = 0;
          label = 163;
          break L4;
         }
         if ($180 & ($i$0$ph | 0) == ($k$0$ph | 0)) {
          $i$1$lcssa = $i$0$ph;
          break;
         }
        } else {
         if ($180) $i$0$ph21$us106 = $i$0$ph; else {
          $i$0$ph$lcssa = $i$0$ph;
          $wcs$3$ph$lcssa = $wcs$3$ph;
          label = 85;
          break;
         }
         while (1) {
          while (1) {
           $202 = HEAP32[$3 >> 2] | 0;
           if ($202 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
            HEAP32[$3 >> 2] = $202 + 1;
            $206 = HEAPU8[$202 >> 0] | 0;
           } else $206 = ___shgetc($f) | 0;
           if (!(HEAP8[$scanset + ($206 + 1) >> 0] | 0)) {
            $i$0$ph21$lcssa = $i$0$ph21$us106;
            $wcs$3$ph141 = $wcs$3$ph;
            break L92;
           }
           HEAP8[$0 >> 0] = $206;
           $211 = _mbrtowc($wc, $0, 1, $st) | 0;
           if (($211 | 0) == -1) {
            $alloc$0200 = $alloc$0;
            $matches$0111261 = $matches$0111;
            $s$6 = 0;
            $wcs$7 = $wcs$3$ph;
            label = 163;
            break L4;
           } else if (($211 | 0) != -2) break;
          }
          HEAP32[$wcs$3$ph + ($i$0$ph21$us106 << 2) >> 2] = HEAP32[$wc >> 2];
          $i$0$ph21$us106 = $i$0$ph21$us106 + 1 | 0;
          if (($i$0$ph21$us106 | 0) == ($k$0$ph | 0)) {
           $i$1$lcssa = $k$0$ph;
           break;
          }
         }
        }
        $235 = $k$0$ph << 1 | 1;
        $237 = _realloc($wcs$3$ph, $235 << 2) | 0;
        if (!$237) {
         $alloc$0200 = $alloc$0;
         $matches$0111261 = $matches$0111;
         $s$6 = 0;
         $wcs$7 = $wcs$3$ph;
         label = 163;
         break L4;
        }
        $i$0$ph = $i$1$lcssa;
        $k$0$ph = $235;
        $wcs$3$ph = $237;
       }
       L116 : do if ((label | 0) == 85) {
        label = 0;
        $i$0$ph21 = $i$0$ph$lcssa;
        while (1) {
         while (1) {
          $218 = HEAP32[$3 >> 2] | 0;
          if ($218 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
           HEAP32[$3 >> 2] = $218 + 1;
           $226 = HEAPU8[$218 >> 0] | 0;
          } else $226 = ___shgetc($f) | 0;
          if (!(HEAP8[$scanset + ($226 + 1) >> 0] | 0)) {
           $i$0$ph21$lcssa = $i$0$ph21;
           $wcs$3$ph141 = $wcs$3$ph$lcssa;
           break L116;
          }
          HEAP8[$0 >> 0] = $226;
          $231 = _mbrtowc($wc, $0, 1, $st) | 0;
          if (($231 | 0) == -1) {
           $alloc$0200 = 0;
           $matches$0111261 = $matches$0111;
           $s$6 = 0;
           $wcs$7 = $wcs$3$ph$lcssa;
           label = 163;
           break L4;
          } else if (($231 | 0) != -2) break;
         }
         HEAP32[$wcs$3$ph$lcssa + ($i$0$ph21 << 2) >> 2] = HEAP32[$wc >> 2];
         $i$0$ph21 = $i$0$ph21 + 1 | 0;
        }
       } while (0);
       if (!(_mbsinit($st) | 0)) {
        $alloc$0200 = $alloc$0;
        $matches$0111261 = $matches$0111;
        $s$6 = 0;
        $wcs$7 = $wcs$3$ph141;
        label = 163;
        break L4;
       } else {
        $i$4 = $i$0$ph21$lcssa;
        $s$3 = 0;
        $wcs$4 = $wcs$3$ph141;
       }
      } else {
       if ($180) {
        $241 = _malloc($$8) | 0;
        if (!$241) {
         $alloc$0200 = $alloc$0;
         $matches$0111261 = $matches$0111;
         $s$6 = 0;
         $wcs$7 = 0;
         label = 163;
         break L4;
        } else {
         $i$2$ph = 0;
         $k$1$ph = $$8;
         $s$2$ph = $241;
        }
        while (1) {
         $i$2 = $i$2$ph;
         do {
          $243 = HEAP32[$3 >> 2] | 0;
          if ($243 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
           HEAP32[$3 >> 2] = $243 + 1;
           $251 = HEAPU8[$243 >> 0] | 0;
          } else $251 = ___shgetc($f) | 0;
          if (!(HEAP8[$scanset + ($251 + 1) >> 0] | 0)) {
           $i$4 = $i$2;
           $s$3 = $s$2$ph;
           $wcs$4 = 0;
           break L86;
          }
          HEAP8[$s$2$ph + $i$2 >> 0] = $251;
          $i$2 = $i$2 + 1 | 0;
         } while (($i$2 | 0) != ($k$1$ph | 0));
         $259 = $k$1$ph << 1 | 1;
         $260 = _realloc($s$2$ph, $259) | 0;
         if (!$260) {
          $alloc$0200 = $alloc$0;
          $matches$0111261 = $matches$0111;
          $s$6 = $s$2$ph;
          $wcs$7 = 0;
          label = 163;
          break L4;
         } else {
          $i$2$ph$phi = $k$1$ph;
          $k$1$ph = $259;
          $s$2$ph = $260;
          $i$2$ph = $i$2$ph$phi;
         }
        }
       }
       if (!$dest$0) {
        $280 = $140;
        while (1) {
         $278 = HEAP32[$3 >> 2] | 0;
         if ($278 >>> 0 < $280 >>> 0) {
          HEAP32[$3 >> 2] = $278 + 1;
          $286 = HEAPU8[$278 >> 0] | 0;
         } else $286 = ___shgetc($f) | 0;
         if (!(HEAP8[$scanset + ($286 + 1) >> 0] | 0)) {
          $i$4 = 0;
          $s$3 = 0;
          $wcs$4 = 0;
          break L86;
         }
         $280 = HEAP32[$4 >> 2] | 0;
        }
       } else {
        $265 = $140;
        $i$3 = 0;
        while (1) {
         $263 = HEAP32[$3 >> 2] | 0;
         if ($263 >>> 0 < $265 >>> 0) {
          HEAP32[$3 >> 2] = $263 + 1;
          $271 = HEAPU8[$263 >> 0] | 0;
         } else $271 = ___shgetc($f) | 0;
         if (!(HEAP8[$scanset + ($271 + 1) >> 0] | 0)) {
          $i$4 = $i$3;
          $s$3 = $dest$0;
          $wcs$4 = 0;
          break L86;
         }
         HEAP8[$dest$0 + $i$3 >> 0] = $271;
         $265 = HEAP32[$4 >> 2] | 0;
         $i$3 = $i$3 + 1 | 0;
        }
       }
      } while (0);
      $$pre211 = HEAP32[$3 >> 2] | 0;
      if (!(HEAP32[$4 >> 2] | 0)) $295 = $$pre211; else {
       $292 = $$pre211 + -1 | 0;
       HEAP32[$3 >> 2] = $292;
       $295 = $292;
      }
      $299 = $295 - (HEAP32[$6 >> 2] | 0) + (HEAP32[$5 >> 2] | 0) | 0;
      if (!$299) {
       $alloc$2 = $alloc$0;
       $matches$2 = $matches$0111;
       $s$8 = $s$3;
       $wcs$9 = $wcs$4;
       break L4;
      }
      if (!(($299 | 0) == ($width$1 | 0) | $144 ^ 1)) {
       $alloc$2 = $alloc$0;
       $matches$2 = $matches$0111;
       $s$8 = $s$3;
       $wcs$9 = $wcs$4;
       break L4;
      }
      do if ($180) if ($179) {
       HEAP32[$dest$0 >> 2] = $wcs$4;
       break;
      } else {
       HEAP32[$dest$0 >> 2] = $s$3;
       break;
      } while (0);
      if ($144) {
       $p$10 = $p$9;
       $s$4 = $s$3;
       $wcs$5 = $wcs$4;
      } else {
       if ($wcs$4) HEAP32[$wcs$4 + ($i$4 << 2) >> 2] = 0;
       if (!$s$3) {
        $p$10 = $p$9;
        $s$4 = 0;
        $wcs$5 = $wcs$4;
       } else {
        HEAP8[$s$3 + $i$4 >> 0] = 0;
        $p$10 = $p$9;
        $s$4 = $s$3;
        $wcs$5 = $wcs$4;
       }
      }
      break;
     }
    case 111:
     {
      $base$0 = 8;
      label = 145;
      break;
     }
    case 117:
    case 100:
     {
      $base$0 = 10;
      label = 145;
      break;
     }
    case 105:
     {
      $base$0 = 0;
      label = 145;
      break;
     }
    case 120:
    case 88:
    case 112:
     {
      $base$0 = 16;
      label = 145;
      break;
     }
    case 71:
    case 103:
    case 70:
    case 102:
    case 69:
    case 101:
    case 65:
    case 97:
     {
      $325 = +___floatscan($f, $$size$0, 0);
      if ((HEAP32[$5 >> 2] | 0) == ((HEAP32[$6 >> 2] | 0) - (HEAP32[$3 >> 2] | 0) | 0)) {
       $alloc$2 = $alloc$0;
       $matches$2 = $matches$0111;
       $s$8 = $s$1;
       $wcs$9 = $wcs$1;
       break L4;
      }
      if (!$dest$0) {
       $p$10 = $p$5;
       $s$4 = $s$1;
       $wcs$5 = $wcs$1;
      } else if (!$$size$0) {
       HEAPF32[$dest$0 >> 2] = Math_fround($325);
       $p$10 = $p$5;
       $s$4 = $s$1;
       $wcs$5 = $wcs$1;
       break L65;
      } else if (($$size$0 | 0) == 1) {
       HEAPF64[$dest$0 >> 3] = $325;
       $p$10 = $p$5;
       $s$4 = $s$1;
       $wcs$5 = $wcs$1;
       break L65;
      } else if (($$size$0 | 0) == 2) {
       HEAPF64[$dest$0 >> 3] = $325;
       $p$10 = $p$5;
       $s$4 = $s$1;
       $wcs$5 = $wcs$1;
       break L65;
      } else {
       $p$10 = $p$5;
       $s$4 = $s$1;
       $wcs$5 = $wcs$1;
       break L65;
      }
      break;
     }
    default:
     {
      $p$10 = $p$5;
      $s$4 = $s$1;
      $wcs$5 = $wcs$1;
     }
    } while (0);
    L185 : do if ((label | 0) == 145) {
     label = 0;
     $306 = ___intscan($f, $base$0, 0, -1, -1) | 0;
     if ((HEAP32[$5 >> 2] | 0) == ((HEAP32[$6 >> 2] | 0) - (HEAP32[$3 >> 2] | 0) | 0)) {
      $alloc$2 = $alloc$0;
      $matches$2 = $matches$0111;
      $s$8 = $s$1;
      $wcs$9 = $wcs$1;
      break L4;
     }
     if (($$ | 0) == 112 & ($dest$0 | 0) != 0) {
      HEAP32[$dest$0 >> 2] = $306;
      $p$10 = $p$5;
      $s$4 = $s$1;
      $wcs$5 = $wcs$1;
      break;
     }
     if (!$dest$0) {
      $p$10 = $p$5;
      $s$4 = $s$1;
      $wcs$5 = $wcs$1;
     } else switch ($$size$0 | 0) {
     case -2:
      {
       HEAP8[$dest$0 >> 0] = $306;
       $p$10 = $p$5;
       $s$4 = $s$1;
       $wcs$5 = $wcs$1;
       break L185;
       break;
      }
     case -1:
      {
       HEAP16[$dest$0 >> 1] = $306;
       $p$10 = $p$5;
       $s$4 = $s$1;
       $wcs$5 = $wcs$1;
       break L185;
       break;
      }
     case 0:
      {
       HEAP32[$dest$0 >> 2] = $306;
       $p$10 = $p$5;
       $s$4 = $s$1;
       $wcs$5 = $wcs$1;
       break L185;
       break;
      }
     case 1:
      {
       HEAP32[$dest$0 >> 2] = $306;
       $p$10 = $p$5;
       $s$4 = $s$1;
       $wcs$5 = $wcs$1;
       break L185;
       break;
      }
     case 3:
      {
       $321 = $dest$0;
       HEAP32[$321 >> 2] = $306;
       HEAP32[$321 + 4 >> 2] = tempRet0;
       $p$10 = $p$5;
       $s$4 = $s$1;
       $wcs$5 = $wcs$1;
       break L185;
       break;
      }
     default:
      {
       $p$10 = $p$5;
       $s$4 = $s$1;
       $wcs$5 = $wcs$1;
       break L185;
      }
     }
    } while (0);
    $matches$1 = (($dest$0 | 0) != 0 & 1) + $matches$0111 | 0;
    $p$11 = $p$10;
    $pos$2 = (HEAP32[$5 >> 2] | 0) + $pos$1 + (HEAP32[$3 >> 2] | 0) - (HEAP32[$6 >> 2] | 0) | 0;
    $s$5 = $s$4;
    $wcs$6 = $wcs$5;
    break L6;
   } while (0);
   $47 = $p$0117 + ($43 & 1) | 0;
   ___shlim($f, 0);
   $48 = HEAP32[$3 >> 2] | 0;
   if ($48 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $48 + 1;
    $57 = HEAPU8[$48 >> 0] | 0;
   } else $57 = ___shgetc($f) | 0;
   if (($57 | 0) != (HEAPU8[$47 >> 0] | 0)) {
    $$lcssa280 = $57;
    $matches$0111$lcssa = $matches$0111;
    $s$0109$lcssa = $s$0109;
    $wcs$0110$lcssa = $wcs$0110;
    label = 19;
    break L4;
   }
   $matches$1 = $matches$0111;
   $p$11 = $47;
   $pos$2 = $pos$0116 + 1 | 0;
   $s$5 = $s$0109;
   $wcs$6 = $wcs$0110;
  } else {
   $p$1 = $p$0117;
   while (1) {
    $16 = $p$1 + 1 | 0;
    if (!(_isspace(HEAPU8[$16 >> 0] | 0) | 0)) {
     $p$1$lcssa = $p$1;
     break;
    } else $p$1 = $16;
   }
   ___shlim($f, 0);
   do {
    $21 = HEAP32[$3 >> 2] | 0;
    if ($21 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $21 + 1;
     $28 = HEAPU8[$21 >> 0] | 0;
    } else $28 = ___shgetc($f) | 0;
   } while ((_isspace($28) | 0) != 0);
   $$pre216 = HEAP32[$3 >> 2] | 0;
   if (!(HEAP32[$4 >> 2] | 0)) $36 = $$pre216; else {
    $33 = $$pre216 + -1 | 0;
    HEAP32[$3 >> 2] = $33;
    $36 = $33;
   }
   $matches$1 = $matches$0111;
   $p$11 = $p$1$lcssa;
   $pos$2 = (HEAP32[$5 >> 2] | 0) + $pos$0116 + $36 - (HEAP32[$6 >> 2] | 0) | 0;
   $s$5 = $s$0109;
   $wcs$6 = $wcs$0110;
  } while (0);
  $p$0117 = $p$11 + 1 | 0;
  $13 = HEAP8[$p$0117 >> 0] | 0;
  if (!($13 << 24 >> 24)) {
   $matches$3 = $matches$1;
   label = 167;
   break;
  } else {
   $matches$0111 = $matches$1;
   $pos$0116 = $pos$2;
   $s$0109 = $s$5;
   $wcs$0110 = $wcs$6;
  }
 }
 if ((label | 0) == 19) {
  if (HEAP32[$4 >> 2] | 0) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
  if (($$lcssa280 | 0) > -1 | ($matches$0111$lcssa | 0) != 0) {
   $matches$3 = $matches$0111$lcssa;
   STACKTOP = sp;
   return $matches$3 | 0;
  } else {
   $alloc$1 = 0;
   $s$7 = $s$0109$lcssa;
   $wcs$8 = $wcs$0110$lcssa;
   label = 164;
  }
 } else if ((label | 0) == 163) if (!$matches$0111261) {
  $alloc$1 = $alloc$0200;
  $s$7 = $s$6;
  $wcs$8 = $wcs$7;
  label = 164;
 } else {
  $alloc$2 = $alloc$0200;
  $matches$2 = $matches$0111261;
  $s$8 = $s$6;
  $wcs$9 = $wcs$7;
 } else if ((label | 0) == 167) {
  STACKTOP = sp;
  return $matches$3 | 0;
 }
 if ((label | 0) == 164) {
  $alloc$2 = $alloc$1;
  $matches$2 = -1;
  $s$8 = $s$7;
  $wcs$9 = $wcs$8;
 }
 if (!$alloc$2) {
  $matches$3 = $matches$2;
  STACKTOP = sp;
  return $matches$3 | 0;
 }
 _free($s$8);
 _free($wcs$9);
 $matches$3 = $matches$2;
 STACKTOP = sp;
 return $matches$3 | 0;
}

function _free($mem) {
 $mem = $mem | 0;
 var $$lcssa = 0, $$pre$phi66Z2D = 0, $$pre$phi68Z2D = 0, $$pre$phiZ2D = 0, $$sum2 = 0, $1 = 0, $103 = 0, $104 = 0, $111 = 0, $112 = 0, $12 = 0, $120 = 0, $128 = 0, $133 = 0, $134 = 0, $137 = 0, $139 = 0, $14 = 0, $141 = 0, $15 = 0, $156 = 0, $161 = 0, $163 = 0, $166 = 0, $169 = 0, $172 = 0, $175 = 0, $176 = 0, $178 = 0, $179 = 0, $181 = 0, $182 = 0, $184 = 0, $185 = 0, $19 = 0, $191 = 0, $192 = 0, $2 = 0, $201 = 0, $206 = 0, $210 = 0, $216 = 0, $22 = 0, $231 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $24 = 0, $240 = 0, $241 = 0, $247 = 0, $252 = 0, $253 = 0, $256 = 0, $258 = 0, $26 = 0, $261 = 0, $266 = 0, $272 = 0, $276 = 0, $277 = 0, $284 = 0, $293 = 0, $296 = 0, $301 = 0, $308 = 0, $309 = 0, $310 = 0, $318 = 0, $39 = 0, $44 = 0, $46 = 0, $49 = 0, $5 = 0, $51 = 0, $54 = 0, $57 = 0, $58 = 0, $6 = 0, $60 = 0, $61 = 0, $63 = 0, $64 = 0, $66 = 0, $67 = 0, $72 = 0, $73 = 0, $8 = 0, $82 = 0, $87 = 0, $9 = 0, $91 = 0, $97 = 0, $F16$0 = 0, $I18$0 = 0, $K19$060 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$059 = 0, $T$059$lcssa = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0;
 if (!$mem) return;
 $1 = $mem + -8 | 0;
 $2 = HEAP32[3512] | 0;
 if ($1 >>> 0 < $2 >>> 0) _abort();
 $5 = HEAP32[$mem + -4 >> 2] | 0;
 $6 = $5 & 3;
 if (($6 | 0) == 1) _abort();
 $8 = $5 & -8;
 $9 = $mem + ($8 + -8) | 0;
 do if (!($5 & 1)) {
  $12 = HEAP32[$1 >> 2] | 0;
  if (!$6) return;
  $$sum2 = -8 - $12 | 0;
  $14 = $mem + $$sum2 | 0;
  $15 = $12 + $8 | 0;
  if ($14 >>> 0 < $2 >>> 0) _abort();
  if (($14 | 0) == (HEAP32[3513] | 0)) {
   $103 = $mem + ($8 + -4) | 0;
   $104 = HEAP32[$103 >> 2] | 0;
   if (($104 & 3 | 0) != 3) {
    $p$0 = $14;
    $psize$0 = $15;
    break;
   }
   HEAP32[3510] = $15;
   HEAP32[$103 >> 2] = $104 & -2;
   HEAP32[$mem + ($$sum2 + 4) >> 2] = $15 | 1;
   HEAP32[$9 >> 2] = $15;
   return;
  }
  $19 = $12 >>> 3;
  if ($12 >>> 0 < 256) {
   $22 = HEAP32[$mem + ($$sum2 + 8) >> 2] | 0;
   $24 = HEAP32[$mem + ($$sum2 + 12) >> 2] | 0;
   $26 = 14072 + ($19 << 1 << 2) | 0;
   if (($22 | 0) != ($26 | 0)) {
    if ($22 >>> 0 < $2 >>> 0) _abort();
    if ((HEAP32[$22 + 12 >> 2] | 0) != ($14 | 0)) _abort();
   }
   if (($24 | 0) == ($22 | 0)) {
    HEAP32[3508] = HEAP32[3508] & ~(1 << $19);
    $p$0 = $14;
    $psize$0 = $15;
    break;
   }
   if (($24 | 0) == ($26 | 0)) $$pre$phi68Z2D = $24 + 8 | 0; else {
    if ($24 >>> 0 < $2 >>> 0) _abort();
    $39 = $24 + 8 | 0;
    if ((HEAP32[$39 >> 2] | 0) == ($14 | 0)) $$pre$phi68Z2D = $39; else _abort();
   }
   HEAP32[$22 + 12 >> 2] = $24;
   HEAP32[$$pre$phi68Z2D >> 2] = $22;
   $p$0 = $14;
   $psize$0 = $15;
   break;
  }
  $44 = HEAP32[$mem + ($$sum2 + 24) >> 2] | 0;
  $46 = HEAP32[$mem + ($$sum2 + 12) >> 2] | 0;
  do if (($46 | 0) == ($14 | 0)) {
   $57 = $mem + ($$sum2 + 20) | 0;
   $58 = HEAP32[$57 >> 2] | 0;
   if (!$58) {
    $60 = $mem + ($$sum2 + 16) | 0;
    $61 = HEAP32[$60 >> 2] | 0;
    if (!$61) {
     $R$1 = 0;
     break;
    } else {
     $R$0 = $61;
     $RP$0 = $60;
    }
   } else {
    $R$0 = $58;
    $RP$0 = $57;
   }
   while (1) {
    $63 = $R$0 + 20 | 0;
    $64 = HEAP32[$63 >> 2] | 0;
    if ($64) {
     $R$0 = $64;
     $RP$0 = $63;
     continue;
    }
    $66 = $R$0 + 16 | 0;
    $67 = HEAP32[$66 >> 2] | 0;
    if (!$67) {
     $R$0$lcssa = $R$0;
     $RP$0$lcssa = $RP$0;
     break;
    } else {
     $R$0 = $67;
     $RP$0 = $66;
    }
   }
   if ($RP$0$lcssa >>> 0 < $2 >>> 0) _abort(); else {
    HEAP32[$RP$0$lcssa >> 2] = 0;
    $R$1 = $R$0$lcssa;
    break;
   }
  } else {
   $49 = HEAP32[$mem + ($$sum2 + 8) >> 2] | 0;
   if ($49 >>> 0 < $2 >>> 0) _abort();
   $51 = $49 + 12 | 0;
   if ((HEAP32[$51 >> 2] | 0) != ($14 | 0)) _abort();
   $54 = $46 + 8 | 0;
   if ((HEAP32[$54 >> 2] | 0) == ($14 | 0)) {
    HEAP32[$51 >> 2] = $46;
    HEAP32[$54 >> 2] = $49;
    $R$1 = $46;
    break;
   } else _abort();
  } while (0);
  if (!$44) {
   $p$0 = $14;
   $psize$0 = $15;
  } else {
   $72 = HEAP32[$mem + ($$sum2 + 28) >> 2] | 0;
   $73 = 14336 + ($72 << 2) | 0;
   if (($14 | 0) == (HEAP32[$73 >> 2] | 0)) {
    HEAP32[$73 >> 2] = $R$1;
    if (!$R$1) {
     HEAP32[3509] = HEAP32[3509] & ~(1 << $72);
     $p$0 = $14;
     $psize$0 = $15;
     break;
    }
   } else {
    if ($44 >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort();
    $82 = $44 + 16 | 0;
    if ((HEAP32[$82 >> 2] | 0) == ($14 | 0)) HEAP32[$82 >> 2] = $R$1; else HEAP32[$44 + 20 >> 2] = $R$1;
    if (!$R$1) {
     $p$0 = $14;
     $psize$0 = $15;
     break;
    }
   }
   $87 = HEAP32[3512] | 0;
   if ($R$1 >>> 0 < $87 >>> 0) _abort();
   HEAP32[$R$1 + 24 >> 2] = $44;
   $91 = HEAP32[$mem + ($$sum2 + 16) >> 2] | 0;
   do if ($91) if ($91 >>> 0 < $87 >>> 0) _abort(); else {
    HEAP32[$R$1 + 16 >> 2] = $91;
    HEAP32[$91 + 24 >> 2] = $R$1;
    break;
   } while (0);
   $97 = HEAP32[$mem + ($$sum2 + 20) >> 2] | 0;
   if (!$97) {
    $p$0 = $14;
    $psize$0 = $15;
   } else if ($97 >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort(); else {
    HEAP32[$R$1 + 20 >> 2] = $97;
    HEAP32[$97 + 24 >> 2] = $R$1;
    $p$0 = $14;
    $psize$0 = $15;
    break;
   }
  }
 } else {
  $p$0 = $1;
  $psize$0 = $8;
 } while (0);
 if ($p$0 >>> 0 >= $9 >>> 0) _abort();
 $111 = $mem + ($8 + -4) | 0;
 $112 = HEAP32[$111 >> 2] | 0;
 if (!($112 & 1)) _abort();
 if (!($112 & 2)) {
  if (($9 | 0) == (HEAP32[3514] | 0)) {
   $120 = (HEAP32[3511] | 0) + $psize$0 | 0;
   HEAP32[3511] = $120;
   HEAP32[3514] = $p$0;
   HEAP32[$p$0 + 4 >> 2] = $120 | 1;
   if (($p$0 | 0) != (HEAP32[3513] | 0)) return;
   HEAP32[3513] = 0;
   HEAP32[3510] = 0;
   return;
  }
  if (($9 | 0) == (HEAP32[3513] | 0)) {
   $128 = (HEAP32[3510] | 0) + $psize$0 | 0;
   HEAP32[3510] = $128;
   HEAP32[3513] = $p$0;
   HEAP32[$p$0 + 4 >> 2] = $128 | 1;
   HEAP32[$p$0 + $128 >> 2] = $128;
   return;
  }
  $133 = ($112 & -8) + $psize$0 | 0;
  $134 = $112 >>> 3;
  do if ($112 >>> 0 < 256) {
   $137 = HEAP32[$mem + $8 >> 2] | 0;
   $139 = HEAP32[$mem + ($8 | 4) >> 2] | 0;
   $141 = 14072 + ($134 << 1 << 2) | 0;
   if (($137 | 0) != ($141 | 0)) {
    if ($137 >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort();
    if ((HEAP32[$137 + 12 >> 2] | 0) != ($9 | 0)) _abort();
   }
   if (($139 | 0) == ($137 | 0)) {
    HEAP32[3508] = HEAP32[3508] & ~(1 << $134);
    break;
   }
   if (($139 | 0) == ($141 | 0)) $$pre$phi66Z2D = $139 + 8 | 0; else {
    if ($139 >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort();
    $156 = $139 + 8 | 0;
    if ((HEAP32[$156 >> 2] | 0) == ($9 | 0)) $$pre$phi66Z2D = $156; else _abort();
   }
   HEAP32[$137 + 12 >> 2] = $139;
   HEAP32[$$pre$phi66Z2D >> 2] = $137;
  } else {
   $161 = HEAP32[$mem + ($8 + 16) >> 2] | 0;
   $163 = HEAP32[$mem + ($8 | 4) >> 2] | 0;
   do if (($163 | 0) == ($9 | 0)) {
    $175 = $mem + ($8 + 12) | 0;
    $176 = HEAP32[$175 >> 2] | 0;
    if (!$176) {
     $178 = $mem + ($8 + 8) | 0;
     $179 = HEAP32[$178 >> 2] | 0;
     if (!$179) {
      $R7$1 = 0;
      break;
     } else {
      $R7$0 = $179;
      $RP9$0 = $178;
     }
    } else {
     $R7$0 = $176;
     $RP9$0 = $175;
    }
    while (1) {
     $181 = $R7$0 + 20 | 0;
     $182 = HEAP32[$181 >> 2] | 0;
     if ($182) {
      $R7$0 = $182;
      $RP9$0 = $181;
      continue;
     }
     $184 = $R7$0 + 16 | 0;
     $185 = HEAP32[$184 >> 2] | 0;
     if (!$185) {
      $R7$0$lcssa = $R7$0;
      $RP9$0$lcssa = $RP9$0;
      break;
     } else {
      $R7$0 = $185;
      $RP9$0 = $184;
     }
    }
    if ($RP9$0$lcssa >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort(); else {
     HEAP32[$RP9$0$lcssa >> 2] = 0;
     $R7$1 = $R7$0$lcssa;
     break;
    }
   } else {
    $166 = HEAP32[$mem + $8 >> 2] | 0;
    if ($166 >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort();
    $169 = $166 + 12 | 0;
    if ((HEAP32[$169 >> 2] | 0) != ($9 | 0)) _abort();
    $172 = $163 + 8 | 0;
    if ((HEAP32[$172 >> 2] | 0) == ($9 | 0)) {
     HEAP32[$169 >> 2] = $163;
     HEAP32[$172 >> 2] = $166;
     $R7$1 = $163;
     break;
    } else _abort();
   } while (0);
   if ($161) {
    $191 = HEAP32[$mem + ($8 + 20) >> 2] | 0;
    $192 = 14336 + ($191 << 2) | 0;
    if (($9 | 0) == (HEAP32[$192 >> 2] | 0)) {
     HEAP32[$192 >> 2] = $R7$1;
     if (!$R7$1) {
      HEAP32[3509] = HEAP32[3509] & ~(1 << $191);
      break;
     }
    } else {
     if ($161 >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort();
     $201 = $161 + 16 | 0;
     if ((HEAP32[$201 >> 2] | 0) == ($9 | 0)) HEAP32[$201 >> 2] = $R7$1; else HEAP32[$161 + 20 >> 2] = $R7$1;
     if (!$R7$1) break;
    }
    $206 = HEAP32[3512] | 0;
    if ($R7$1 >>> 0 < $206 >>> 0) _abort();
    HEAP32[$R7$1 + 24 >> 2] = $161;
    $210 = HEAP32[$mem + ($8 + 8) >> 2] | 0;
    do if ($210) if ($210 >>> 0 < $206 >>> 0) _abort(); else {
     HEAP32[$R7$1 + 16 >> 2] = $210;
     HEAP32[$210 + 24 >> 2] = $R7$1;
     break;
    } while (0);
    $216 = HEAP32[$mem + ($8 + 12) >> 2] | 0;
    if ($216) if ($216 >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort(); else {
     HEAP32[$R7$1 + 20 >> 2] = $216;
     HEAP32[$216 + 24 >> 2] = $R7$1;
     break;
    }
   }
  } while (0);
  HEAP32[$p$0 + 4 >> 2] = $133 | 1;
  HEAP32[$p$0 + $133 >> 2] = $133;
  if (($p$0 | 0) == (HEAP32[3513] | 0)) {
   HEAP32[3510] = $133;
   return;
  } else $psize$1 = $133;
 } else {
  HEAP32[$111 >> 2] = $112 & -2;
  HEAP32[$p$0 + 4 >> 2] = $psize$0 | 1;
  HEAP32[$p$0 + $psize$0 >> 2] = $psize$0;
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 if ($psize$1 >>> 0 < 256) {
  $233 = $231 << 1;
  $234 = 14072 + ($233 << 2) | 0;
  $235 = HEAP32[3508] | 0;
  $236 = 1 << $231;
  if (!($235 & $236)) {
   HEAP32[3508] = $235 | $236;
   $$pre$phiZ2D = 14072 + ($233 + 2 << 2) | 0;
   $F16$0 = $234;
  } else {
   $240 = 14072 + ($233 + 2 << 2) | 0;
   $241 = HEAP32[$240 >> 2] | 0;
   if ($241 >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort(); else {
    $$pre$phiZ2D = $240;
    $F16$0 = $241;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $p$0;
  HEAP32[$F16$0 + 12 >> 2] = $p$0;
  HEAP32[$p$0 + 8 >> 2] = $F16$0;
  HEAP32[$p$0 + 12 >> 2] = $234;
  return;
 }
 $247 = $psize$1 >>> 8;
 if (!$247) $I18$0 = 0; else if ($psize$1 >>> 0 > 16777215) $I18$0 = 31; else {
  $252 = ($247 + 1048320 | 0) >>> 16 & 8;
  $253 = $247 << $252;
  $256 = ($253 + 520192 | 0) >>> 16 & 4;
  $258 = $253 << $256;
  $261 = ($258 + 245760 | 0) >>> 16 & 2;
  $266 = 14 - ($256 | $252 | $261) + ($258 << $261 >>> 15) | 0;
  $I18$0 = $psize$1 >>> ($266 + 7 | 0) & 1 | $266 << 1;
 }
 $272 = 14336 + ($I18$0 << 2) | 0;
 HEAP32[$p$0 + 28 >> 2] = $I18$0;
 HEAP32[$p$0 + 20 >> 2] = 0;
 HEAP32[$p$0 + 16 >> 2] = 0;
 $276 = HEAP32[3509] | 0;
 $277 = 1 << $I18$0;
 L199 : do if (!($276 & $277)) {
  HEAP32[3509] = $276 | $277;
  HEAP32[$272 >> 2] = $p$0;
  HEAP32[$p$0 + 24 >> 2] = $272;
  HEAP32[$p$0 + 12 >> 2] = $p$0;
  HEAP32[$p$0 + 8 >> 2] = $p$0;
 } else {
  $284 = HEAP32[$272 >> 2] | 0;
  if (($I18$0 | 0) == 31) $293 = 0; else $293 = 25 - ($I18$0 >>> 1) | 0;
  L205 : do if ((HEAP32[$284 + 4 >> 2] & -8 | 0) == ($psize$1 | 0)) $T$0$lcssa = $284; else {
   $K19$060 = $psize$1 << $293;
   $T$059 = $284;
   while (1) {
    $301 = $T$059 + ($K19$060 >>> 31 << 2) + 16 | 0;
    $296 = HEAP32[$301 >> 2] | 0;
    if (!$296) {
     $$lcssa = $301;
     $T$059$lcssa = $T$059;
     break;
    }
    if ((HEAP32[$296 + 4 >> 2] & -8 | 0) == ($psize$1 | 0)) {
     $T$0$lcssa = $296;
     break L205;
    } else {
     $K19$060 = $K19$060 << 1;
     $T$059 = $296;
    }
   }
   if ($$lcssa >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort(); else {
    HEAP32[$$lcssa >> 2] = $p$0;
    HEAP32[$p$0 + 24 >> 2] = $T$059$lcssa;
    HEAP32[$p$0 + 12 >> 2] = $p$0;
    HEAP32[$p$0 + 8 >> 2] = $p$0;
    break L199;
   }
  } while (0);
  $308 = $T$0$lcssa + 8 | 0;
  $309 = HEAP32[$308 >> 2] | 0;
  $310 = HEAP32[3512] | 0;
  if ($T$0$lcssa >>> 0 >= $310 >>> 0 & $309 >>> 0 >= $310 >>> 0) {
   HEAP32[$309 + 12 >> 2] = $p$0;
   HEAP32[$308 >> 2] = $p$0;
   HEAP32[$p$0 + 8 >> 2] = $309;
   HEAP32[$p$0 + 12 >> 2] = $T$0$lcssa;
   HEAP32[$p$0 + 24 >> 2] = 0;
   break;
  } else _abort();
 } while (0);
 $318 = (HEAP32[3516] | 0) + -1 | 0;
 HEAP32[3516] = $318;
 if (!$318) $sp$0$in$i = 14488 | 0; else return;
 while (1) {
  $sp$0$i = HEAP32[$sp$0$in$i >> 2] | 0;
  if (!$sp$0$i) break; else $sp$0$in$i = $sp$0$i + 8 | 0;
 }
 HEAP32[3516] = -1;
 return;
}

function _dispose_chunk($p, $psize) {
 $p = $p | 0;
 $psize = $psize | 0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$pre$phi57Z2D = 0, $$pre$phi59Z2D = 0, $$pre$phiZ2D = 0, $$sum24 = 0, $$sum27 = 0, $0 = 0, $10 = 0, $100 = 0, $106 = 0, $108 = 0, $109 = 0, $11 = 0, $115 = 0, $123 = 0, $128 = 0, $129 = 0, $132 = 0, $134 = 0, $136 = 0, $149 = 0, $15 = 0, $154 = 0, $156 = 0, $159 = 0, $161 = 0, $164 = 0, $167 = 0, $168 = 0, $170 = 0, $171 = 0, $173 = 0, $174 = 0, $176 = 0, $177 = 0, $18 = 0, $182 = 0, $183 = 0, $192 = 0, $197 = 0, $2 = 0, $20 = 0, $201 = 0, $207 = 0, $22 = 0, $222 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $231 = 0, $232 = 0, $238 = 0, $243 = 0, $244 = 0, $247 = 0, $249 = 0, $252 = 0, $257 = 0, $263 = 0, $267 = 0, $268 = 0, $275 = 0, $284 = 0, $287 = 0, $292 = 0, $299 = 0, $300 = 0, $301 = 0, $35 = 0, $40 = 0, $42 = 0, $45 = 0, $47 = 0, $5 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $57 = 0, $59 = 0, $60 = 0, $62 = 0, $63 = 0, $68 = 0, $69 = 0, $78 = 0, $83 = 0, $87 = 0, $9 = 0, $93 = 0, $99 = 0, $F16$0 = 0, $I19$0 = 0, $K20$051 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$050 = 0, $T$050$lcssa = 0;
 $0 = $p + $psize | 0;
 $2 = HEAP32[$p + 4 >> 2] | 0;
 do if (!($2 & 1)) {
  $5 = HEAP32[$p >> 2] | 0;
  if (!($2 & 3)) return;
  $9 = $p + (0 - $5) | 0;
  $10 = $5 + $psize | 0;
  $11 = HEAP32[3512] | 0;
  if ($9 >>> 0 < $11 >>> 0) _abort();
  if (($9 | 0) == (HEAP32[3513] | 0)) {
   $99 = $p + ($psize + 4) | 0;
   $100 = HEAP32[$99 >> 2] | 0;
   if (($100 & 3 | 0) != 3) {
    $$0 = $9;
    $$02 = $10;
    break;
   }
   HEAP32[3510] = $10;
   HEAP32[$99 >> 2] = $100 & -2;
   HEAP32[$p + (4 - $5) >> 2] = $10 | 1;
   HEAP32[$0 >> 2] = $10;
   return;
  }
  $15 = $5 >>> 3;
  if ($5 >>> 0 < 256) {
   $18 = HEAP32[$p + (8 - $5) >> 2] | 0;
   $20 = HEAP32[$p + (12 - $5) >> 2] | 0;
   $22 = 14072 + ($15 << 1 << 2) | 0;
   if (($18 | 0) != ($22 | 0)) {
    if ($18 >>> 0 < $11 >>> 0) _abort();
    if ((HEAP32[$18 + 12 >> 2] | 0) != ($9 | 0)) _abort();
   }
   if (($20 | 0) == ($18 | 0)) {
    HEAP32[3508] = HEAP32[3508] & ~(1 << $15);
    $$0 = $9;
    $$02 = $10;
    break;
   }
   if (($20 | 0) == ($22 | 0)) $$pre$phi59Z2D = $20 + 8 | 0; else {
    if ($20 >>> 0 < $11 >>> 0) _abort();
    $35 = $20 + 8 | 0;
    if ((HEAP32[$35 >> 2] | 0) == ($9 | 0)) $$pre$phi59Z2D = $35; else _abort();
   }
   HEAP32[$18 + 12 >> 2] = $20;
   HEAP32[$$pre$phi59Z2D >> 2] = $18;
   $$0 = $9;
   $$02 = $10;
   break;
  }
  $40 = HEAP32[$p + (24 - $5) >> 2] | 0;
  $42 = HEAP32[$p + (12 - $5) >> 2] | 0;
  do if (($42 | 0) == ($9 | 0)) {
   $$sum24 = 16 - $5 | 0;
   $53 = $p + ($$sum24 + 4) | 0;
   $54 = HEAP32[$53 >> 2] | 0;
   if (!$54) {
    $56 = $p + $$sum24 | 0;
    $57 = HEAP32[$56 >> 2] | 0;
    if (!$57) {
     $R$1 = 0;
     break;
    } else {
     $R$0 = $57;
     $RP$0 = $56;
    }
   } else {
    $R$0 = $54;
    $RP$0 = $53;
   }
   while (1) {
    $59 = $R$0 + 20 | 0;
    $60 = HEAP32[$59 >> 2] | 0;
    if ($60) {
     $R$0 = $60;
     $RP$0 = $59;
     continue;
    }
    $62 = $R$0 + 16 | 0;
    $63 = HEAP32[$62 >> 2] | 0;
    if (!$63) {
     $R$0$lcssa = $R$0;
     $RP$0$lcssa = $RP$0;
     break;
    } else {
     $R$0 = $63;
     $RP$0 = $62;
    }
   }
   if ($RP$0$lcssa >>> 0 < $11 >>> 0) _abort(); else {
    HEAP32[$RP$0$lcssa >> 2] = 0;
    $R$1 = $R$0$lcssa;
    break;
   }
  } else {
   $45 = HEAP32[$p + (8 - $5) >> 2] | 0;
   if ($45 >>> 0 < $11 >>> 0) _abort();
   $47 = $45 + 12 | 0;
   if ((HEAP32[$47 >> 2] | 0) != ($9 | 0)) _abort();
   $50 = $42 + 8 | 0;
   if ((HEAP32[$50 >> 2] | 0) == ($9 | 0)) {
    HEAP32[$47 >> 2] = $42;
    HEAP32[$50 >> 2] = $45;
    $R$1 = $42;
    break;
   } else _abort();
  } while (0);
  if (!$40) {
   $$0 = $9;
   $$02 = $10;
  } else {
   $68 = HEAP32[$p + (28 - $5) >> 2] | 0;
   $69 = 14336 + ($68 << 2) | 0;
   if (($9 | 0) == (HEAP32[$69 >> 2] | 0)) {
    HEAP32[$69 >> 2] = $R$1;
    if (!$R$1) {
     HEAP32[3509] = HEAP32[3509] & ~(1 << $68);
     $$0 = $9;
     $$02 = $10;
     break;
    }
   } else {
    if ($40 >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort();
    $78 = $40 + 16 | 0;
    if ((HEAP32[$78 >> 2] | 0) == ($9 | 0)) HEAP32[$78 >> 2] = $R$1; else HEAP32[$40 + 20 >> 2] = $R$1;
    if (!$R$1) {
     $$0 = $9;
     $$02 = $10;
     break;
    }
   }
   $83 = HEAP32[3512] | 0;
   if ($R$1 >>> 0 < $83 >>> 0) _abort();
   HEAP32[$R$1 + 24 >> 2] = $40;
   $$sum27 = 16 - $5 | 0;
   $87 = HEAP32[$p + $$sum27 >> 2] | 0;
   do if ($87) if ($87 >>> 0 < $83 >>> 0) _abort(); else {
    HEAP32[$R$1 + 16 >> 2] = $87;
    HEAP32[$87 + 24 >> 2] = $R$1;
    break;
   } while (0);
   $93 = HEAP32[$p + ($$sum27 + 4) >> 2] | 0;
   if (!$93) {
    $$0 = $9;
    $$02 = $10;
   } else if ($93 >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort(); else {
    HEAP32[$R$1 + 20 >> 2] = $93;
    HEAP32[$93 + 24 >> 2] = $R$1;
    $$0 = $9;
    $$02 = $10;
    break;
   }
  }
 } else {
  $$0 = $p;
  $$02 = $psize;
 } while (0);
 $106 = HEAP32[3512] | 0;
 if ($0 >>> 0 < $106 >>> 0) _abort();
 $108 = $p + ($psize + 4) | 0;
 $109 = HEAP32[$108 >> 2] | 0;
 if (!($109 & 2)) {
  if (($0 | 0) == (HEAP32[3514] | 0)) {
   $115 = (HEAP32[3511] | 0) + $$02 | 0;
   HEAP32[3511] = $115;
   HEAP32[3514] = $$0;
   HEAP32[$$0 + 4 >> 2] = $115 | 1;
   if (($$0 | 0) != (HEAP32[3513] | 0)) return;
   HEAP32[3513] = 0;
   HEAP32[3510] = 0;
   return;
  }
  if (($0 | 0) == (HEAP32[3513] | 0)) {
   $123 = (HEAP32[3510] | 0) + $$02 | 0;
   HEAP32[3510] = $123;
   HEAP32[3513] = $$0;
   HEAP32[$$0 + 4 >> 2] = $123 | 1;
   HEAP32[$$0 + $123 >> 2] = $123;
   return;
  }
  $128 = ($109 & -8) + $$02 | 0;
  $129 = $109 >>> 3;
  do if ($109 >>> 0 < 256) {
   $132 = HEAP32[$p + ($psize + 8) >> 2] | 0;
   $134 = HEAP32[$p + ($psize + 12) >> 2] | 0;
   $136 = 14072 + ($129 << 1 << 2) | 0;
   if (($132 | 0) != ($136 | 0)) {
    if ($132 >>> 0 < $106 >>> 0) _abort();
    if ((HEAP32[$132 + 12 >> 2] | 0) != ($0 | 0)) _abort();
   }
   if (($134 | 0) == ($132 | 0)) {
    HEAP32[3508] = HEAP32[3508] & ~(1 << $129);
    break;
   }
   if (($134 | 0) == ($136 | 0)) $$pre$phi57Z2D = $134 + 8 | 0; else {
    if ($134 >>> 0 < $106 >>> 0) _abort();
    $149 = $134 + 8 | 0;
    if ((HEAP32[$149 >> 2] | 0) == ($0 | 0)) $$pre$phi57Z2D = $149; else _abort();
   }
   HEAP32[$132 + 12 >> 2] = $134;
   HEAP32[$$pre$phi57Z2D >> 2] = $132;
  } else {
   $154 = HEAP32[$p + ($psize + 24) >> 2] | 0;
   $156 = HEAP32[$p + ($psize + 12) >> 2] | 0;
   do if (($156 | 0) == ($0 | 0)) {
    $167 = $p + ($psize + 20) | 0;
    $168 = HEAP32[$167 >> 2] | 0;
    if (!$168) {
     $170 = $p + ($psize + 16) | 0;
     $171 = HEAP32[$170 >> 2] | 0;
     if (!$171) {
      $R7$1 = 0;
      break;
     } else {
      $R7$0 = $171;
      $RP9$0 = $170;
     }
    } else {
     $R7$0 = $168;
     $RP9$0 = $167;
    }
    while (1) {
     $173 = $R7$0 + 20 | 0;
     $174 = HEAP32[$173 >> 2] | 0;
     if ($174) {
      $R7$0 = $174;
      $RP9$0 = $173;
      continue;
     }
     $176 = $R7$0 + 16 | 0;
     $177 = HEAP32[$176 >> 2] | 0;
     if (!$177) {
      $R7$0$lcssa = $R7$0;
      $RP9$0$lcssa = $RP9$0;
      break;
     } else {
      $R7$0 = $177;
      $RP9$0 = $176;
     }
    }
    if ($RP9$0$lcssa >>> 0 < $106 >>> 0) _abort(); else {
     HEAP32[$RP9$0$lcssa >> 2] = 0;
     $R7$1 = $R7$0$lcssa;
     break;
    }
   } else {
    $159 = HEAP32[$p + ($psize + 8) >> 2] | 0;
    if ($159 >>> 0 < $106 >>> 0) _abort();
    $161 = $159 + 12 | 0;
    if ((HEAP32[$161 >> 2] | 0) != ($0 | 0)) _abort();
    $164 = $156 + 8 | 0;
    if ((HEAP32[$164 >> 2] | 0) == ($0 | 0)) {
     HEAP32[$161 >> 2] = $156;
     HEAP32[$164 >> 2] = $159;
     $R7$1 = $156;
     break;
    } else _abort();
   } while (0);
   if ($154) {
    $182 = HEAP32[$p + ($psize + 28) >> 2] | 0;
    $183 = 14336 + ($182 << 2) | 0;
    if (($0 | 0) == (HEAP32[$183 >> 2] | 0)) {
     HEAP32[$183 >> 2] = $R7$1;
     if (!$R7$1) {
      HEAP32[3509] = HEAP32[3509] & ~(1 << $182);
      break;
     }
    } else {
     if ($154 >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort();
     $192 = $154 + 16 | 0;
     if ((HEAP32[$192 >> 2] | 0) == ($0 | 0)) HEAP32[$192 >> 2] = $R7$1; else HEAP32[$154 + 20 >> 2] = $R7$1;
     if (!$R7$1) break;
    }
    $197 = HEAP32[3512] | 0;
    if ($R7$1 >>> 0 < $197 >>> 0) _abort();
    HEAP32[$R7$1 + 24 >> 2] = $154;
    $201 = HEAP32[$p + ($psize + 16) >> 2] | 0;
    do if ($201) if ($201 >>> 0 < $197 >>> 0) _abort(); else {
     HEAP32[$R7$1 + 16 >> 2] = $201;
     HEAP32[$201 + 24 >> 2] = $R7$1;
     break;
    } while (0);
    $207 = HEAP32[$p + ($psize + 20) >> 2] | 0;
    if ($207) if ($207 >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort(); else {
     HEAP32[$R7$1 + 20 >> 2] = $207;
     HEAP32[$207 + 24 >> 2] = $R7$1;
     break;
    }
   }
  } while (0);
  HEAP32[$$0 + 4 >> 2] = $128 | 1;
  HEAP32[$$0 + $128 >> 2] = $128;
  if (($$0 | 0) == (HEAP32[3513] | 0)) {
   HEAP32[3510] = $128;
   return;
  } else $$1 = $128;
 } else {
  HEAP32[$108 >> 2] = $109 & -2;
  HEAP32[$$0 + 4 >> 2] = $$02 | 1;
  HEAP32[$$0 + $$02 >> 2] = $$02;
  $$1 = $$02;
 }
 $222 = $$1 >>> 3;
 if ($$1 >>> 0 < 256) {
  $224 = $222 << 1;
  $225 = 14072 + ($224 << 2) | 0;
  $226 = HEAP32[3508] | 0;
  $227 = 1 << $222;
  if (!($226 & $227)) {
   HEAP32[3508] = $226 | $227;
   $$pre$phiZ2D = 14072 + ($224 + 2 << 2) | 0;
   $F16$0 = $225;
  } else {
   $231 = 14072 + ($224 + 2 << 2) | 0;
   $232 = HEAP32[$231 >> 2] | 0;
   if ($232 >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort(); else {
    $$pre$phiZ2D = $231;
    $F16$0 = $232;
   }
  }
  HEAP32[$$pre$phiZ2D >> 2] = $$0;
  HEAP32[$F16$0 + 12 >> 2] = $$0;
  HEAP32[$$0 + 8 >> 2] = $F16$0;
  HEAP32[$$0 + 12 >> 2] = $225;
  return;
 }
 $238 = $$1 >>> 8;
 if (!$238) $I19$0 = 0; else if ($$1 >>> 0 > 16777215) $I19$0 = 31; else {
  $243 = ($238 + 1048320 | 0) >>> 16 & 8;
  $244 = $238 << $243;
  $247 = ($244 + 520192 | 0) >>> 16 & 4;
  $249 = $244 << $247;
  $252 = ($249 + 245760 | 0) >>> 16 & 2;
  $257 = 14 - ($247 | $243 | $252) + ($249 << $252 >>> 15) | 0;
  $I19$0 = $$1 >>> ($257 + 7 | 0) & 1 | $257 << 1;
 }
 $263 = 14336 + ($I19$0 << 2) | 0;
 HEAP32[$$0 + 28 >> 2] = $I19$0;
 HEAP32[$$0 + 20 >> 2] = 0;
 HEAP32[$$0 + 16 >> 2] = 0;
 $267 = HEAP32[3509] | 0;
 $268 = 1 << $I19$0;
 if (!($267 & $268)) {
  HEAP32[3509] = $267 | $268;
  HEAP32[$263 >> 2] = $$0;
  HEAP32[$$0 + 24 >> 2] = $263;
  HEAP32[$$0 + 12 >> 2] = $$0;
  HEAP32[$$0 + 8 >> 2] = $$0;
  return;
 }
 $275 = HEAP32[$263 >> 2] | 0;
 if (($I19$0 | 0) == 31) $284 = 0; else $284 = 25 - ($I19$0 >>> 1) | 0;
 L194 : do if ((HEAP32[$275 + 4 >> 2] & -8 | 0) == ($$1 | 0)) $T$0$lcssa = $275; else {
  $K20$051 = $$1 << $284;
  $T$050 = $275;
  while (1) {
   $292 = $T$050 + ($K20$051 >>> 31 << 2) + 16 | 0;
   $287 = HEAP32[$292 >> 2] | 0;
   if (!$287) {
    $$lcssa = $292;
    $T$050$lcssa = $T$050;
    break;
   }
   if ((HEAP32[$287 + 4 >> 2] & -8 | 0) == ($$1 | 0)) {
    $T$0$lcssa = $287;
    break L194;
   } else {
    $K20$051 = $K20$051 << 1;
    $T$050 = $287;
   }
  }
  if ($$lcssa >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort();
  HEAP32[$$lcssa >> 2] = $$0;
  HEAP32[$$0 + 24 >> 2] = $T$050$lcssa;
  HEAP32[$$0 + 12 >> 2] = $$0;
  HEAP32[$$0 + 8 >> 2] = $$0;
  return;
 } while (0);
 $299 = $T$0$lcssa + 8 | 0;
 $300 = HEAP32[$299 >> 2] | 0;
 $301 = HEAP32[3512] | 0;
 if (!($T$0$lcssa >>> 0 >= $301 >>> 0 & $300 >>> 0 >= $301 >>> 0)) _abort();
 HEAP32[$300 + 12 >> 2] = $$0;
 HEAP32[$299 >> 2] = $$0;
 HEAP32[$$0 + 8 >> 2] = $300;
 HEAP32[$$0 + 12 >> 2] = $T$0$lcssa;
 HEAP32[$$0 + 24 >> 2] = 0;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm, $__fmt, $0) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $0 = $0 | 0;
 var $$byval_copy26 = 0, $$byval_copy30 = 0, $1 = 0, $10 = 0, $105 = 0, $108 = 0, $11 = 0, $112 = 0, $115 = 0, $119 = 0, $12 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $47 = 0, $5 = 0, $51 = 0, $54 = 0, $58 = 0, $6 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $$byval_copy30 = sp + 160 | 0;
 $$byval_copy26 = sp + 156 | 0;
 $1 = sp + 152 | 0;
 $2 = sp + 148 | 0;
 $3 = sp + 144 | 0;
 $4 = sp + 140 | 0;
 $5 = sp + 136 | 0;
 $6 = sp + 132 | 0;
 $7 = sp + 128 | 0;
 $8 = sp + 124 | 0;
 $9 = sp + 120 | 0;
 $10 = sp + 116 | 0;
 $11 = sp + 112 | 0;
 $12 = sp + 108 | 0;
 $13 = sp + 104 | 0;
 $14 = sp + 100 | 0;
 $15 = sp + 96 | 0;
 $16 = sp + 92 | 0;
 $17 = sp + 88 | 0;
 $18 = sp + 84 | 0;
 $19 = sp + 80 | 0;
 $20 = sp + 76 | 0;
 $21 = sp + 72 | 0;
 $22 = sp + 68 | 0;
 $23 = sp + 64 | 0;
 $24 = sp + 60 | 0;
 $25 = sp + 56 | 0;
 $26 = sp + 52 | 0;
 $27 = sp + 48 | 0;
 $28 = sp + 44 | 0;
 $29 = sp + 40 | 0;
 $30 = sp + 36 | 0;
 $31 = sp + 32 | 0;
 $32 = sp + 28 | 0;
 $33 = sp + 24 | 0;
 $34 = sp + 20 | 0;
 $35 = sp + 16 | 0;
 $36 = sp + 12 | 0;
 $37 = sp + 8 | 0;
 $38 = sp + 4 | 0;
 $39 = sp;
 HEAP32[$__err >> 2] = 0;
 __ZNKSt3__18ios_base6getlocEv($1, $__iob);
 $40 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 4896) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$1 >> 2] | 0) | 0;
 do switch ($__fmt << 24 >> 24 | 0) {
 case 65:
 case 97:
  {
   HEAP32[$2 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$2 + 0 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 24 | 0, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 case 99:
  {
   $47 = $this + 8 | 0;
   $51 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$47 >> 2] | 0) + 12 >> 2] & 63]($47) | 0;
   HEAP32[$5 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$6 >> 2] = HEAP32[$__e >> 2];
   $54 = HEAP8[$51 >> 0] | 0;
   if (!($54 & 1)) {
    $66 = $51 + 4 | 0;
    $67 = ($54 & 255) >>> 1;
    $68 = $51 + 4 | 0;
   } else {
    $58 = HEAP32[$51 + 8 >> 2] | 0;
    $66 = $58;
    $67 = HEAP32[$51 + 4 >> 2] | 0;
    $68 = $58;
   }
   HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$5 + 0 >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$6 + 0 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($4, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, $68, $66 + ($67 << 2) | 0);
   HEAP32[$__b >> 2] = HEAP32[$4 >> 2];
   label = 32;
   break;
  }
 case 68:
  {
   HEAP32[$9 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$10 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$9 + 0 >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$10 + 0 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($8, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 3992, 4024 | 0);
   HEAP32[$__b >> 2] = HEAP32[$8 >> 2];
   label = 32;
   break;
  }
 case 70:
  {
   HEAP32[$12 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$13 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$12 + 0 >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$13 + 0 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($11, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 4024, 4056 | 0);
   HEAP32[$__b >> 2] = HEAP32[$11 >> 2];
   label = 32;
   break;
  }
 case 72:
  {
   HEAP32[$14 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$14 + 0 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 8 | 0, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   HEAP32[$3 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$3 + 0 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 16 | 0, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 case 121:
  {
   HEAP32[$37 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$37 + 0 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 20 | 0, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 case 89:
  {
   HEAP32[$38 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$38 + 0 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 20 | 0, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 case 37:
  {
   HEAP32[$39 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$39 + 0 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 case 73:
  {
   HEAP32[$15 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$15 + 0 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 8 | 0, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 case 106:
  {
   HEAP32[$16 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$16 + 0 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 28 | 0, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 case 109:
  {
   HEAP32[$17 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$17 + 0 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 16 | 0, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 case 77:
  {
   HEAP32[$18 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$18 + 0 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 4 | 0, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 case 116:
 case 110:
  {
   HEAP32[$19 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$19 + 0 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 case 112:
  {
   HEAP32[$20 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$20 + 0 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 8 | 0, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 case 114:
  {
   HEAP32[$22 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$23 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$22 + 0 >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$23 + 0 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($21, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 4056, 4100 | 0);
   HEAP32[$__b >> 2] = HEAP32[$21 >> 2];
   label = 32;
   break;
  }
 case 82:
  {
   HEAP32[$25 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$26 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$25 + 0 >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$26 + 0 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($24, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 4104, 4124 | 0);
   HEAP32[$__b >> 2] = HEAP32[$24 >> 2];
   label = 32;
   break;
  }
 case 83:
  {
   HEAP32[$27 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$27 + 0 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 case 84:
  {
   HEAP32[$29 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$30 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$29 + 0 >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$30 + 0 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($28, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 4128, 4160 | 0);
   HEAP32[$__b >> 2] = HEAP32[$28 >> 2];
   label = 32;
   break;
  }
 case 119:
  {
   HEAP32[$31 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$31 + 0 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 24 | 0, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 case 120:
  {
   $105 = HEAP32[(HEAP32[$this >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[$32 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$33 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$32 + 0 >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$33 + 0 >> 2];
   FUNCTION_TABLE_viiiiiii[$105 & 63]($agg$result, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm);
   break;
  }
 case 88:
  {
   $108 = $this + 8 | 0;
   $112 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$108 >> 2] | 0) + 24 >> 2] & 63]($108) | 0;
   HEAP32[$35 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$36 >> 2] = HEAP32[$__e >> 2];
   $115 = HEAP8[$112 >> 0] | 0;
   if (!($115 & 1)) {
    $127 = $112 + 4 | 0;
    $128 = ($115 & 255) >>> 1;
    $129 = $112 + 4 | 0;
   } else {
    $119 = HEAP32[$112 + 8 >> 2] | 0;
    $127 = $119;
    $128 = HEAP32[$112 + 4 >> 2] | 0;
    $129 = $119;
   }
   HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$35 + 0 >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$36 + 0 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($34, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, $129, $127 + ($128 << 2) | 0);
   HEAP32[$__b >> 2] = HEAP32[$34 >> 2];
   label = 32;
   break;
  }
 case 101:
 case 100:
  {
   HEAP32[$7 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$7 + 0 >> 2];
   __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 12 | 0, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 default:
  {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   label = 32;
  }
 } while (0);
 if ((label | 0) == 32) HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm, $__fmt, $0) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $0 = $0 | 0;
 var $$byval_copy26 = 0, $$byval_copy30 = 0, $1 = 0, $10 = 0, $105 = 0, $108 = 0, $11 = 0, $112 = 0, $115 = 0, $119 = 0, $12 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $47 = 0, $5 = 0, $51 = 0, $54 = 0, $58 = 0, $6 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $$byval_copy30 = sp + 160 | 0;
 $$byval_copy26 = sp + 156 | 0;
 $1 = sp + 152 | 0;
 $2 = sp + 148 | 0;
 $3 = sp + 144 | 0;
 $4 = sp + 140 | 0;
 $5 = sp + 136 | 0;
 $6 = sp + 132 | 0;
 $7 = sp + 128 | 0;
 $8 = sp + 124 | 0;
 $9 = sp + 120 | 0;
 $10 = sp + 116 | 0;
 $11 = sp + 112 | 0;
 $12 = sp + 108 | 0;
 $13 = sp + 104 | 0;
 $14 = sp + 100 | 0;
 $15 = sp + 96 | 0;
 $16 = sp + 92 | 0;
 $17 = sp + 88 | 0;
 $18 = sp + 84 | 0;
 $19 = sp + 80 | 0;
 $20 = sp + 76 | 0;
 $21 = sp + 72 | 0;
 $22 = sp + 68 | 0;
 $23 = sp + 64 | 0;
 $24 = sp + 60 | 0;
 $25 = sp + 56 | 0;
 $26 = sp + 52 | 0;
 $27 = sp + 48 | 0;
 $28 = sp + 44 | 0;
 $29 = sp + 40 | 0;
 $30 = sp + 36 | 0;
 $31 = sp + 32 | 0;
 $32 = sp + 28 | 0;
 $33 = sp + 24 | 0;
 $34 = sp + 20 | 0;
 $35 = sp + 16 | 0;
 $36 = sp + 12 | 0;
 $37 = sp + 8 | 0;
 $38 = sp + 4 | 0;
 $39 = sp;
 HEAP32[$__err >> 2] = 0;
 __ZNKSt3__18ios_base6getlocEv($1, $__iob);
 $40 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 4904) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$1 >> 2] | 0) | 0;
 do switch ($__fmt << 24 >> 24 | 0) {
 case 65:
 case 97:
  {
   HEAP32[$2 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$2 + 0 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 24 | 0, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 case 99:
  {
   $47 = $this + 8 | 0;
   $51 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$47 >> 2] | 0) + 12 >> 2] & 63]($47) | 0;
   HEAP32[$5 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$6 >> 2] = HEAP32[$__e >> 2];
   $54 = HEAP8[$51 >> 0] | 0;
   if (!($54 & 1)) {
    $66 = $51 + 1 | 0;
    $67 = ($54 & 255) >>> 1;
    $68 = $51 + 1 | 0;
   } else {
    $58 = HEAP32[$51 + 8 >> 2] | 0;
    $66 = $58;
    $67 = HEAP32[$51 + 4 >> 2] | 0;
    $68 = $58;
   }
   HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$5 + 0 >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$6 + 0 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($4, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, $68, $66 + $67 | 0);
   HEAP32[$__b >> 2] = HEAP32[$4 >> 2];
   label = 32;
   break;
  }
 case 68:
  {
   HEAP32[$9 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$10 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$9 + 0 >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$10 + 0 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($8, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 3816, 3824 | 0);
   HEAP32[$__b >> 2] = HEAP32[$8 >> 2];
   label = 32;
   break;
  }
 case 70:
  {
   HEAP32[$12 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$13 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$12 + 0 >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$13 + 0 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($11, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 3824, 3832 | 0);
   HEAP32[$__b >> 2] = HEAP32[$11 >> 2];
   label = 32;
   break;
  }
 case 72:
  {
   HEAP32[$14 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$14 + 0 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 8 | 0, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 case 104:
 case 66:
 case 98:
  {
   HEAP32[$3 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$3 + 0 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 16 | 0, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 case 121:
  {
   HEAP32[$37 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$37 + 0 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 20 | 0, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 case 89:
  {
   HEAP32[$38 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$38 + 0 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 20 | 0, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 case 37:
  {
   HEAP32[$39 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$39 + 0 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 case 73:
  {
   HEAP32[$15 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$15 + 0 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 8 | 0, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 case 106:
  {
   HEAP32[$16 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$16 + 0 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 28 | 0, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 case 109:
  {
   HEAP32[$17 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$17 + 0 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 16 | 0, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 case 77:
  {
   HEAP32[$18 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$18 + 0 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 4 | 0, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 case 116:
 case 110:
  {
   HEAP32[$19 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$19 + 0 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 case 112:
  {
   HEAP32[$20 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$20 + 0 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 8 | 0, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 case 114:
  {
   HEAP32[$22 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$23 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$22 + 0 >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$23 + 0 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($21, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 3832, 3843 | 0);
   HEAP32[$__b >> 2] = HEAP32[$21 >> 2];
   label = 32;
   break;
  }
 case 82:
  {
   HEAP32[$25 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$26 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$25 + 0 >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$26 + 0 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($24, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 3848, 3853 | 0);
   HEAP32[$__b >> 2] = HEAP32[$24 >> 2];
   label = 32;
   break;
  }
 case 83:
  {
   HEAP32[$27 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$27 + 0 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 case 84:
  {
   HEAP32[$29 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$30 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$29 + 0 >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$30 + 0 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($28, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, 3856, 3864 | 0);
   HEAP32[$__b >> 2] = HEAP32[$28 >> 2];
   label = 32;
   break;
  }
 case 119:
  {
   HEAP32[$31 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$31 + 0 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 24 | 0, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 case 120:
  {
   $105 = HEAP32[(HEAP32[$this >> 2] | 0) + 20 >> 2] | 0;
   HEAP32[$32 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$33 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$32 + 0 >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$33 + 0 >> 2];
   FUNCTION_TABLE_viiiiiii[$105 & 63]($agg$result, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm);
   break;
  }
 case 88:
  {
   $108 = $this + 8 | 0;
   $112 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$108 >> 2] | 0) + 24 >> 2] & 63]($108) | 0;
   HEAP32[$35 >> 2] = HEAP32[$__b >> 2];
   HEAP32[$36 >> 2] = HEAP32[$__e >> 2];
   $115 = HEAP8[$112 >> 0] | 0;
   if (!($115 & 1)) {
    $127 = $112 + 1 | 0;
    $128 = ($115 & 255) >>> 1;
    $129 = $112 + 1 | 0;
   } else {
    $119 = HEAP32[$112 + 8 >> 2] | 0;
    $127 = $119;
    $128 = HEAP32[$112 + 4 >> 2] | 0;
    $129 = $119;
   }
   HEAP32[$$byval_copy26 + 0 >> 2] = HEAP32[$35 + 0 >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$36 + 0 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($34, $this, $$byval_copy26, $$byval_copy30, $__iob, $__err, $__tm, $129, $127 + $128 | 0);
   HEAP32[$__b >> 2] = HEAP32[$34 >> 2];
   label = 32;
   break;
  }
 case 101:
 case 100:
  {
   HEAP32[$7 >> 2] = HEAP32[$__e >> 2];
   HEAP32[$$byval_copy30 + 0 >> 2] = HEAP32[$7 + 0 >> 2];
   __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 12 | 0, $__b, $$byval_copy30, $__err, $40);
   label = 32;
   break;
  }
 default:
  {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   label = 32;
  }
 } while (0);
 if ((label | 0) == 32) HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 STACKTOP = sp;
 return;
}

function __ZN4Base10Benchmarks6runAllERNS_15OutputFunctionsEb($outputFunctions, $useAutoIterations) {
 $outputFunctions = $outputFunctions | 0;
 $useAutoIterations = $useAutoIterations | 0;
 var $0 = 0, $1 = 0, $10 = 0, $101 = 0, $104 = 0, $105 = 0, $108 = 0, $11 = 0, $113 = 0, $12 = 0, $121 = 0, $124 = 0, $125 = 0, $13 = 0, $130 = 0, $132 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $142 = 0, $144 = 0, $145 = 0, $147 = 0, $15 = 0, $150 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $158 = 0, $16 = 0, $163 = 0, $168 = 0, $17 = 0, $170 = 0, $173 = 0, $175 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $187 = 0, $190 = 0, $191 = 0, $197 = 0, $20 = 0, $200 = 0, $203 = 0, $209 = 0, $21 = 0, $210 = 0, $212 = 0, $215 = 0, $22 = 0, $220 = 0, $228 = 0, $231 = 0, $234 = 0, $240 = 0, $241 = 0, $243 = 0, $246 = 0, $251 = 0, $259 = 0, $262 = 0, $265 = 0, $277 = 0, $284 = 0, $289 = 0, $296 = 0, $299 = 0, $3 = 0, $30 = 0, $301 = 0, $304 = 0, $307 = 0, $309 = 0, $312 = 0, $313 = 0.0, $316 = 0, $318 = 0, $32 = 0, $321 = 0, $324 = 0, $325 = 0, $333 = 0, $335 = 0, $338 = 0, $339 = 0, $341 = 0, $342 = 0, $343 = 0, $345 = 0, $346 = 0, $347 = 0, $349 = 0, $351 = 0, $352 = 0, $356 = 0, $360 = 0, $364 = 0, $37 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $4 = 0, $45 = 0, $48 = 0, $49 = 0, $5 = 0, $52 = 0, $57 = 0, $6 = 0, $65 = 0, $68 = 0, $69 = 0, $7 = 0, $74 = 0, $76 = 0, $8 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $88 = 0, $9 = 0, $93 = 0, $buf$i = 0, $buf$i1 = 0, $vararg_buffer15 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 464 | 0;
 $vararg_buffer15 = sp;
 $buf$i1 = sp + 256 | 0;
 $buf$i = sp + 56 | 0;
 $0 = HEAP32[$outputFunctions >> 2] | 0;
 HEAP32[$vararg_buffer15 >> 2] = 232;
 HEAP32[$vararg_buffer15 + 4 >> 2] = 240;
 HEAP32[$vararg_buffer15 + 8 >> 2] = 256;
 HEAP32[$vararg_buffer15 + 12 >> 2] = 272;
 HEAP32[$vararg_buffer15 + 16 >> 2] = 288;
 HEAP32[$vararg_buffer15 + 20 >> 2] = 304;
 HEAP32[$vararg_buffer15 + 24 >> 2] = 312;
 _sprintf($buf$i, 192, $vararg_buffer15) | 0;
 FUNCTION_TABLE_vi[$0 & 127]($buf$i);
 $1 = HEAP32[21] | 0;
 if (($1 | 0) == 80) {
  STACKTOP = sp;
  return;
 }
 $3 = $useAutoIterations & 1;
 $4 = $vararg_buffer15 + 4 | 0;
 $5 = $vararg_buffer15 + 4 | 0;
 $6 = $vararg_buffer15 + 4 | 0;
 $7 = $vararg_buffer15 + 4 | 0;
 $8 = $vararg_buffer15 + 4 | 0;
 $9 = $vararg_buffer15 + 4 | 0;
 $10 = $vararg_buffer15 + 4 | 0;
 $11 = $vararg_buffer15 + 4 | 0;
 $12 = $vararg_buffer15 + 4 | 0;
 $13 = $vararg_buffer15 + 4 | 0;
 $14 = $vararg_buffer15 + 4 | 0;
 $15 = $vararg_buffer15 + 4 | 0;
 $16 = $vararg_buffer15 + 4 | 0;
 $17 = $vararg_buffer15 + 4 | 0;
 $18 = $outputFunctions + 4 | 0;
 $20 = $1;
 do {
  $21 = HEAP32[$20 + 8 >> 2] | 0;
  $22 = $21 + 4 | 0;
  HEAP8[$22 >> 0] = $3;
  if (FUNCTION_TABLE_i[HEAP32[(HEAP32[$21 >> 2] | 0) + 12 >> 2] & 3]() | 0) {
   $30 = HEAP32[$21 >> 2] | 0;
   if (!(HEAP8[$22 >> 0] | 0)) {
    $168 = $30 + 32 | 0;
    $170 = HEAP32[$168 >> 2] | 0;
    $173 = HEAP32[$168 + 4 >> 2] | 0;
    $175 = $21 + 16 | 0;
    HEAP32[$175 >> 2] = $170;
    HEAP32[$175 + 4 >> 2] = $173;
    $180 = $30;
    $190 = $170;
    $191 = $173;
   } else {
    $32 = HEAP32[$30 + 20 >> 2] | 0;
    _ftime($vararg_buffer15 | 0) | 0;
    $37 = (HEAPU16[$10 >> 1] | 0) + ((HEAP32[$vararg_buffer15 >> 2] | 0) * 1e3 | 0) | 0;
    FUNCTION_TABLE_iii[$32 & 31](10, 0) | 0;
    _ftime($vararg_buffer15 | 0) | 0;
    $45 = (HEAPU16[$11 >> 1] | 0) + ((HEAP32[$vararg_buffer15 >> 2] | 0) * 1e3 | 0) | 0;
    $48 = _i64Subtract($45 | 0, (($45 | 0) < 0) << 31 >> 31 | 0, $37 | 0, (($37 | 0) < 0) << 31 >> 31 | 0) | 0;
    $49 = tempRet0;
    $52 = HEAP32[(HEAP32[$21 >> 2] | 0) + 24 >> 2] | 0;
    _ftime($vararg_buffer15 | 0) | 0;
    $57 = (HEAPU16[$12 >> 1] | 0) + ((HEAP32[$vararg_buffer15 >> 2] | 0) * 1e3 | 0) | 0;
    FUNCTION_TABLE_iii[$52 & 31](10, 0) | 0;
    _ftime($vararg_buffer15 | 0) | 0;
    $65 = (HEAPU16[$13 >> 1] | 0) + ((HEAP32[$vararg_buffer15 >> 2] | 0) * 1e3 | 0) | 0;
    $68 = _i64Subtract($65 | 0, (($65 | 0) < 0) << 31 >> 31 | 0, $57 | 0, (($57 | 0) < 0) << 31 >> 31 | 0) | 0;
    $69 = tempRet0;
    $74 = $49 >>> 0 > $69 >>> 0 | ($49 | 0) == ($69 | 0) & $48 >>> 0 > $68 >>> 0;
    $76 = $74 ? $49 : $69;
    if ($76 >>> 0 < 0 | ($76 | 0) == 0 & ($74 ? $48 : $68) >>> 0 < 500) {
     $82 = 10;
     $83 = 0;
     while (1) {
      $84 = _bitshift64Shl($82 | 0, $83 | 0, 1) | 0;
      $85 = tempRet0;
      $88 = HEAP32[(HEAP32[$21 >> 2] | 0) + 20 >> 2] | 0;
      _ftime($vararg_buffer15 | 0) | 0;
      $93 = (HEAPU16[$14 >> 1] | 0) + ((HEAP32[$vararg_buffer15 >> 2] | 0) * 1e3 | 0) | 0;
      FUNCTION_TABLE_iii[$88 & 31]($84, $85) | 0;
      _ftime($vararg_buffer15 | 0) | 0;
      $101 = (HEAPU16[$15 >> 1] | 0) + ((HEAP32[$vararg_buffer15 >> 2] | 0) * 1e3 | 0) | 0;
      $104 = _i64Subtract($101 | 0, (($101 | 0) < 0) << 31 >> 31 | 0, $93 | 0, (($93 | 0) < 0) << 31 >> 31 | 0) | 0;
      $105 = tempRet0;
      $108 = HEAP32[(HEAP32[$21 >> 2] | 0) + 24 >> 2] | 0;
      _ftime($vararg_buffer15 | 0) | 0;
      $113 = (HEAPU16[$16 >> 1] | 0) + ((HEAP32[$vararg_buffer15 >> 2] | 0) * 1e3 | 0) | 0;
      FUNCTION_TABLE_iii[$108 & 31]($84, $85) | 0;
      _ftime($vararg_buffer15 | 0) | 0;
      $121 = (HEAPU16[$17 >> 1] | 0) + ((HEAP32[$vararg_buffer15 >> 2] | 0) * 1e3 | 0) | 0;
      $124 = _i64Subtract($121 | 0, (($121 | 0) < 0) << 31 >> 31 | 0, $113 | 0, (($113 | 0) < 0) << 31 >> 31 | 0) | 0;
      $125 = tempRet0;
      $130 = $105 >>> 0 > $125 >>> 0 | ($105 | 0) == ($125 | 0) & $104 >>> 0 > $124 >>> 0;
      $132 = $130 ? $105 : $125;
      if ($132 >>> 0 < 0 | ($132 | 0) == 0 & ($130 ? $104 : $124) >>> 0 < 500) {
       $82 = $84;
       $83 = $85;
      } else {
       $138 = $82;
       $139 = $83;
       $371 = $124;
       $372 = $125;
       $373 = $104;
       $374 = $105;
       break;
      }
     }
     $140 = ___muldi3($138 | 0, $139 | 0, 2e3, 0) | 0;
     $142 = $374;
     $144 = $372;
     $145 = $373;
     $147 = $371;
     $153 = $140;
     $154 = tempRet0;
    } else {
     $142 = $49;
     $144 = $69;
     $145 = $48;
     $147 = $68;
     $153 = 1e4;
     $154 = 0;
    }
    $150 = $142 >>> 0 > $144 >>> 0 | ($142 | 0) == ($144 | 0) & $145 >>> 0 > $147 >>> 0;
    $155 = ___udivdi3($153 | 0, $154 | 0, ($150 ? $145 : $147) | 0, ($150 ? $142 : $144) | 0) | 0;
    $156 = tempRet0;
    $158 = $21 + 8 | 0;
    HEAP32[$158 >> 2] = $155;
    HEAP32[$158 + 4 >> 2] = $156;
    $163 = $21 + 16 | 0;
    HEAP32[$163 >> 2] = $155;
    HEAP32[$163 + 4 >> 2] = $156;
    $180 = HEAP32[$21 >> 2] | 0;
    $190 = $155;
    $191 = $156;
   }
   $181 = HEAP32[$180 + 20 >> 2] | 0;
   $182 = $21 + 16 | 0;
   _ftime($vararg_buffer15 | 0) | 0;
   $187 = (HEAPU16[$4 >> 1] | 0) + ((HEAP32[$vararg_buffer15 >> 2] | 0) * 1e3 | 0) | 0;
   FUNCTION_TABLE_iii[$181 & 31]($190, $191) | 0;
   _ftime($vararg_buffer15 | 0) | 0;
   $197 = (HEAPU16[$5 >> 1] | 0) + ((HEAP32[$vararg_buffer15 >> 2] | 0) * 1e3 | 0) | 0;
   $200 = _i64Subtract($197 | 0, (($197 | 0) < 0) << 31 >> 31 | 0, $187 | 0, (($187 | 0) < 0) << 31 >> 31 | 0) | 0;
   $203 = $21 + 24 | 0;
   HEAP32[$203 >> 2] = $200;
   HEAP32[$203 + 4 >> 2] = tempRet0;
   $209 = HEAP32[(HEAP32[$21 >> 2] | 0) + 24 >> 2] | 0;
   $210 = $182;
   $212 = HEAP32[$210 >> 2] | 0;
   $215 = HEAP32[$210 + 4 >> 2] | 0;
   _ftime($vararg_buffer15 | 0) | 0;
   $220 = (HEAPU16[$6 >> 1] | 0) + ((HEAP32[$vararg_buffer15 >> 2] | 0) * 1e3 | 0) | 0;
   FUNCTION_TABLE_iii[$209 & 31]($212, $215) | 0;
   _ftime($vararg_buffer15 | 0) | 0;
   $228 = (HEAPU16[$7 >> 1] | 0) + ((HEAP32[$vararg_buffer15 >> 2] | 0) * 1e3 | 0) | 0;
   $231 = _i64Subtract($228 | 0, (($228 | 0) < 0) << 31 >> 31 | 0, $220 | 0, (($220 | 0) < 0) << 31 >> 31 | 0) | 0;
   $234 = $21 + 32 | 0;
   HEAP32[$234 >> 2] = $231;
   HEAP32[$234 + 4 >> 2] = tempRet0;
   $240 = HEAP32[(HEAP32[$21 >> 2] | 0) + 28 >> 2] | 0;
   $241 = $182;
   $243 = HEAP32[$241 >> 2] | 0;
   $246 = HEAP32[$241 + 4 >> 2] | 0;
   _ftime($vararg_buffer15 | 0) | 0;
   $251 = (HEAPU16[$8 >> 1] | 0) + ((HEAP32[$vararg_buffer15 >> 2] | 0) * 1e3 | 0) | 0;
   FUNCTION_TABLE_iii[$240 & 31]($243, $246) | 0;
   _ftime($vararg_buffer15 | 0) | 0;
   $259 = (HEAPU16[$9 >> 1] | 0) + ((HEAP32[$vararg_buffer15 >> 2] | 0) * 1e3 | 0) | 0;
   $262 = _i64Subtract($259 | 0, (($259 | 0) < 0) << 31 >> 31 | 0, $251 | 0, (($251 | 0) < 0) << 31 >> 31 | 0) | 0;
   $265 = $21 + 40 | 0;
   HEAP32[$265 >> 2] = $262;
   HEAP32[$265 + 4 >> 2] = tempRet0;
   if (!(FUNCTION_TABLE_i[HEAP32[(HEAP32[$21 >> 2] | 0) + 16 >> 2] & 3]() | 0)) HEAP8[$21 + 6 >> 0] = 0;
  } else HEAP8[$21 + 5 >> 0] = 0;
  do if (!(HEAP8[$21 + 5 >> 0] | 0)) {
   $277 = HEAP32[$21 >> 2] | 0;
   if (!(HEAP8[$277 >> 0] & 1)) $284 = $277 + 1 | 0; else $284 = HEAP32[$277 + 8 >> 2] | 0;
   HEAP32[$vararg_buffer15 >> 2] = $284;
   HEAP32[$vararg_buffer15 + 4 >> 2] = 104;
   _sprintf($buf$i1, 96, $vararg_buffer15) | 0;
   FUNCTION_TABLE_vi[HEAP32[$18 >> 2] & 127]($buf$i1);
  } else if (!(HEAP8[$21 + 6 >> 0] | 0)) {
   $289 = HEAP32[$21 >> 2] | 0;
   if (!(HEAP8[$289 >> 0] & 1)) $296 = $289 + 1 | 0; else $296 = HEAP32[$289 + 8 >> 2] | 0;
   HEAP32[$vararg_buffer15 >> 2] = $296;
   HEAP32[$vararg_buffer15 + 4 >> 2] = 120;
   _sprintf($buf$i1, 96, $vararg_buffer15) | 0;
   FUNCTION_TABLE_vi[HEAP32[$18 >> 2] & 127]($buf$i1);
   break;
  } else {
   $299 = $21 + 32 | 0;
   $301 = HEAP32[$299 >> 2] | 0;
   $304 = HEAP32[$299 + 4 >> 2] | 0;
   $307 = $21 + 24 | 0;
   $309 = HEAP32[$307 >> 2] | 0;
   $312 = HEAP32[$307 + 4 >> 2] | 0;
   $313 = +($309 >>> 0) + 4294967296.0 * +($312 >>> 0);
   $316 = $21 + 40 | 0;
   $318 = HEAP32[$316 >> 2] | 0;
   $321 = HEAP32[$316 + 4 >> 2] | 0;
   $324 = HEAP32[$outputFunctions >> 2] | 0;
   $325 = HEAP32[$21 >> 2] | 0;
   if (!(HEAP8[$325 >> 0] & 1)) $351 = $325 + 1 | 0; else $351 = HEAP32[$325 + 8 >> 2] | 0;
   $333 = $21 + 16 | 0;
   $335 = HEAP32[$333 >> 2] | 0;
   $338 = HEAP32[$333 + 4 >> 2] | 0;
   $339 = ___muldi3($301 | 0, $304 | 0, 1e6, 0) | 0;
   $341 = ___udivdi3($339 | 0, tempRet0 | 0, $335 | 0, $338 | 0) | 0;
   $342 = tempRet0;
   $343 = ___muldi3($318 | 0, $321 | 0, 1e6, 0) | 0;
   $345 = ___udivdi3($343 | 0, tempRet0 | 0, $335 | 0, $338 | 0) | 0;
   $346 = tempRet0;
   $347 = ___muldi3($309 | 0, $312 | 0, 1e6, 0) | 0;
   $349 = ___udivdi3($347 | 0, tempRet0 | 0, $335 | 0, $338 | 0) | 0;
   HEAP32[$vararg_buffer15 >> 2] = $351;
   $352 = $vararg_buffer15 + 4 | 0;
   HEAP32[$352 >> 2] = $335;
   HEAP32[$352 + 4 >> 2] = $338;
   $356 = $vararg_buffer15 + 12 | 0;
   HEAP32[$356 >> 2] = $341;
   HEAP32[$356 + 4 >> 2] = $342;
   $360 = $vararg_buffer15 + 20 | 0;
   HEAP32[$360 >> 2] = $345;
   HEAP32[$360 + 4 >> 2] = $346;
   $364 = $vararg_buffer15 + 28 | 0;
   HEAP32[$364 >> 2] = $349;
   HEAP32[$364 + 4 >> 2] = tempRet0;
   $vararg_ptr22 = $vararg_buffer15 + 36 | 0;
   HEAPF64[tempDoublePtr >> 3] = (+($301 >>> 0) + 4294967296.0 * +($304 >>> 0)) / $313;
   HEAP32[$vararg_ptr22 >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[$vararg_ptr22 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   $vararg_ptr23 = $vararg_buffer15 + 44 | 0;
   HEAPF64[tempDoublePtr >> 3] = (+($318 >>> 0) + 4294967296.0 * +($321 >>> 0)) / $313;
   HEAP32[$vararg_ptr23 >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[$vararg_ptr23 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   _sprintf($buf$i, 136, $vararg_buffer15) | 0;
   FUNCTION_TABLE_vi[$324 & 127]($buf$i);
   break;
  } while (0);
  $20 = HEAP32[$20 + 4 >> 2] | 0;
 } while (($20 | 0) != 80);
 STACKTOP = sp;
 return;
}

function ___intscan($f, $base, $pok, $0, $1) {
 $f = $f | 0;
 $base = $base | 0;
 $pok = $pok | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$1 = 0, $$124 = 0, $$125 = 0, $$base21 = 0, $$lcssa = 0, $$lcssa109 = 0, $$lcssa110 = 0, $$lcssa111 = 0, $$lcssa112 = 0, $$lcssa113 = 0, $$lcssa114 = 0, $100 = 0, $107 = 0, $119 = 0, $120 = 0, $127 = 0, $129 = 0, $13 = 0, $130 = 0, $133 = 0, $134 = 0, $135 = 0, $143 = 0, $147 = 0, $148 = 0, $150 = 0, $152 = 0, $154 = 0, $159 = 0, $160 = 0, $161 = 0, $162 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $183 = 0, $184 = 0, $185 = 0, $193 = 0, $198 = 0, $200 = 0, $201 = 0, $202 = 0, $204 = 0, $209 = 0, $210 = 0, $211 = 0, $212 = 0, $219 = 0, $220 = 0, $221 = 0, $236 = 0, $25 = 0, $252 = 0, $254 = 0, $265 = 0, $274 = 0, $277 = 0, $279 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $29 = 0, $3 = 0, $37 = 0, $39 = 0, $4 = 0, $46 = 0, $51 = 0, $6 = 0, $67 = 0, $70 = 0, $71 = 0, $72 = 0, $82 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $90 = 0, $92 = 0, $98 = 0, $99 = 0, $c$0 = 0, $c$1 = 0, $c$126 = 0, $c$2$be = 0, $c$2$be$lcssa = 0, $c$2$lcssa = 0, $c$3$be = 0, $c$3$lcssa = 0, $c$373 = 0, $c$4$be = 0, $c$4$be$lcssa = 0, $c$4$lcssa = 0, $c$5$be = 0, $c$6$be = 0, $c$6$be$lcssa = 0, $c$6$lcssa = 0, $c$7$be = 0, $c$755 = 0, $c$8 = 0, $c$9$be = 0, $neg$0 = 0, $x$084 = 0, $x$148 = 0, $x$268 = 0, label = 0;
 if ($base >>> 0 > 36) {
  HEAP32[(___errno_location() | 0) >> 2] = 22;
  $279 = 0;
  $280 = 0;
  tempRet0 = $279;
  return $280 | 0;
 }
 $3 = $f + 4 | 0;
 $4 = $f + 100 | 0;
 do {
  $6 = HEAP32[$3 >> 2] | 0;
  if ($6 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
   HEAP32[$3 >> 2] = $6 + 1;
   $13 = HEAPU8[$6 >> 0] | 0;
  } else $13 = ___shgetc($f) | 0;
 } while ((_isspace($13) | 0) != 0);
 $$lcssa114 = $13;
 do if (($$lcssa114 | 0) == 43 | ($$lcssa114 | 0) == 45) {
  $17 = (($$lcssa114 | 0) == 45) << 31 >> 31;
  $18 = HEAP32[$3 >> 2] | 0;
  if ($18 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
   HEAP32[$3 >> 2] = $18 + 1;
   $c$0 = HEAPU8[$18 >> 0] | 0;
   $neg$0 = $17;
   break;
  } else {
   $c$0 = ___shgetc($f) | 0;
   $neg$0 = $17;
   break;
  }
 } else {
  $c$0 = $$lcssa114;
  $neg$0 = 0;
 } while (0);
 $25 = ($base | 0) == 0;
 do if (($base & -17 | 0) == 0 & ($c$0 | 0) == 48) {
  $29 = HEAP32[$3 >> 2] | 0;
  if ($29 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
   HEAP32[$3 >> 2] = $29 + 1;
   $37 = HEAPU8[$29 >> 0] | 0;
  } else $37 = ___shgetc($f) | 0;
  if (($37 | 32 | 0) != 120) if ($25) {
   $$125 = 8;
   $c$126 = $37;
   label = 46;
   break;
  } else {
   $$1 = $base;
   $c$1 = $37;
   label = 32;
   break;
  }
  $39 = HEAP32[$3 >> 2] | 0;
  if ($39 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
   HEAP32[$3 >> 2] = $39 + 1;
   $46 = HEAPU8[$39 >> 0] | 0;
  } else $46 = ___shgetc($f) | 0;
  if ((HEAPU8[$46 + 14529 >> 0] | 0) > 15) {
   $51 = (HEAP32[$4 >> 2] | 0) == 0;
   if (!$51) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
   if (!$pok) {
    ___shlim($f, 0);
    $279 = 0;
    $280 = 0;
    tempRet0 = $279;
    return $280 | 0;
   }
   if ($51) {
    $279 = 0;
    $280 = 0;
    tempRet0 = $279;
    return $280 | 0;
   }
   HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
   $279 = 0;
   $280 = 0;
   tempRet0 = $279;
   return $280 | 0;
  } else {
   $$125 = 16;
   $c$126 = $46;
   label = 46;
  }
 } else {
  $$base21 = $25 ? 10 : $base;
  if ((HEAPU8[$c$0 + 14529 >> 0] | 0) >>> 0 < $$base21 >>> 0) {
   $$1 = $$base21;
   $c$1 = $c$0;
   label = 32;
  } else {
   if (HEAP32[$4 >> 2] | 0) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
   ___shlim($f, 0);
   HEAP32[(___errno_location() | 0) >> 2] = 22;
   $279 = 0;
   $280 = 0;
   tempRet0 = $279;
   return $280 | 0;
  }
 } while (0);
 if ((label | 0) == 32) if (($$1 | 0) == 10) {
  $67 = $c$1 + -48 | 0;
  if ($67 >>> 0 < 10) {
   $71 = $67;
   $x$084 = 0;
   while (1) {
    $70 = ($x$084 * 10 | 0) + $71 | 0;
    $72 = HEAP32[$3 >> 2] | 0;
    if ($72 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $72 + 1;
     $c$2$be = HEAPU8[$72 >> 0] | 0;
    } else $c$2$be = ___shgetc($f) | 0;
    $71 = $c$2$be + -48 | 0;
    if (!($71 >>> 0 < 10 & $70 >>> 0 < 429496729)) {
     $$lcssa113 = $70;
     $c$2$be$lcssa = $c$2$be;
     break;
    } else $x$084 = $70;
   }
   $281 = $$lcssa113;
   $282 = 0;
   $c$2$lcssa = $c$2$be$lcssa;
  } else {
   $281 = 0;
   $282 = 0;
   $c$2$lcssa = $c$1;
  }
  $82 = $c$2$lcssa + -48 | 0;
  if ($82 >>> 0 < 10) {
   $84 = $281;
   $85 = $282;
   $88 = $82;
   $c$373 = $c$2$lcssa;
   while (1) {
    $86 = ___muldi3($84 | 0, $85 | 0, 10, 0) | 0;
    $87 = tempRet0;
    $90 = (($88 | 0) < 0) << 31 >> 31;
    $92 = ~$90;
    if ($87 >>> 0 > $92 >>> 0 | ($87 | 0) == ($92 | 0) & $86 >>> 0 > ~$88 >>> 0) {
     $$lcssa = $88;
     $283 = $84;
     $284 = $85;
     $c$3$lcssa = $c$373;
     break;
    }
    $98 = _i64Add($86 | 0, $87 | 0, $88 | 0, $90 | 0) | 0;
    $99 = tempRet0;
    $100 = HEAP32[$3 >> 2] | 0;
    if ($100 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $100 + 1;
     $c$3$be = HEAPU8[$100 >> 0] | 0;
    } else $c$3$be = ___shgetc($f) | 0;
    $107 = $c$3$be + -48 | 0;
    if ($107 >>> 0 < 10 & ($99 >>> 0 < 429496729 | ($99 | 0) == 429496729 & $98 >>> 0 < 2576980378)) {
     $84 = $98;
     $85 = $99;
     $88 = $107;
     $c$373 = $c$3$be;
    } else {
     $$lcssa = $107;
     $283 = $98;
     $284 = $99;
     $c$3$lcssa = $c$3$be;
     break;
    }
   }
   if ($$lcssa >>> 0 > 9) {
    $252 = $284;
    $254 = $283;
   } else {
    $$124 = 10;
    $285 = $283;
    $286 = $284;
    $c$8 = $c$3$lcssa;
    label = 72;
   }
  } else {
   $252 = $282;
   $254 = $281;
  }
 } else {
  $$125 = $$1;
  $c$126 = $c$1;
  label = 46;
 }
 L69 : do if ((label | 0) == 46) {
  if (!($$125 + -1 & $$125)) {
   $127 = HEAP8[14792 + (($$125 * 23 | 0) >>> 5 & 7) >> 0] | 0;
   $129 = HEAP8[$c$126 + 14529 >> 0] | 0;
   $130 = $129 & 255;
   if ($130 >>> 0 < $$125 >>> 0) {
    $134 = $130;
    $x$148 = 0;
    while (1) {
     $133 = $134 | $x$148 << $127;
     $135 = HEAP32[$3 >> 2] | 0;
     if ($135 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
      HEAP32[$3 >> 2] = $135 + 1;
      $c$4$be = HEAPU8[$135 >> 0] | 0;
     } else $c$4$be = ___shgetc($f) | 0;
     $143 = HEAP8[$c$4$be + 14529 >> 0] | 0;
     $134 = $143 & 255;
     if (!($134 >>> 0 < $$125 >>> 0 & $133 >>> 0 < 134217728)) {
      $$lcssa109 = $133;
      $$lcssa110 = $143;
      $c$4$be$lcssa = $c$4$be;
      break;
     } else $x$148 = $133;
    }
    $150 = $$lcssa110;
    $152 = 0;
    $154 = $$lcssa109;
    $c$4$lcssa = $c$4$be$lcssa;
   } else {
    $150 = $129;
    $152 = 0;
    $154 = 0;
    $c$4$lcssa = $c$126;
   }
   $147 = _bitshift64Lshr(-1, -1, $127 | 0) | 0;
   $148 = tempRet0;
   if (($150 & 255) >>> 0 >= $$125 >>> 0 | ($152 >>> 0 > $148 >>> 0 | ($152 | 0) == ($148 | 0) & $154 >>> 0 > $147 >>> 0)) {
    $$124 = $$125;
    $285 = $154;
    $286 = $152;
    $c$8 = $c$4$lcssa;
    label = 72;
    break;
   } else {
    $159 = $154;
    $160 = $152;
    $164 = $150;
   }
   while (1) {
    $161 = _bitshift64Shl($159 | 0, $160 | 0, $127 | 0) | 0;
    $162 = tempRet0;
    $165 = $164 & 255 | $161;
    $166 = HEAP32[$3 >> 2] | 0;
    if ($166 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $166 + 1;
     $c$5$be = HEAPU8[$166 >> 0] | 0;
    } else $c$5$be = ___shgetc($f) | 0;
    $164 = HEAP8[$c$5$be + 14529 >> 0] | 0;
    if (($164 & 255) >>> 0 >= $$125 >>> 0 | ($162 >>> 0 > $148 >>> 0 | ($162 | 0) == ($148 | 0) & $165 >>> 0 > $147 >>> 0)) {
     $$124 = $$125;
     $285 = $165;
     $286 = $162;
     $c$8 = $c$5$be;
     label = 72;
     break L69;
    } else {
     $159 = $165;
     $160 = $162;
    }
   }
  }
  $119 = HEAP8[$c$126 + 14529 >> 0] | 0;
  $120 = $119 & 255;
  if ($120 >>> 0 < $$125 >>> 0) {
   $184 = $120;
   $x$268 = 0;
   while (1) {
    $183 = $184 + (Math_imul($x$268, $$125) | 0) | 0;
    $185 = HEAP32[$3 >> 2] | 0;
    if ($185 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $185 + 1;
     $c$6$be = HEAPU8[$185 >> 0] | 0;
    } else $c$6$be = ___shgetc($f) | 0;
    $193 = HEAP8[$c$6$be + 14529 >> 0] | 0;
    $184 = $193 & 255;
    if (!($184 >>> 0 < $$125 >>> 0 & $183 >>> 0 < 119304647)) {
     $$lcssa111 = $183;
     $$lcssa112 = $193;
     $c$6$be$lcssa = $c$6$be;
     break;
    } else $x$268 = $183;
   }
   $198 = $$lcssa112;
   $287 = $$lcssa111;
   $288 = 0;
   $c$6$lcssa = $c$6$be$lcssa;
  } else {
   $198 = $119;
   $287 = 0;
   $288 = 0;
   $c$6$lcssa = $c$126;
  }
  if (($198 & 255) >>> 0 < $$125 >>> 0) {
   $200 = ___udivdi3(-1, -1, $$125 | 0, 0) | 0;
   $201 = tempRet0;
   $202 = $288;
   $204 = $287;
   $212 = $198;
   $c$755 = $c$6$lcssa;
   while (1) {
    if ($202 >>> 0 > $201 >>> 0 | ($202 | 0) == ($201 | 0) & $204 >>> 0 > $200 >>> 0) {
     $$124 = $$125;
     $285 = $204;
     $286 = $202;
     $c$8 = $c$755;
     label = 72;
     break L69;
    }
    $209 = ___muldi3($204 | 0, $202 | 0, $$125 | 0, 0) | 0;
    $210 = tempRet0;
    $211 = $212 & 255;
    if ($210 >>> 0 > 4294967295 | ($210 | 0) == -1 & $209 >>> 0 > ~$211 >>> 0) {
     $$124 = $$125;
     $285 = $204;
     $286 = $202;
     $c$8 = $c$755;
     label = 72;
     break L69;
    }
    $219 = _i64Add($211 | 0, 0, $209 | 0, $210 | 0) | 0;
    $220 = tempRet0;
    $221 = HEAP32[$3 >> 2] | 0;
    if ($221 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
     HEAP32[$3 >> 2] = $221 + 1;
     $c$7$be = HEAPU8[$221 >> 0] | 0;
    } else $c$7$be = ___shgetc($f) | 0;
    $212 = HEAP8[$c$7$be + 14529 >> 0] | 0;
    if (($212 & 255) >>> 0 >= $$125 >>> 0) {
     $$124 = $$125;
     $285 = $219;
     $286 = $220;
     $c$8 = $c$7$be;
     label = 72;
     break;
    } else {
     $202 = $220;
     $204 = $219;
     $c$755 = $c$7$be;
    }
   }
  } else {
   $$124 = $$125;
   $285 = $287;
   $286 = $288;
   $c$8 = $c$6$lcssa;
   label = 72;
  }
 } while (0);
 if ((label | 0) == 72) if ((HEAPU8[$c$8 + 14529 >> 0] | 0) >>> 0 < $$124 >>> 0) {
  do {
   $236 = HEAP32[$3 >> 2] | 0;
   if ($236 >>> 0 < (HEAP32[$4 >> 2] | 0) >>> 0) {
    HEAP32[$3 >> 2] = $236 + 1;
    $c$9$be = HEAPU8[$236 >> 0] | 0;
   } else $c$9$be = ___shgetc($f) | 0;
  } while ((HEAPU8[$c$9$be + 14529 >> 0] | 0) >>> 0 < $$124 >>> 0);
  HEAP32[(___errno_location() | 0) >> 2] = 34;
  $252 = $1;
  $254 = $0;
 } else {
  $252 = $286;
  $254 = $285;
 }
 if (HEAP32[$4 >> 2] | 0) HEAP32[$3 >> 2] = (HEAP32[$3 >> 2] | 0) + -1;
 if (!($252 >>> 0 < $1 >>> 0 | ($252 | 0) == ($1 | 0) & $254 >>> 0 < $0 >>> 0)) {
  if (!(($0 & 1 | 0) != 0 | 0 != 0 | ($neg$0 | 0) != 0)) {
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $265 = _i64Add($0 | 0, $1 | 0, -1, -1) | 0;
   $279 = tempRet0;
   $280 = $265;
   tempRet0 = $279;
   return $280 | 0;
  }
  if ($252 >>> 0 > $1 >>> 0 | ($252 | 0) == ($1 | 0) & $254 >>> 0 > $0 >>> 0) {
   HEAP32[(___errno_location() | 0) >> 2] = 34;
   $279 = $1;
   $280 = $0;
   tempRet0 = $279;
   return $280 | 0;
  }
 }
 $274 = (($neg$0 | 0) < 0) << 31 >> 31;
 $277 = _i64Subtract($254 ^ $neg$0 | 0, $252 ^ $274 | 0, $neg$0 | 0, $274 | 0) | 0;
 $279 = tempRet0;
 $280 = $277;
 tempRet0 = $279;
 return $280 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm, $__fmtb, $__fmte) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmtb = $__fmtb | 0;
 $__fmte = $__fmte | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i19 = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$0$i$i1$i$i25 = 0, $$0$i$i16 = 0, $$0$ph$be = 0, $$0$ph45 = 0, $$0$pn = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre$i$i$i21 = 0, $$pre$i$i$i50 = 0, $$pre$i$i$i50$lcssa = 0, $$pre$i$i$i50$lcssa59 = 0, $$pre$i$i$i50$lcssa60 = 0, $$pre$i$i$i50$lcssa61 = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i12 = 0, $$pre$i3$i$i1247 = 0, $$pre$i3$i$i1248 = 0, $$pre$pre54 = 0, $$pre$pre55 = 0, $$pre$pre56 = 0, $$pre46 = 0, $0 = 0, $1 = 0, $100 = 0, $101 = 0, $102 = 0, $114 = 0, $121 = 0, $122 = 0, $123 = 0, $134 = 0, $141 = 0, $151 = 0, $161 = 0, $164 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $19 = 0, $2 = 0, $22 = 0, $3 = 0, $38 = 0, $4 = 0, $44 = 0, $45 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $75 = 0, $85 = 0, $88 = 0, $9 = 0, $98 = 0, $99 = 0, $__cmd$0 = 0, $__opt$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy1 = sp + 20 | 0;
 $$byval_copy = sp + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 $4 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 4896) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$__err >> 2] = 0;
 L1 : do if (($__fmtb | 0) == ($__fmte | 0)) $$pre$i$i$i21 = HEAP32[$__b >> 2] | 0; else {
  $$0$ph45 = $__fmtb;
  L4 : while (1) {
   $$pre46 = HEAP32[$__b >> 2] | 0;
   do if (!$$pre46) {
    $$pre$i$i$i50 = 0;
    $177 = 1;
   } else {
    $9 = HEAP32[$$pre46 + 12 >> 2] | 0;
    if (($9 | 0) == (HEAP32[$$pre46 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre46 >> 2] | 0) + 36 >> 2] & 63]($$pre46) | 0; else $$0$i$i$i$i = HEAP32[$9 >> 2] | 0;
    if (($$0$i$i$i$i | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $$pre$i$i$i50 = 0;
     $177 = 1;
     break;
    } else {
     $$pre$i$i$i50 = $$pre46;
     $177 = ($$pre46 | 0) == 0;
     break;
    }
   } while (0);
   $19 = HEAP32[$__e >> 2] | 0;
   do if (!$19) label = 17; else {
    $22 = HEAP32[$19 + 12 >> 2] | 0;
    if (($22 | 0) == (HEAP32[$19 + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$19 >> 2] | 0) + 36 >> 2] & 63]($19) | 0; else $$0$i$i1$i$i = HEAP32[$22 >> 2] | 0;
    if (($$0$i$i1$i$i | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 17;
     break;
    } else if ($177) {
     $55 = $19;
     break;
    } else {
     $$pre$i$i$i50$lcssa = $$pre$i$i$i50;
     label = 19;
     break L4;
    }
   } while (0);
   if ((label | 0) == 17) {
    label = 0;
    if ($177) {
     $$pre$i$i$i50$lcssa = $$pre$i$i$i50;
     label = 19;
     break;
    } else $55 = 0;
   }
   L28 : do if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 52 >> 2] & 31]($4, HEAP32[$$0$ph45 >> 2] | 0, 0) | 0) << 24 >> 24 == 37) {
    $38 = $$0$ph45 + 4 | 0;
    if (($38 | 0) == ($__fmte | 0)) {
     $$pre$i$i$i50$lcssa60 = $$pre$i$i$i50;
     label = 22;
     break L4;
    }
    $44 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 52 >> 2] & 31]($4, HEAP32[$38 >> 2] | 0, 0) | 0;
    if ($44 << 24 >> 24 == 48 | $44 << 24 >> 24 == 69) {
     $45 = $$0$ph45 + 8 | 0;
     if (($45 | 0) == ($__fmte | 0)) {
      $$pre$i$i$i50$lcssa61 = $$pre$i$i$i50;
      label = 25;
      break L4;
     }
     $58 = $38;
     $__cmd$0 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 52 >> 2] & 31]($4, HEAP32[$45 >> 2] | 0, 0) | 0;
     $__opt$0 = $44;
    } else {
     $58 = $$0$ph45;
     $__cmd$0 = $44;
     $__opt$0 = 0;
    }
    $54 = HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] | 0;
    HEAP32[$2 >> 2] = $$pre$i$i$i50;
    HEAP32[$3 >> 2] = $55;
    HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$2 + 0 >> 2];
    HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$3 + 0 >> 2];
    FUNCTION_TABLE_viiiiiiiii[$54 & 3]($1, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, $__cmd$0, $__opt$0);
    $56 = HEAP32[$1 >> 2] | 0;
    HEAP32[$__b >> 2] = $56;
    $$0$ph$be = $58 + 8 | 0;
    $$pre$pre54 = $56;
   } else {
    if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 31]($4, 8192, HEAP32[$$0$ph45 >> 2] | 0) | 0) $$0$pn = $$0$ph45; else {
     $121 = $$pre$i$i$i50 + 12 | 0;
     $122 = HEAP32[$121 >> 2] | 0;
     $123 = $$pre$i$i$i50 + 16 | 0;
     if (($122 | 0) == (HEAP32[$123 >> 2] | 0)) $$0$i$i16 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i50 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i50) | 0; else $$0$i$i16 = HEAP32[$122 >> 2] | 0;
     $134 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] & 31]($4, $$0$i$i16) | 0;
     if (($134 | 0) != (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] & 31]($4, HEAP32[$$0$ph45 >> 2] | 0) | 0)) {
      $$pre$i$i$i50$lcssa59 = $$pre$i$i$i50;
      label = 62;
      break L4;
     }
     $141 = HEAP32[$121 >> 2] | 0;
     if (($141 | 0) == (HEAP32[$123 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i50 >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i50) | 0; else HEAP32[$121 >> 2] = $141 + 4;
     $$0$ph$be = $$0$ph45 + 4 | 0;
     $$pre$pre54 = $$pre$i$i$i50;
     break;
    }
    while (1) {
     $$2 = $$0$pn + 4 | 0;
     if (($$2 | 0) == ($__fmte | 0)) {
      $$2$lcssa = $__fmte;
      break;
     }
     if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 31]($4, 8192, HEAP32[$$2 >> 2] | 0) | 0) $$0$pn = $$2; else {
      $$2$lcssa = $$2;
      break;
     }
    }
    $$pre$i$i$i6 = $$pre$i$i$i50;
    $$pre$i3$i$i12 = $55;
    $$pre$pre56 = $$pre$i$i$i50;
    $85 = $55;
    while (1) {
     if (!$$pre$i$i$i6) {
      $$pre$pre55 = $$pre$pre56;
      $100 = 0;
      $98 = 1;
     } else {
      $75 = HEAP32[$$pre$i$i$i6 + 12 >> 2] | 0;
      if (($75 | 0) == (HEAP32[$$pre$i$i$i6 + 16 >> 2] | 0)) $$0$i$i$i$i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i6 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i6) | 0; else $$0$i$i$i$i4 = HEAP32[$75 >> 2] | 0;
      if (($$0$i$i$i$i4 | 0) == -1) {
       HEAP32[$__b >> 2] = 0;
       $$pre$pre55 = 0;
       $100 = 0;
       $98 = 1;
      } else {
       $$pre$pre55 = $$pre$pre56;
       $100 = $$pre$i$i$i6;
       $98 = 0;
      }
     }
     do if (!$85) {
      $$pre$i3$i$i1248 = $$pre$i3$i$i12;
      label = 45;
     } else {
      $88 = HEAP32[$85 + 12 >> 2] | 0;
      if (($88 | 0) == (HEAP32[$85 + 16 >> 2] | 0)) $$0$i$i1$i$i10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$85 >> 2] | 0) + 36 >> 2] & 63]($85) | 0; else $$0$i$i1$i$i10 = HEAP32[$88 >> 2] | 0;
      if (($$0$i$i1$i$i10 | 0) == -1) {
       HEAP32[$__e >> 2] = 0;
       $$pre$i3$i$i1248 = 0;
       label = 45;
       break;
      } else if ($98 ^ ($$pre$i3$i$i12 | 0) == 0) {
       $$pre$i3$i$i1247 = $$pre$i3$i$i12;
       $178 = $$pre$i3$i$i12;
       break;
      } else {
       $$0$ph$be = $$2$lcssa;
       $$pre$pre54 = $$pre$pre55;
       break L28;
      }
     } while (0);
     if ((label | 0) == 45) {
      label = 0;
      if ($98) {
       $$0$ph$be = $$2$lcssa;
       $$pre$pre54 = $$pre$pre55;
       break L28;
      } else {
       $$pre$i3$i$i1247 = $$pre$i3$i$i1248;
       $178 = 0;
      }
     }
     $99 = $100 + 12 | 0;
     $101 = HEAP32[$99 >> 2] | 0;
     $102 = $100 + 16 | 0;
     if (($101 | 0) == (HEAP32[$102 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$100 >> 2] | 0) + 36 >> 2] & 63]($100) | 0; else $$0$i$i = HEAP32[$101 >> 2] | 0;
     if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 31]($4, 8192, $$0$i$i) | 0)) {
      $$0$ph$be = $$2$lcssa;
      $$pre$pre54 = $$pre$pre55;
      break L28;
     }
     $114 = HEAP32[$99 >> 2] | 0;
     if (($114 | 0) == (HEAP32[$102 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$100 >> 2] | 0) + 40 >> 2] & 63]($100) | 0;
      $$pre$i$i$i6 = $100;
      $$pre$i3$i$i12 = $$pre$i3$i$i1247;
      $$pre$pre56 = $$pre$pre55;
      $85 = $178;
      continue;
     } else {
      HEAP32[$99 >> 2] = $114 + 4;
      $$pre$i$i$i6 = $100;
      $$pre$i3$i$i12 = $$pre$i3$i$i1247;
      $$pre$pre56 = $$pre$pre55;
      $85 = $178;
      continue;
     }
    }
   } while (0);
   if (($$0$ph$be | 0) != ($__fmte | 0) & (HEAP32[$__err >> 2] | 0) == 0) $$0$ph45 = $$0$ph$be; else {
    $$pre$i$i$i21 = $$pre$pre54;
    break L1;
   }
  }
  if ((label | 0) == 19) {
   HEAP32[$__err >> 2] = 4;
   $$pre$i$i$i21 = $$pre$i$i$i50$lcssa;
   break;
  } else if ((label | 0) == 22) {
   HEAP32[$__err >> 2] = 4;
   $$pre$i$i$i21 = $$pre$i$i$i50$lcssa60;
   break;
  } else if ((label | 0) == 25) {
   HEAP32[$__err >> 2] = 4;
   $$pre$i$i$i21 = $$pre$i$i$i50$lcssa61;
   break;
  } else if ((label | 0) == 62) {
   HEAP32[$__err >> 2] = 4;
   $$pre$i$i$i21 = $$pre$i$i$i50$lcssa59;
   break;
  }
 } while (0);
 if (!$$pre$i$i$i21) {
  $176 = 0;
  $179 = 1;
 } else {
  $151 = HEAP32[$$pre$i$i$i21 + 12 >> 2] | 0;
  if (($151 | 0) == (HEAP32[$$pre$i$i$i21 + 16 >> 2] | 0)) $$0$i$i$i$i19 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i21 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i21) | 0; else $$0$i$i$i$i19 = HEAP32[$151 >> 2] | 0;
  if (($$0$i$i$i$i19 | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $176 = 0;
   $179 = 1;
  } else {
   $176 = $$pre$i$i$i21;
   $179 = 0;
  }
 }
 $161 = HEAP32[$__e >> 2] | 0;
 do if (!$161) label = 75; else {
  $164 = HEAP32[$161 + 12 >> 2] | 0;
  if (($164 | 0) == (HEAP32[$161 + 16 >> 2] | 0)) $$0$i$i1$i$i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$161 >> 2] | 0) + 36 >> 2] & 63]($161) | 0; else $$0$i$i1$i$i25 = HEAP32[$164 >> 2] | 0;
  if (($$0$i$i1$i$i25 | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 75;
   break;
  } else if ($179) break; else {
   label = 77;
   break;
  }
 } while (0);
 if ((label | 0) == 75) if ($179) label = 77;
 if ((label | 0) == 77) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $176;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm, $__fmtb, $__fmte) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 $__fmtb = $__fmtb | 0;
 $__fmte = $__fmte | 0;
 var $$0$i$i = 0, $$0$i$i25 = 0, $$0$ph$be = 0, $$0$ph40 = 0, $$0$pn = 0, $$2 = 0, $$2$lcssa = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$pre$i$i$i16 = 0, $$pre$i$i$i45 = 0, $$pre$i$i$i45$lcssa = 0, $$pre$i$i$i45$lcssa54 = 0, $$pre$i$i$i45$lcssa55 = 0, $$pre$i$i$i45$lcssa56 = 0, $$pre$i$i$i7 = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i2042 = 0, $$pre$i2$i$i2043 = 0, $$pre$pre49 = 0, $$pre$pre50 = 0, $$pre$pre51 = 0, $$pre41 = 0, $0 = 0, $1 = 0, $102 = 0, $103 = 0, $104 = 0, $120 = 0, $127 = 0, $128 = 0, $129 = 0, $142 = 0, $149 = 0, $168 = 0, $169 = 0, $170 = 0, $184 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $38 = 0, $4 = 0, $44 = 0, $45 = 0, $54 = 0, $55 = 0, $56 = 0, $58 = 0, $62 = 0, $64 = 0, $7 = 0, $70 = 0, $87 = 0, $88 = 0, $89 = 0, $__cmd$0 = 0, $__opt$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy1 = sp + 20 | 0;
 $$byval_copy = sp + 16 | 0;
 $0 = sp + 12 | 0;
 $1 = sp + 8 | 0;
 $2 = sp + 4 | 0;
 $3 = sp;
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 $4 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 4904) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$__err >> 2] = 0;
 L1 : do if (($__fmtb | 0) == ($__fmte | 0)) $$pre$i$i$i7 = HEAP32[$__b >> 2] | 0; else {
  $7 = $4 + 8 | 0;
  $$0$ph40 = $__fmtb;
  L4 : while (1) {
   $$pre41 = HEAP32[$__b >> 2] | 0;
   if (!$$pre41) $$pre$i$i$i45 = 0; else if ((HEAP32[$$pre41 + 12 >> 2] | 0) == (HEAP32[$$pre41 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre41 >> 2] | 0) + 36 >> 2] & 63]($$pre41) | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $$pre$i$i$i45 = 0;
   } else $$pre$i$i$i45 = $$pre41; else $$pre$i$i$i45 = $$pre41;
   $19 = ($$pre$i$i$i45 | 0) == 0;
   $20 = HEAP32[$__e >> 2] | 0;
   do if (!$20) label = 13; else {
    if ((HEAP32[$20 + 12 >> 2] | 0) == (HEAP32[$20 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$20 >> 2] | 0) + 36 >> 2] & 63]($20) | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     label = 13;
     break;
    }
    if ($19) $55 = $20; else {
     $$pre$i$i$i45$lcssa = $$pre$i$i$i45;
     label = 14;
     break L4;
    }
   } while (0);
   if ((label | 0) == 13) {
    label = 0;
    if ($19) {
     $$pre$i$i$i45$lcssa = $$pre$i$i$i45;
     label = 14;
     break;
    } else $55 = 0;
   }
   L20 : do if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 31]($4, HEAP8[$$0$ph40 >> 0] | 0, 0) | 0) << 24 >> 24 == 37) {
    $38 = $$0$ph40 + 1 | 0;
    if (($38 | 0) == ($__fmte | 0)) {
     $$pre$i$i$i45$lcssa55 = $$pre$i$i$i45;
     label = 17;
     break L4;
    }
    $44 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 31]($4, HEAP8[$38 >> 0] | 0, 0) | 0;
    if ($44 << 24 >> 24 == 48 | $44 << 24 >> 24 == 69) {
     $45 = $$0$ph40 + 2 | 0;
     if (($45 | 0) == ($__fmte | 0)) {
      $$pre$i$i$i45$lcssa56 = $$pre$i$i$i45;
      label = 20;
      break L4;
     }
     $58 = $38;
     $__cmd$0 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 31]($4, HEAP8[$45 >> 0] | 0, 0) | 0;
     $__opt$0 = $44;
    } else {
     $58 = $$0$ph40;
     $__cmd$0 = $44;
     $__opt$0 = 0;
    }
    $54 = HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] | 0;
    HEAP32[$2 >> 2] = $$pre$i$i$i45;
    HEAP32[$3 >> 2] = $55;
    HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$2 + 0 >> 2];
    HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$3 + 0 >> 2];
    FUNCTION_TABLE_viiiiiiiii[$54 & 3]($1, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, $__cmd$0, $__opt$0);
    $56 = HEAP32[$1 >> 2] | 0;
    HEAP32[$__b >> 2] = $56;
    $$0$ph$be = $58 + 2 | 0;
    $$pre$pre49 = $56;
   } else {
    $62 = HEAP8[$$0$ph40 >> 0] | 0;
    if ($62 << 24 >> 24 > -1) {
     $64 = HEAP32[$7 >> 2] | 0;
     if (HEAP16[$64 + ($62 << 24 >> 24 << 1) >> 1] & 8192) {
      $$0$pn = $$0$ph40;
      while (1) {
       $$2 = $$0$pn + 1 | 0;
       if (($$2 | 0) == ($__fmte | 0)) {
        $$2$lcssa = $__fmte;
        break;
       }
       $70 = HEAP8[$$2 >> 0] | 0;
       if ($70 << 24 >> 24 <= -1) {
        $$2$lcssa = $$2;
        break;
       }
       if (!(HEAP16[$64 + ($70 << 24 >> 24 << 1) >> 1] & 8192)) {
        $$2$lcssa = $$2;
        break;
       } else $$0$pn = $$2;
      }
      $$pre$i$i$i16 = $$pre$i$i$i45;
      $$pre$i2$i$i20 = $55;
      $$pre$pre51 = $$pre$i$i$i45;
      $89 = $55;
      while (1) {
       if (!$$pre$i$i$i16) {
        $$pre$pre50 = $$pre$pre51;
        $87 = 0;
       } else if ((HEAP32[$$pre$i$i$i16 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i16 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i16 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i16) | 0) == -1) {
        HEAP32[$__b >> 2] = 0;
        $$pre$pre50 = 0;
        $87 = 0;
       } else {
        $$pre$pre50 = $$pre$pre51;
        $87 = $$pre$i$i$i16;
       } else {
        $$pre$pre50 = $$pre$pre51;
        $87 = $$pre$i$i$i16;
       }
       $88 = ($87 | 0) == 0;
       do if (!$89) {
        $$pre$i2$i$i2043 = $$pre$i2$i$i20;
        label = 39;
       } else {
        if ((HEAP32[$89 + 12 >> 2] | 0) != (HEAP32[$89 + 16 >> 2] | 0)) if ($88) {
         $$pre$i2$i$i2042 = $$pre$i2$i$i20;
         $184 = $89;
         break;
        } else {
         $$0$ph$be = $$2$lcssa;
         $$pre$pre49 = $$pre$pre50;
         break L20;
        }
        if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$89 >> 2] | 0) + 36 >> 2] & 63]($89) | 0) == -1) {
         HEAP32[$__e >> 2] = 0;
         $$pre$i2$i$i2043 = 0;
         label = 39;
         break;
        } else if ($88 ^ ($$pre$i2$i$i20 | 0) == 0) {
         $$pre$i2$i$i2042 = $$pre$i2$i$i20;
         $184 = $$pre$i2$i$i20;
         break;
        } else {
         $$0$ph$be = $$2$lcssa;
         $$pre$pre49 = $$pre$pre50;
         break L20;
        }
       } while (0);
       if ((label | 0) == 39) {
        label = 0;
        if ($88) {
         $$0$ph$be = $$2$lcssa;
         $$pre$pre49 = $$pre$pre50;
         break L20;
        } else {
         $$pre$i2$i$i2042 = $$pre$i2$i$i2043;
         $184 = 0;
        }
       }
       $102 = $87 + 12 | 0;
       $103 = HEAP32[$102 >> 2] | 0;
       $104 = $87 + 16 | 0;
       if (($103 | 0) == (HEAP32[$104 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$87 >> 2] | 0) + 36 >> 2] & 63]($87) | 0; else $$0$i$i = HEAPU8[$103 >> 0] | 0;
       if (($$0$i$i & 255) << 24 >> 24 <= -1) {
        $$0$ph$be = $$2$lcssa;
        $$pre$pre49 = $$pre$pre50;
        break L20;
       }
       if (!(HEAP16[(HEAP32[$7 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 8192)) {
        $$0$ph$be = $$2$lcssa;
        $$pre$pre49 = $$pre$pre50;
        break L20;
       }
       $120 = HEAP32[$102 >> 2] | 0;
       if (($120 | 0) == (HEAP32[$104 >> 2] | 0)) {
        FUNCTION_TABLE_ii[HEAP32[(HEAP32[$87 >> 2] | 0) + 40 >> 2] & 63]($87) | 0;
        $$pre$i$i$i16 = $87;
        $$pre$i2$i$i20 = $$pre$i2$i$i2042;
        $$pre$pre51 = $$pre$pre50;
        $89 = $184;
        continue;
       } else {
        HEAP32[$102 >> 2] = $120 + 1;
        $$pre$i$i$i16 = $87;
        $$pre$i2$i$i20 = $$pre$i2$i$i2042;
        $$pre$pre51 = $$pre$pre50;
        $89 = $184;
        continue;
       }
      }
     }
    }
    $127 = $$pre$i$i$i45 + 12 | 0;
    $128 = HEAP32[$127 >> 2] | 0;
    $129 = $$pre$i$i$i45 + 16 | 0;
    if (($128 | 0) == (HEAP32[$129 >> 2] | 0)) $$0$i$i25 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i45 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i45) | 0; else $$0$i$i25 = HEAPU8[$128 >> 0] | 0;
    $142 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 31]($4, $$0$i$i25 & 255) | 0;
    if ($142 << 24 >> 24 != (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 31]($4, HEAP8[$$0$ph40 >> 0] | 0) | 0) << 24 >> 24) {
     $$pre$i$i$i45$lcssa54 = $$pre$i$i$i45;
     label = 57;
     break L4;
    }
    $149 = HEAP32[$127 >> 2] | 0;
    if (($149 | 0) == (HEAP32[$129 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i45 >> 2] | 0) + 40 >> 2] & 63]($$pre$i$i$i45) | 0; else HEAP32[$127 >> 2] = $149 + 1;
    $$0$ph$be = $$0$ph40 + 1 | 0;
    $$pre$pre49 = $$pre$i$i$i45;
   } while (0);
   if (($$0$ph$be | 0) != ($__fmte | 0) & (HEAP32[$__err >> 2] | 0) == 0) $$0$ph40 = $$0$ph$be; else {
    $$pre$i$i$i7 = $$pre$pre49;
    break L1;
   }
  }
  if ((label | 0) == 14) {
   HEAP32[$__err >> 2] = 4;
   $$pre$i$i$i7 = $$pre$i$i$i45$lcssa;
   break;
  } else if ((label | 0) == 17) {
   HEAP32[$__err >> 2] = 4;
   $$pre$i$i$i7 = $$pre$i$i$i45$lcssa55;
   break;
  } else if ((label | 0) == 20) {
   HEAP32[$__err >> 2] = 4;
   $$pre$i$i$i7 = $$pre$i$i$i45$lcssa56;
   break;
  } else if ((label | 0) == 57) {
   HEAP32[$__err >> 2] = 4;
   $$pre$i$i$i7 = $$pre$i$i$i45$lcssa54;
   break;
  }
 } while (0);
 if (!$$pre$i$i$i7) $168 = 0; else if ((HEAP32[$$pre$i$i$i7 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i7 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i7 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i7) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $168 = 0;
 } else $168 = $$pre$i$i$i7; else $168 = $$pre$i$i$i7;
 $169 = ($168 | 0) == 0;
 $170 = HEAP32[$__e >> 2] | 0;
 do if (!$170) label = 67; else {
  if ((HEAP32[$170 + 12 >> 2] | 0) == (HEAP32[$170 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$170 >> 2] | 0) + 36 >> 2] & 63]($170) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 67;
   break;
  }
  if (!$169) label = 68;
 } while (0);
 if ((label | 0) == 67) if ($169) label = 68;
 if ((label | 0) == 68) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $168;
 STACKTOP = sp;
 return;
}

function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb, $__mi, $__me, $__flags, $__db, $__de, $__ct, $__neg, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__mb = $__mb | 0;
 $__mi = $__mi | 0;
 $__me = $__me | 0;
 $__flags = $__flags | 0;
 $__db = $__db | 0;
 $__de = $__de | 0;
 $__ct = $__ct | 0;
 $__neg = $__neg | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i16 = 0, $$01$i$i = 0, $$01$i$i14 = 0, $$012$i$i = 0, $$056 = 0, $$2 = 0, $$lcssa34 = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $102 = 0, $104 = 0, $108 = 0, $11 = 0, $114 = 0, $116 = 0, $117 = 0, $119 = 0, $12 = 0, $124 = 0, $13 = 0, $134 = 0, $135 = 0, $139 = 0, $141 = 0, $143 = 0, $145 = 0, $147 = 0, $148 = 0, $148$phi = 0, $151 = 0, $153 = 0, $157 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $169 = 0, $170 = 0, $171 = 0, $171$phi = 0, $172 = 0, $174 = 0, $2 = 0, $22 = 0, $23 = 0, $25 = 0, $27 = 0, $31 = 0, $34 = 0, $35 = 0, $37 = 0, $39 = 0, $4 = 0, $43 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $55 = 0, $57 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $65 = 0, $7 = 0, $73 = 0, $75 = 0, $76 = 0, $78 = 0, $79 = 0, $8 = 0, $81 = 0, $87 = 0, $89 = 0, $9 = 0, $90 = 0, $93 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$0$lcssa66 = 0, $__d$036 = 0, $__d$1$lcssa78 = 0, $__d$1$lcssa79 = 0, $__d$141 = 0, $__d$2 = 0, $__d$350 = 0, $__f$0$lcssa76 = 0, $__f$0$lcssa77 = 0, $__f$042 = 0, $__f$147 = 0, $__gl$053 = 0, $__gl$1 = 0, $__ig$052 = 0, $__ig$1 = 0, $__ng$051 = 0, $__ng$1 = 0, $__p$055 = 0, $scevgep6970 = 0, $scevgep71 = 0, $umax = 0, label = 0;
 HEAP32[$__me >> 2] = $__mb;
 $0 = $__sn + 1 | 0;
 $1 = $__sn + 8 | 0;
 $2 = $__sn + 4 | 0;
 $4 = ($__flags & 512 | 0) == 0;
 $5 = $__sym + 1 | 0;
 $6 = $__sym + 8 | 0;
 $7 = $__sym + 4 | 0;
 $8 = ($__fd | 0) > 0;
 $9 = $__grp + 1 | 0;
 $10 = $__grp + 8 | 0;
 $11 = $__grp + 4 | 0;
 $12 = $__ct + 8 | 0;
 $13 = 0 - $__fd | 0;
 $$056 = $__db;
 $__p$055 = 0;
 while (1) {
  switch (HEAP8[$__pat + $__p$055 >> 0] | 0) {
  case 1:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $22 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 31]($__ct, 32) | 0;
    $23 = HEAP32[$__me >> 2] | 0;
    HEAP32[$__me >> 2] = $23 + 1;
    HEAP8[$23 >> 0] = $22;
    $$2 = $$056;
    break;
   }
  case 2:
   {
    $37 = HEAP8[$__sym >> 0] | 0;
    $39 = ($37 & 1) == 0;
    if ($39) $43 = ($37 & 255) >>> 1; else $43 = HEAP32[$7 >> 2] | 0;
    if (($43 | 0) == 0 | $4) $$2 = $$056; else {
     if ($39) {
      $50 = $5;
      $51 = ($37 & 255) >>> 1;
     } else {
      $50 = HEAP32[$6 >> 2] | 0;
      $51 = HEAP32[$7 >> 2] | 0;
     }
     $49 = $50 + $51 | 0;
     $52 = HEAP32[$__me >> 2] | 0;
     if (($50 | 0) == ($49 | 0)) $$0$lcssa$i$i16 = $52; else {
      $$01$i$i14 = $52;
      $55 = $50;
      while (1) {
       HEAP8[$$01$i$i14 >> 0] = HEAP8[$55 >> 0] | 0;
       $55 = $55 + 1 | 0;
       $57 = $$01$i$i14 + 1 | 0;
       if (($55 | 0) == ($49 | 0)) {
        $$0$lcssa$i$i16 = $57;
        break;
       } else $$01$i$i14 = $57;
      }
     }
     HEAP32[$__me >> 2] = $$0$lcssa$i$i16;
     $$2 = $$056;
    }
    break;
   }
  case 0:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $$2 = $$056;
    break;
   }
  case 4:
   {
    $59 = HEAP32[$__me >> 2] | 0;
    $$$0 = $__neg ? $$056 + 1 | 0 : $$056;
    L21 : do if ($$$0 >>> 0 < $__de >>> 0) {
     $62 = HEAP32[$12 >> 2] | 0;
     $__d$036 = $$$0;
     while (1) {
      $65 = HEAP8[$__d$036 >> 0] | 0;
      if ($65 << 24 >> 24 <= -1) {
       $__d$0$lcssa = $__d$036;
       break L21;
      }
      $63 = $__d$036 + 1 | 0;
      if (!(HEAP16[$62 + ($65 << 24 >> 24 << 1) >> 1] & 2048)) {
       $__d$0$lcssa = $__d$036;
       break L21;
      }
      if ($63 >>> 0 < $__de >>> 0) $__d$036 = $63; else {
       $__d$0$lcssa = $63;
       break;
      }
     }
    } else $__d$0$lcssa = $$$0; while (0);
    $__d$0$lcssa66 = $__d$0$lcssa;
    if ($8) {
     if ($__d$0$lcssa >>> 0 > $$$0 >>> 0) {
      $73 = $$$0 - $__d$0$lcssa66 | 0;
      $umax = $73 >>> 0 < $13 >>> 0 ? $13 : $73;
      $scevgep6970 = $umax + $__fd | 0;
      $78 = $59;
      $__d$141 = $__d$0$lcssa;
      $__f$042 = $__fd;
      while (1) {
       $75 = $__d$141 + -1 | 0;
       $76 = HEAP8[$75 >> 0] | 0;
       HEAP32[$__me >> 2] = $78 + 1;
       HEAP8[$78 >> 0] = $76;
       $79 = $__f$042 + -1 | 0;
       $81 = ($79 | 0) > 0;
       if (!($75 >>> 0 > $$$0 >>> 0 & $81)) break;
       $78 = HEAP32[$__me >> 2] | 0;
       $__d$141 = $75;
       $__f$042 = $79;
      }
      $scevgep71 = $__d$0$lcssa + $umax | 0;
      if ($81) {
       $__d$1$lcssa79 = $scevgep71;
       $__f$0$lcssa77 = $scevgep6970;
       label = 31;
      } else {
       $89 = 0;
       $__d$1$lcssa78 = $scevgep71;
       $__f$0$lcssa76 = $scevgep6970;
      }
     } else {
      $__d$1$lcssa79 = $__d$0$lcssa;
      $__f$0$lcssa77 = $__fd;
      label = 31;
     }
     if ((label | 0) == 31) {
      label = 0;
      $89 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 31]($__ct, 48) | 0;
      $__d$1$lcssa78 = $__d$1$lcssa79;
      $__f$0$lcssa76 = $__f$0$lcssa77;
     }
     $87 = HEAP32[$__me >> 2] | 0;
     HEAP32[$__me >> 2] = $87 + 1;
     if (($__f$0$lcssa76 | 0) > 0) {
      $90 = $87;
      $__f$147 = $__f$0$lcssa76;
      while (1) {
       HEAP8[$90 >> 0] = $89;
       $__f$147 = $__f$147 + -1 | 0;
       $93 = HEAP32[$__me >> 2] | 0;
       HEAP32[$__me >> 2] = $93 + 1;
       if (($__f$147 | 0) <= 0) {
        $$lcssa34 = $93;
        break;
       } else $90 = $93;
      }
     } else $$lcssa34 = $87;
     HEAP8[$$lcssa34 >> 0] = $__dp;
     $__d$2 = $__d$1$lcssa78;
    } else $__d$2 = $__d$0$lcssa;
    if (($__d$2 | 0) == ($$$0 | 0)) {
     $99 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 31]($__ct, 48) | 0;
     $100 = HEAP32[$__me >> 2] | 0;
     HEAP32[$__me >> 2] = $100 + 1;
     HEAP8[$100 >> 0] = $99;
    } else {
     $102 = HEAP8[$__grp >> 0] | 0;
     $104 = ($102 & 1) == 0;
     if ($104) $108 = ($102 & 255) >>> 1; else $108 = HEAP32[$11 >> 2] | 0;
     if (!$108) {
      $__d$350 = $__d$2;
      $__gl$053 = -1;
      $__ig$052 = 0;
      $__ng$051 = 0;
     } else {
      $__d$350 = $__d$2;
      $__gl$053 = HEAP8[($104 ? $9 : HEAP32[$10 >> 2] | 0) >> 0] | 0;
      $__ig$052 = 0;
      $__ng$051 = 0;
     }
     while (1) {
      if (($__ng$051 | 0) == ($__gl$053 | 0)) {
       $114 = HEAP32[$__me >> 2] | 0;
       HEAP32[$__me >> 2] = $114 + 1;
       HEAP8[$114 >> 0] = $__ts;
       $116 = $__ig$052 + 1 | 0;
       $117 = HEAP8[$__grp >> 0] | 0;
       $119 = ($117 & 1) == 0;
       if ($119) $124 = ($117 & 255) >>> 1; else $124 = HEAP32[$11 >> 2] | 0;
       if ($116 >>> 0 < $124 >>> 0) if ((HEAP8[($119 ? $9 : HEAP32[$10 >> 2] | 0) + $116 >> 0] | 0) == 127) {
        $__gl$1 = -1;
        $__ig$1 = $116;
        $__ng$1 = 0;
       } else {
        $__gl$1 = HEAP8[($119 ? $9 : HEAP32[$10 >> 2] | 0) + $116 >> 0] | 0;
        $__ig$1 = $116;
        $__ng$1 = 0;
       } else {
        $__gl$1 = $__gl$053;
        $__ig$1 = $116;
        $__ng$1 = 0;
       }
      } else {
       $__gl$1 = $__gl$053;
       $__ig$1 = $__ig$052;
       $__ng$1 = $__ng$051;
      }
      $__d$350 = $__d$350 + -1 | 0;
      $134 = HEAP8[$__d$350 >> 0] | 0;
      $135 = HEAP32[$__me >> 2] | 0;
      HEAP32[$__me >> 2] = $135 + 1;
      HEAP8[$135 >> 0] = $134;
      if (($__d$350 | 0) == ($$$0 | 0)) break; else {
       $__gl$053 = $__gl$1;
       $__ig$052 = $__ig$1;
       $__ng$051 = $__ng$1 + 1 | 0;
      }
     }
    }
    $139 = HEAP32[$__me >> 2] | 0;
    if (($59 | 0) == ($139 | 0)) $$2 = $$$0; else {
     $141 = $139 + -1 | 0;
     if ($141 >>> 0 > $59 >>> 0) {
      $$012$i$i = $59;
      $145 = $141;
      $148 = $139;
      while (1) {
       $143 = HEAP8[$$012$i$i >> 0] | 0;
       HEAP8[$$012$i$i >> 0] = HEAP8[$145 >> 0] | 0;
       HEAP8[$145 >> 0] = $143;
       $$012$i$i = $$012$i$i + 1 | 0;
       $147 = $148 + -2 | 0;
       if ($$012$i$i >>> 0 >= $147 >>> 0) {
        $$2 = $$$0;
        break;
       } else {
        $148$phi = $145;
        $145 = $147;
        $148 = $148$phi;
       }
      }
     } else $$2 = $$$0;
    }
    break;
   }
  case 3:
   {
    $25 = HEAP8[$__sn >> 0] | 0;
    $27 = ($25 & 1) == 0;
    if ($27) $31 = ($25 & 255) >>> 1; else $31 = HEAP32[$2 >> 2] | 0;
    if (!$31) $$2 = $$056; else {
     $34 = HEAP8[($27 ? $0 : HEAP32[$1 >> 2] | 0) >> 0] | 0;
     $35 = HEAP32[$__me >> 2] | 0;
     HEAP32[$__me >> 2] = $35 + 1;
     HEAP8[$35 >> 0] = $34;
     $$2 = $$056;
    }
    break;
   }
  default:
   $$2 = $$056;
  }
  $__p$055 = $__p$055 + 1 | 0;
  if (($__p$055 | 0) == 4) break; else $$056 = $$2;
 }
 $151 = HEAP8[$__sn >> 0] | 0;
 $153 = ($151 & 1) == 0;
 if ($153) $157 = ($151 & 255) >>> 1; else $157 = HEAP32[$2 >> 2] | 0;
 if ($157 >>> 0 > 1) {
  if ($153) {
   $$pn = $0;
   $165 = ($151 & 255) >>> 1;
  } else {
   $$pn = HEAP32[$1 >> 2] | 0;
   $165 = HEAP32[$2 >> 2] | 0;
  }
  $163 = $$pn + 1 | 0;
  $164 = $$pn + $165 | 0;
  $166 = HEAP32[$__me >> 2] | 0;
  if (($163 | 0) == ($164 | 0)) $$0$lcssa$i$i = $166; else {
   $$01$i$i = $166;
   $169 = $163;
   $171 = $$pn;
   while (1) {
    HEAP8[$$01$i$i >> 0] = HEAP8[$169 >> 0] | 0;
    $170 = $171 + 2 | 0;
    $172 = $$01$i$i + 1 | 0;
    if (($170 | 0) == ($164 | 0)) {
     $$0$lcssa$i$i = $172;
     break;
    } else {
     $171$phi = $169;
     $$01$i$i = $172;
     $169 = $170;
     $171 = $171$phi;
    }
   }
  }
  HEAP32[$__me >> 2] = $$0$lcssa$i$i;
 }
 $174 = $__flags & 176;
 if (($174 | 0) == 32) HEAP32[$__mi >> 2] = HEAP32[$__me >> 2]; else if (($174 | 0) != 16) HEAP32[$__mi >> 2] = $__mb;
 return;
}

function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb, $__mi, $__me, $__flags, $__db, $__de, $__ct, $__neg, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__mb = $__mb | 0;
 $__mi = $__mi | 0;
 $__me = $__me | 0;
 $__flags = $__flags | 0;
 $__db = $__db | 0;
 $__de = $__de | 0;
 $__ct = $__ct | 0;
 $__neg = $__neg | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $$$0 = 0, $$0$lcssa$i$i = 0, $$0$lcssa$i$i18 = 0, $$01$i$i = 0, $$01$i$i15 = 0, $$012$i$i = 0, $$060 = 0, $$2 = 0, $$lcssa35 = 0, $$pn = 0, $0 = 0, $1 = 0, $103 = 0, $109 = 0, $110 = 0, $111 = 0, $112 = 0, $114 = 0, $119 = 0, $129 = 0, $130 = 0, $131 = 0, $135 = 0, $136 = 0, $138 = 0, $140 = 0, $142 = 0, $143 = 0, $143$phi = 0, $146 = 0, $148 = 0, $152 = 0, $158 = 0, $159 = 0, $160 = 0, $161 = 0, $165 = 0, $167 = 0, $168 = 0, $169 = 0, $169$phi = 0, $173 = 0, $175 = 0, $18 = 0, $19 = 0, $21 = 0, $23 = 0, $27 = 0, $3 = 0, $30 = 0, $31 = 0, $33 = 0, $35 = 0, $39 = 0, $4 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $52 = 0, $54 = 0, $59 = 0, $6 = 0, $62 = 0, $7 = 0, $73 = 0, $76 = 0, $77 = 0, $8 = 0, $82 = 0, $84 = 0, $85 = 0, $86 = 0, $86$phi = 0, $9 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $99 = 0, $__d$0$lcssa = 0, $__d$036 = 0, $__d$1$lcssa7880 = 0, $__d$1$lcssa79 = 0, $__d$140 = 0, $__d$2 = 0, $__d$354 = 0, $__f$0$lcssa77 = 0, $__f$041 = 0, $__f$147 = 0, $__gl$057 = 0, $__gl$1 = 0, $__ig$056 = 0, $__ig$1 = 0, $__ng$055 = 0, $__ng$1 = 0, $__p$059 = 0, label = 0, $73$looptemp = 0;
 HEAP32[$__me >> 2] = $__mb;
 $0 = $__sn + 4 | 0;
 $1 = $__sn + 8 | 0;
 $3 = ($__flags & 512 | 0) == 0;
 $4 = $__sym + 4 | 0;
 $5 = $__sym + 8 | 0;
 $6 = ($__fd | 0) > 0;
 $7 = $__grp + 1 | 0;
 $8 = $__grp + 8 | 0;
 $9 = $__grp + 4 | 0;
 $$060 = $__db;
 $__p$059 = 0;
 while (1) {
  switch (HEAP8[$__pat + $__p$059 >> 0] | 0) {
  case 2:
   {
    $33 = HEAP8[$__sym >> 0] | 0;
    $35 = ($33 & 1) == 0;
    if ($35) $39 = ($33 & 255) >>> 1; else $39 = HEAP32[$4 >> 2] | 0;
    if (($39 | 0) == 0 | $3) $$2 = $$060; else {
     if ($35) {
      $46 = $4;
      $47 = ($33 & 255) >>> 1;
     } else {
      $46 = HEAP32[$5 >> 2] | 0;
      $47 = HEAP32[$4 >> 2] | 0;
     }
     $45 = $46 + ($47 << 2) | 0;
     $48 = HEAP32[$__me >> 2] | 0;
     if (($46 | 0) == ($45 | 0)) $$0$lcssa$i$i18 = $48; else {
      $52 = ($46 + ($47 + -1 << 2) - $46 | 0) >>> 2;
      $$01$i$i15 = $48;
      $54 = $46;
      while (1) {
       HEAP32[$$01$i$i15 >> 2] = HEAP32[$54 >> 2];
       $54 = $54 + 4 | 0;
       if (($54 | 0) == ($45 | 0)) break; else $$01$i$i15 = $$01$i$i15 + 4 | 0;
      }
      $$0$lcssa$i$i18 = $48 + ($52 + 1 << 2) | 0;
     }
     HEAP32[$__me >> 2] = $$0$lcssa$i$i18;
     $$2 = $$060;
    }
    break;
   }
  case 4:
   {
    $59 = HEAP32[$__me >> 2] | 0;
    $$$0 = $__neg ? $$060 + 4 | 0 : $$060;
    L21 : do if ($$$0 >>> 0 < $__de >>> 0) {
     $__d$036 = $$$0;
     while (1) {
      $62 = $__d$036 + 4 | 0;
      if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, HEAP32[$__d$036 >> 2] | 0) | 0)) {
       $__d$0$lcssa = $__d$036;
       break L21;
      }
      if ($62 >>> 0 < $__de >>> 0) $__d$036 = $62; else {
       $__d$0$lcssa = $62;
       break;
      }
     }
    } else $__d$0$lcssa = $$$0; while (0);
    if ($6) {
     if ($__d$0$lcssa >>> 0 > $$$0 >>> 0) {
      $73 = HEAP32[$__me >> 2] | 0;
      $__d$140 = $__d$0$lcssa;
      $__f$041 = $__fd;
      do {
       $__d$140 = $__d$140 + -4 | 0;
       $73$looptemp = $73;
       $73 = $73 + 4 | 0;
       HEAP32[$73$looptemp >> 2] = HEAP32[$__d$140 >> 2];
       $__f$041 = $__f$041 + -1 | 0;
       $76 = ($__f$041 | 0) > 0;
      } while ($__d$140 >>> 0 > $$$0 >>> 0 & $76);
      HEAP32[$__me >> 2] = $73;
      if ($76) {
       $__d$1$lcssa79 = $__d$140;
       $__f$0$lcssa77 = $__f$041;
       label = 31;
      } else {
       $77 = HEAP32[$__me >> 2] | 0;
       HEAP32[$__me >> 2] = $77 + 4;
       $$lcssa35 = $77;
       $__d$1$lcssa7880 = $__d$140;
      }
     } else {
      $__d$1$lcssa79 = $__d$0$lcssa;
      $__f$0$lcssa77 = $__fd;
      label = 31;
     }
     if ((label | 0) == 31) {
      label = 0;
      $82 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 44 >> 2] & 31]($__ct, 48) | 0;
      $84 = HEAP32[$__me >> 2] | 0;
      $85 = $84 + 4 | 0;
      HEAP32[$__me >> 2] = $85;
      if (($__f$0$lcssa77 | 0) > 0) {
       $175 = $85;
       $86 = $84;
       $__f$147 = $__f$0$lcssa77;
       while (1) {
        HEAP32[$86 >> 2] = $82;
        $__f$147 = $__f$147 + -1 | 0;
        if (($__f$147 | 0) <= 0) break; else {
         $86$phi = $175;
         $175 = $86 + 8 | 0;
         $86 = $86$phi;
        }
       }
       HEAP32[$__me >> 2] = $84 + ($__f$0$lcssa77 + 1 << 2);
       $$lcssa35 = $84 + ($__f$0$lcssa77 << 2) | 0;
       $__d$1$lcssa7880 = $__d$1$lcssa79;
      } else {
       $$lcssa35 = $84;
       $__d$1$lcssa7880 = $__d$1$lcssa79;
      }
     }
     HEAP32[$$lcssa35 >> 2] = $__dp;
     $__d$2 = $__d$1$lcssa7880;
    } else $__d$2 = $__d$0$lcssa;
    if (($__d$2 | 0) == ($$$0 | 0)) {
     $94 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 44 >> 2] & 31]($__ct, 48) | 0;
     $95 = HEAP32[$__me >> 2] | 0;
     $96 = $95 + 4 | 0;
     HEAP32[$__me >> 2] = $96;
     HEAP32[$95 >> 2] = $94;
     $135 = $96;
     $136 = $95;
    } else {
     $97 = HEAP8[$__grp >> 0] | 0;
     $99 = ($97 & 1) == 0;
     if ($99) $103 = ($97 & 255) >>> 1; else $103 = HEAP32[$9 >> 2] | 0;
     if (!$103) {
      $__d$354 = $__d$2;
      $__gl$057 = -1;
      $__ig$056 = 0;
      $__ng$055 = 0;
     } else {
      $__d$354 = $__d$2;
      $__gl$057 = HEAP8[($99 ? $7 : HEAP32[$8 >> 2] | 0) >> 0] | 0;
      $__ig$056 = 0;
      $__ng$055 = 0;
     }
     while (1) {
      $109 = HEAP32[$__me >> 2] | 0;
      if (($__ng$055 | 0) == ($__gl$057 | 0)) {
       $110 = $109 + 4 | 0;
       HEAP32[$__me >> 2] = $110;
       HEAP32[$109 >> 2] = $__ts;
       $111 = $__ig$056 + 1 | 0;
       $112 = HEAP8[$__grp >> 0] | 0;
       $114 = ($112 & 1) == 0;
       if ($114) $119 = ($112 & 255) >>> 1; else $119 = HEAP32[$9 >> 2] | 0;
       if ($111 >>> 0 < $119 >>> 0) if ((HEAP8[($114 ? $7 : HEAP32[$8 >> 2] | 0) + $111 >> 0] | 0) == 127) {
        $131 = $110;
        $__gl$1 = -1;
        $__ig$1 = $111;
        $__ng$1 = 0;
       } else {
        $131 = $110;
        $__gl$1 = HEAP8[($114 ? $7 : HEAP32[$8 >> 2] | 0) + $111 >> 0] | 0;
        $__ig$1 = $111;
        $__ng$1 = 0;
       } else {
        $131 = $110;
        $__gl$1 = $__gl$057;
        $__ig$1 = $111;
        $__ng$1 = 0;
       }
      } else {
       $131 = $109;
       $__gl$1 = $__gl$057;
       $__ig$1 = $__ig$056;
       $__ng$1 = $__ng$055;
      }
      $__d$354 = $__d$354 + -4 | 0;
      $129 = HEAP32[$__d$354 >> 2] | 0;
      $130 = $131 + 4 | 0;
      HEAP32[$__me >> 2] = $130;
      HEAP32[$131 >> 2] = $129;
      if (($__d$354 | 0) == ($$$0 | 0)) {
       $135 = $130;
       $136 = $131;
       break;
      } else {
       $__gl$057 = $__gl$1;
       $__ig$056 = $__ig$1;
       $__ng$055 = $__ng$1 + 1 | 0;
      }
     }
    }
    if (($59 | 0) != ($135 | 0) & $136 >>> 0 > $59 >>> 0) {
     $$012$i$i = $59;
     $140 = $136;
     $143 = $135;
     while (1) {
      $138 = HEAP32[$$012$i$i >> 2] | 0;
      HEAP32[$$012$i$i >> 2] = HEAP32[$140 >> 2];
      HEAP32[$140 >> 2] = $138;
      $$012$i$i = $$012$i$i + 4 | 0;
      $142 = $143 + -8 | 0;
      if ($$012$i$i >>> 0 >= $142 >>> 0) {
       $$2 = $$$0;
       break;
      } else {
       $143$phi = $140;
       $140 = $142;
       $143 = $143$phi;
      }
     }
    } else $$2 = $$$0;
    break;
   }
  case 0:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $$2 = $$060;
    break;
   }
  case 3:
   {
    $21 = HEAP8[$__sn >> 0] | 0;
    $23 = ($21 & 1) == 0;
    if ($23) $27 = ($21 & 255) >>> 1; else $27 = HEAP32[$0 >> 2] | 0;
    if (!$27) $$2 = $$060; else {
     $30 = HEAP32[($23 ? $0 : HEAP32[$1 >> 2] | 0) >> 2] | 0;
     $31 = HEAP32[$__me >> 2] | 0;
     HEAP32[$__me >> 2] = $31 + 4;
     HEAP32[$31 >> 2] = $30;
     $$2 = $$060;
    }
    break;
   }
  case 1:
   {
    HEAP32[$__mi >> 2] = HEAP32[$__me >> 2];
    $18 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 44 >> 2] & 31]($__ct, 32) | 0;
    $19 = HEAP32[$__me >> 2] | 0;
    HEAP32[$__me >> 2] = $19 + 4;
    HEAP32[$19 >> 2] = $18;
    $$2 = $$060;
    break;
   }
  default:
   $$2 = $$060;
  }
  $__p$059 = $__p$059 + 1 | 0;
  if (($__p$059 | 0) == 4) break; else $$060 = $$2;
 }
 $146 = HEAP8[$__sn >> 0] | 0;
 $148 = ($146 & 1) == 0;
 if ($148) $152 = ($146 & 255) >>> 1; else $152 = HEAP32[$0 >> 2] | 0;
 if ($152 >>> 0 > 1) {
  if ($148) {
   $$pn = $0;
   $160 = ($146 & 255) >>> 1;
  } else {
   $$pn = HEAP32[$1 >> 2] | 0;
   $160 = HEAP32[$0 >> 2] | 0;
  }
  $158 = $$pn + 4 | 0;
  $159 = $$pn + ($160 << 2) | 0;
  $161 = HEAP32[$__me >> 2] | 0;
  if (($158 | 0) == ($159 | 0)) $$0$lcssa$i$i = $161; else {
   $165 = ($$pn + ($160 + -1 << 2) - $158 | 0) >>> 2;
   $$01$i$i = $161;
   $167 = $158;
   $169 = $$pn;
   while (1) {
    HEAP32[$$01$i$i >> 2] = HEAP32[$167 >> 2];
    $168 = $169 + 8 | 0;
    if (($168 | 0) == ($159 | 0)) break; else {
     $169$phi = $167;
     $$01$i$i = $$01$i$i + 4 | 0;
     $167 = $168;
     $169 = $169$phi;
    }
   }
   $$0$lcssa$i$i = $161 + ($165 + 1 << 2) | 0;
  }
  HEAP32[$__me >> 2] = $$0$lcssa$i$i;
 }
 $173 = $__flags & 176;
 if (($173 | 0) == 32) HEAP32[$__mi >> 2] = HEAP32[$__me >> 2]; else if (($173 | 0) != 16) HEAP32[$__mi >> 2] = $__mb;
 return;
}

function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e, $__kb, $__ke, $__ct, $__err, $__case_sensitive) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__kb = $__kb | 0;
 $__ke = $__ke | 0;
 $__ct = $__ct | 0;
 $__err = $__err | 0;
 $__case_sensitive = $__case_sensitive | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i11 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i17 = 0, $$034 = 0, $$045 = 0, $$lcssa = 0, $$pre = 0, $$pre$i3$i$i19 = 0, $$pre$i3$i$i19$lcssa = 0, $$pre$lcssa = 0, $110 = 0, $117 = 0, $120 = 0, $125 = 0, $137 = 0, $15 = 0, $156 = 0, $158 = 0, $22 = 0, $25 = 0, $3 = 0, $35 = 0, $38 = 0, $48 = 0, $49 = 0, $5 = 0, $51 = 0, $53 = 0, $7 = 0, $75 = 0, $76 = 0, $8 = 0, $82 = 0, $89 = 0, $97 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__c$0$lcssa = 0, $__consume$0$off050 = 0, $__consume$1$off0 = 0, $__indx$0 = 0, $__indx$0$lcssa85 = 0, $__indx$0$ph = 0, $__kc$0 = 0, $__ky$066 = 0, $__ky1$051 = 0, $__ky2$060 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$064 = 0, $__n_does_match$1 = 0, $__n_does_match$2$ph = 0, $__n_does_match$347 = 0, $__n_does_match$4 = 0, $__n_does_match$558 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$063 = 0, $__n_might_match$1 = 0, $__n_might_match$2$ph = 0, $__n_might_match$346 = 0, $__n_might_match$4 = 0, $__st$065 = 0, $__st$148 = 0, $__st$259 = 0, $__st$344 = 0, $__statbuf = 0, $__status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $__statbuf = sp;
 $3 = ($__ke - $__kb | 0) / 12 | 0;
 if ($3 >>> 0 > 100) {
  $5 = _malloc($3) | 0;
  if (!$5) __ZSt17__throw_bad_allocv(); else {
   $156 = $5;
   $__status$0 = $5;
  }
 } else {
  $156 = 0;
  $__status$0 = $__statbuf;
 }
 $7 = ($__kb | 0) == ($__ke | 0);
 if ($7) {
  $__n_does_match$0$lcssa = 0;
  $__n_might_match$0$lcssa = $3;
 } else {
  $__ky$066 = $__kb;
  $__n_does_match$064 = 0;
  $__n_might_match$063 = $3;
  $__st$065 = $__status$0;
  while (1) {
   $8 = HEAP8[$__ky$066 >> 0] | 0;
   if (!($8 & 1)) $15 = ($8 & 255) >>> 1; else $15 = HEAP32[$__ky$066 + 4 >> 2] | 0;
   if (!$15) {
    HEAP8[$__st$065 >> 0] = 2;
    $__n_does_match$1 = $__n_does_match$064 + 1 | 0;
    $__n_might_match$1 = $__n_might_match$063 + -1 | 0;
   } else {
    HEAP8[$__st$065 >> 0] = 1;
    $__n_does_match$1 = $__n_does_match$064;
    $__n_might_match$1 = $__n_might_match$063;
   }
   $__ky$066 = $__ky$066 + 12 | 0;
   if (($__ky$066 | 0) == ($__ke | 0)) {
    $__n_does_match$0$lcssa = $__n_does_match$1;
    $__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__n_does_match$064 = $__n_does_match$1;
    $__n_might_match$063 = $__n_might_match$1;
    $__st$065 = $__st$065 + 1 | 0;
   }
  }
 }
 $__indx$0$ph = 0;
 $__n_does_match$2$ph = $__n_does_match$0$lcssa;
 $__n_might_match$2$ph = $__n_might_match$0$lcssa;
 L17 : while (1) {
  $__indx$0 = $__indx$0$ph;
  while (1) {
   $22 = HEAP32[$__b >> 2] | 0;
   do if (!$22) $49 = 1; else {
    $25 = HEAP32[$22 + 12 >> 2] | 0;
    if (($25 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $$0$i$i$i$i = HEAP32[$25 >> 2] | 0;
    if (($$0$i$i$i$i | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $49 = 1;
     break;
    } else {
     $49 = (HEAP32[$__b >> 2] | 0) == 0;
     break;
    }
   } while (0);
   $35 = HEAP32[$__e >> 2] | 0;
   if (!$35) {
    $$pre$i3$i$i19 = 0;
    $48 = 1;
   } else {
    $38 = HEAP32[$35 + 12 >> 2] | 0;
    if (($38 | 0) == (HEAP32[$35 + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$35 >> 2] | 0) + 36 >> 2] & 63]($35) | 0; else $$0$i$i1$i$i = HEAP32[$38 >> 2] | 0;
    if (($$0$i$i1$i$i | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     $$pre$i3$i$i19 = 0;
     $48 = 1;
    } else {
     $$pre$i3$i$i19 = $35;
     $48 = 0;
    }
   }
   $51 = HEAP32[$__b >> 2] | 0;
   if (!(($49 ^ $48) & ($__n_might_match$2$ph | 0) != 0)) {
    $$lcssa = $51;
    $$pre$i3$i$i19$lcssa = $$pre$i3$i$i19;
    break L17;
   }
   $53 = HEAP32[$51 + 12 >> 2] | 0;
   if (($53 | 0) == (HEAP32[$51 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$51 >> 2] | 0) + 36 >> 2] & 63]($51) | 0; else $$0$i$i = HEAP32[$53 >> 2] | 0;
   if ($__case_sensitive) $__c$0 = $$0$i$i; else $__c$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 31]($__ct, $$0$i$i) | 0;
   $$pre = $__indx$0 + 1 | 0;
   if ($7) $__indx$0 = $$pre; else {
    $$pre$lcssa = $$pre;
    $__c$0$lcssa = $__c$0;
    $__indx$0$lcssa85 = $__indx$0;
    break;
   }
  }
  $__consume$0$off050 = 0;
  $__ky1$051 = $__kb;
  $__n_does_match$347 = $__n_does_match$2$ph;
  $__n_might_match$346 = $__n_might_match$2$ph;
  $__st$148 = $__status$0;
  while (1) {
   do if ((HEAP8[$__st$148 >> 0] | 0) == 1) {
    if (!(HEAP8[$__ky1$051 >> 0] & 1)) $75 = $__ky1$051 + 4 | 0; else $75 = HEAP32[$__ky1$051 + 8 >> 2] | 0;
    $76 = HEAP32[$75 + ($__indx$0$lcssa85 << 2) >> 2] | 0;
    if ($__case_sensitive) $__kc$0 = $76; else $__kc$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 28 >> 2] & 31]($__ct, $76) | 0;
    if (($__c$0$lcssa | 0) != ($__kc$0 | 0)) {
     HEAP8[$__st$148 >> 0] = 0;
     $__consume$1$off0 = $__consume$0$off050;
     $__n_does_match$4 = $__n_does_match$347;
     $__n_might_match$4 = $__n_might_match$346 + -1 | 0;
     break;
    }
    $82 = HEAP8[$__ky1$051 >> 0] | 0;
    if (!($82 & 1)) $89 = ($82 & 255) >>> 1; else $89 = HEAP32[$__ky1$051 + 4 >> 2] | 0;
    if (($89 | 0) == ($$pre$lcssa | 0)) {
     HEAP8[$__st$148 >> 0] = 2;
     $__consume$1$off0 = 1;
     $__n_does_match$4 = $__n_does_match$347 + 1 | 0;
     $__n_might_match$4 = $__n_might_match$346 + -1 | 0;
    } else {
     $__consume$1$off0 = 1;
     $__n_does_match$4 = $__n_does_match$347;
     $__n_might_match$4 = $__n_might_match$346;
    }
   } else {
    $__consume$1$off0 = $__consume$0$off050;
    $__n_does_match$4 = $__n_does_match$347;
    $__n_might_match$4 = $__n_might_match$346;
   } while (0);
   $__ky1$051 = $__ky1$051 + 12 | 0;
   if (($__ky1$051 | 0) == ($__ke | 0)) break; else {
    $__consume$0$off050 = $__consume$1$off0;
    $__n_does_match$347 = $__n_does_match$4;
    $__n_might_match$346 = $__n_might_match$4;
    $__st$148 = $__st$148 + 1 | 0;
   }
  }
  if (!$__consume$1$off0) {
   $__indx$0$ph = $$pre$lcssa;
   $__n_does_match$2$ph = $__n_does_match$4;
   $__n_might_match$2$ph = $__n_might_match$4;
   continue;
  }
  $97 = HEAP32[$__b >> 2] | 0;
  $98 = $97 + 12 | 0;
  $99 = HEAP32[$98 >> 2] | 0;
  if (($99 | 0) == (HEAP32[$97 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$97 >> 2] | 0) + 40 >> 2] & 63]($97) | 0; else HEAP32[$98 >> 2] = $99 + 4;
  if (($__n_does_match$4 + $__n_might_match$4 | 0) >>> 0 < 2) {
   $__indx$0$ph = $$pre$lcssa;
   $__n_does_match$2$ph = $__n_does_match$4;
   $__n_might_match$2$ph = $__n_might_match$4;
   continue;
  } else {
   $__ky2$060 = $__kb;
   $__n_does_match$558 = $__n_does_match$4;
   $__st$259 = $__status$0;
  }
  while (1) {
   if ((HEAP8[$__st$259 >> 0] | 0) == 2) {
    $110 = HEAP8[$__ky2$060 >> 0] | 0;
    if (!($110 & 1)) $117 = ($110 & 255) >>> 1; else $117 = HEAP32[$__ky2$060 + 4 >> 2] | 0;
    if (($117 | 0) == ($$pre$lcssa | 0)) $__n_does_match$6 = $__n_does_match$558; else {
     HEAP8[$__st$259 >> 0] = 0;
     $__n_does_match$6 = $__n_does_match$558 + -1 | 0;
    }
   } else $__n_does_match$6 = $__n_does_match$558;
   $120 = $__ky2$060 + 12 | 0;
   if (($120 | 0) == ($__ke | 0)) {
    $__indx$0$ph = $$pre$lcssa;
    $__n_does_match$2$ph = $__n_does_match$6;
    $__n_might_match$2$ph = $__n_might_match$4;
    continue L17;
   } else {
    $__ky2$060 = $120;
    $__n_does_match$558 = $__n_does_match$6;
    $__st$259 = $__st$259 + 1 | 0;
   }
  }
 }
 do if (!$$lcssa) $158 = 1; else {
  $125 = HEAP32[$$lcssa + 12 >> 2] | 0;
  if (($125 | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0; else $$0$i$i$i$i11 = HEAP32[$125 >> 2] | 0;
  if (($$0$i$i$i$i11 | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $158 = 1;
   break;
  } else {
   $158 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!$$pre$i3$i$i19$lcssa) label = 74; else {
  $137 = HEAP32[$$pre$i3$i$i19$lcssa + 12 >> 2] | 0;
  if (($137 | 0) == (HEAP32[$$pre$i3$i$i19$lcssa + 16 >> 2] | 0)) $$0$i$i1$i$i17 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i19$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i19$lcssa) | 0; else $$0$i$i1$i$i17 = HEAP32[$137 >> 2] | 0;
  if (($$0$i$i1$i$i17 | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 74;
   break;
  } else if ($158) break; else {
   label = 76;
   break;
  }
 } while (0);
 if ((label | 0) == 74) if ($158) label = 76;
 if ((label | 0) == 76) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 L109 : do if ($7) label = 80; else {
  $$045 = $__kb;
  $__st$344 = $__status$0;
  while (1) {
   if ((HEAP8[$__st$344 >> 0] | 0) == 2) {
    $$034 = $$045;
    break L109;
   }
   $$045 = $$045 + 12 | 0;
   if (($$045 | 0) == ($__ke | 0)) {
    label = 80;
    break;
   } else $__st$344 = $__st$344 + 1 | 0;
  }
 } while (0);
 if ((label | 0) == 80) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$034 = $__ke;
 }
 if ($156) _free($156);
 STACKTOP = sp;
 return $$034 | 0;
}

function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $__e, $__kb, $__ke, $__ct, $__err, $__case_sensitive) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__kb = $__kb | 0;
 $__ke = $__ke | 0;
 $__ct = $__ct | 0;
 $__err = $__err | 0;
 $__case_sensitive = $__case_sensitive | 0;
 var $$0$i$i = 0, $$030 = 0, $$041 = 0, $$lcssa = 0, $$lcssa89 = 0, $$pre = 0, $$pre$i2$i$i16 = 0, $$pre$i2$i$i16$lcssa = 0, $$pre$lcssa = 0, $100 = 0, $111 = 0, $118 = 0, $121 = 0, $135 = 0, $136 = 0, $15 = 0, $156 = 0, $22 = 0, $3 = 0, $34 = 0, $35 = 0, $36 = 0, $48 = 0, $5 = 0, $50 = 0, $52 = 0, $62 = 0, $7 = 0, $76 = 0, $77 = 0, $8 = 0, $83 = 0, $90 = 0, $98 = 0, $99 = 0, $__c$0 = 0, $__c$0$lcssa = 0, $__consume$0$off046 = 0, $__consume$1$off0 = 0, $__indx$0 = 0, $__indx$0$lcssa86 = 0, $__indx$0$ph = 0, $__kc$0 = 0, $__ky$062 = 0, $__ky1$047 = 0, $__ky2$056 = 0, $__n_does_match$0$lcssa = 0, $__n_does_match$060 = 0, $__n_does_match$1 = 0, $__n_does_match$2$ph = 0, $__n_does_match$343 = 0, $__n_does_match$4 = 0, $__n_does_match$554 = 0, $__n_does_match$6 = 0, $__n_might_match$0$lcssa = 0, $__n_might_match$059 = 0, $__n_might_match$1 = 0, $__n_might_match$2$ph = 0, $__n_might_match$342 = 0, $__n_might_match$4 = 0, $__st$061 = 0, $__st$144 = 0, $__st$255 = 0, $__st$340 = 0, $__statbuf = 0, $__status$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $__statbuf = sp;
 $3 = ($__ke - $__kb | 0) / 12 | 0;
 if ($3 >>> 0 > 100) {
  $5 = _malloc($3) | 0;
  if (!$5) __ZSt17__throw_bad_allocv(); else {
   $156 = $5;
   $__status$0 = $5;
  }
 } else {
  $156 = 0;
  $__status$0 = $__statbuf;
 }
 $7 = ($__kb | 0) == ($__ke | 0);
 if ($7) {
  $__n_does_match$0$lcssa = 0;
  $__n_might_match$0$lcssa = $3;
 } else {
  $__ky$062 = $__kb;
  $__n_does_match$060 = 0;
  $__n_might_match$059 = $3;
  $__st$061 = $__status$0;
  while (1) {
   $8 = HEAP8[$__ky$062 >> 0] | 0;
   if (!($8 & 1)) $15 = ($8 & 255) >>> 1; else $15 = HEAP32[$__ky$062 + 4 >> 2] | 0;
   if (!$15) {
    HEAP8[$__st$061 >> 0] = 2;
    $__n_does_match$1 = $__n_does_match$060 + 1 | 0;
    $__n_might_match$1 = $__n_might_match$059 + -1 | 0;
   } else {
    HEAP8[$__st$061 >> 0] = 1;
    $__n_does_match$1 = $__n_does_match$060;
    $__n_might_match$1 = $__n_might_match$059;
   }
   $__ky$062 = $__ky$062 + 12 | 0;
   if (($__ky$062 | 0) == ($__ke | 0)) {
    $__n_does_match$0$lcssa = $__n_does_match$1;
    $__n_might_match$0$lcssa = $__n_might_match$1;
    break;
   } else {
    $__n_does_match$060 = $__n_does_match$1;
    $__n_might_match$059 = $__n_might_match$1;
    $__st$061 = $__st$061 + 1 | 0;
   }
  }
 }
 $__indx$0$ph = 0;
 $__n_does_match$2$ph = $__n_does_match$0$lcssa;
 $__n_might_match$2$ph = $__n_might_match$0$lcssa;
 L17 : while (1) {
  $__indx$0 = $__indx$0$ph;
  while (1) {
   $22 = HEAP32[$__b >> 2] | 0;
   do if (!$22) $34 = 0; else if ((HEAP32[$22 + 12 >> 2] | 0) == (HEAP32[$22 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $34 = 0;
    break;
   } else {
    $34 = HEAP32[$__b >> 2] | 0;
    break;
   } else $34 = $22; while (0);
   $35 = ($34 | 0) == 0;
   $36 = HEAP32[$__e >> 2] | 0;
   if (!$36) $$pre$i2$i$i16 = 0; else if ((HEAP32[$36 + 12 >> 2] | 0) == (HEAP32[$36 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$36 >> 2] | 0) + 36 >> 2] & 63]($36) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    $$pre$i2$i$i16 = 0;
   } else $$pre$i2$i$i16 = $36; else $$pre$i2$i$i16 = $36;
   $48 = ($$pre$i2$i$i16 | 0) == 0;
   $50 = HEAP32[$__b >> 2] | 0;
   if (!(($35 ^ $48) & ($__n_might_match$2$ph | 0) != 0)) {
    $$lcssa = $48;
    $$lcssa89 = $50;
    $$pre$i2$i$i16$lcssa = $$pre$i2$i$i16;
    break L17;
   }
   $52 = HEAP32[$50 + 12 >> 2] | 0;
   if (($52 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$50 >> 2] | 0) + 36 >> 2] & 63]($50) | 0; else $$0$i$i = HEAPU8[$52 >> 0] | 0;
   $62 = $$0$i$i & 255;
   if ($__case_sensitive) $__c$0 = $62; else $__c$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, $62) | 0;
   $$pre = $__indx$0 + 1 | 0;
   if ($7) $__indx$0 = $$pre; else {
    $$pre$lcssa = $$pre;
    $__c$0$lcssa = $__c$0;
    $__indx$0$lcssa86 = $__indx$0;
    break;
   }
  }
  $__consume$0$off046 = 0;
  $__ky1$047 = $__kb;
  $__n_does_match$343 = $__n_does_match$2$ph;
  $__n_might_match$342 = $__n_might_match$2$ph;
  $__st$144 = $__status$0;
  while (1) {
   do if ((HEAP8[$__st$144 >> 0] | 0) == 1) {
    if (!(HEAP8[$__ky1$047 >> 0] & 1)) $76 = $__ky1$047 + 1 | 0; else $76 = HEAP32[$__ky1$047 + 8 >> 2] | 0;
    $77 = HEAP8[$76 + $__indx$0$lcssa86 >> 0] | 0;
    if ($__case_sensitive) $__kc$0 = $77; else $__kc$0 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, $77) | 0;
    if ($__c$0$lcssa << 24 >> 24 != $__kc$0 << 24 >> 24) {
     HEAP8[$__st$144 >> 0] = 0;
     $__consume$1$off0 = $__consume$0$off046;
     $__n_does_match$4 = $__n_does_match$343;
     $__n_might_match$4 = $__n_might_match$342 + -1 | 0;
     break;
    }
    $83 = HEAP8[$__ky1$047 >> 0] | 0;
    if (!($83 & 1)) $90 = ($83 & 255) >>> 1; else $90 = HEAP32[$__ky1$047 + 4 >> 2] | 0;
    if (($90 | 0) == ($$pre$lcssa | 0)) {
     HEAP8[$__st$144 >> 0] = 2;
     $__consume$1$off0 = 1;
     $__n_does_match$4 = $__n_does_match$343 + 1 | 0;
     $__n_might_match$4 = $__n_might_match$342 + -1 | 0;
    } else {
     $__consume$1$off0 = 1;
     $__n_does_match$4 = $__n_does_match$343;
     $__n_might_match$4 = $__n_might_match$342;
    }
   } else {
    $__consume$1$off0 = $__consume$0$off046;
    $__n_does_match$4 = $__n_does_match$343;
    $__n_might_match$4 = $__n_might_match$342;
   } while (0);
   $__ky1$047 = $__ky1$047 + 12 | 0;
   if (($__ky1$047 | 0) == ($__ke | 0)) break; else {
    $__consume$0$off046 = $__consume$1$off0;
    $__n_does_match$343 = $__n_does_match$4;
    $__n_might_match$342 = $__n_might_match$4;
    $__st$144 = $__st$144 + 1 | 0;
   }
  }
  if (!$__consume$1$off0) {
   $__indx$0$ph = $$pre$lcssa;
   $__n_does_match$2$ph = $__n_does_match$4;
   $__n_might_match$2$ph = $__n_might_match$4;
   continue;
  }
  $98 = HEAP32[$__b >> 2] | 0;
  $99 = $98 + 12 | 0;
  $100 = HEAP32[$99 >> 2] | 0;
  if (($100 | 0) == (HEAP32[$98 + 16 >> 2] | 0)) FUNCTION_TABLE_ii[HEAP32[(HEAP32[$98 >> 2] | 0) + 40 >> 2] & 63]($98) | 0; else HEAP32[$99 >> 2] = $100 + 1;
  if (($__n_does_match$4 + $__n_might_match$4 | 0) >>> 0 < 2) {
   $__indx$0$ph = $$pre$lcssa;
   $__n_does_match$2$ph = $__n_does_match$4;
   $__n_might_match$2$ph = $__n_might_match$4;
   continue;
  } else {
   $__ky2$056 = $__kb;
   $__n_does_match$554 = $__n_does_match$4;
   $__st$255 = $__status$0;
  }
  while (1) {
   if ((HEAP8[$__st$255 >> 0] | 0) == 2) {
    $111 = HEAP8[$__ky2$056 >> 0] | 0;
    if (!($111 & 1)) $118 = ($111 & 255) >>> 1; else $118 = HEAP32[$__ky2$056 + 4 >> 2] | 0;
    if (($118 | 0) == ($$pre$lcssa | 0)) $__n_does_match$6 = $__n_does_match$554; else {
     HEAP8[$__st$255 >> 0] = 0;
     $__n_does_match$6 = $__n_does_match$554 + -1 | 0;
    }
   } else $__n_does_match$6 = $__n_does_match$554;
   $121 = $__ky2$056 + 12 | 0;
   if (($121 | 0) == ($__ke | 0)) {
    $__indx$0$ph = $$pre$lcssa;
    $__n_does_match$2$ph = $__n_does_match$6;
    $__n_might_match$2$ph = $__n_might_match$4;
    continue L17;
   } else {
    $__ky2$056 = $121;
    $__n_does_match$554 = $__n_does_match$6;
    $__st$255 = $__st$255 + 1 | 0;
   }
  }
 }
 do if (!$$lcssa89) $135 = 0; else if ((HEAP32[$$lcssa89 + 12 >> 2] | 0) == (HEAP32[$$lcssa89 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa89 >> 2] | 0) + 36 >> 2] & 63]($$lcssa89) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $135 = 0;
  break;
 } else {
  $135 = HEAP32[$__b >> 2] | 0;
  break;
 } else $135 = $$lcssa89; while (0);
 $136 = ($135 | 0) == 0;
 do if ($$lcssa) label = 67; else {
  if ((HEAP32[$$pre$i2$i$i16$lcssa + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i16$lcssa + 16 >> 2] | 0)) if ($136) break; else {
   label = 69;
   break;
  }
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i16$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i16$lcssa) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 67;
   break;
  } else if ($136) break; else {
   label = 69;
   break;
  }
 } while (0);
 if ((label | 0) == 67) if ($136) label = 69;
 if ((label | 0) == 69) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 L99 : do if ($7) label = 73; else {
  $$041 = $__kb;
  $__st$340 = $__status$0;
  while (1) {
   if ((HEAP8[$__st$340 >> 0] | 0) == 2) {
    $$030 = $$041;
    break L99;
   }
   $$041 = $$041 + 12 | 0;
   if (($$041 | 0) == ($__ke | 0)) {
    label = 73;
    break;
   } else $__st$340 = $__st$340 + 1 | 0;
  }
 } while (0);
 if ((label | 0) == 73) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$030 = $__ke;
 }
 if ($156) _free($156);
 STACKTOP = sp;
 return $$030 | 0;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $_0$0 = 0, $_0$1 = 0, $q_sroa_1_1198$looptemp = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (!$n_sroa_1_4_extract_trunc) {
  $4 = ($rem | 0) != 0;
  if (!$d_sroa_1_4_extract_trunc) {
   if ($4) {
    HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do if (!$d_sroa_0_0_extract_trunc) {
  if ($17) {
   if ($rem) {
    HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
    HEAP32[$rem + 4 >> 2] = 0;
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  if (!$n_sroa_0_0_extract_trunc) {
   if ($rem) {
    HEAP32[$rem >> 2] = 0;
    HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
  if (!($37 & $d_sroa_1_4_extract_trunc)) {
   if ($rem) {
    HEAP32[$rem >> 2] = $a$0 | 0;
    HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
   }
   $_0$1 = 0;
   $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $51 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
  if ($51 >>> 0 <= 30) {
   $57 = $51 + 1 | 0;
   $58 = 31 - $51 | 0;
   $sr_1_ph = $57;
   $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
   $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
   $q_sroa_0_1_ph = 0;
   $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
   break;
  }
  if (!$rem) {
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  HEAP32[$rem >> 2] = $a$0 | 0;
  HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
  $_0$1 = 0;
  $_0$0 = 0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
 } else {
  if (!$17) {
   $119 = (Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0) - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($119 >>> 0 <= 31) {
    $125 = $119 + 1 | 0;
    $126 = 31 - $119 | 0;
    $130 = $119 - 31 >> 31;
    $sr_1_ph = $125;
    $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
    break;
   }
   if (!$rem) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   HEAP32[$rem >> 2] = $a$0 | 0;
   HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
  $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
  if ($66 & $d_sroa_0_0_extract_trunc) {
   $88 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   $89 = 64 - $88 | 0;
   $91 = 32 - $88 | 0;
   $92 = $91 >> 31;
   $95 = $88 - 32 | 0;
   $105 = $95 >> 31;
   $sr_1_ph = $88;
   $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
   $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
   $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
   $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
   break;
  }
  if ($rem) {
   HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
   HEAP32[$rem + 4 >> 2] = 0;
  }
  if (($d_sroa_0_0_extract_trunc | 0) == 1) {
   $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
   $_0$0 = $a$0 | 0 | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
   $_0$1 = $n_sroa_1_4_extract_trunc >>> ($78 >>> 0) | 0;
   $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 } while (0);
 if (!$sr_1_ph) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = $b$0 | 0 | 0;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
  $137$1 = tempRet0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  do {
   $q_sroa_1_1198$looptemp = $q_sroa_1_1198;
   $q_sroa_1_1198 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $q_sroa_0_1199 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = $r_sroa_0_1201 << 1 | $q_sroa_1_1198$looptemp >>> 31 | 0;
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
   $150$1 = tempRet0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $carry_0203 = $151$0 & 1;
   $r_sroa_0_1201 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
   $r_sroa_1_1200 = tempRet0;
   $sr_1202 = $sr_1202 - 1 | 0;
  } while (($sr_1202 | 0) != 0);
  $q_sroa_1_1_lcssa = $q_sroa_1_1198;
  $q_sroa_0_1_lcssa = $q_sroa_0_1199;
  $r_sroa_1_1_lcssa = $r_sroa_1_1200;
  $r_sroa_0_1_lcssa = $r_sroa_0_1201;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $carry_0203;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 if ($rem) {
  HEAP32[$rem >> 2] = $r_sroa_0_1_lcssa;
  HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa;
 }
 $_0$1 = ($q_sroa_0_0_insert_ext75$0 | 0) >>> 31 | ($q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1) << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}

function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $__neg, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__intl = $__intl | 0;
 $__neg = $__neg | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $72 = 0, $73 = 0, $76 = 0, $8 = 0, $89 = 0, $9 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 108 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 92 | 0;
 $3 = sp + 80 | 0;
 $4 = sp + 68 | 0;
 $5 = sp + 56 | 0;
 $6 = sp + 52 | 0;
 $7 = sp + 40 | 0;
 $8 = sp + 36 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 12 | 0;
 $11 = sp;
 if ($__intl) {
  $12 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 4344) | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[$13 + 44 >> 2] & 63]($0, $12);
   $16 = HEAP32[$0 >> 2] | 0;
   HEAP8[$__pat >> 0] = $16;
   HEAP8[$__pat + 1 >> 0] = $16 >> 8;
   HEAP8[$__pat + 2 >> 0] = $16 >> 16;
   HEAP8[$__pat + 3 >> 0] = $16 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 32 >> 2] & 63]($1, $12);
   if (!(HEAP8[$__sn >> 0] & 1)) {
    HEAP8[$__sn + 1 >> 0] = 0;
    HEAP8[$__sn >> 0] = 0;
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2] >> 0] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn, 0);
   HEAP32[$__sn + 0 >> 2] = HEAP32[$1 + 0 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$1 + 0 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
  } else {
   FUNCTION_TABLE_vii[HEAP32[$13 + 40 >> 2] & 63]($2, $12);
   $29 = HEAP32[$2 >> 2] | 0;
   HEAP8[$__pat >> 0] = $29;
   HEAP8[$__pat + 1 >> 0] = $29 >> 8;
   HEAP8[$__pat + 2 >> 0] = $29 >> 16;
   HEAP8[$__pat + 3 >> 0] = $29 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] & 63]($3, $12);
   if (!(HEAP8[$__sn >> 0] & 1)) {
    HEAP8[$__sn + 1 >> 0] = 0;
    HEAP8[$__sn >> 0] = 0;
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2] >> 0] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn, 0);
   HEAP32[$__sn + 0 >> 2] = HEAP32[$3 + 0 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   HEAP32[$3 + 0 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$3 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  }
  HEAP8[$__dp >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] & 63]($12) | 0;
  HEAP8[$__ts >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] & 63]($12) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 20 >> 2] & 63]($4, $12);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp + 0 >> 2] = HEAP32[$4 + 0 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$4 + 8 >> 2];
  HEAP32[$4 + 0 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] & 63]($5, $12);
  if (!(HEAP8[$__sym >> 0] & 1)) {
   HEAP8[$__sym + 1 >> 0] = 0;
   HEAP8[$__sym >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2] >> 0] = 0;
   HEAP32[$__sym + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym, 0);
  HEAP32[$__sym + 0 >> 2] = HEAP32[$5 + 0 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$5 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$5 + 8 >> 2];
  HEAP32[$5 + 0 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$5 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($5);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 36 >> 2] & 63]($12) | 0;
 } else {
  $72 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 4280) | 0;
  $73 = HEAP32[$72 >> 2] | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[$73 + 44 >> 2] & 63]($6, $72);
   $76 = HEAP32[$6 >> 2] | 0;
   HEAP8[$__pat >> 0] = $76;
   HEAP8[$__pat + 1 >> 0] = $76 >> 8;
   HEAP8[$__pat + 2 >> 0] = $76 >> 16;
   HEAP8[$__pat + 3 >> 0] = $76 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$72 >> 2] | 0) + 32 >> 2] & 63]($7, $72);
   if (!(HEAP8[$__sn >> 0] & 1)) {
    HEAP8[$__sn + 1 >> 0] = 0;
    HEAP8[$__sn >> 0] = 0;
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2] >> 0] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn, 0);
   HEAP32[$__sn + 0 >> 2] = HEAP32[$7 + 0 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$7 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$7 + 8 >> 2];
   HEAP32[$7 + 0 >> 2] = 0;
   HEAP32[$7 + 4 >> 2] = 0;
   HEAP32[$7 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
  } else {
   FUNCTION_TABLE_vii[HEAP32[$73 + 40 >> 2] & 63]($8, $72);
   $89 = HEAP32[$8 >> 2] | 0;
   HEAP8[$__pat >> 0] = $89;
   HEAP8[$__pat + 1 >> 0] = $89 >> 8;
   HEAP8[$__pat + 2 >> 0] = $89 >> 16;
   HEAP8[$__pat + 3 >> 0] = $89 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$72 >> 2] | 0) + 28 >> 2] & 63]($9, $72);
   if (!(HEAP8[$__sn >> 0] & 1)) {
    HEAP8[$__sn + 1 >> 0] = 0;
    HEAP8[$__sn >> 0] = 0;
   } else {
    HEAP8[HEAP32[$__sn + 8 >> 2] >> 0] = 0;
    HEAP32[$__sn + 4 >> 2] = 0;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn, 0);
   HEAP32[$__sn + 0 >> 2] = HEAP32[$9 + 0 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$9 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$9 + 8 >> 2];
   HEAP32[$9 + 0 >> 2] = 0;
   HEAP32[$9 + 4 >> 2] = 0;
   HEAP32[$9 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
  }
  HEAP8[$__dp >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$72 >> 2] | 0) + 12 >> 2] & 63]($72) | 0;
  HEAP8[$__ts >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$72 >> 2] | 0) + 16 >> 2] & 63]($72) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$72 >> 2] | 0) + 20 >> 2] & 63]($10, $72);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp + 0 >> 2] = HEAP32[$10 + 0 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$10 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$10 + 8 >> 2];
  HEAP32[$10 + 0 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  HEAP32[$10 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$72 >> 2] | 0) + 24 >> 2] & 63]($11, $72);
  if (!(HEAP8[$__sym >> 0] & 1)) {
   HEAP8[$__sym + 1 >> 0] = 0;
   HEAP8[$__sym >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2] >> 0] = 0;
   HEAP32[$__sym + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym, 0);
  HEAP32[$__sym + 0 >> 2] = HEAP32[$11 + 0 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  HEAP32[$11 + 0 >> 2] = 0;
  HEAP32[$11 + 4 >> 2] = 0;
  HEAP32[$11 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($11);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$72 >> 2] | 0) + 36 >> 2] & 63]($72) | 0;
 }
 HEAP32[$__fd >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $__neg, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd) {
 $__intl = $__intl | 0;
 $__neg = $__neg | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__sn = $__sn | 0;
 $__fd = $__fd | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $16 = 0, $2 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $69 = 0, $7 = 0, $70 = 0, $73 = 0, $8 = 0, $85 = 0, $9 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 108 | 0;
 $1 = sp + 96 | 0;
 $2 = sp + 92 | 0;
 $3 = sp + 80 | 0;
 $4 = sp + 68 | 0;
 $5 = sp + 56 | 0;
 $6 = sp + 52 | 0;
 $7 = sp + 40 | 0;
 $8 = sp + 36 | 0;
 $9 = sp + 24 | 0;
 $10 = sp + 12 | 0;
 $11 = sp;
 if ($__intl) {
  $12 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 4472) | 0;
  $13 = HEAP32[$12 >> 2] | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[$13 + 44 >> 2] & 63]($0, $12);
   $16 = HEAP32[$0 >> 2] | 0;
   HEAP8[$__pat >> 0] = $16;
   HEAP8[$__pat + 1 >> 0] = $16 >> 8;
   HEAP8[$__pat + 2 >> 0] = $16 >> 16;
   HEAP8[$__pat + 3 >> 0] = $16 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 32 >> 2] & 63]($1, $12);
   if (!(HEAP8[$__sn >> 0] & 1)) HEAP8[$__sn >> 0] = 0; else HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0;
   HEAP32[$__sn + 4 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn, 0);
   HEAP32[$__sn + 0 >> 2] = HEAP32[$1 + 0 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$1 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$1 + 8 >> 2];
   HEAP32[$1 + 0 >> 2] = 0;
   HEAP32[$1 + 4 >> 2] = 0;
   HEAP32[$1 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($1);
  } else {
   FUNCTION_TABLE_vii[HEAP32[$13 + 40 >> 2] & 63]($2, $12);
   $28 = HEAP32[$2 >> 2] | 0;
   HEAP8[$__pat >> 0] = $28;
   HEAP8[$__pat + 1 >> 0] = $28 >> 8;
   HEAP8[$__pat + 2 >> 0] = $28 >> 16;
   HEAP8[$__pat + 3 >> 0] = $28 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 28 >> 2] & 63]($3, $12);
   if (!(HEAP8[$__sn >> 0] & 1)) HEAP8[$__sn >> 0] = 0; else HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0;
   HEAP32[$__sn + 4 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn, 0);
   HEAP32[$__sn + 0 >> 2] = HEAP32[$3 + 0 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$3 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$3 + 8 >> 2];
   HEAP32[$3 + 0 >> 2] = 0;
   HEAP32[$3 + 4 >> 2] = 0;
   HEAP32[$3 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($3);
  }
  HEAP32[$__dp >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] & 63]($12) | 0;
  HEAP32[$__ts >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 16 >> 2] & 63]($12) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 20 >> 2] & 63]($4, $12);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp + 0 >> 2] = HEAP32[$4 + 0 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$4 + 8 >> 2];
  HEAP32[$4 + 0 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] & 63]($5, $12);
  if (!(HEAP8[$__sym >> 0] & 1)) HEAP8[$__sym >> 0] = 0; else HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0;
  HEAP32[$__sym + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym, 0);
  HEAP32[$__sym + 0 >> 2] = HEAP32[$5 + 0 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$5 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$5 + 8 >> 2];
  HEAP32[$5 + 0 >> 2] = 0;
  HEAP32[$5 + 4 >> 2] = 0;
  HEAP32[$5 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($5);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 36 >> 2] & 63]($12) | 0;
 } else {
  $69 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 4408) | 0;
  $70 = HEAP32[$69 >> 2] | 0;
  if ($__neg) {
   FUNCTION_TABLE_vii[HEAP32[$70 + 44 >> 2] & 63]($6, $69);
   $73 = HEAP32[$6 >> 2] | 0;
   HEAP8[$__pat >> 0] = $73;
   HEAP8[$__pat + 1 >> 0] = $73 >> 8;
   HEAP8[$__pat + 2 >> 0] = $73 >> 16;
   HEAP8[$__pat + 3 >> 0] = $73 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$69 >> 2] | 0) + 32 >> 2] & 63]($7, $69);
   if (!(HEAP8[$__sn >> 0] & 1)) HEAP8[$__sn >> 0] = 0; else HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0;
   HEAP32[$__sn + 4 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn, 0);
   HEAP32[$__sn + 0 >> 2] = HEAP32[$7 + 0 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$7 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$7 + 8 >> 2];
   HEAP32[$7 + 0 >> 2] = 0;
   HEAP32[$7 + 4 >> 2] = 0;
   HEAP32[$7 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
  } else {
   FUNCTION_TABLE_vii[HEAP32[$70 + 40 >> 2] & 63]($8, $69);
   $85 = HEAP32[$8 >> 2] | 0;
   HEAP8[$__pat >> 0] = $85;
   HEAP8[$__pat + 1 >> 0] = $85 >> 8;
   HEAP8[$__pat + 2 >> 0] = $85 >> 16;
   HEAP8[$__pat + 3 >> 0] = $85 >> 24;
   FUNCTION_TABLE_vii[HEAP32[(HEAP32[$69 >> 2] | 0) + 28 >> 2] & 63]($9, $69);
   if (!(HEAP8[$__sn >> 0] & 1)) HEAP8[$__sn >> 0] = 0; else HEAP32[HEAP32[$__sn + 8 >> 2] >> 2] = 0;
   HEAP32[$__sn + 4 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn, 0);
   HEAP32[$__sn + 0 >> 2] = HEAP32[$9 + 0 >> 2];
   HEAP32[$__sn + 4 >> 2] = HEAP32[$9 + 4 >> 2];
   HEAP32[$__sn + 8 >> 2] = HEAP32[$9 + 8 >> 2];
   HEAP32[$9 + 0 >> 2] = 0;
   HEAP32[$9 + 4 >> 2] = 0;
   HEAP32[$9 + 8 >> 2] = 0;
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
  }
  HEAP32[$__dp >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$69 >> 2] | 0) + 12 >> 2] & 63]($69) | 0;
  HEAP32[$__ts >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$69 >> 2] | 0) + 16 >> 2] & 63]($69) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$69 >> 2] | 0) + 20 >> 2] & 63]($10, $69);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp + 0 >> 2] = HEAP32[$10 + 0 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$10 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$10 + 8 >> 2];
  HEAP32[$10 + 0 >> 2] = 0;
  HEAP32[$10 + 4 >> 2] = 0;
  HEAP32[$10 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($10);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$69 >> 2] | 0) + 24 >> 2] & 63]($11, $69);
  if (!(HEAP8[$__sym >> 0] & 1)) HEAP8[$__sym >> 0] = 0; else HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0;
  HEAP32[$__sym + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym, 0);
  HEAP32[$__sym + 0 >> 2] = HEAP32[$11 + 0 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$11 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$11 + 8 >> 2];
  HEAP32[$11 + 0 >> 2] = 0;
  HEAP32[$11 + 4 >> 2] = 0;
  HEAP32[$11 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($11);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$69 >> 2] | 0) + 36 >> 2] & 63]($69) | 0;
 }
 HEAP32[$__fd >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$012$i$i = 0, $$012$i$i7 = 0, $0 = 0, $1 = 0, $101 = 0, $108 = 0, $11 = 0, $115 = 0, $116 = 0, $117 = 0, $124 = 0, $126 = 0, $127 = 0, $129 = 0, $13 = 0, $131 = 0, $133 = 0, $134 = 0, $134$phi = 0, $137 = 0, $142 = 0, $143 = 0, $144 = 0, $149 = 0, $150 = 0, $151 = 0, $152 = 0, $157 = 0, $161 = 0, $167 = 0, $20 = 0, $21 = 0, $25 = 0, $26 = 0, $28 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $44 = 0, $46 = 0, $5 = 0, $51 = 0, $58 = 0, $68 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $77 = 0, $77$phi = 0, $82 = 0, $84 = 0, $85 = 0, $86 = 0, $89 = 0, $9 = 0, $99 = 0, $__dc$026 = 0, $__dc$1 = 0, $__dg$027 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$225 = 0, $__nf$225$lcssa = 0, $__nf$3 = 0, $__ns$035 = 0, $__ns$130 = 0, $__ns$2 = 0, $__p$028 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__grouping = sp;
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 4896) | 0;
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 5056) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] & 63]($__grouping, $1);
 HEAP32[$__oe >> 2] = $__ob;
 $5 = HEAP8[$__nb >> 0] | 0;
 if ($5 << 24 >> 24 == 43 | $5 << 24 >> 24 == 45) {
  $9 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 31]($0, $5) | 0;
  $11 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $11 + 4;
  HEAP32[$11 >> 2] = $9;
  $__nf$0 = $__nb + 1 | 0;
 } else $__nf$0 = $__nb;
 $13 = $__ne;
 L4 : do if (($13 - $__nf$0 | 0) > 1) if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
  $20 = $__nf$0 + 1 | 0;
  $21 = HEAP8[$20 >> 0] | 0;
  if ($21 << 24 >> 24 == 88 | $21 << 24 >> 24 == 120) {
   $25 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 31]($0, 48) | 0;
   $26 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $26 + 4;
   HEAP32[$26 >> 2] = $25;
   $28 = $__nf$0 + 2 | 0;
   $33 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 31]($0, HEAP8[$20 >> 0] | 0) | 0;
   $34 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $34 + 4;
   HEAP32[$34 >> 2] = $33;
   if ($28 >>> 0 < $__ne >>> 0) {
    $__ns$035 = $28;
    while (1) {
     $39 = HEAP8[$__ns$035 >> 0] | 0;
     $37 = $__ns$035 + 1 | 0;
     if (!(_isxdigit_l($39 << 24 >> 24, __ZNSt3__16__clocEv() | 0) | 0)) {
      $__nf$1 = $28;
      $__ns$2 = $__ns$035;
      break L4;
     }
     if ($37 >>> 0 < $__ne >>> 0) $__ns$035 = $37; else {
      $__nf$1 = $28;
      $__ns$2 = $37;
      break;
     }
    }
   } else {
    $__nf$1 = $28;
    $__ns$2 = $28;
   }
  } else label = 4;
 } else label = 4; else label = 4; while (0);
 L11 : do if ((label | 0) == 4) if ($__nf$0 >>> 0 < $__ne >>> 0) {
  $__ns$130 = $__nf$0;
  while (1) {
   $46 = HEAP8[$__ns$130 >> 0] | 0;
   $44 = $__ns$130 + 1 | 0;
   if (!(_isdigit_l($46 << 24 >> 24, __ZNSt3__16__clocEv() | 0) | 0)) {
    $__nf$1 = $__nf$0;
    $__ns$2 = $__ns$130;
    break L11;
   }
   if ($44 >>> 0 < $__ne >>> 0) $__ns$130 = $44; else {
    $__nf$1 = $__nf$0;
    $__ns$2 = $44;
    break;
   }
  }
 } else {
  $__nf$1 = $__nf$0;
  $__ns$2 = $__nf$0;
 } while (0);
 $51 = HEAP8[$__grouping >> 0] | 0;
 if (!($51 & 1)) $58 = ($51 & 255) >>> 1; else $58 = HEAP32[$__grouping + 4 >> 2] | 0;
 if (!$58) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 7]($0, $__nf$1, $__ns$2, HEAP32[$__oe >> 2] | 0) | 0;
  $68 = (HEAP32[$__oe >> 2] | 0) + ($__ns$2 - $__nf$1 << 2) | 0;
  HEAP32[$__oe >> 2] = $68;
  $167 = $68;
 } else {
  if (($__nf$1 | 0) != ($__ns$2 | 0)) {
   $70 = $__ns$2 + -1 | 0;
   if ($70 >>> 0 > $__nf$1 >>> 0) {
    $$012$i$i = $__nf$1;
    $74 = $70;
    $77 = $__ns$2;
    while (1) {
     $72 = HEAP8[$$012$i$i >> 0] | 0;
     HEAP8[$$012$i$i >> 0] = HEAP8[$74 >> 0] | 0;
     HEAP8[$74 >> 0] = $72;
     $$012$i$i = $$012$i$i + 1 | 0;
     $76 = $77 + -2 | 0;
     if ($$012$i$i >>> 0 >= $76 >>> 0) break; else {
      $77$phi = $74;
      $74 = $76;
      $77 = $77$phi;
     }
    }
   }
  }
  $82 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] & 63]($1) | 0;
  if ($__nf$1 >>> 0 < $__ns$2 >>> 0) {
   $84 = $__grouping + 1 | 0;
   $85 = $__grouping + 4 | 0;
   $86 = $__grouping + 8 | 0;
   $__dc$026 = 0;
   $__dg$027 = 0;
   $__p$028 = $__nf$1;
   while (1) {
    $89 = (HEAP8[$__grouping >> 0] & 1) == 0;
    if ((HEAP8[($89 ? $84 : HEAP32[$86 >> 2] | 0) + $__dg$027 >> 0] | 0) > 0) if (($__dc$026 | 0) == (HEAP8[($89 ? $84 : HEAP32[$86 >> 2] | 0) + $__dg$027 >> 0] | 0)) {
     $99 = HEAP32[$__oe >> 2] | 0;
     HEAP32[$__oe >> 2] = $99 + 4;
     HEAP32[$99 >> 2] = $82;
     $101 = HEAP8[$__grouping >> 0] | 0;
     if (!($101 & 1)) $108 = ($101 & 255) >>> 1; else $108 = HEAP32[$85 >> 2] | 0;
     $__dc$1 = 0;
     $__dg$1 = ($__dg$027 >>> 0 < ($108 + -1 | 0) >>> 0 & 1) + $__dg$027 | 0;
    } else {
     $__dc$1 = $__dc$026;
     $__dg$1 = $__dg$027;
    } else {
     $__dc$1 = $__dc$026;
     $__dg$1 = $__dg$027;
    }
    $115 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 31]($0, HEAP8[$__p$028 >> 0] | 0) | 0;
    $116 = HEAP32[$__oe >> 2] | 0;
    $117 = $116 + 4 | 0;
    HEAP32[$__oe >> 2] = $117;
    HEAP32[$116 >> 2] = $115;
    $__p$028 = $__p$028 + 1 | 0;
    if ($__p$028 >>> 0 >= $__ns$2 >>> 0) {
     $126 = $117;
     break;
    } else {
     $__dc$026 = $__dc$1 + 1 | 0;
     $__dg$027 = $__dg$1;
    }
   }
  } else $126 = HEAP32[$__oe >> 2] | 0;
  $124 = $__ob + ($__nf$1 - $__nb << 2) | 0;
  if (($124 | 0) == ($126 | 0)) $167 = $126; else {
   $127 = $126 + -4 | 0;
   if ($127 >>> 0 > $124 >>> 0) {
    $$012$i$i7 = $124;
    $131 = $127;
    $134 = $126;
    while (1) {
     $129 = HEAP32[$$012$i$i7 >> 2] | 0;
     HEAP32[$$012$i$i7 >> 2] = HEAP32[$131 >> 2];
     HEAP32[$131 >> 2] = $129;
     $$012$i$i7 = $$012$i$i7 + 4 | 0;
     $133 = $134 + -8 | 0;
     if ($$012$i$i7 >>> 0 >= $133 >>> 0) {
      $167 = $126;
      break;
     } else {
      $134$phi = $131;
      $131 = $133;
      $134 = $134$phi;
     }
    }
   } else $167 = $126;
  }
 }
 L47 : do if ($__ns$2 >>> 0 < $__ne >>> 0) {
  $__nf$225 = $__ns$2;
  while (1) {
   $137 = HEAP8[$__nf$225 >> 0] | 0;
   if ($137 << 24 >> 24 == 46) {
    $__nf$225$lcssa = $__nf$225;
    break;
   }
   $149 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 31]($0, $137) | 0;
   $150 = HEAP32[$__oe >> 2] | 0;
   $151 = $150 + 4 | 0;
   HEAP32[$__oe >> 2] = $151;
   HEAP32[$150 >> 2] = $149;
   $152 = $__nf$225 + 1 | 0;
   if ($152 >>> 0 < $__ne >>> 0) $__nf$225 = $152; else {
    $157 = $151;
    $__nf$3 = $152;
    break L47;
   }
  }
  $142 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] & 63]($1) | 0;
  $143 = HEAP32[$__oe >> 2] | 0;
  $144 = $143 + 4 | 0;
  HEAP32[$__oe >> 2] = $144;
  HEAP32[$143 >> 2] = $142;
  $157 = $144;
  $__nf$3 = $__nf$225$lcssa + 1 | 0;
 } else {
  $157 = $167;
  $__nf$3 = $__ns$2;
 } while (0);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 7]($0, $__nf$3, $__ne, $157) | 0;
 $161 = (HEAP32[$__oe >> 2] | 0) + ($13 - $__nf$3 << 2) | 0;
 HEAP32[$__oe >> 2] = $161;
 if (($__np | 0) == ($__ne | 0)) $storemerge = $161; else $storemerge = $__ob + ($__np - $__nb << 2) | 0;
 HEAP32[$__op >> 2] = $storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}

function _mbsrtowcs($ws, $src, $wn, $st) {
 $ws = $ws | 0;
 $src = $src | 0;
 $wn = $wn | 0;
 $st = $st | 0;
 var $$0 = 0, $$02$ph = 0, $$0217 = 0, $$03 = 0, $$1 = 0, $$14$lcssa = 0, $$1413 = 0, $$2 = 0, $$2$lcssa = 0, $$25 = 0, $$25$lcssa = 0, $$3 = 0, $$36 = 0, $$4 = 0, $$431 = 0, $$432 = 0, $$47$ph = 0, $$4716 = 0, $$5 = 0, $$6 = 0, $$6$lcssa = 0, $$7 = 0, $$8 = 0, $$830 = 0, $$in = 0, $$lcssa37 = 0, $$lcssa43 = 0, $$lcssa44 = 0, $$lcssa45 = 0, $$lcssa49 = 0, $0 = 0, $101 = 0, $107 = 0, $108 = 0, $116 = 0, $118 = 0, $121 = 0, $126 = 0, $128 = 0, $131 = 0, $14 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $27 = 0, $28 = 0, $33 = 0, $40 = 0, $47 = 0, $54 = 0, $63 = 0, $7 = 0, $71 = 0, $88 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $97 = 0, $c$2 = 0, $c$4 = 0, $c$5 = 0, $c$6 = 0, $s$0 = 0, $s$1$lcssa = 0, $s$10 = 0, $s$1033 = 0, $s$1034 = 0, $s$114 = 0, $s$2 = 0, $s$2$lcssa = 0, $s$3 = 0, $s$4 = 0, $s$5$lcssa = 0, $s$5$ph = 0, $s$518 = 0, $s$6 = 0, $s$7 = 0, $s$7$lcssa = 0, $s$8 = 0, $s$9 = 0, label = 0;
 $0 = HEAP32[$src >> 2] | 0;
 if (!$st) label = 5; else {
  $2 = HEAP32[$st >> 2] | 0;
  if (!$2) label = 5; else if (!$ws) {
   $$36 = $wn;
   $c$2 = $2;
   $s$3 = $0;
   label = 16;
  } else {
   HEAP32[$st >> 2] = 0;
   $$3 = $ws;
   $$7 = $wn;
   $c$4 = $2;
   $s$8 = $0;
   label = 36;
  }
 }
 if ((label | 0) == 5) if (!$ws) {
  $$03 = $wn;
  $s$0 = $0;
  label = 7;
 } else {
  $$02$ph = $ws;
  $$47$ph = $wn;
  $s$5$ph = $0;
  label = 6;
 }
 L7 : while (1) if ((label | 0) == 6) {
  label = 0;
  if (!$$47$ph) {
   $s$5$lcssa = $s$5$ph;
   label = 26;
   break;
  } else {
   $$0217 = $$02$ph;
   $$4716 = $$47$ph;
   $s$518 = $s$5$ph;
  }
  while (1) {
   $63 = HEAP8[$s$518 >> 0] | 0;
   L12 : do if ((($63 & 255) + -1 | 0) >>> 0 < 127) if (($s$518 & 3 | 0) == 0 & $$4716 >>> 0 > 4) {
    $$1 = $$0217;
    $$5 = $$4716;
    $s$6 = $s$518;
    while (1) {
     $71 = HEAP32[$s$6 >> 2] | 0;
     if (($71 + -16843009 | $71) & -2139062144) {
      $$2 = $$1;
      $$6 = $$5;
      $94 = $71 & 255;
      $s$7 = $s$6;
      break L12;
     }
     HEAP32[$$1 >> 2] = $71 & 255;
     HEAP32[$$1 + 4 >> 2] = HEAPU8[$s$6 + 1 >> 0];
     HEAP32[$$1 + 8 >> 2] = HEAPU8[$s$6 + 2 >> 0];
     $88 = $s$6 + 4 | 0;
     $91 = $$1 + 16 | 0;
     HEAP32[$$1 + 12 >> 2] = HEAPU8[$s$6 + 3 >> 0];
     $92 = $$5 + -4 | 0;
     if ($92 >>> 0 > 4) {
      $$1 = $91;
      $$5 = $92;
      $s$6 = $88;
     } else {
      $$lcssa43 = $88;
      $$lcssa44 = $91;
      $$lcssa45 = $92;
      break;
     }
    }
    $$2 = $$lcssa44;
    $$6 = $$lcssa45;
    $94 = HEAP8[$$lcssa43 >> 0] | 0;
    $s$7 = $$lcssa43;
   } else {
    $$2 = $$0217;
    $$6 = $$4716;
    $94 = $63;
    $s$7 = $s$518;
   } else {
    $$2 = $$0217;
    $$6 = $$4716;
    $94 = $63;
    $s$7 = $s$518;
   } while (0);
   $93 = $94 & 255;
   if (($93 + -1 | 0) >>> 0 >= 127) {
    $$2$lcssa = $$2;
    $$6$lcssa = $$6;
    $$lcssa49 = $93;
    $s$7$lcssa = $s$7;
    break;
   }
   $97 = $s$7 + 1 | 0;
   HEAP32[$$2 >> 2] = $93;
   $$4716 = $$6 + -1 | 0;
   if (!$$4716) {
    $s$5$lcssa = $97;
    label = 26;
    break L7;
   } else {
    $$0217 = $$2 + 4 | 0;
    $s$518 = $97;
   }
  }
  $101 = $$lcssa49 + -194 | 0;
  if ($101 >>> 0 > 50) {
   $$432 = $$2$lcssa;
   $$830 = $$6$lcssa;
   $s$1034 = $s$7$lcssa;
   label = 47;
   break;
  }
  $$3 = $$2$lcssa;
  $$7 = $$6$lcssa;
  $c$4 = HEAP32[12560 + ($101 << 2) >> 2] | 0;
  $s$8 = $s$7$lcssa + 1 | 0;
  label = 36;
  continue;
 } else if ((label | 0) == 7) {
  label = 0;
  $7 = HEAP8[$s$0 >> 0] | 0;
  if ((($7 & 255) + -1 | 0) >>> 0 < 127) if (!($s$0 & 3)) {
   $14 = HEAP32[$s$0 >> 2] | 0;
   if (!(($14 + -16843009 | $14) & -2139062144)) {
    $$1413 = $$03;
    $s$114 = $s$0;
    while (1) {
     $19 = $s$114 + 4 | 0;
     $20 = $$1413 + -4 | 0;
     $21 = HEAP32[$19 >> 2] | 0;
     if (!(($21 + -16843009 | $21) & -2139062144)) {
      $$1413 = $20;
      $s$114 = $19;
     } else {
      $$14$lcssa = $20;
      $$in = $21;
      $s$1$lcssa = $19;
      break;
     }
    }
   } else {
    $$14$lcssa = $$03;
    $$in = $14;
    $s$1$lcssa = $s$0;
   }
   $$25 = $$14$lcssa;
   $28 = $$in & 255;
   $s$2 = $s$1$lcssa;
  } else {
   $$25 = $$03;
   $28 = $7;
   $s$2 = $s$0;
  } else {
   $$25 = $$03;
   $28 = $7;
   $s$2 = $s$0;
  }
  $27 = $28 & 255;
  if (($27 + -1 | 0) >>> 0 < 127) {
   $$03 = $$25 + -1 | 0;
   $s$0 = $s$2 + 1 | 0;
   label = 7;
   continue;
  } else {
   $$25$lcssa = $$25;
   $$lcssa37 = $27;
   $s$2$lcssa = $s$2;
  }
  $33 = $$lcssa37 + -194 | 0;
  if ($33 >>> 0 > 50) {
   $$432 = $ws;
   $$830 = $$25$lcssa;
   $s$1034 = $s$2$lcssa;
   label = 47;
   break;
  }
  $$36 = $$25$lcssa;
  $c$2 = HEAP32[12560 + ($33 << 2) >> 2] | 0;
  $s$3 = $s$2$lcssa + 1 | 0;
  label = 16;
  continue;
 } else if ((label | 0) == 16) {
  label = 0;
  $40 = (HEAPU8[$s$3 >> 0] | 0) >>> 3;
  if (($40 + -16 | $40 + ($c$2 >> 26)) >>> 0 > 7) {
   label = 17;
   break;
  }
  $47 = $s$3 + 1 | 0;
  if (!($c$2 & 33554432)) $s$4 = $47; else {
   if ((HEAP8[$47 >> 0] & -64) << 24 >> 24 != -128) {
    label = 20;
    break;
   }
   $54 = $s$3 + 2 | 0;
   if (!($c$2 & 524288)) $s$4 = $54; else {
    if ((HEAP8[$54 >> 0] & -64) << 24 >> 24 != -128) {
     label = 23;
     break;
    }
    $s$4 = $s$3 + 3 | 0;
   }
  }
  $$03 = $$36 + -1 | 0;
  $s$0 = $s$4;
  label = 7;
  continue;
 } else if ((label | 0) == 36) {
  label = 0;
  $107 = HEAPU8[$s$8 >> 0] | 0;
  $108 = $107 >>> 3;
  if (($108 + -16 | $108 + ($c$4 >> 26)) >>> 0 > 7) {
   label = 37;
   break;
  }
  $116 = $s$8 + 1 | 0;
  $118 = $107 + -128 | $c$4 << 6;
  if (($118 | 0) < 0) {
   $121 = HEAPU8[$116 >> 0] | 0;
   if (($121 & 192 | 0) != 128) {
    label = 40;
    break;
   }
   $126 = $s$8 + 2 | 0;
   $128 = $121 + -128 | $118 << 6;
   if (($128 | 0) < 0) {
    $131 = HEAPU8[$126 >> 0] | 0;
    if (($131 & 192 | 0) != 128) {
     label = 43;
     break;
    }
    $c$5 = $131 + -128 | $128 << 6;
    $s$9 = $s$8 + 3 | 0;
   } else {
    $c$5 = $128;
    $s$9 = $126;
   }
  } else {
   $c$5 = $118;
   $s$9 = $116;
  }
  HEAP32[$$3 >> 2] = $c$5;
  $$02$ph = $$3 + 4 | 0;
  $$47$ph = $$7 + -1 | 0;
  $s$5$ph = $s$9;
  label = 6;
  continue;
 }
 if ((label | 0) == 17) {
  $$4 = $ws;
  $$8 = $$36;
  $c$6 = $c$2;
  $s$10 = $s$3 + -1 | 0;
  label = 46;
 } else if ((label | 0) == 20) {
  $$4 = $ws;
  $$8 = $$36;
  $c$6 = $c$2;
  $s$10 = $s$3 + -1 | 0;
  label = 46;
 } else if ((label | 0) == 23) {
  $$4 = $ws;
  $$8 = $$36;
  $c$6 = $c$2;
  $s$10 = $s$3 + -1 | 0;
  label = 46;
 } else if ((label | 0) == 26) {
  HEAP32[$src >> 2] = $s$5$lcssa;
  $$0 = $wn;
  return $$0 | 0;
 } else if ((label | 0) == 37) {
  $$4 = $$3;
  $$8 = $$7;
  $c$6 = $c$4;
  $s$10 = $s$8 + -1 | 0;
  label = 46;
 } else if ((label | 0) == 40) {
  $$4 = $$3;
  $$8 = $$7;
  $c$6 = $118;
  $s$10 = $s$8 + -1 | 0;
  label = 46;
 } else if ((label | 0) == 43) {
  $$4 = $$3;
  $$8 = $$7;
  $c$6 = $128;
  $s$10 = $s$8 + -1 | 0;
  label = 46;
 }
 if ((label | 0) == 46) if (!$c$6) {
  $$432 = $$4;
  $$830 = $$8;
  $s$1034 = $s$10;
  label = 47;
 } else {
  $$431 = $$4;
  $s$1033 = $s$10;
 }
 if ((label | 0) == 47) if (!(HEAP8[$s$1034 >> 0] | 0)) {
  if ($$432) {
   HEAP32[$$432 >> 2] = 0;
   HEAP32[$src >> 2] = 0;
  }
  $$0 = $wn - $$830 | 0;
  return $$0 | 0;
 } else {
  $$431 = $$432;
  $s$1033 = $s$1034;
 }
 HEAP32[(___errno_location() | 0) >> 2] = 84;
 if (!$$431) {
  $$0 = -1;
  return $$0 | 0;
 }
 HEAP32[$src >> 2] = $s$1033;
 $$0 = -1;
 return $$0 | 0;
}

function __ZNSt3__111__money_getIcE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_SF_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd) {
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__psn = $__psn | 0;
 $__nsn = $__nsn | 0;
 $__fd = $__fd | 0;
 var $0 = 0, $1 = 0, $10 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $67 = 0, $7 = 0, $71 = 0, $8 = 0, $9 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 100 | 0;
 $1 = sp + 88 | 0;
 $2 = sp + 76 | 0;
 $3 = sp + 64 | 0;
 $4 = sp + 52 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 36 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 if ($__intl) {
  $10 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 4344) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 44 >> 2] & 63]($0, $10);
  $14 = HEAP32[$0 >> 2] | 0;
  HEAP8[$__pat >> 0] = $14;
  HEAP8[$__pat + 1 >> 0] = $14 >> 8;
  HEAP8[$__pat + 2 >> 0] = $14 >> 16;
  HEAP8[$__pat + 3 >> 0] = $14 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 32 >> 2] & 63]($1, $10);
  if (!(HEAP8[$__nsn >> 0] & 1)) {
   HEAP8[$__nsn + 1 >> 0] = 0;
   HEAP8[$__nsn >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__nsn + 8 >> 2] >> 0] = 0;
   HEAP32[$__nsn + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn, 0);
  HEAP32[$__nsn + 0 >> 2] = HEAP32[$1 + 0 >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 0 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 28 >> 2] & 63]($2, $10);
  if (!(HEAP8[$__psn >> 0] & 1)) {
   HEAP8[$__psn + 1 >> 0] = 0;
   HEAP8[$__psn >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__psn + 8 >> 2] >> 0] = 0;
   HEAP32[$__psn + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn, 0);
  HEAP32[$__psn + 0 >> 2] = HEAP32[$2 + 0 >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$2 + 0 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$2 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($2);
  HEAP8[$__dp >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 63]($10) | 0;
  HEAP8[$__ts >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 16 >> 2] & 63]($10) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 63]($3, $10);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp + 0 >> 2] = HEAP32[$3 + 0 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP32[$3 + 0 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$3 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] & 63]($4, $10);
  if (!(HEAP8[$__sym >> 0] & 1)) {
   HEAP8[$__sym + 1 >> 0] = 0;
   HEAP8[$__sym >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2] >> 0] = 0;
   HEAP32[$__sym + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym, 0);
  HEAP32[$__sym + 0 >> 2] = HEAP32[$4 + 0 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$4 + 8 >> 2];
  HEAP32[$4 + 0 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($4);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 63]($10) | 0;
 } else {
  $67 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 4280) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$67 >> 2] | 0) + 44 >> 2] & 63]($5, $67);
  $71 = HEAP32[$5 >> 2] | 0;
  HEAP8[$__pat >> 0] = $71;
  HEAP8[$__pat + 1 >> 0] = $71 >> 8;
  HEAP8[$__pat + 2 >> 0] = $71 >> 16;
  HEAP8[$__pat + 3 >> 0] = $71 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$67 >> 2] | 0) + 32 >> 2] & 63]($6, $67);
  if (!(HEAP8[$__nsn >> 0] & 1)) {
   HEAP8[$__nsn + 1 >> 0] = 0;
   HEAP8[$__nsn >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__nsn + 8 >> 2] >> 0] = 0;
   HEAP32[$__nsn + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn, 0);
  HEAP32[$__nsn + 0 >> 2] = HEAP32[$6 + 0 >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$6 + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$6 + 8 >> 2];
  HEAP32[$6 + 0 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  HEAP32[$6 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($6);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$67 >> 2] | 0) + 28 >> 2] & 63]($7, $67);
  if (!(HEAP8[$__psn >> 0] & 1)) {
   HEAP8[$__psn + 1 >> 0] = 0;
   HEAP8[$__psn >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__psn + 8 >> 2] >> 0] = 0;
   HEAP32[$__psn + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn, 0);
  HEAP32[$__psn + 0 >> 2] = HEAP32[$7 + 0 >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$7 + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$7 + 8 >> 2];
  HEAP32[$7 + 0 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  HEAP32[$7 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($7);
  HEAP8[$__dp >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$67 >> 2] | 0) + 12 >> 2] & 63]($67) | 0;
  HEAP8[$__ts >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$67 >> 2] | 0) + 16 >> 2] & 63]($67) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$67 >> 2] | 0) + 20 >> 2] & 63]($8, $67);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp + 0 >> 2] = HEAP32[$8 + 0 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$8 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$8 + 8 >> 2];
  HEAP32[$8 + 0 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  HEAP32[$8 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$67 >> 2] | 0) + 24 >> 2] & 63]($9, $67);
  if (!(HEAP8[$__sym >> 0] & 1)) {
   HEAP8[$__sym + 1 >> 0] = 0;
   HEAP8[$__sym >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__sym + 8 >> 2] >> 0] = 0;
   HEAP32[$__sym + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym, 0);
  HEAP32[$__sym + 0 >> 2] = HEAP32[$9 + 0 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$9 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$9 + 8 >> 2];
  HEAP32[$9 + 0 >> 2] = 0;
  HEAP32[$9 + 4 >> 2] = 0;
  HEAP32[$9 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($9);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$67 >> 2] | 0) + 36 >> 2] & 63]($67) | 0;
 }
 HEAP32[$__fd >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$012$i$i = 0, $$012$i$i7 = 0, $0 = 0, $1 = 0, $101 = 0, $108 = 0, $11 = 0, $115 = 0, $116 = 0, $124 = 0, $125 = 0, $127 = 0, $129 = 0, $13 = 0, $131 = 0, $133 = 0, $134 = 0, $134$phi = 0, $137 = 0, $142 = 0, $143 = 0, $149 = 0, $150 = 0, $152 = 0, $161 = 0, $20 = 0, $21 = 0, $25 = 0, $26 = 0, $28 = 0, $33 = 0, $34 = 0, $37 = 0, $39 = 0, $44 = 0, $46 = 0, $5 = 0, $51 = 0, $58 = 0, $70 = 0, $72 = 0, $74 = 0, $76 = 0, $77 = 0, $77$phi = 0, $82 = 0, $84 = 0, $85 = 0, $86 = 0, $89 = 0, $9 = 0, $99 = 0, $__dc$027 = 0, $__dc$1 = 0, $__dg$028 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__nf$226 = 0, $__nf$226$lcssa = 0, $__nf$3 = 0, $__ns$036 = 0, $__ns$131 = 0, $__ns$2 = 0, $__p$029 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__grouping = sp;
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 4904) | 0;
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 5048) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] & 63]($__grouping, $1);
 HEAP32[$__oe >> 2] = $__ob;
 $5 = HEAP8[$__nb >> 0] | 0;
 if ($5 << 24 >> 24 == 43 | $5 << 24 >> 24 == 45) {
  $9 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 31]($0, $5) | 0;
  $11 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $11 + 1;
  HEAP8[$11 >> 0] = $9;
  $__nf$0 = $__nb + 1 | 0;
 } else $__nf$0 = $__nb;
 $13 = $__ne;
 L4 : do if (($13 - $__nf$0 | 0) > 1) if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
  $20 = $__nf$0 + 1 | 0;
  $21 = HEAP8[$20 >> 0] | 0;
  if ($21 << 24 >> 24 == 88 | $21 << 24 >> 24 == 120) {
   $25 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 31]($0, 48) | 0;
   $26 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $26 + 1;
   HEAP8[$26 >> 0] = $25;
   $28 = $__nf$0 + 2 | 0;
   $33 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 31]($0, HEAP8[$20 >> 0] | 0) | 0;
   $34 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $34 + 1;
   HEAP8[$34 >> 0] = $33;
   if ($28 >>> 0 < $__ne >>> 0) {
    $__ns$036 = $28;
    while (1) {
     $39 = HEAP8[$__ns$036 >> 0] | 0;
     $37 = $__ns$036 + 1 | 0;
     if (!(_isxdigit_l($39 << 24 >> 24, __ZNSt3__16__clocEv() | 0) | 0)) {
      $__nf$1 = $28;
      $__ns$2 = $__ns$036;
      break L4;
     }
     if ($37 >>> 0 < $__ne >>> 0) $__ns$036 = $37; else {
      $__nf$1 = $28;
      $__ns$2 = $37;
      break;
     }
    }
   } else {
    $__nf$1 = $28;
    $__ns$2 = $28;
   }
  } else label = 4;
 } else label = 4; else label = 4; while (0);
 L11 : do if ((label | 0) == 4) if ($__nf$0 >>> 0 < $__ne >>> 0) {
  $__ns$131 = $__nf$0;
  while (1) {
   $46 = HEAP8[$__ns$131 >> 0] | 0;
   $44 = $__ns$131 + 1 | 0;
   if (!(_isdigit_l($46 << 24 >> 24, __ZNSt3__16__clocEv() | 0) | 0)) {
    $__nf$1 = $__nf$0;
    $__ns$2 = $__ns$131;
    break L11;
   }
   if ($44 >>> 0 < $__ne >>> 0) $__ns$131 = $44; else {
    $__nf$1 = $__nf$0;
    $__ns$2 = $44;
    break;
   }
  }
 } else {
  $__nf$1 = $__nf$0;
  $__ns$2 = $__nf$0;
 } while (0);
 $51 = HEAP8[$__grouping >> 0] | 0;
 if (!($51 & 1)) $58 = ($51 & 255) >>> 1; else $58 = HEAP32[$__grouping + 4 >> 2] | 0;
 if (!$58) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] & 7]($0, $__nf$1, $__ns$2, HEAP32[$__oe >> 2] | 0) | 0;
  HEAP32[$__oe >> 2] = (HEAP32[$__oe >> 2] | 0) + ($__ns$2 - $__nf$1);
 } else {
  if (($__nf$1 | 0) != ($__ns$2 | 0)) {
   $70 = $__ns$2 + -1 | 0;
   if ($70 >>> 0 > $__nf$1 >>> 0) {
    $$012$i$i = $__nf$1;
    $74 = $70;
    $77 = $__ns$2;
    while (1) {
     $72 = HEAP8[$$012$i$i >> 0] | 0;
     HEAP8[$$012$i$i >> 0] = HEAP8[$74 >> 0] | 0;
     HEAP8[$74 >> 0] = $72;
     $$012$i$i = $$012$i$i + 1 | 0;
     $76 = $77 + -2 | 0;
     if ($$012$i$i >>> 0 >= $76 >>> 0) break; else {
      $77$phi = $74;
      $74 = $76;
      $77 = $77$phi;
     }
    }
   }
  }
  $82 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] & 63]($1) | 0;
  if ($__nf$1 >>> 0 < $__ns$2 >>> 0) {
   $84 = $__grouping + 1 | 0;
   $85 = $__grouping + 4 | 0;
   $86 = $__grouping + 8 | 0;
   $__dc$027 = 0;
   $__dg$028 = 0;
   $__p$029 = $__nf$1;
   while (1) {
    $89 = (HEAP8[$__grouping >> 0] & 1) == 0;
    if ((HEAP8[($89 ? $84 : HEAP32[$86 >> 2] | 0) + $__dg$028 >> 0] | 0) > 0) if (($__dc$027 | 0) == (HEAP8[($89 ? $84 : HEAP32[$86 >> 2] | 0) + $__dg$028 >> 0] | 0)) {
     $99 = HEAP32[$__oe >> 2] | 0;
     HEAP32[$__oe >> 2] = $99 + 1;
     HEAP8[$99 >> 0] = $82;
     $101 = HEAP8[$__grouping >> 0] | 0;
     if (!($101 & 1)) $108 = ($101 & 255) >>> 1; else $108 = HEAP32[$85 >> 2] | 0;
     $__dc$1 = 0;
     $__dg$1 = ($__dg$028 >>> 0 < ($108 + -1 | 0) >>> 0 & 1) + $__dg$028 | 0;
    } else {
     $__dc$1 = $__dc$027;
     $__dg$1 = $__dg$028;
    } else {
     $__dc$1 = $__dc$027;
     $__dg$1 = $__dg$028;
    }
    $115 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 31]($0, HEAP8[$__p$029 >> 0] | 0) | 0;
    $116 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $116 + 1;
    HEAP8[$116 >> 0] = $115;
    $__p$029 = $__p$029 + 1 | 0;
    if ($__p$029 >>> 0 >= $__ns$2 >>> 0) break; else {
     $__dc$027 = $__dc$1 + 1 | 0;
     $__dg$028 = $__dg$1;
    }
   }
  }
  $124 = $__ob + ($__nf$1 - $__nb) | 0;
  $125 = HEAP32[$__oe >> 2] | 0;
  if (($124 | 0) != ($125 | 0)) {
   $127 = $125 + -1 | 0;
   if ($127 >>> 0 > $124 >>> 0) {
    $$012$i$i7 = $124;
    $131 = $127;
    $134 = $125;
    while (1) {
     $129 = HEAP8[$$012$i$i7 >> 0] | 0;
     HEAP8[$$012$i$i7 >> 0] = HEAP8[$131 >> 0] | 0;
     HEAP8[$131 >> 0] = $129;
     $$012$i$i7 = $$012$i$i7 + 1 | 0;
     $133 = $134 + -2 | 0;
     if ($$012$i$i7 >>> 0 >= $133 >>> 0) break; else {
      $134$phi = $131;
      $131 = $133;
      $134 = $134$phi;
     }
    }
   }
  }
 }
 L46 : do if ($__ns$2 >>> 0 < $__ne >>> 0) {
  $__nf$226 = $__ns$2;
  while (1) {
   $137 = HEAP8[$__nf$226 >> 0] | 0;
   if ($137 << 24 >> 24 == 46) {
    $__nf$226$lcssa = $__nf$226;
    break;
   }
   $149 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 31]($0, $137) | 0;
   $150 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $150 + 1;
   HEAP8[$150 >> 0] = $149;
   $152 = $__nf$226 + 1 | 0;
   if ($152 >>> 0 < $__ne >>> 0) $__nf$226 = $152; else {
    $__nf$3 = $152;
    break L46;
   }
  }
  $142 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 12 >> 2] & 63]($1) | 0;
  $143 = HEAP32[$__oe >> 2] | 0;
  HEAP32[$__oe >> 2] = $143 + 1;
  HEAP8[$143 >> 0] = $142;
  $__nf$3 = $__nf$226$lcssa + 1 | 0;
 } else $__nf$3 = $__ns$2; while (0);
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] & 7]($0, $__nf$3, $__ne, HEAP32[$__oe >> 2] | 0) | 0;
 $161 = (HEAP32[$__oe >> 2] | 0) + ($13 - $__nf$3) | 0;
 HEAP32[$__oe >> 2] = $161;
 if (($__np | 0) == ($__ne | 0)) $storemerge = $161; else $storemerge = $__ob + ($__np - $__nb) | 0;
 HEAP32[$__op >> 2] = $storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNSt3__111__money_getIwE13__gather_infoEbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_SJ_Ri($__intl, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__psn, $__nsn, $__fd) {
 $__intl = $__intl | 0;
 $__loc = $__loc | 0;
 $__pat = $__pat | 0;
 $__dp = $__dp | 0;
 $__ts = $__ts | 0;
 $__grp = $__grp | 0;
 $__sym = $__sym | 0;
 $__psn = $__psn | 0;
 $__nsn = $__nsn | 0;
 $__fd = $__fd | 0;
 var $0 = 0, $1 = 0, $10 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $64 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $0 = sp + 100 | 0;
 $1 = sp + 88 | 0;
 $2 = sp + 76 | 0;
 $3 = sp + 64 | 0;
 $4 = sp + 52 | 0;
 $5 = sp + 48 | 0;
 $6 = sp + 36 | 0;
 $7 = sp + 24 | 0;
 $8 = sp + 12 | 0;
 $9 = sp;
 if ($__intl) {
  $10 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 4472) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 44 >> 2] & 63]($0, $10);
  $14 = HEAP32[$0 >> 2] | 0;
  HEAP8[$__pat >> 0] = $14;
  HEAP8[$__pat + 1 >> 0] = $14 >> 8;
  HEAP8[$__pat + 2 >> 0] = $14 >> 16;
  HEAP8[$__pat + 3 >> 0] = $14 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 32 >> 2] & 63]($1, $10);
  if (!(HEAP8[$__nsn >> 0] & 1)) HEAP8[$__nsn >> 0] = 0; else HEAP32[HEAP32[$__nsn + 8 >> 2] >> 2] = 0;
  HEAP32[$__nsn + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn, 0);
  HEAP32[$__nsn + 0 >> 2] = HEAP32[$1 + 0 >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$1 + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$1 + 8 >> 2];
  HEAP32[$1 + 0 >> 2] = 0;
  HEAP32[$1 + 4 >> 2] = 0;
  HEAP32[$1 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($1);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 28 >> 2] & 63]($2, $10);
  if (!(HEAP8[$__psn >> 0] & 1)) HEAP8[$__psn >> 0] = 0; else HEAP32[HEAP32[$__psn + 8 >> 2] >> 2] = 0;
  HEAP32[$__psn + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn, 0);
  HEAP32[$__psn + 0 >> 2] = HEAP32[$2 + 0 >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$2 + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$2 + 8 >> 2];
  HEAP32[$2 + 0 >> 2] = 0;
  HEAP32[$2 + 4 >> 2] = 0;
  HEAP32[$2 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($2);
  HEAP32[$__dp >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 12 >> 2] & 63]($10) | 0;
  HEAP32[$__ts >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 16 >> 2] & 63]($10) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 20 >> 2] & 63]($3, $10);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp + 0 >> 2] = HEAP32[$3 + 0 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$3 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$3 + 8 >> 2];
  HEAP32[$3 + 0 >> 2] = 0;
  HEAP32[$3 + 4 >> 2] = 0;
  HEAP32[$3 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($3);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$10 >> 2] | 0) + 24 >> 2] & 63]($4, $10);
  if (!(HEAP8[$__sym >> 0] & 1)) HEAP8[$__sym >> 0] = 0; else HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0;
  HEAP32[$__sym + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym, 0);
  HEAP32[$__sym + 0 >> 2] = HEAP32[$4 + 0 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$4 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$4 + 8 >> 2];
  HEAP32[$4 + 0 >> 2] = 0;
  HEAP32[$4 + 4 >> 2] = 0;
  HEAP32[$4 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($4);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$10 >> 2] | 0) + 36 >> 2] & 63]($10) | 0;
 } else {
  $64 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 4408) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$64 >> 2] | 0) + 44 >> 2] & 63]($5, $64);
  $68 = HEAP32[$5 >> 2] | 0;
  HEAP8[$__pat >> 0] = $68;
  HEAP8[$__pat + 1 >> 0] = $68 >> 8;
  HEAP8[$__pat + 2 >> 0] = $68 >> 16;
  HEAP8[$__pat + 3 >> 0] = $68 >> 24;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$64 >> 2] | 0) + 32 >> 2] & 63]($6, $64);
  if (!(HEAP8[$__nsn >> 0] & 1)) HEAP8[$__nsn >> 0] = 0; else HEAP32[HEAP32[$__nsn + 8 >> 2] >> 2] = 0;
  HEAP32[$__nsn + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn, 0);
  HEAP32[$__nsn + 0 >> 2] = HEAP32[$6 + 0 >> 2];
  HEAP32[$__nsn + 4 >> 2] = HEAP32[$6 + 4 >> 2];
  HEAP32[$__nsn + 8 >> 2] = HEAP32[$6 + 8 >> 2];
  HEAP32[$6 + 0 >> 2] = 0;
  HEAP32[$6 + 4 >> 2] = 0;
  HEAP32[$6 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($6);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$64 >> 2] | 0) + 28 >> 2] & 63]($7, $64);
  if (!(HEAP8[$__psn >> 0] & 1)) HEAP8[$__psn >> 0] = 0; else HEAP32[HEAP32[$__psn + 8 >> 2] >> 2] = 0;
  HEAP32[$__psn + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn, 0);
  HEAP32[$__psn + 0 >> 2] = HEAP32[$7 + 0 >> 2];
  HEAP32[$__psn + 4 >> 2] = HEAP32[$7 + 4 >> 2];
  HEAP32[$__psn + 8 >> 2] = HEAP32[$7 + 8 >> 2];
  HEAP32[$7 + 0 >> 2] = 0;
  HEAP32[$7 + 4 >> 2] = 0;
  HEAP32[$7 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($7);
  HEAP32[$__dp >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$64 >> 2] | 0) + 12 >> 2] & 63]($64) | 0;
  HEAP32[$__ts >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$64 >> 2] | 0) + 16 >> 2] & 63]($64) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$64 >> 2] | 0) + 20 >> 2] & 63]($8, $64);
  if (!(HEAP8[$__grp >> 0] & 1)) {
   HEAP8[$__grp + 1 >> 0] = 0;
   HEAP8[$__grp >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__grp + 8 >> 2] >> 0] = 0;
   HEAP32[$__grp + 4 >> 2] = 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp, 0);
  HEAP32[$__grp + 0 >> 2] = HEAP32[$8 + 0 >> 2];
  HEAP32[$__grp + 4 >> 2] = HEAP32[$8 + 4 >> 2];
  HEAP32[$__grp + 8 >> 2] = HEAP32[$8 + 8 >> 2];
  HEAP32[$8 + 0 >> 2] = 0;
  HEAP32[$8 + 4 >> 2] = 0;
  HEAP32[$8 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($8);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$64 >> 2] | 0) + 24 >> 2] & 63]($9, $64);
  if (!(HEAP8[$__sym >> 0] & 1)) HEAP8[$__sym >> 0] = 0; else HEAP32[HEAP32[$__sym + 8 >> 2] >> 2] = 0;
  HEAP32[$__sym + 4 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym, 0);
  HEAP32[$__sym + 0 >> 2] = HEAP32[$9 + 0 >> 2];
  HEAP32[$__sym + 4 >> 2] = HEAP32[$9 + 4 >> 2];
  HEAP32[$__sym + 8 >> 2] = HEAP32[$9 + 8 >> 2];
  HEAP32[$9 + 0 >> 2] = 0;
  HEAP32[$9 + 4 >> 2] = 0;
  HEAP32[$9 + 8 >> 2] = 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($9);
  $storemerge = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$64 >> 2] | 0) + 36 >> 2] & 63]($64) | 0;
 }
 HEAP32[$__fd >> 2] = $storemerge;
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $14 = 0, $20 = 0, $24 = 0, $25 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $49 = 0, $6 = 0, $61 = 0, $62 = 0, $63 = 0, $66 = 0, $69 = 0, $72 = 0, $79 = 0, $80 = 0, $81 = 0, $does_dst_type_point_to_our_static_type$0$off0$lcssa = 0, $does_dst_type_point_to_our_static_type$0$off016 = 0, $does_dst_type_point_to_our_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$0$off018 = 0, $is_dst_type_derived_from_static_type$1$off0 = 0, $is_dst_type_derived_from_static_type$2$off0 = 0, $is_dst_type_derived_from_static_type$2$off032 = 0, $is_dst_type_derived_from_static_type$2$off033 = 0, $p$017 = 0, $p2$0 = 0, $p2$1 = 0, $p2$2 = 0, label = 0;
 L1 : do if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
   $6 = $info + 28 | 0;
   if ((HEAP32[$6 >> 2] | 0) != 1) HEAP32[$6 >> 2] = $path_below;
  }
 } else {
  if (($this | 0) != (HEAP32[$info >> 2] | 0)) {
   $61 = HEAP32[$this + 12 >> 2] | 0;
   $62 = $this + ($61 << 3) + 16 | 0;
   __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this + 16 | 0, $info, $current_ptr, $path_below, $use_strcmp);
   $63 = $this + 24 | 0;
   if (($61 | 0) <= 1) break;
   $66 = HEAP32[$this + 8 >> 2] | 0;
   if (!($66 & 2)) {
    $69 = $info + 36 | 0;
    if ((HEAP32[$69 >> 2] | 0) != 1) {
     if (!($66 & 1)) {
      $81 = $info + 54 | 0;
      $p2$2 = $63;
      while (1) {
       if (HEAP8[$81 >> 0] | 0) break L1;
       if ((HEAP32[$69 >> 2] | 0) == 1) break L1;
       __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$2, $info, $current_ptr, $path_below, $use_strcmp);
       $p2$2 = $p2$2 + 8 | 0;
       if ($p2$2 >>> 0 >= $62 >>> 0) break L1;
      }
     }
     $79 = $info + 24 | 0;
     $80 = $info + 54 | 0;
     $p2$1 = $63;
     while (1) {
      if (HEAP8[$80 >> 0] | 0) break L1;
      if ((HEAP32[$69 >> 2] | 0) == 1) if ((HEAP32[$79 >> 2] | 0) == 1) break L1;
      __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$1, $info, $current_ptr, $path_below, $use_strcmp);
      $p2$1 = $p2$1 + 8 | 0;
      if ($p2$1 >>> 0 >= $62 >>> 0) break L1;
     }
    }
   }
   $72 = $info + 54 | 0;
   $p2$0 = $63;
   while (1) {
    if (HEAP8[$72 >> 0] | 0) break L1;
    __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($p2$0, $info, $current_ptr, $path_below, $use_strcmp);
    $p2$0 = $p2$0 + 8 | 0;
    if ($p2$0 >>> 0 >= $62 >>> 0) break L1;
   }
  }
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $14 = $info + 20 | 0;
   if ((HEAP32[$14 >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$info + 32 >> 2] = $path_below;
    $20 = $info + 44 | 0;
    if ((HEAP32[$20 >> 2] | 0) == 4) break;
    $24 = HEAP32[$this + 12 >> 2] | 0;
    $25 = $this + ($24 << 3) + 16 | 0;
    L34 : do if (($24 | 0) > 0) {
     $28 = $info + 52 | 0;
     $29 = $info + 53 | 0;
     $30 = $info + 54 | 0;
     $31 = $this + 8 | 0;
     $32 = $info + 24 | 0;
     $does_dst_type_point_to_our_static_type$0$off016 = 0;
     $is_dst_type_derived_from_static_type$0$off018 = 0;
     $p$017 = $this + 16 | 0;
     L36 : while (1) {
      HEAP8[$28 >> 0] = 0;
      HEAP8[$29 >> 0] = 0;
      __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$017, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
      if (HEAP8[$30 >> 0] | 0) {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off016;
       $is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$0$off018;
       break;
      }
      do if (!(HEAP8[$29 >> 0] | 0)) {
       $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off016;
       $is_dst_type_derived_from_static_type$1$off0 = $is_dst_type_derived_from_static_type$0$off018;
      } else {
       if (!(HEAP8[$28 >> 0] | 0)) if (!(HEAP32[$31 >> 2] & 1)) {
        $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$0$off016;
        $is_dst_type_derived_from_static_type$2$off0 = 1;
        break L36;
       } else {
        $does_dst_type_point_to_our_static_type$1$off0 = $does_dst_type_point_to_our_static_type$0$off016;
        $is_dst_type_derived_from_static_type$1$off0 = 1;
        break;
       }
       if ((HEAP32[$32 >> 2] | 0) == 1) {
        label = 25;
        break L34;
       }
       if (!(HEAP32[$31 >> 2] & 2)) {
        label = 25;
        break L34;
       } else {
        $does_dst_type_point_to_our_static_type$1$off0 = 1;
        $is_dst_type_derived_from_static_type$1$off0 = 1;
       }
      } while (0);
      $p$017 = $p$017 + 8 | 0;
      if ($p$017 >>> 0 >= $25 >>> 0) {
       $does_dst_type_point_to_our_static_type$0$off0$lcssa = $does_dst_type_point_to_our_static_type$1$off0;
       $is_dst_type_derived_from_static_type$2$off0 = $is_dst_type_derived_from_static_type$1$off0;
       break;
      } else {
       $does_dst_type_point_to_our_static_type$0$off016 = $does_dst_type_point_to_our_static_type$1$off0;
       $is_dst_type_derived_from_static_type$0$off018 = $is_dst_type_derived_from_static_type$1$off0;
      }
     }
     if ($does_dst_type_point_to_our_static_type$0$off0$lcssa) {
      $is_dst_type_derived_from_static_type$2$off033 = $is_dst_type_derived_from_static_type$2$off0;
      label = 24;
     } else {
      $is_dst_type_derived_from_static_type$2$off032 = $is_dst_type_derived_from_static_type$2$off0;
      label = 21;
     }
    } else {
     $is_dst_type_derived_from_static_type$2$off032 = 0;
     label = 21;
    } while (0);
    if ((label | 0) == 21) {
     HEAP32[$14 >> 2] = $current_ptr;
     $49 = $info + 40 | 0;
     HEAP32[$49 >> 2] = (HEAP32[$49 >> 2] | 0) + 1;
     if ((HEAP32[$info + 36 >> 2] | 0) == 1) if ((HEAP32[$info + 24 >> 2] | 0) == 2) {
      HEAP8[$info + 54 >> 0] = 1;
      if ($is_dst_type_derived_from_static_type$2$off032) label = 25; else label = 26;
     } else {
      $is_dst_type_derived_from_static_type$2$off033 = $is_dst_type_derived_from_static_type$2$off032;
      label = 24;
     } else {
      $is_dst_type_derived_from_static_type$2$off033 = $is_dst_type_derived_from_static_type$2$off032;
      label = 24;
     }
    }
    if ((label | 0) == 24) if ($is_dst_type_derived_from_static_type$2$off033) label = 25; else label = 26;
    if ((label | 0) == 25) {
     HEAP32[$20 >> 2] = 3;
     break;
    } else if ((label | 0) == 26) {
     HEAP32[$20 >> 2] = 4;
     break;
    }
   }
  }
  if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$lcssa = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $101 = 0, $108 = 0, $12 = 0, $120 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $22 = 0, $25 = 0, $3 = 0, $36 = 0, $38 = 0, $43 = 0, $45 = 0, $5 = 0, $51 = 0, $57 = 0, $6 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $78 = 0, $8 = 0, $85 = 0, $9 = 0, $92 = 0, $96 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $__atoms = sp + 208 | 0;
 $__decimal_point = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $__in_units = sp + 337 | 0;
 $__exp = sp + 336 | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $5 = $__buf + 1 | 0;
  $$pre$phi34Z2D = $5;
  $$pre$phi36Z2D = $__buf + 8 | 0;
  $6 = $5;
 } else {
  $3 = $__buf + 8 | 0;
  $$pre$phi34Z2D = $__buf + 1 | 0;
  $$pre$phi36Z2D = $3;
  $6 = HEAP32[$3 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $6;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $7 = $__buf + 4 | 0;
 $8 = HEAP32[$__decimal_point >> 2] | 0;
 $9 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i6 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $6;
 L5 : while (1) {
  if (!$$pre$i$i$i6) {
   $133 = 1;
   $66 = 0;
  } else {
   $12 = HEAP32[$$pre$i$i$i6 + 12 >> 2] | 0;
   if (($12 | 0) == (HEAP32[$$pre$i$i$i6 + 16 >> 2] | 0)) $$0$i$i$i$i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i6 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i6) | 0; else $$0$i$i$i$i4 = HEAP32[$12 >> 2] | 0;
   if (($$0$i$i$i$i4 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $133 = 1;
    $66 = 0;
   } else {
    $133 = 0;
    $66 = $$pre$i$i$i6;
   }
  }
  $22 = HEAP32[$__e >> 2] | 0;
  do if (!$22) label = 17; else {
   $25 = HEAP32[$22 + 12 >> 2] | 0;
   if (($25 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $$0$i$i1$i$i10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $$0$i$i1$i$i10 = HEAP32[$25 >> 2] | 0;
   if (($$0$i$i1$i$i10 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 17;
    break;
   } else if ($133) {
    $134 = $22;
    break;
   } else {
    $$lcssa = $66;
    $$pre$i3$i$i = $22;
    $__a$2 = $__a$0;
    break L5;
   }
  } while (0);
  if ((label | 0) == 17) {
   label = 0;
   if ($133) {
    $$lcssa = $66;
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $134 = 0;
  }
  $36 = HEAP8[$__buf >> 0] | 0;
  $38 = ($36 & 1) == 0;
  if ($38) $43 = ($36 & 255) >>> 1; else $43 = HEAP32[$7 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $43 | 0)) {
   if ($38) {
    $51 = ($36 & 255) >>> 1;
    $64 = ($36 & 255) >>> 1;
   } else {
    $45 = HEAP32[$7 >> 2] | 0;
    $51 = $45;
    $64 = $45;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $51 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $57 = 10; else $57 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $57, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $63 = $$pre$phi34Z2D; else $63 = HEAP32[$$pre$phi36Z2D >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $64;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $66 + 12 | 0;
  $67 = HEAP32[$65 >> 2] | 0;
  $68 = $66 + 16 | 0;
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 36 >> 2] & 63]($66) | 0; else $$0$i$i = HEAP32[$67 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, $8, $9, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $$lcssa = $66;
   $$pre$i3$i$i = $134;
   $__a$2 = $__a$1;
   break;
  }
  $78 = HEAP32[$65 >> 2] | 0;
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 40 >> 2] & 63]($66) | 0;
   $$pre$i$i$i6 = $66;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $78 + 4;
   $$pre$i$i$i6 = $66;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0;
 if (!($85 & 1)) $92 = ($85 & 255) >>> 1; else $92 = HEAP32[$__grouping + 4 >> 2] | 0;
 if (!(($92 | 0) == 0 | (HEAP8[$__in_units >> 0] | 0) == 0)) {
  $96 = HEAP32[$__g_end >> 2] | 0;
  if (($96 - $__g | 0) < 160) {
   $101 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $96 + 4;
   HEAP32[$96 >> 2] = $101;
  }
 }
 HEAPF32[$__v >> 2] = Math_fround(__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err));
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$$lcssa) {
  $132 = 0;
  $135 = 1;
 } else {
  $108 = HEAP32[$$lcssa + 12 >> 2] | 0;
  if (($108 | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$108 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $132 = 0;
   $135 = 1;
  } else {
   $132 = $$lcssa;
   $135 = 0;
  }
 }
 do if (!$$pre$i3$i$i) label = 56; else {
  $120 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
  if (($120 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; else $$0$i$i1$i$i = HEAP32[$120 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 56;
   break;
  } else if ($135) break; else {
   label = 58;
   break;
  }
 } while (0);
 if ((label | 0) == 56) if ($135) label = 58;
 if ((label | 0) == 58) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $132;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$lcssa = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $101 = 0, $108 = 0, $12 = 0, $120 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $22 = 0, $25 = 0, $3 = 0, $36 = 0, $38 = 0, $43 = 0, $45 = 0, $5 = 0, $51 = 0, $57 = 0, $6 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $78 = 0, $8 = 0, $85 = 0, $9 = 0, $92 = 0, $96 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $__atoms = sp + 208 | 0;
 $__decimal_point = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $__in_units = sp + 337 | 0;
 $__exp = sp + 336 | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $5 = $__buf + 1 | 0;
  $$pre$phi34Z2D = $5;
  $$pre$phi36Z2D = $__buf + 8 | 0;
  $6 = $5;
 } else {
  $3 = $__buf + 8 | 0;
  $$pre$phi34Z2D = $__buf + 1 | 0;
  $$pre$phi36Z2D = $3;
  $6 = HEAP32[$3 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $6;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $7 = $__buf + 4 | 0;
 $8 = HEAP32[$__decimal_point >> 2] | 0;
 $9 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i6 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $6;
 L5 : while (1) {
  if (!$$pre$i$i$i6) {
   $133 = 1;
   $66 = 0;
  } else {
   $12 = HEAP32[$$pre$i$i$i6 + 12 >> 2] | 0;
   if (($12 | 0) == (HEAP32[$$pre$i$i$i6 + 16 >> 2] | 0)) $$0$i$i$i$i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i6 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i6) | 0; else $$0$i$i$i$i4 = HEAP32[$12 >> 2] | 0;
   if (($$0$i$i$i$i4 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $133 = 1;
    $66 = 0;
   } else {
    $133 = 0;
    $66 = $$pre$i$i$i6;
   }
  }
  $22 = HEAP32[$__e >> 2] | 0;
  do if (!$22) label = 17; else {
   $25 = HEAP32[$22 + 12 >> 2] | 0;
   if (($25 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $$0$i$i1$i$i10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $$0$i$i1$i$i10 = HEAP32[$25 >> 2] | 0;
   if (($$0$i$i1$i$i10 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 17;
    break;
   } else if ($133) {
    $134 = $22;
    break;
   } else {
    $$lcssa = $66;
    $$pre$i3$i$i = $22;
    $__a$2 = $__a$0;
    break L5;
   }
  } while (0);
  if ((label | 0) == 17) {
   label = 0;
   if ($133) {
    $$lcssa = $66;
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $134 = 0;
  }
  $36 = HEAP8[$__buf >> 0] | 0;
  $38 = ($36 & 1) == 0;
  if ($38) $43 = ($36 & 255) >>> 1; else $43 = HEAP32[$7 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $43 | 0)) {
   if ($38) {
    $51 = ($36 & 255) >>> 1;
    $64 = ($36 & 255) >>> 1;
   } else {
    $45 = HEAP32[$7 >> 2] | 0;
    $51 = $45;
    $64 = $45;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $51 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $57 = 10; else $57 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $57, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $63 = $$pre$phi34Z2D; else $63 = HEAP32[$$pre$phi36Z2D >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $64;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $66 + 12 | 0;
  $67 = HEAP32[$65 >> 2] | 0;
  $68 = $66 + 16 | 0;
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 36 >> 2] & 63]($66) | 0; else $$0$i$i = HEAP32[$67 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, $8, $9, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $$lcssa = $66;
   $$pre$i3$i$i = $134;
   $__a$2 = $__a$1;
   break;
  }
  $78 = HEAP32[$65 >> 2] | 0;
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 40 >> 2] & 63]($66) | 0;
   $$pre$i$i$i6 = $66;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $78 + 4;
   $$pre$i$i$i6 = $66;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0;
 if (!($85 & 1)) $92 = ($85 & 255) >>> 1; else $92 = HEAP32[$__grouping + 4 >> 2] | 0;
 if (!(($92 | 0) == 0 | (HEAP8[$__in_units >> 0] | 0) == 0)) {
  $96 = HEAP32[$__g_end >> 2] | 0;
  if (($96 - $__g | 0) < 160) {
   $101 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $96 + 4;
   HEAP32[$96 >> 2] = $101;
  }
 }
 HEAPF64[$__v >> 3] = +__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$$lcssa) {
  $132 = 0;
  $135 = 1;
 } else {
  $108 = HEAP32[$$lcssa + 12 >> 2] | 0;
  if (($108 | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$108 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $132 = 0;
   $135 = 1;
  } else {
   $132 = $$lcssa;
   $135 = 0;
  }
 }
 do if (!$$pre$i3$i$i) label = 56; else {
  $120 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
  if (($120 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; else $$0$i$i1$i$i = HEAP32[$120 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 56;
   break;
  } else if ($135) break; else {
   label = 58;
   break;
  }
 } while (0);
 if ((label | 0) == 56) if ($135) label = 58;
 if ((label | 0) == 58) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $132;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i4 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i10 = 0, $$lcssa = 0, $$pre$i$i$i6 = 0, $$pre$i3$i$i = 0, $$pre$phi34Z2D = 0, $$pre$phi36Z2D = 0, $101 = 0, $108 = 0, $12 = 0, $120 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $22 = 0, $25 = 0, $3 = 0, $36 = 0, $38 = 0, $43 = 0, $45 = 0, $5 = 0, $51 = 0, $57 = 0, $6 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $78 = 0, $8 = 0, $85 = 0, $9 = 0, $92 = 0, $96 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352 | 0;
 $__atoms = sp + 208 | 0;
 $__decimal_point = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $__in_units = sp + 337 | 0;
 $__exp = sp + 336 | 0;
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $5 = $__buf + 1 | 0;
  $$pre$phi34Z2D = $5;
  $$pre$phi36Z2D = $__buf + 8 | 0;
  $6 = $5;
 } else {
  $3 = $__buf + 8 | 0;
  $$pre$phi34Z2D = $__buf + 1 | 0;
  $$pre$phi36Z2D = $3;
  $6 = HEAP32[$3 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $6;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $7 = $__buf + 4 | 0;
 $8 = HEAP32[$__decimal_point >> 2] | 0;
 $9 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i6 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $6;
 L5 : while (1) {
  if (!$$pre$i$i$i6) {
   $133 = 1;
   $66 = 0;
  } else {
   $12 = HEAP32[$$pre$i$i$i6 + 12 >> 2] | 0;
   if (($12 | 0) == (HEAP32[$$pre$i$i$i6 + 16 >> 2] | 0)) $$0$i$i$i$i4 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i6 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i6) | 0; else $$0$i$i$i$i4 = HEAP32[$12 >> 2] | 0;
   if (($$0$i$i$i$i4 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $133 = 1;
    $66 = 0;
   } else {
    $133 = 0;
    $66 = $$pre$i$i$i6;
   }
  }
  $22 = HEAP32[$__e >> 2] | 0;
  do if (!$22) label = 17; else {
   $25 = HEAP32[$22 + 12 >> 2] | 0;
   if (($25 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $$0$i$i1$i$i10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $$0$i$i1$i$i10 = HEAP32[$25 >> 2] | 0;
   if (($$0$i$i1$i$i10 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 17;
    break;
   } else if ($133) {
    $134 = $22;
    break;
   } else {
    $$lcssa = $66;
    $$pre$i3$i$i = $22;
    $__a$2 = $__a$0;
    break L5;
   }
  } while (0);
  if ((label | 0) == 17) {
   label = 0;
   if ($133) {
    $$lcssa = $66;
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $134 = 0;
  }
  $36 = HEAP8[$__buf >> 0] | 0;
  $38 = ($36 & 1) == 0;
  if ($38) $43 = ($36 & 255) >>> 1; else $43 = HEAP32[$7 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $43 | 0)) {
   if ($38) {
    $51 = ($36 & 255) >>> 1;
    $64 = ($36 & 255) >>> 1;
   } else {
    $45 = HEAP32[$7 >> 2] | 0;
    $51 = $45;
    $64 = $45;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $51 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $57 = 10; else $57 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $57, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $63 = $$pre$phi34Z2D; else $63 = HEAP32[$$pre$phi36Z2D >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $64;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $66 + 12 | 0;
  $67 = HEAP32[$65 >> 2] | 0;
  $68 = $66 + 16 | 0;
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 36 >> 2] & 63]($66) | 0; else $$0$i$i = HEAP32[$67 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($$0$i$i, $__in_units, $__exp, $__a$1, $__a_end, $8, $9, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $$lcssa = $66;
   $$pre$i3$i$i = $134;
   $__a$2 = $__a$1;
   break;
  }
  $78 = HEAP32[$65 >> 2] | 0;
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 40 >> 2] & 63]($66) | 0;
   $$pre$i$i$i6 = $66;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $78 + 4;
   $$pre$i$i$i6 = $66;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0;
 if (!($85 & 1)) $92 = ($85 & 255) >>> 1; else $92 = HEAP32[$__grouping + 4 >> 2] | 0;
 if (!(($92 | 0) == 0 | (HEAP8[$__in_units >> 0] | 0) == 0)) {
  $96 = HEAP32[$__g_end >> 2] | 0;
  if (($96 - $__g | 0) < 160) {
   $101 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $96 + 4;
   HEAP32[$96 >> 2] = $101;
  }
 }
 HEAPF64[$__v >> 3] = +__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$$lcssa) {
  $132 = 0;
  $135 = 1;
 } else {
  $108 = HEAP32[$$lcssa + 12 >> 2] | 0;
  if (($108 | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$108 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $132 = 0;
   $135 = 1;
  } else {
   $132 = $$lcssa;
   $135 = 0;
  }
 }
 do if (!$$pre$i3$i$i) label = 56; else {
  $120 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
  if (($120 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; else $$0$i$i1$i$i = HEAP32[$120 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 56;
   break;
  } else if ($135) break; else {
   label = 58;
   break;
  }
 } while (0);
 if ((label | 0) == 56) if ($135) label = 58;
 if ((label | 0) == 58) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $132;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $0 = 0, $102 = 0, $104 = 0, $111 = 0, $12 = 0, $123 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $22 = 0, $25 = 0, $36 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $51 = 0, $57 = 0, $6 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $78 = 0, $8 = 0, $85 = 0, $9 = 0, $92 = 0, $94 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $6 = $__buf + 1 | 0;
  $$pre$phi33Z2D = $6;
  $$pre$phi35Z2D = $__buf + 8 | 0;
  $7 = $6;
 } else {
  $4 = $__buf + 8 | 0;
  $$pre$phi33Z2D = $__buf + 1 | 0;
  $$pre$phi35Z2D = $4;
  $7 = HEAP32[$4 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $7;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $8 = $__buf + 4 | 0;
 $9 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i5 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $7;
 L5 : while (1) {
  if (!$$pre$i$i$i5) {
   $136 = 1;
   $66 = 0;
  } else {
   $12 = HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0;
   if (($12 | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) $$0$i$i$i$i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i5) | 0; else $$0$i$i$i$i3 = HEAP32[$12 >> 2] | 0;
   if (($$0$i$i$i$i3 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $136 = 1;
    $66 = 0;
   } else {
    $136 = 0;
    $66 = $$pre$i$i$i5;
   }
  }
  $22 = HEAP32[$__e >> 2] | 0;
  do if (!$22) label = 17; else {
   $25 = HEAP32[$22 + 12 >> 2] | 0;
   if (($25 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $$0$i$i1$i$i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $$0$i$i1$i$i9 = HEAP32[$25 >> 2] | 0;
   if (($$0$i$i1$i$i9 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 17;
    break;
   } else if ($136) {
    $137 = $22;
    break;
   } else {
    $$lcssa = $66;
    $$pre$i3$i$i = $22;
    $__a$2 = $__a$0;
    break L5;
   }
  } while (0);
  if ((label | 0) == 17) {
   label = 0;
   if ($136) {
    $$lcssa = $66;
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $137 = 0;
  }
  $36 = HEAP8[$__buf >> 0] | 0;
  $38 = ($36 & 1) == 0;
  if ($38) $43 = ($36 & 255) >>> 1; else $43 = HEAP32[$8 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $43 | 0)) {
   if ($38) {
    $51 = ($36 & 255) >>> 1;
    $64 = ($36 & 255) >>> 1;
   } else {
    $45 = HEAP32[$8 >> 2] | 0;
    $51 = $45;
    $64 = $45;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $51 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $57 = 10; else $57 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $57, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $63 = $$pre$phi33Z2D; else $63 = HEAP32[$$pre$phi35Z2D >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $64;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $66 + 12 | 0;
  $67 = HEAP32[$65 >> 2] | 0;
  $68 = $66 + 16 | 0;
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 36 >> 2] & 63]($66) | 0; else $$0$i$i = HEAP32[$67 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $0, $__a$1, $__a_end, $__dc, $9, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$lcssa = $66;
   $$pre$i3$i$i = $137;
   $__a$2 = $__a$1;
   break;
  }
  $78 = HEAP32[$65 >> 2] | 0;
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 40 >> 2] & 63]($66) | 0;
   $$pre$i$i$i5 = $66;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $78 + 4;
   $$pre$i$i$i5 = $66;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0;
 if (!($85 & 1)) $92 = ($85 & 255) >>> 1; else $92 = HEAP32[$__grouping + 4 >> 2] | 0;
 if ($92) {
  $94 = HEAP32[$__g_end >> 2] | 0;
  if (($94 - $__g | 0) < 160) {
   $99 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $94 + 4;
   HEAP32[$94 >> 2] = $99;
  }
 }
 $102 = __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0;
 $104 = $__v;
 HEAP32[$104 >> 2] = $102;
 HEAP32[$104 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$$lcssa) {
  $135 = 0;
  $138 = 1;
 } else {
  $111 = HEAP32[$$lcssa + 12 >> 2] | 0;
  if (($111 | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$111 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $135 = 0;
   $138 = 1;
  } else {
   $135 = $$lcssa;
   $138 = 0;
  }
 }
 do if (!$$pre$i3$i$i) label = 56; else {
  $123 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
  if (($123 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; else $$0$i$i1$i$i = HEAP32[$123 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 56;
   break;
  } else if ($138) break; else {
   label = 58;
   break;
  }
 } while (0);
 if ((label | 0) == 56) if ($138) label = 58;
 if ((label | 0) == 58) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $135;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $0 = 0, $102 = 0, $104 = 0, $111 = 0, $12 = 0, $123 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $22 = 0, $25 = 0, $36 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $51 = 0, $57 = 0, $6 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $78 = 0, $8 = 0, $85 = 0, $9 = 0, $92 = 0, $94 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $6 = $__buf + 1 | 0;
  $$pre$phi33Z2D = $6;
  $$pre$phi35Z2D = $__buf + 8 | 0;
  $7 = $6;
 } else {
  $4 = $__buf + 8 | 0;
  $$pre$phi33Z2D = $__buf + 1 | 0;
  $$pre$phi35Z2D = $4;
  $7 = HEAP32[$4 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $7;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $8 = $__buf + 4 | 0;
 $9 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i5 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $7;
 L5 : while (1) {
  if (!$$pre$i$i$i5) {
   $136 = 1;
   $66 = 0;
  } else {
   $12 = HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0;
   if (($12 | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) $$0$i$i$i$i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i5) | 0; else $$0$i$i$i$i3 = HEAP32[$12 >> 2] | 0;
   if (($$0$i$i$i$i3 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $136 = 1;
    $66 = 0;
   } else {
    $136 = 0;
    $66 = $$pre$i$i$i5;
   }
  }
  $22 = HEAP32[$__e >> 2] | 0;
  do if (!$22) label = 17; else {
   $25 = HEAP32[$22 + 12 >> 2] | 0;
   if (($25 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $$0$i$i1$i$i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $$0$i$i1$i$i9 = HEAP32[$25 >> 2] | 0;
   if (($$0$i$i1$i$i9 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 17;
    break;
   } else if ($136) {
    $137 = $22;
    break;
   } else {
    $$lcssa = $66;
    $$pre$i3$i$i = $22;
    $__a$2 = $__a$0;
    break L5;
   }
  } while (0);
  if ((label | 0) == 17) {
   label = 0;
   if ($136) {
    $$lcssa = $66;
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $137 = 0;
  }
  $36 = HEAP8[$__buf >> 0] | 0;
  $38 = ($36 & 1) == 0;
  if ($38) $43 = ($36 & 255) >>> 1; else $43 = HEAP32[$8 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $43 | 0)) {
   if ($38) {
    $51 = ($36 & 255) >>> 1;
    $64 = ($36 & 255) >>> 1;
   } else {
    $45 = HEAP32[$8 >> 2] | 0;
    $51 = $45;
    $64 = $45;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $51 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $57 = 10; else $57 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $57, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $63 = $$pre$phi33Z2D; else $63 = HEAP32[$$pre$phi35Z2D >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $64;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $66 + 12 | 0;
  $67 = HEAP32[$65 >> 2] | 0;
  $68 = $66 + 16 | 0;
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 36 >> 2] & 63]($66) | 0; else $$0$i$i = HEAP32[$67 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $0, $__a$1, $__a_end, $__dc, $9, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$lcssa = $66;
   $$pre$i3$i$i = $137;
   $__a$2 = $__a$1;
   break;
  }
  $78 = HEAP32[$65 >> 2] | 0;
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 40 >> 2] & 63]($66) | 0;
   $$pre$i$i$i5 = $66;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $78 + 4;
   $$pre$i$i$i5 = $66;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0;
 if (!($85 & 1)) $92 = ($85 & 255) >>> 1; else $92 = HEAP32[$__grouping + 4 >> 2] | 0;
 if ($92) {
  $94 = HEAP32[$__g_end >> 2] | 0;
  if (($94 - $__g | 0) < 160) {
   $99 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $94 + 4;
   HEAP32[$94 >> 2] = $99;
  }
 }
 $102 = __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0;
 $104 = $__v;
 HEAP32[$104 >> 2] = $102;
 HEAP32[$104 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$$lcssa) {
  $135 = 0;
  $138 = 1;
 } else {
  $111 = HEAP32[$$lcssa + 12 >> 2] | 0;
  if (($111 | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$111 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $135 = 0;
   $138 = 1;
  } else {
   $135 = $$lcssa;
   $138 = 0;
  }
 }
 do if (!$$pre$i3$i$i) label = 56; else {
  $123 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
  if (($123 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; else $$0$i$i1$i$i = HEAP32[$123 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 56;
   break;
  } else if ($138) break; else {
   label = 58;
   break;
  }
 } while (0);
 if ((label | 0) == 56) if ($138) label = 58;
 if ((label | 0) == 58) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $135;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $0 = 0, $106 = 0, $118 = 0, $12 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $22 = 0, $25 = 0, $36 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $51 = 0, $57 = 0, $6 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $78 = 0, $8 = 0, $85 = 0, $9 = 0, $92 = 0, $94 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $6 = $__buf + 1 | 0;
  $$pre$phi33Z2D = $6;
  $$pre$phi35Z2D = $__buf + 8 | 0;
  $7 = $6;
 } else {
  $4 = $__buf + 8 | 0;
  $$pre$phi33Z2D = $__buf + 1 | 0;
  $$pre$phi35Z2D = $4;
  $7 = HEAP32[$4 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $7;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $8 = $__buf + 4 | 0;
 $9 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i5 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $7;
 L5 : while (1) {
  if (!$$pre$i$i$i5) {
   $131 = 1;
   $66 = 0;
  } else {
   $12 = HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0;
   if (($12 | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) $$0$i$i$i$i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i5) | 0; else $$0$i$i$i$i3 = HEAP32[$12 >> 2] | 0;
   if (($$0$i$i$i$i3 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $131 = 1;
    $66 = 0;
   } else {
    $131 = 0;
    $66 = $$pre$i$i$i5;
   }
  }
  $22 = HEAP32[$__e >> 2] | 0;
  do if (!$22) label = 17; else {
   $25 = HEAP32[$22 + 12 >> 2] | 0;
   if (($25 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $$0$i$i1$i$i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $$0$i$i1$i$i9 = HEAP32[$25 >> 2] | 0;
   if (($$0$i$i1$i$i9 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 17;
    break;
   } else if ($131) {
    $132 = $22;
    break;
   } else {
    $$lcssa = $66;
    $$pre$i3$i$i = $22;
    $__a$2 = $__a$0;
    break L5;
   }
  } while (0);
  if ((label | 0) == 17) {
   label = 0;
   if ($131) {
    $$lcssa = $66;
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $132 = 0;
  }
  $36 = HEAP8[$__buf >> 0] | 0;
  $38 = ($36 & 1) == 0;
  if ($38) $43 = ($36 & 255) >>> 1; else $43 = HEAP32[$8 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $43 | 0)) {
   if ($38) {
    $51 = ($36 & 255) >>> 1;
    $64 = ($36 & 255) >>> 1;
   } else {
    $45 = HEAP32[$8 >> 2] | 0;
    $51 = $45;
    $64 = $45;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $51 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $57 = 10; else $57 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $57, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $63 = $$pre$phi33Z2D; else $63 = HEAP32[$$pre$phi35Z2D >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $64;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $66 + 12 | 0;
  $67 = HEAP32[$65 >> 2] | 0;
  $68 = $66 + 16 | 0;
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 36 >> 2] & 63]($66) | 0; else $$0$i$i = HEAP32[$67 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $0, $__a$1, $__a_end, $__dc, $9, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$lcssa = $66;
   $$pre$i3$i$i = $132;
   $__a$2 = $__a$1;
   break;
  }
  $78 = HEAP32[$65 >> 2] | 0;
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 40 >> 2] & 63]($66) | 0;
   $$pre$i$i$i5 = $66;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $78 + 4;
   $$pre$i$i$i5 = $66;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0;
 if (!($85 & 1)) $92 = ($85 & 255) >>> 1; else $92 = HEAP32[$__grouping + 4 >> 2] | 0;
 if ($92) {
  $94 = HEAP32[$__g_end >> 2] | 0;
  if (($94 - $__g | 0) < 160) {
   $99 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $94 + 4;
   HEAP32[$94 >> 2] = $99;
  }
 }
 HEAP16[$__v >> 1] = __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$$lcssa) {
  $130 = 0;
  $133 = 1;
 } else {
  $106 = HEAP32[$$lcssa + 12 >> 2] | 0;
  if (($106 | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$106 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $130 = 0;
   $133 = 1;
  } else {
   $130 = $$lcssa;
   $133 = 0;
  }
 }
 do if (!$$pre$i3$i$i) label = 56; else {
  $118 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
  if (($118 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; else $$0$i$i1$i$i = HEAP32[$118 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 56;
   break;
  } else if ($133) break; else {
   label = 58;
   break;
  }
 } while (0);
 if ((label | 0) == 56) if ($133) label = 58;
 if ((label | 0) == 58) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $130;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $0 = 0, $106 = 0, $118 = 0, $12 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $22 = 0, $25 = 0, $36 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $51 = 0, $57 = 0, $6 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $78 = 0, $8 = 0, $85 = 0, $9 = 0, $92 = 0, $94 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $6 = $__buf + 1 | 0;
  $$pre$phi33Z2D = $6;
  $$pre$phi35Z2D = $__buf + 8 | 0;
  $7 = $6;
 } else {
  $4 = $__buf + 8 | 0;
  $$pre$phi33Z2D = $__buf + 1 | 0;
  $$pre$phi35Z2D = $4;
  $7 = HEAP32[$4 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $7;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $8 = $__buf + 4 | 0;
 $9 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i5 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $7;
 L5 : while (1) {
  if (!$$pre$i$i$i5) {
   $131 = 1;
   $66 = 0;
  } else {
   $12 = HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0;
   if (($12 | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) $$0$i$i$i$i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i5) | 0; else $$0$i$i$i$i3 = HEAP32[$12 >> 2] | 0;
   if (($$0$i$i$i$i3 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $131 = 1;
    $66 = 0;
   } else {
    $131 = 0;
    $66 = $$pre$i$i$i5;
   }
  }
  $22 = HEAP32[$__e >> 2] | 0;
  do if (!$22) label = 17; else {
   $25 = HEAP32[$22 + 12 >> 2] | 0;
   if (($25 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $$0$i$i1$i$i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $$0$i$i1$i$i9 = HEAP32[$25 >> 2] | 0;
   if (($$0$i$i1$i$i9 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 17;
    break;
   } else if ($131) {
    $132 = $22;
    break;
   } else {
    $$lcssa = $66;
    $$pre$i3$i$i = $22;
    $__a$2 = $__a$0;
    break L5;
   }
  } while (0);
  if ((label | 0) == 17) {
   label = 0;
   if ($131) {
    $$lcssa = $66;
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $132 = 0;
  }
  $36 = HEAP8[$__buf >> 0] | 0;
  $38 = ($36 & 1) == 0;
  if ($38) $43 = ($36 & 255) >>> 1; else $43 = HEAP32[$8 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $43 | 0)) {
   if ($38) {
    $51 = ($36 & 255) >>> 1;
    $64 = ($36 & 255) >>> 1;
   } else {
    $45 = HEAP32[$8 >> 2] | 0;
    $51 = $45;
    $64 = $45;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $51 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $57 = 10; else $57 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $57, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $63 = $$pre$phi33Z2D; else $63 = HEAP32[$$pre$phi35Z2D >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $64;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $66 + 12 | 0;
  $67 = HEAP32[$65 >> 2] | 0;
  $68 = $66 + 16 | 0;
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 36 >> 2] & 63]($66) | 0; else $$0$i$i = HEAP32[$67 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $0, $__a$1, $__a_end, $__dc, $9, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$lcssa = $66;
   $$pre$i3$i$i = $132;
   $__a$2 = $__a$1;
   break;
  }
  $78 = HEAP32[$65 >> 2] | 0;
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 40 >> 2] & 63]($66) | 0;
   $$pre$i$i$i5 = $66;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $78 + 4;
   $$pre$i$i$i5 = $66;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0;
 if (!($85 & 1)) $92 = ($85 & 255) >>> 1; else $92 = HEAP32[$__grouping + 4 >> 2] | 0;
 if ($92) {
  $94 = HEAP32[$__g_end >> 2] | 0;
  if (($94 - $__g | 0) < 160) {
   $99 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $94 + 4;
   HEAP32[$94 >> 2] = $99;
  }
 }
 HEAP32[$__v >> 2] = __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$$lcssa) {
  $130 = 0;
  $133 = 1;
 } else {
  $106 = HEAP32[$$lcssa + 12 >> 2] | 0;
  if (($106 | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$106 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $130 = 0;
   $133 = 1;
  } else {
   $130 = $$lcssa;
   $133 = 0;
  }
 }
 do if (!$$pre$i3$i$i) label = 56; else {
  $118 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
  if (($118 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; else $$0$i$i1$i$i = HEAP32[$118 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 56;
   break;
  } else if ($133) break; else {
   label = 58;
   break;
  }
 } while (0);
 if ((label | 0) == 56) if ($133) label = 58;
 if ((label | 0) == 58) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $130;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $0 = 0, $106 = 0, $118 = 0, $12 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $22 = 0, $25 = 0, $36 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $51 = 0, $57 = 0, $6 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $78 = 0, $8 = 0, $85 = 0, $9 = 0, $92 = 0, $94 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $6 = $__buf + 1 | 0;
  $$pre$phi33Z2D = $6;
  $$pre$phi35Z2D = $__buf + 8 | 0;
  $7 = $6;
 } else {
  $4 = $__buf + 8 | 0;
  $$pre$phi33Z2D = $__buf + 1 | 0;
  $$pre$phi35Z2D = $4;
  $7 = HEAP32[$4 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $7;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $8 = $__buf + 4 | 0;
 $9 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i5 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $7;
 L5 : while (1) {
  if (!$$pre$i$i$i5) {
   $131 = 1;
   $66 = 0;
  } else {
   $12 = HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0;
   if (($12 | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) $$0$i$i$i$i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i5) | 0; else $$0$i$i$i$i3 = HEAP32[$12 >> 2] | 0;
   if (($$0$i$i$i$i3 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $131 = 1;
    $66 = 0;
   } else {
    $131 = 0;
    $66 = $$pre$i$i$i5;
   }
  }
  $22 = HEAP32[$__e >> 2] | 0;
  do if (!$22) label = 17; else {
   $25 = HEAP32[$22 + 12 >> 2] | 0;
   if (($25 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $$0$i$i1$i$i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $$0$i$i1$i$i9 = HEAP32[$25 >> 2] | 0;
   if (($$0$i$i1$i$i9 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 17;
    break;
   } else if ($131) {
    $132 = $22;
    break;
   } else {
    $$lcssa = $66;
    $$pre$i3$i$i = $22;
    $__a$2 = $__a$0;
    break L5;
   }
  } while (0);
  if ((label | 0) == 17) {
   label = 0;
   if ($131) {
    $$lcssa = $66;
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $132 = 0;
  }
  $36 = HEAP8[$__buf >> 0] | 0;
  $38 = ($36 & 1) == 0;
  if ($38) $43 = ($36 & 255) >>> 1; else $43 = HEAP32[$8 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $43 | 0)) {
   if ($38) {
    $51 = ($36 & 255) >>> 1;
    $64 = ($36 & 255) >>> 1;
   } else {
    $45 = HEAP32[$8 >> 2] | 0;
    $51 = $45;
    $64 = $45;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $51 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $57 = 10; else $57 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $57, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $63 = $$pre$phi33Z2D; else $63 = HEAP32[$$pre$phi35Z2D >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $64;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $66 + 12 | 0;
  $67 = HEAP32[$65 >> 2] | 0;
  $68 = $66 + 16 | 0;
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 36 >> 2] & 63]($66) | 0; else $$0$i$i = HEAP32[$67 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $0, $__a$1, $__a_end, $__dc, $9, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$lcssa = $66;
   $$pre$i3$i$i = $132;
   $__a$2 = $__a$1;
   break;
  }
  $78 = HEAP32[$65 >> 2] | 0;
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 40 >> 2] & 63]($66) | 0;
   $$pre$i$i$i5 = $66;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $78 + 4;
   $$pre$i$i$i5 = $66;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0;
 if (!($85 & 1)) $92 = ($85 & 255) >>> 1; else $92 = HEAP32[$__grouping + 4 >> 2] | 0;
 if ($92) {
  $94 = HEAP32[$__g_end >> 2] | 0;
  if (($94 - $__g | 0) < 160) {
   $99 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $94 + 4;
   HEAP32[$94 >> 2] = $99;
  }
 }
 HEAP32[$__v >> 2] = __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$$lcssa) {
  $130 = 0;
  $133 = 1;
 } else {
  $106 = HEAP32[$$lcssa + 12 >> 2] | 0;
  if (($106 | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$106 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $130 = 0;
   $133 = 1;
  } else {
   $130 = $$lcssa;
   $133 = 0;
  }
 }
 do if (!$$pre$i3$i$i) label = 56; else {
  $118 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
  if (($118 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; else $$0$i$i1$i$i = HEAP32[$118 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 56;
   break;
  } else if ($133) break; else {
   label = 58;
   break;
  }
 } while (0);
 if ((label | 0) == 56) if ($133) label = 58;
 if ((label | 0) == 58) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $130;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i3 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i9 = 0, $$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i3$i$i = 0, $$pre$phi33Z2D = 0, $$pre$phi35Z2D = 0, $0 = 0, $106 = 0, $118 = 0, $12 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $22 = 0, $25 = 0, $36 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $51 = 0, $57 = 0, $6 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $78 = 0, $8 = 0, $85 = 0, $9 = 0, $92 = 0, $94 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $__atoms = sp + 200 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping, $__iob, $__atoms, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $6 = $__buf + 1 | 0;
  $$pre$phi33Z2D = $6;
  $$pre$phi35Z2D = $__buf + 8 | 0;
  $7 = $6;
 } else {
  $4 = $__buf + 8 | 0;
  $$pre$phi33Z2D = $__buf + 1 | 0;
  $$pre$phi35Z2D = $4;
  $7 = HEAP32[$4 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $7;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $8 = $__buf + 4 | 0;
 $9 = HEAP32[$__thousands_sep >> 2] | 0;
 $$pre$i$i$i5 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $7;
 L5 : while (1) {
  if (!$$pre$i$i$i5) {
   $131 = 1;
   $66 = 0;
  } else {
   $12 = HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0;
   if (($12 | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) $$0$i$i$i$i3 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i5) | 0; else $$0$i$i$i$i3 = HEAP32[$12 >> 2] | 0;
   if (($$0$i$i$i$i3 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $131 = 1;
    $66 = 0;
   } else {
    $131 = 0;
    $66 = $$pre$i$i$i5;
   }
  }
  $22 = HEAP32[$__e >> 2] | 0;
  do if (!$22) label = 17; else {
   $25 = HEAP32[$22 + 12 >> 2] | 0;
   if (($25 | 0) == (HEAP32[$22 + 16 >> 2] | 0)) $$0$i$i1$i$i9 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$22 >> 2] | 0) + 36 >> 2] & 63]($22) | 0; else $$0$i$i1$i$i9 = HEAP32[$25 >> 2] | 0;
   if (($$0$i$i1$i$i9 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 17;
    break;
   } else if ($131) {
    $132 = $22;
    break;
   } else {
    $$lcssa = $66;
    $$pre$i3$i$i = $22;
    $__a$2 = $__a$0;
    break L5;
   }
  } while (0);
  if ((label | 0) == 17) {
   label = 0;
   if ($131) {
    $$lcssa = $66;
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $132 = 0;
  }
  $36 = HEAP8[$__buf >> 0] | 0;
  $38 = ($36 & 1) == 0;
  if ($38) $43 = ($36 & 255) >>> 1; else $43 = HEAP32[$8 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $43 | 0)) {
   if ($38) {
    $51 = ($36 & 255) >>> 1;
    $64 = ($36 & 255) >>> 1;
   } else {
    $45 = HEAP32[$8 >> 2] | 0;
    $51 = $45;
    $64 = $45;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $51 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $57 = 10; else $57 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $57, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $63 = $$pre$phi33Z2D; else $63 = HEAP32[$$pre$phi35Z2D >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $64;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $66 + 12 | 0;
  $67 = HEAP32[$65 >> 2] | 0;
  $68 = $66 + 16 | 0;
  if (($67 | 0) == (HEAP32[$68 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 36 >> 2] & 63]($66) | 0; else $$0$i$i = HEAP32[$67 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, $0, $__a$1, $__a_end, $__dc, $9, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$lcssa = $66;
   $$pre$i3$i$i = $132;
   $__a$2 = $__a$1;
   break;
  }
  $78 = HEAP32[$65 >> 2] | 0;
  if (($78 | 0) == (HEAP32[$68 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$66 >> 2] | 0) + 40 >> 2] & 63]($66) | 0;
   $$pre$i$i$i5 = $66;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $78 + 4;
   $$pre$i$i$i5 = $66;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $85 = HEAP8[$__grouping >> 0] | 0;
 if (!($85 & 1)) $92 = ($85 & 255) >>> 1; else $92 = HEAP32[$__grouping + 4 >> 2] | 0;
 if ($92) {
  $94 = HEAP32[$__g_end >> 2] | 0;
  if (($94 - $__g | 0) < 160) {
   $99 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $94 + 4;
   HEAP32[$94 >> 2] = $99;
  }
 }
 HEAP32[$__v >> 2] = __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$$lcssa) {
  $130 = 0;
  $133 = 1;
 } else {
  $106 = HEAP32[$$lcssa + 12 >> 2] | 0;
  if (($106 | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$106 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $130 = 0;
   $133 = 1;
  } else {
   $130 = $$lcssa;
   $133 = 0;
  }
 }
 do if (!$$pre$i3$i$i) label = 56; else {
  $118 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
  if (($118 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; else $$0$i$i1$i$i = HEAP32[$118 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 56;
   break;
  } else if ($133) break; else {
   label = 58;
   break;
  }
 } while (0);
 if ((label | 0) == 56) if ($133) label = 58;
 if ((label | 0) == 58) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $130;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i7 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i13 = 0, $$lcssa = 0, $$pre$i$i$i9 = 0, $$pre$i3$i$i = 0, $$pre$phi38Z2D = 0, $$pre$phi40Z2D = 0, $0 = 0, $1 = 0, $103 = 0, $11 = 0, $115 = 0, $12 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $16 = 0, $26 = 0, $29 = 0, $40 = 0, $42 = 0, $47 = 0, $49 = 0, $55 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $82 = 0, $9 = 0, $97 = 0, $98 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320 | 0;
 $vararg_buffer = sp;
 $__atoms = sp + 208 | 0;
 $__grouping = sp + 196 | 0;
 $0 = sp + 192 | 0;
 $__buf = sp + 180 | 0;
 $__a_end = sp + 176 | 0;
 $__g = sp + 16 | 0;
 $__g_end = sp + 8 | 0;
 $__dc = sp + 4 | 0;
 HEAP32[$__grouping + 0 >> 2] = 0;
 HEAP32[$__grouping + 4 >> 2] = 0;
 HEAP32[$__grouping + 8 >> 2] = 0;
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 4896) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 48 >> 2] & 7]($1, 3416, 3442 | 0, $__atoms) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $11 = $__buf + 1 | 0;
  $$pre$phi38Z2D = $11;
  $$pre$phi40Z2D = $__buf + 8 | 0;
  $12 = $11;
 } else {
  $9 = $__buf + 8 | 0;
  $$pre$phi38Z2D = $__buf + 1 | 0;
  $$pre$phi40Z2D = $9;
  $12 = HEAP32[$9 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $12;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $13 = $__buf + 4 | 0;
 $$pre$i$i$i9 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $12;
 L5 : while (1) {
  if (!$$pre$i$i$i9) {
   $128 = 1;
   $70 = 0;
  } else {
   $16 = HEAP32[$$pre$i$i$i9 + 12 >> 2] | 0;
   if (($16 | 0) == (HEAP32[$$pre$i$i$i9 + 16 >> 2] | 0)) $$0$i$i$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i9 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i9) | 0; else $$0$i$i$i$i7 = HEAP32[$16 >> 2] | 0;
   if (($$0$i$i$i$i7 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $128 = 1;
    $70 = 0;
   } else {
    $128 = 0;
    $70 = $$pre$i$i$i9;
   }
  }
  $26 = HEAP32[$__e >> 2] | 0;
  do if (!$26) label = 17; else {
   $29 = HEAP32[$26 + 12 >> 2] | 0;
   if (($29 | 0) == (HEAP32[$26 + 16 >> 2] | 0)) $$0$i$i1$i$i13 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$26 >> 2] | 0) + 36 >> 2] & 63]($26) | 0; else $$0$i$i1$i$i13 = HEAP32[$29 >> 2] | 0;
   if (($$0$i$i1$i$i13 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 17;
    break;
   } else if ($128) {
    $129 = $26;
    break;
   } else {
    $$lcssa = $70;
    $$pre$i3$i$i = $26;
    $__a$2 = $__a$0;
    break L5;
   }
  } while (0);
  if ((label | 0) == 17) {
   label = 0;
   if ($128) {
    $$lcssa = $70;
    $$pre$i3$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $129 = 0;
  }
  $40 = HEAP8[$__buf >> 0] | 0;
  $42 = ($40 & 1) == 0;
  if ($42) $47 = ($40 & 255) >>> 1; else $47 = HEAP32[$13 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $47 | 0)) {
   if ($42) {
    $55 = ($40 & 255) >>> 1;
    $68 = ($40 & 255) >>> 1;
   } else {
    $49 = HEAP32[$13 >> 2] | 0;
    $55 = $49;
    $68 = $49;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $55 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $61 = 10; else $61 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $61, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $67 = $$pre$phi38Z2D; else $67 = HEAP32[$$pre$phi40Z2D >> 2] | 0;
   HEAP32[$__a_end >> 2] = $67 + $68;
   $__a$1 = $67;
  } else $__a$1 = $__a$0;
  $69 = $70 + 12 | 0;
  $71 = HEAP32[$69 >> 2] | 0;
  $72 = $70 + 16 | 0;
  if (($71 | 0) == (HEAP32[$72 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$70 >> 2] | 0) + 36 >> 2] & 63]($70) | 0; else $$0$i$i = HEAP32[$71 >> 2] | 0;
  if (__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($$0$i$i, 16, $__a$1, $__a_end, $__dc, 0, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$lcssa = $70;
   $$pre$i3$i$i = $129;
   $__a$2 = $__a$1;
   break;
  }
  $82 = HEAP32[$69 >> 2] | 0;
  if (($82 | 0) == (HEAP32[$72 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$70 >> 2] | 0) + 40 >> 2] & 63]($70) | 0;
   $$pre$i$i$i9 = $70;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$69 >> 2] = $82 + 4;
   $$pre$i$i$i9 = $70;
   $__a$0 = $__a$1;
   continue;
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, (HEAP32[$__a_end >> 2] | 0) - $__a$2 | 0, 0);
 if (!(HEAP8[$__buf >> 0] & 1)) $98 = $$pre$phi38Z2D; else $98 = HEAP32[$$pre$phi40Z2D >> 2] | 0;
 $97 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 if ((__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($98, $97, 3456, $vararg_buffer) | 0) != 1) HEAP32[$__err >> 2] = 4;
 if (!$$lcssa) {
  $127 = 0;
  $130 = 1;
 } else {
  $103 = HEAP32[$$lcssa + 12 >> 2] | 0;
  if (($103 | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0; else $$0$i$i$i$i = HEAP32[$103 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $127 = 0;
   $130 = 1;
  } else {
   $127 = $$lcssa;
   $130 = 0;
  }
 }
 do if (!$$pre$i3$i$i) label = 54; else {
  $115 = HEAP32[$$pre$i3$i$i + 12 >> 2] | 0;
  if (($115 | 0) == (HEAP32[$$pre$i3$i$i + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i) | 0; else $$0$i$i1$i$i = HEAP32[$115 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 54;
   break;
  } else if ($130) break; else {
   label = 56;
   break;
  }
 } while (0);
 if ((label | 0) == 54) if ($130) label = 56;
 if ((label | 0) == 56) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $127;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $$pre$phi31Z2D = 0, $$pre$phi33Z2D = 0, $102 = 0, $118 = 0, $119 = 0, $134 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $36 = 0, $38 = 0, $43 = 0, $45 = 0, $5 = 0, $51 = 0, $57 = 0, $6 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $79 = 0, $8 = 0, $86 = 0, $9 = 0, $93 = 0, $97 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $__atoms = sp + 200 | 0;
 $__decimal_point = sp + 199 | 0;
 $__thousands_sep = sp + 198 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $__in_units = sp + 197 | 0;
 $__exp = sp + 196 | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $5 = $__buf + 1 | 0;
  $$pre$phi31Z2D = $5;
  $$pre$phi33Z2D = $__buf + 8 | 0;
  $6 = $5;
 } else {
  $3 = $__buf + 8 | 0;
  $$pre$phi31Z2D = $__buf + 1 | 0;
  $$pre$phi33Z2D = $3;
  $6 = HEAP32[$3 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $6;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $7 = $__buf + 4 | 0;
 $8 = HEAP8[$__decimal_point >> 0] | 0;
 $9 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i5 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $6;
 L5 : while (1) {
  if (!$$pre$i$i$i5) $21 = 0; else if ((HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i5) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $21 = 0;
  } else $21 = $$pre$i$i$i5; else $21 = $$pre$i$i$i5;
  $22 = ($21 | 0) == 0;
  $23 = HEAP32[$__e >> 2] | 0;
  do if (!$23) label = 14; else {
   if ((HEAP32[$23 + 12 >> 2] | 0) != (HEAP32[$23 + 16 >> 2] | 0)) if ($22) {
    $134 = $23;
    break;
   } else {
    $$lcssa = $21;
    $$pre$i2$i$i = $23;
    $__a$2 = $__a$0;
    break L5;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 36 >> 2] & 63]($23) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 14;
    break;
   } else if ($22) {
    $134 = $23;
    break;
   } else {
    $$lcssa = $21;
    $$pre$i2$i$i = $23;
    $__a$2 = $__a$0;
    break L5;
   }
  } while (0);
  if ((label | 0) == 14) {
   label = 0;
   if ($22) {
    $$lcssa = $21;
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $134 = 0;
  }
  $36 = HEAP8[$__buf >> 0] | 0;
  $38 = ($36 & 1) == 0;
  if ($38) $43 = ($36 & 255) >>> 1; else $43 = HEAP32[$7 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $43 | 0)) {
   if ($38) {
    $51 = ($36 & 255) >>> 1;
    $64 = ($36 & 255) >>> 1;
   } else {
    $45 = HEAP32[$7 >> 2] | 0;
    $51 = $45;
    $64 = $45;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $51 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $57 = 10; else $57 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $57, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $63 = $$pre$phi31Z2D; else $63 = HEAP32[$$pre$phi33Z2D >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $64;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $21 + 12 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $67 = $21 + 16 | 0;
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 63]($21) | 0; else $$0$i$i = HEAPU8[$66 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($$0$i$i & 255, $__in_units, $__exp, $__a$1, $__a_end, $8, $9, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $$lcssa = $21;
   $$pre$i2$i$i = $134;
   $__a$2 = $__a$1;
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0;
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 63]($21) | 0;
   $$pre$i$i$i5 = $21;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1;
   $$pre$i$i$i5 = $21;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0;
 if (!($86 & 1)) $93 = ($86 & 255) >>> 1; else $93 = HEAP32[$__grouping + 4 >> 2] | 0;
 if (!(($93 | 0) == 0 | (HEAP8[$__in_units >> 0] | 0) == 0)) {
  $97 = HEAP32[$__g_end >> 2] | 0;
  if (($97 - $__g | 0) < 160) {
   $102 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $97 + 4;
   HEAP32[$97 >> 2] = $102;
  }
 }
 HEAPF32[$__v >> 2] = Math_fround(__ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err));
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$$lcssa) $118 = 0; else if ((HEAP32[$$lcssa + 12 >> 2] | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $118 = 0;
 } else $118 = $$lcssa; else $118 = $$lcssa;
 $119 = ($118 | 0) == 0;
 do if (!$$pre$i2$i$i) label = 50; else {
  if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) if ($119) break; else {
   label = 52;
   break;
  }
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 50;
   break;
  } else if ($119 ^ ($$pre$i2$i$i | 0) == 0) break; else {
   label = 52;
   break;
  }
 } while (0);
 if ((label | 0) == 50) if ($119) label = 52;
 if ((label | 0) == 52) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $118;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $$pre$phi31Z2D = 0, $$pre$phi33Z2D = 0, $102 = 0, $118 = 0, $119 = 0, $134 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $36 = 0, $38 = 0, $43 = 0, $45 = 0, $5 = 0, $51 = 0, $57 = 0, $6 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $79 = 0, $8 = 0, $86 = 0, $9 = 0, $93 = 0, $97 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $__atoms = sp + 200 | 0;
 $__decimal_point = sp + 199 | 0;
 $__thousands_sep = sp + 198 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $__in_units = sp + 197 | 0;
 $__exp = sp + 196 | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $5 = $__buf + 1 | 0;
  $$pre$phi31Z2D = $5;
  $$pre$phi33Z2D = $__buf + 8 | 0;
  $6 = $5;
 } else {
  $3 = $__buf + 8 | 0;
  $$pre$phi31Z2D = $__buf + 1 | 0;
  $$pre$phi33Z2D = $3;
  $6 = HEAP32[$3 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $6;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $7 = $__buf + 4 | 0;
 $8 = HEAP8[$__decimal_point >> 0] | 0;
 $9 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i5 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $6;
 L5 : while (1) {
  if (!$$pre$i$i$i5) $21 = 0; else if ((HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i5) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $21 = 0;
  } else $21 = $$pre$i$i$i5; else $21 = $$pre$i$i$i5;
  $22 = ($21 | 0) == 0;
  $23 = HEAP32[$__e >> 2] | 0;
  do if (!$23) label = 14; else {
   if ((HEAP32[$23 + 12 >> 2] | 0) != (HEAP32[$23 + 16 >> 2] | 0)) if ($22) {
    $134 = $23;
    break;
   } else {
    $$lcssa = $21;
    $$pre$i2$i$i = $23;
    $__a$2 = $__a$0;
    break L5;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 36 >> 2] & 63]($23) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 14;
    break;
   } else if ($22) {
    $134 = $23;
    break;
   } else {
    $$lcssa = $21;
    $$pre$i2$i$i = $23;
    $__a$2 = $__a$0;
    break L5;
   }
  } while (0);
  if ((label | 0) == 14) {
   label = 0;
   if ($22) {
    $$lcssa = $21;
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $134 = 0;
  }
  $36 = HEAP8[$__buf >> 0] | 0;
  $38 = ($36 & 1) == 0;
  if ($38) $43 = ($36 & 255) >>> 1; else $43 = HEAP32[$7 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $43 | 0)) {
   if ($38) {
    $51 = ($36 & 255) >>> 1;
    $64 = ($36 & 255) >>> 1;
   } else {
    $45 = HEAP32[$7 >> 2] | 0;
    $51 = $45;
    $64 = $45;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $51 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $57 = 10; else $57 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $57, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $63 = $$pre$phi31Z2D; else $63 = HEAP32[$$pre$phi33Z2D >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $64;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $21 + 12 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $67 = $21 + 16 | 0;
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 63]($21) | 0; else $$0$i$i = HEAPU8[$66 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($$0$i$i & 255, $__in_units, $__exp, $__a$1, $__a_end, $8, $9, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $$lcssa = $21;
   $$pre$i2$i$i = $134;
   $__a$2 = $__a$1;
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0;
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 63]($21) | 0;
   $$pre$i$i$i5 = $21;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1;
   $$pre$i$i$i5 = $21;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0;
 if (!($86 & 1)) $93 = ($86 & 255) >>> 1; else $93 = HEAP32[$__grouping + 4 >> 2] | 0;
 if (!(($93 | 0) == 0 | (HEAP8[$__in_units >> 0] | 0) == 0)) {
  $97 = HEAP32[$__g_end >> 2] | 0;
  if (($97 - $__g | 0) < 160) {
   $102 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $97 + 4;
   HEAP32[$97 >> 2] = $102;
  }
 }
 HEAPF64[$__v >> 3] = +__ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$$lcssa) $118 = 0; else if ((HEAP32[$$lcssa + 12 >> 2] | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $118 = 0;
 } else $118 = $$lcssa; else $118 = $$lcssa;
 $119 = ($118 | 0) == 0;
 do if (!$$pre$i2$i$i) label = 50; else {
  if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) if ($119) break; else {
   label = 52;
   break;
  }
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 50;
   break;
  } else if ($119 ^ ($$pre$i2$i$i | 0) == 0) break; else {
   label = 52;
   break;
  }
 } while (0);
 if ((label | 0) == 50) if ($119) label = 52;
 if ((label | 0) == 52) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $118;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre$i$i$i5 = 0, $$pre$i2$i$i = 0, $$pre$phi31Z2D = 0, $$pre$phi33Z2D = 0, $102 = 0, $118 = 0, $119 = 0, $134 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $36 = 0, $38 = 0, $43 = 0, $45 = 0, $5 = 0, $51 = 0, $57 = 0, $6 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $79 = 0, $8 = 0, $86 = 0, $9 = 0, $93 = 0, $97 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__decimal_point = 0, $__exp = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__in_units = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $__atoms = sp + 200 | 0;
 $__decimal_point = sp + 199 | 0;
 $__thousands_sep = sp + 198 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $__in_units = sp + 197 | 0;
 $__exp = sp + 196 | 0;
 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping, $__iob, $__atoms, $__decimal_point, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $5 = $__buf + 1 | 0;
  $$pre$phi31Z2D = $5;
  $$pre$phi33Z2D = $__buf + 8 | 0;
  $6 = $5;
 } else {
  $3 = $__buf + 8 | 0;
  $$pre$phi31Z2D = $__buf + 1 | 0;
  $$pre$phi33Z2D = $3;
  $6 = HEAP32[$3 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $6;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 HEAP8[$__in_units >> 0] = 1;
 HEAP8[$__exp >> 0] = 69;
 $7 = $__buf + 4 | 0;
 $8 = HEAP8[$__decimal_point >> 0] | 0;
 $9 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i5 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $6;
 L5 : while (1) {
  if (!$$pre$i$i$i5) $21 = 0; else if ((HEAP32[$$pre$i$i$i5 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i5 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i5 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i5) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $21 = 0;
  } else $21 = $$pre$i$i$i5; else $21 = $$pre$i$i$i5;
  $22 = ($21 | 0) == 0;
  $23 = HEAP32[$__e >> 2] | 0;
  do if (!$23) label = 14; else {
   if ((HEAP32[$23 + 12 >> 2] | 0) != (HEAP32[$23 + 16 >> 2] | 0)) if ($22) {
    $134 = $23;
    break;
   } else {
    $$lcssa = $21;
    $$pre$i2$i$i = $23;
    $__a$2 = $__a$0;
    break L5;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 36 >> 2] & 63]($23) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 14;
    break;
   } else if ($22) {
    $134 = $23;
    break;
   } else {
    $$lcssa = $21;
    $$pre$i2$i$i = $23;
    $__a$2 = $__a$0;
    break L5;
   }
  } while (0);
  if ((label | 0) == 14) {
   label = 0;
   if ($22) {
    $$lcssa = $21;
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $134 = 0;
  }
  $36 = HEAP8[$__buf >> 0] | 0;
  $38 = ($36 & 1) == 0;
  if ($38) $43 = ($36 & 255) >>> 1; else $43 = HEAP32[$7 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $43 | 0)) {
   if ($38) {
    $51 = ($36 & 255) >>> 1;
    $64 = ($36 & 255) >>> 1;
   } else {
    $45 = HEAP32[$7 >> 2] | 0;
    $51 = $45;
    $64 = $45;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $51 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $57 = 10; else $57 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $57, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $63 = $$pre$phi31Z2D; else $63 = HEAP32[$$pre$phi33Z2D >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $64;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $21 + 12 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $67 = $21 + 16 | 0;
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 63]($21) | 0; else $$0$i$i = HEAPU8[$66 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($$0$i$i & 255, $__in_units, $__exp, $__a$1, $__a_end, $8, $9, $__grouping, $__g, $__g_end, $__dc, $__atoms) | 0) {
   $$lcssa = $21;
   $$pre$i2$i$i = $134;
   $__a$2 = $__a$1;
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0;
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 63]($21) | 0;
   $$pre$i$i$i5 = $21;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1;
   $$pre$i$i$i5 = $21;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0;
 if (!($86 & 1)) $93 = ($86 & 255) >>> 1; else $93 = HEAP32[$__grouping + 4 >> 2] | 0;
 if (!(($93 | 0) == 0 | (HEAP8[$__in_units >> 0] | 0) == 0)) {
  $97 = HEAP32[$__g_end >> 2] | 0;
  if (($97 - $__g | 0) < 160) {
   $102 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $97 + 4;
   HEAP32[$97 >> 2] = $102;
  }
 }
 HEAPF64[$__v >> 3] = +__ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a$2, HEAP32[$__a_end >> 2] | 0, $__err);
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$$lcssa) $118 = 0; else if ((HEAP32[$$lcssa + 12 >> 2] | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $118 = 0;
 } else $118 = $$lcssa; else $118 = $$lcssa;
 $119 = ($118 | 0) == 0;
 do if (!$$pre$i2$i$i) label = 50; else {
  if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) if ($119) break; else {
   label = 52;
   break;
  }
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 50;
   break;
  } else if ($119 ^ ($$pre$i2$i$i | 0) == 0) break; else {
   label = 52;
   break;
  }
 } while (0);
 if ((label | 0) == 50) if ($119) label = 52;
 if ((label | 0) == 52) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $118;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e, $__err, $__ct, $__n) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i17 = 0, $$0$i$i$i$i2 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i23 = 0, $$0$i$i1$i$i8 = 0, $$0$i$i14 = 0, $$0$in = 0, $$01 = 0, $$lcssa = 0, $$pre$i3$i$i10 = 0, $$pre$i3$i$i25 = 0, $$pre$i3$i$i25$lcssa = 0, $0 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $123 = 0, $13 = 0, $135 = 0, $147 = 0, $148 = 0, $149 = 0, $150 = 0, $16 = 0, $28 = 0, $3 = 0, $30 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $60 = 0, $63 = 0, $73 = 0, $76 = 0, $86 = 0, $87 = 0, $89 = 0, $91 = 0, $__r$0 = 0, $__r$0$in = 0, $__r$0$lcssa = 0, $__r$037 = 0, label = 0;
 $0 = HEAP32[$__b >> 2] | 0;
 do if (!$0) $147 = 1; else {
  $3 = HEAP32[$0 + 12 >> 2] | 0;
  if (($3 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0) | 0; else $$0$i$i$i$i = HEAP32[$3 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $147 = 1;
   break;
  } else {
   $147 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 $13 = HEAP32[$__e >> 2] | 0;
 do if (!$13) label = 14; else {
  $16 = HEAP32[$13 + 12 >> 2] | 0;
  if (($16 | 0) == (HEAP32[$13 + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$13 >> 2] | 0) + 36 >> 2] & 63]($13) | 0; else $$0$i$i1$i$i = HEAP32[$16 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 14;
   break;
  } else if ($147) {
   $148 = $13;
   label = 17;
   break;
  } else {
   label = 16;
   break;
  }
 } while (0);
 if ((label | 0) == 14) if ($147) label = 16; else {
  $148 = 0;
  label = 17;
 }
 L22 : do if ((label | 0) == 16) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6;
  $$01 = 0;
 } else if ((label | 0) == 17) {
  $28 = HEAP32[$__b >> 2] | 0;
  $30 = HEAP32[$28 + 12 >> 2] | 0;
  if (($30 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 63]($28) | 0; else $$0$i$i = HEAP32[$30 >> 2] | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $$0$i$i) | 0)) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   $$01 = 0;
   break;
  }
  $49 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 52 >> 2] & 31]($__ct, $$0$i$i, 0) | 0) << 24 >> 24;
  $50 = HEAP32[$__b >> 2] | 0;
  $51 = $50 + 12 | 0;
  $52 = HEAP32[$51 >> 2] | 0;
  if (($52 | 0) == (HEAP32[$50 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$50 >> 2] | 0) + 40 >> 2] & 63]($50) | 0;
   $$0$in = $__n;
   $$pre$i3$i$i10 = $148;
   $73 = $148;
   $__r$0$in = $49;
  } else {
   HEAP32[$51 >> 2] = $52 + 4;
   $$0$in = $__n;
   $$pre$i3$i$i10 = $148;
   $73 = $148;
   $__r$0$in = $49;
  }
  while (1) {
   $__r$0 = $__r$0$in + -48 | 0;
   $$0 = $$0$in + -1 | 0;
   $60 = HEAP32[$__b >> 2] | 0;
   do if (!$60) $87 = 1; else {
    $63 = HEAP32[$60 + 12 >> 2] | 0;
    if (($63 | 0) == (HEAP32[$60 + 16 >> 2] | 0)) $$0$i$i$i$i2 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$60 >> 2] | 0) + 36 >> 2] & 63]($60) | 0; else $$0$i$i$i$i2 = HEAP32[$63 >> 2] | 0;
    if (($$0$i$i$i$i2 | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $87 = 1;
     break;
    } else {
     $87 = (HEAP32[$__b >> 2] | 0) == 0;
     break;
    }
   } while (0);
   do if (!$73) {
    $$pre$i3$i$i25 = $$pre$i3$i$i10;
    $149 = 0;
    $86 = 1;
   } else {
    $76 = HEAP32[$73 + 12 >> 2] | 0;
    if (($76 | 0) == (HEAP32[$73 + 16 >> 2] | 0)) $$0$i$i1$i$i8 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$73 >> 2] | 0) + 36 >> 2] & 63]($73) | 0; else $$0$i$i1$i$i8 = HEAP32[$76 >> 2] | 0;
    if (($$0$i$i1$i$i8 | 0) == -1) {
     HEAP32[$__e >> 2] = 0;
     $$pre$i3$i$i25 = 0;
     $149 = 0;
     $86 = 1;
     break;
    } else {
     $$pre$i3$i$i25 = $$pre$i3$i$i10;
     $149 = $$pre$i3$i$i10;
     $86 = ($$pre$i3$i$i10 | 0) == 0;
     break;
    }
   } while (0);
   $89 = HEAP32[$__b >> 2] | 0;
   if (!(($87 ^ $86) & ($$0 | 0) > 0)) {
    $$lcssa = $89;
    $$pre$i3$i$i25$lcssa = $$pre$i3$i$i25;
    $__r$0$lcssa = $__r$0;
    break;
   }
   $91 = HEAP32[$89 + 12 >> 2] | 0;
   if (($91 | 0) == (HEAP32[$89 + 16 >> 2] | 0)) $$0$i$i14 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$89 >> 2] | 0) + 36 >> 2] & 63]($89) | 0; else $$0$i$i14 = HEAP32[$91 >> 2] | 0;
   if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 2048, $$0$i$i14) | 0)) {
    $$01 = $__r$0;
    break L22;
   }
   $110 = ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 52 >> 2] & 31]($__ct, $$0$i$i14, 0) | 0) << 24 >> 24) + ($__r$0 * 10 | 0) | 0;
   $111 = HEAP32[$__b >> 2] | 0;
   $112 = $111 + 12 | 0;
   $113 = HEAP32[$112 >> 2] | 0;
   if (($113 | 0) == (HEAP32[$111 + 16 >> 2] | 0)) {
    FUNCTION_TABLE_ii[HEAP32[(HEAP32[$111 >> 2] | 0) + 40 >> 2] & 63]($111) | 0;
    $$0$in = $$0;
    $$pre$i3$i$i10 = $$pre$i3$i$i25;
    $73 = $149;
    $__r$0$in = $110;
    continue;
   } else {
    HEAP32[$112 >> 2] = $113 + 4;
    $$0$in = $$0;
    $$pre$i3$i$i10 = $$pre$i3$i$i25;
    $73 = $149;
    $__r$0$in = $110;
    continue;
   }
  }
  do if (!$$lcssa) $150 = 1; else {
   $123 = HEAP32[$$lcssa + 12 >> 2] | 0;
   if (($123 | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) $$0$i$i$i$i17 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0; else $$0$i$i$i$i17 = HEAP32[$123 >> 2] | 0;
   if (($$0$i$i$i$i17 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $150 = 1;
    break;
   } else {
    $150 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  do if (!$$pre$i3$i$i25$lcssa) label = 60; else {
   $135 = HEAP32[$$pre$i3$i$i25$lcssa + 12 >> 2] | 0;
   if (($135 | 0) == (HEAP32[$$pre$i3$i$i25$lcssa + 16 >> 2] | 0)) $$0$i$i1$i$i23 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i25$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i25$lcssa) | 0; else $$0$i$i1$i$i23 = HEAP32[$135 >> 2] | 0;
   if (($$0$i$i1$i$i23 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 60;
    break;
   } else if ($150) {
    $$01 = $__r$0$lcssa;
    break L22;
   } else {
    $__r$037 = $__r$0$lcssa;
    break;
   }
  } while (0);
  if ((label | 0) == 60) if ($150) $__r$037 = $__r$0$lcssa; else {
   $$01 = $__r$0$lcssa;
   break;
  }
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
  $$01 = $__r$037;
 } while (0);
 return $$01 | 0;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $0 = 0, $100 = 0, $103 = 0, $105 = 0, $121 = 0, $122 = 0, $137 = 0, $21 = 0, $22 = 0, $23 = 0, $36 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $51 = 0, $57 = 0, $6 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $79 = 0, $8 = 0, $86 = 0, $9 = 0, $93 = 0, $95 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $6 = $__buf + 1 | 0;
  $$pre$phi30Z2D = $6;
  $$pre$phi32Z2D = $__buf + 8 | 0;
  $7 = $6;
 } else {
  $4 = $__buf + 8 | 0;
  $$pre$phi30Z2D = $__buf + 1 | 0;
  $$pre$phi32Z2D = $4;
  $7 = HEAP32[$4 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $7;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $8 = $__buf + 4 | 0;
 $9 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i4 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $7;
 L5 : while (1) {
  if (!$$pre$i$i$i4) $21 = 0; else if ((HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i4) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $21 = 0;
  } else $21 = $$pre$i$i$i4; else $21 = $$pre$i$i$i4;
  $22 = ($21 | 0) == 0;
  $23 = HEAP32[$__e >> 2] | 0;
  do if (!$23) label = 14; else {
   if ((HEAP32[$23 + 12 >> 2] | 0) != (HEAP32[$23 + 16 >> 2] | 0)) if ($22) {
    $137 = $23;
    break;
   } else {
    $$lcssa = $21;
    $$pre$i2$i$i = $23;
    $__a$2 = $__a$0;
    break L5;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 36 >> 2] & 63]($23) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 14;
    break;
   } else if ($22) {
    $137 = $23;
    break;
   } else {
    $$lcssa = $21;
    $$pre$i2$i$i = $23;
    $__a$2 = $__a$0;
    break L5;
   }
  } while (0);
  if ((label | 0) == 14) {
   label = 0;
   if ($22) {
    $$lcssa = $21;
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $137 = 0;
  }
  $36 = HEAP8[$__buf >> 0] | 0;
  $38 = ($36 & 1) == 0;
  if ($38) $43 = ($36 & 255) >>> 1; else $43 = HEAP32[$8 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $43 | 0)) {
   if ($38) {
    $51 = ($36 & 255) >>> 1;
    $64 = ($36 & 255) >>> 1;
   } else {
    $45 = HEAP32[$8 >> 2] | 0;
    $51 = $45;
    $64 = $45;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $51 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $57 = 10; else $57 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $57, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $63 = $$pre$phi30Z2D; else $63 = HEAP32[$$pre$phi32Z2D >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $64;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $21 + 12 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $67 = $21 + 16 | 0;
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 63]($21) | 0; else $$0$i$i = HEAPU8[$66 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $0, $__a$1, $__a_end, $__dc, $9, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$lcssa = $21;
   $$pre$i2$i$i = $137;
   $__a$2 = $__a$1;
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0;
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 63]($21) | 0;
   $$pre$i$i$i4 = $21;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1;
   $$pre$i$i$i4 = $21;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0;
 if (!($86 & 1)) $93 = ($86 & 255) >>> 1; else $93 = HEAP32[$__grouping + 4 >> 2] | 0;
 if ($93) {
  $95 = HEAP32[$__g_end >> 2] | 0;
  if (($95 - $__g | 0) < 160) {
   $100 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $95 + 4;
   HEAP32[$95 >> 2] = $100;
  }
 }
 $103 = __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0;
 $105 = $__v;
 HEAP32[$105 >> 2] = $103;
 HEAP32[$105 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$$lcssa) $121 = 0; else if ((HEAP32[$$lcssa + 12 >> 2] | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $121 = 0;
 } else $121 = $$lcssa; else $121 = $$lcssa;
 $122 = ($121 | 0) == 0;
 do if (!$$pre$i2$i$i) label = 50; else {
  if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) if ($122) break; else {
   label = 52;
   break;
  }
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 50;
   break;
  } else if ($122 ^ ($$pre$i2$i$i | 0) == 0) break; else {
   label = 52;
   break;
  }
 } while (0);
 if ((label | 0) == 50) if ($122) label = 52;
 if ((label | 0) == 52) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $121;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $0 = 0, $100 = 0, $103 = 0, $105 = 0, $121 = 0, $122 = 0, $137 = 0, $21 = 0, $22 = 0, $23 = 0, $36 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $51 = 0, $57 = 0, $6 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $79 = 0, $8 = 0, $86 = 0, $9 = 0, $93 = 0, $95 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $6 = $__buf + 1 | 0;
  $$pre$phi30Z2D = $6;
  $$pre$phi32Z2D = $__buf + 8 | 0;
  $7 = $6;
 } else {
  $4 = $__buf + 8 | 0;
  $$pre$phi30Z2D = $__buf + 1 | 0;
  $$pre$phi32Z2D = $4;
  $7 = HEAP32[$4 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $7;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $8 = $__buf + 4 | 0;
 $9 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i4 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $7;
 L5 : while (1) {
  if (!$$pre$i$i$i4) $21 = 0; else if ((HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i4) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $21 = 0;
  } else $21 = $$pre$i$i$i4; else $21 = $$pre$i$i$i4;
  $22 = ($21 | 0) == 0;
  $23 = HEAP32[$__e >> 2] | 0;
  do if (!$23) label = 14; else {
   if ((HEAP32[$23 + 12 >> 2] | 0) != (HEAP32[$23 + 16 >> 2] | 0)) if ($22) {
    $137 = $23;
    break;
   } else {
    $$lcssa = $21;
    $$pre$i2$i$i = $23;
    $__a$2 = $__a$0;
    break L5;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 36 >> 2] & 63]($23) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 14;
    break;
   } else if ($22) {
    $137 = $23;
    break;
   } else {
    $$lcssa = $21;
    $$pre$i2$i$i = $23;
    $__a$2 = $__a$0;
    break L5;
   }
  } while (0);
  if ((label | 0) == 14) {
   label = 0;
   if ($22) {
    $$lcssa = $21;
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $137 = 0;
  }
  $36 = HEAP8[$__buf >> 0] | 0;
  $38 = ($36 & 1) == 0;
  if ($38) $43 = ($36 & 255) >>> 1; else $43 = HEAP32[$8 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $43 | 0)) {
   if ($38) {
    $51 = ($36 & 255) >>> 1;
    $64 = ($36 & 255) >>> 1;
   } else {
    $45 = HEAP32[$8 >> 2] | 0;
    $51 = $45;
    $64 = $45;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $51 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $57 = 10; else $57 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $57, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $63 = $$pre$phi30Z2D; else $63 = HEAP32[$$pre$phi32Z2D >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $64;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $21 + 12 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $67 = $21 + 16 | 0;
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 63]($21) | 0; else $$0$i$i = HEAPU8[$66 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $0, $__a$1, $__a_end, $__dc, $9, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$lcssa = $21;
   $$pre$i2$i$i = $137;
   $__a$2 = $__a$1;
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0;
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 63]($21) | 0;
   $$pre$i$i$i4 = $21;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1;
   $$pre$i$i$i4 = $21;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0;
 if (!($86 & 1)) $93 = ($86 & 255) >>> 1; else $93 = HEAP32[$__grouping + 4 >> 2] | 0;
 if ($93) {
  $95 = HEAP32[$__g_end >> 2] | 0;
  if (($95 - $__g | 0) < 160) {
   $100 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $95 + 4;
   HEAP32[$95 >> 2] = $100;
  }
 }
 $103 = __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0;
 $105 = $__v;
 HEAP32[$105 >> 2] = $103;
 HEAP32[$105 + 4 >> 2] = tempRet0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$$lcssa) $121 = 0; else if ((HEAP32[$$lcssa + 12 >> 2] | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $121 = 0;
 } else $121 = $$lcssa; else $121 = $$lcssa;
 $122 = ($121 | 0) == 0;
 do if (!$$pre$i2$i$i) label = 50; else {
  if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) if ($122) break; else {
   label = 52;
   break;
  }
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 50;
   break;
  } else if ($122 ^ ($$pre$i2$i$i | 0) == 0) break; else {
   label = 52;
   break;
  }
 } while (0);
 if ((label | 0) == 50) if ($122) label = 52;
 if ((label | 0) == 52) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $121;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $0 = 0, $100 = 0, $116 = 0, $117 = 0, $132 = 0, $21 = 0, $22 = 0, $23 = 0, $36 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $51 = 0, $57 = 0, $6 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $79 = 0, $8 = 0, $86 = 0, $9 = 0, $93 = 0, $95 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $6 = $__buf + 1 | 0;
  $$pre$phi30Z2D = $6;
  $$pre$phi32Z2D = $__buf + 8 | 0;
  $7 = $6;
 } else {
  $4 = $__buf + 8 | 0;
  $$pre$phi30Z2D = $__buf + 1 | 0;
  $$pre$phi32Z2D = $4;
  $7 = HEAP32[$4 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $7;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $8 = $__buf + 4 | 0;
 $9 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i4 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $7;
 L5 : while (1) {
  if (!$$pre$i$i$i4) $21 = 0; else if ((HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i4) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $21 = 0;
  } else $21 = $$pre$i$i$i4; else $21 = $$pre$i$i$i4;
  $22 = ($21 | 0) == 0;
  $23 = HEAP32[$__e >> 2] | 0;
  do if (!$23) label = 14; else {
   if ((HEAP32[$23 + 12 >> 2] | 0) != (HEAP32[$23 + 16 >> 2] | 0)) if ($22) {
    $132 = $23;
    break;
   } else {
    $$lcssa = $21;
    $$pre$i2$i$i = $23;
    $__a$2 = $__a$0;
    break L5;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 36 >> 2] & 63]($23) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 14;
    break;
   } else if ($22) {
    $132 = $23;
    break;
   } else {
    $$lcssa = $21;
    $$pre$i2$i$i = $23;
    $__a$2 = $__a$0;
    break L5;
   }
  } while (0);
  if ((label | 0) == 14) {
   label = 0;
   if ($22) {
    $$lcssa = $21;
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $132 = 0;
  }
  $36 = HEAP8[$__buf >> 0] | 0;
  $38 = ($36 & 1) == 0;
  if ($38) $43 = ($36 & 255) >>> 1; else $43 = HEAP32[$8 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $43 | 0)) {
   if ($38) {
    $51 = ($36 & 255) >>> 1;
    $64 = ($36 & 255) >>> 1;
   } else {
    $45 = HEAP32[$8 >> 2] | 0;
    $51 = $45;
    $64 = $45;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $51 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $57 = 10; else $57 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $57, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $63 = $$pre$phi30Z2D; else $63 = HEAP32[$$pre$phi32Z2D >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $64;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $21 + 12 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $67 = $21 + 16 | 0;
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 63]($21) | 0; else $$0$i$i = HEAPU8[$66 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $0, $__a$1, $__a_end, $__dc, $9, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$lcssa = $21;
   $$pre$i2$i$i = $132;
   $__a$2 = $__a$1;
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0;
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 63]($21) | 0;
   $$pre$i$i$i4 = $21;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1;
   $$pre$i$i$i4 = $21;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0;
 if (!($86 & 1)) $93 = ($86 & 255) >>> 1; else $93 = HEAP32[$__grouping + 4 >> 2] | 0;
 if ($93) {
  $95 = HEAP32[$__g_end >> 2] | 0;
  if (($95 - $__g | 0) < 160) {
   $100 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $95 + 4;
   HEAP32[$95 >> 2] = $100;
  }
 }
 HEAP16[$__v >> 1] = __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$$lcssa) $116 = 0; else if ((HEAP32[$$lcssa + 12 >> 2] | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $116 = 0;
 } else $116 = $$lcssa; else $116 = $$lcssa;
 $117 = ($116 | 0) == 0;
 do if (!$$pre$i2$i$i) label = 50; else {
  if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) if ($117) break; else {
   label = 52;
   break;
  }
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 50;
   break;
  } else if ($117 ^ ($$pre$i2$i$i | 0) == 0) break; else {
   label = 52;
   break;
  }
 } while (0);
 if ((label | 0) == 50) if ($117) label = 52;
 if ((label | 0) == 52) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $116;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $0 = 0, $100 = 0, $116 = 0, $117 = 0, $132 = 0, $21 = 0, $22 = 0, $23 = 0, $36 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $51 = 0, $57 = 0, $6 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $79 = 0, $8 = 0, $86 = 0, $9 = 0, $93 = 0, $95 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $6 = $__buf + 1 | 0;
  $$pre$phi30Z2D = $6;
  $$pre$phi32Z2D = $__buf + 8 | 0;
  $7 = $6;
 } else {
  $4 = $__buf + 8 | 0;
  $$pre$phi30Z2D = $__buf + 1 | 0;
  $$pre$phi32Z2D = $4;
  $7 = HEAP32[$4 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $7;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $8 = $__buf + 4 | 0;
 $9 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i4 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $7;
 L5 : while (1) {
  if (!$$pre$i$i$i4) $21 = 0; else if ((HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i4) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $21 = 0;
  } else $21 = $$pre$i$i$i4; else $21 = $$pre$i$i$i4;
  $22 = ($21 | 0) == 0;
  $23 = HEAP32[$__e >> 2] | 0;
  do if (!$23) label = 14; else {
   if ((HEAP32[$23 + 12 >> 2] | 0) != (HEAP32[$23 + 16 >> 2] | 0)) if ($22) {
    $132 = $23;
    break;
   } else {
    $$lcssa = $21;
    $$pre$i2$i$i = $23;
    $__a$2 = $__a$0;
    break L5;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 36 >> 2] & 63]($23) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 14;
    break;
   } else if ($22) {
    $132 = $23;
    break;
   } else {
    $$lcssa = $21;
    $$pre$i2$i$i = $23;
    $__a$2 = $__a$0;
    break L5;
   }
  } while (0);
  if ((label | 0) == 14) {
   label = 0;
   if ($22) {
    $$lcssa = $21;
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $132 = 0;
  }
  $36 = HEAP8[$__buf >> 0] | 0;
  $38 = ($36 & 1) == 0;
  if ($38) $43 = ($36 & 255) >>> 1; else $43 = HEAP32[$8 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $43 | 0)) {
   if ($38) {
    $51 = ($36 & 255) >>> 1;
    $64 = ($36 & 255) >>> 1;
   } else {
    $45 = HEAP32[$8 >> 2] | 0;
    $51 = $45;
    $64 = $45;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $51 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $57 = 10; else $57 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $57, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $63 = $$pre$phi30Z2D; else $63 = HEAP32[$$pre$phi32Z2D >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $64;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $21 + 12 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $67 = $21 + 16 | 0;
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 63]($21) | 0; else $$0$i$i = HEAPU8[$66 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $0, $__a$1, $__a_end, $__dc, $9, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$lcssa = $21;
   $$pre$i2$i$i = $132;
   $__a$2 = $__a$1;
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0;
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 63]($21) | 0;
   $$pre$i$i$i4 = $21;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1;
   $$pre$i$i$i4 = $21;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0;
 if (!($86 & 1)) $93 = ($86 & 255) >>> 1; else $93 = HEAP32[$__grouping + 4 >> 2] | 0;
 if ($93) {
  $95 = HEAP32[$__g_end >> 2] | 0;
  if (($95 - $__g | 0) < 160) {
   $100 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $95 + 4;
   HEAP32[$95 >> 2] = $100;
  }
 }
 HEAP32[$__v >> 2] = __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$$lcssa) $116 = 0; else if ((HEAP32[$$lcssa + 12 >> 2] | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $116 = 0;
 } else $116 = $$lcssa; else $116 = $$lcssa;
 $117 = ($116 | 0) == 0;
 do if (!$$pre$i2$i$i) label = 50; else {
  if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) if ($117) break; else {
   label = 52;
   break;
  }
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 50;
   break;
  } else if ($117 ^ ($$pre$i2$i$i | 0) == 0) break; else {
   label = 52;
   break;
  }
 } while (0);
 if ((label | 0) == 50) if ($117) label = 52;
 if ((label | 0) == 52) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $116;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $0 = 0, $100 = 0, $116 = 0, $117 = 0, $132 = 0, $21 = 0, $22 = 0, $23 = 0, $36 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $51 = 0, $57 = 0, $6 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $79 = 0, $8 = 0, $86 = 0, $9 = 0, $93 = 0, $95 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $6 = $__buf + 1 | 0;
  $$pre$phi30Z2D = $6;
  $$pre$phi32Z2D = $__buf + 8 | 0;
  $7 = $6;
 } else {
  $4 = $__buf + 8 | 0;
  $$pre$phi30Z2D = $__buf + 1 | 0;
  $$pre$phi32Z2D = $4;
  $7 = HEAP32[$4 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $7;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $8 = $__buf + 4 | 0;
 $9 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i4 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $7;
 L5 : while (1) {
  if (!$$pre$i$i$i4) $21 = 0; else if ((HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i4) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $21 = 0;
  } else $21 = $$pre$i$i$i4; else $21 = $$pre$i$i$i4;
  $22 = ($21 | 0) == 0;
  $23 = HEAP32[$__e >> 2] | 0;
  do if (!$23) label = 14; else {
   if ((HEAP32[$23 + 12 >> 2] | 0) != (HEAP32[$23 + 16 >> 2] | 0)) if ($22) {
    $132 = $23;
    break;
   } else {
    $$lcssa = $21;
    $$pre$i2$i$i = $23;
    $__a$2 = $__a$0;
    break L5;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 36 >> 2] & 63]($23) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 14;
    break;
   } else if ($22) {
    $132 = $23;
    break;
   } else {
    $$lcssa = $21;
    $$pre$i2$i$i = $23;
    $__a$2 = $__a$0;
    break L5;
   }
  } while (0);
  if ((label | 0) == 14) {
   label = 0;
   if ($22) {
    $$lcssa = $21;
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $132 = 0;
  }
  $36 = HEAP8[$__buf >> 0] | 0;
  $38 = ($36 & 1) == 0;
  if ($38) $43 = ($36 & 255) >>> 1; else $43 = HEAP32[$8 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $43 | 0)) {
   if ($38) {
    $51 = ($36 & 255) >>> 1;
    $64 = ($36 & 255) >>> 1;
   } else {
    $45 = HEAP32[$8 >> 2] | 0;
    $51 = $45;
    $64 = $45;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $51 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $57 = 10; else $57 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $57, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $63 = $$pre$phi30Z2D; else $63 = HEAP32[$$pre$phi32Z2D >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $64;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $21 + 12 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $67 = $21 + 16 | 0;
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 63]($21) | 0; else $$0$i$i = HEAPU8[$66 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $0, $__a$1, $__a_end, $__dc, $9, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$lcssa = $21;
   $$pre$i2$i$i = $132;
   $__a$2 = $__a$1;
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0;
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 63]($21) | 0;
   $$pre$i$i$i4 = $21;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1;
   $$pre$i$i$i4 = $21;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0;
 if (!($86 & 1)) $93 = ($86 & 255) >>> 1; else $93 = HEAP32[$__grouping + 4 >> 2] | 0;
 if ($93) {
  $95 = HEAP32[$__g_end >> 2] | 0;
  if (($95 - $__g | 0) < 160) {
   $100 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $95 + 4;
   HEAP32[$95 >> 2] = $100;
  }
 }
 HEAP32[$__v >> 2] = __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$$lcssa) $116 = 0; else if ((HEAP32[$$lcssa + 12 >> 2] | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $116 = 0;
 } else $116 = $$lcssa; else $116 = $$lcssa;
 $117 = ($116 | 0) == 0;
 do if (!$$pre$i2$i$i) label = 50; else {
  if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) if ($117) break; else {
   label = 52;
   break;
  }
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 50;
   break;
  } else if ($117 ^ ($$pre$i2$i$i | 0) == 0) break; else {
   label = 52;
   break;
  }
 } while (0);
 if ((label | 0) == 50) if ($117) label = 52;
 if ((label | 0) == 52) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $116;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre$i$i$i4 = 0, $$pre$i2$i$i = 0, $$pre$phi30Z2D = 0, $$pre$phi32Z2D = 0, $0 = 0, $100 = 0, $116 = 0, $117 = 0, $132 = 0, $21 = 0, $22 = 0, $23 = 0, $36 = 0, $38 = 0, $4 = 0, $43 = 0, $45 = 0, $51 = 0, $57 = 0, $6 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $79 = 0, $8 = 0, $86 = 0, $9 = 0, $93 = 0, $95 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $__thousands_sep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $__atoms = sp + 198 | 0;
 $__thousands_sep = sp + 196 | 0;
 $__grouping = sp + 184 | 0;
 $__buf = sp + 172 | 0;
 $__a_end = sp + 168 | 0;
 $__g = sp + 8 | 0;
 $__g_end = sp + 4 | 0;
 $__dc = sp;
 $0 = __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($__iob) | 0;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping, $__iob, $__atoms, $__thousands_sep);
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $6 = $__buf + 1 | 0;
  $$pre$phi30Z2D = $6;
  $$pre$phi32Z2D = $__buf + 8 | 0;
  $7 = $6;
 } else {
  $4 = $__buf + 8 | 0;
  $$pre$phi30Z2D = $__buf + 1 | 0;
  $$pre$phi32Z2D = $4;
  $7 = HEAP32[$4 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $7;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $8 = $__buf + 4 | 0;
 $9 = HEAP8[$__thousands_sep >> 0] | 0;
 $$pre$i$i$i4 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $7;
 L5 : while (1) {
  if (!$$pre$i$i$i4) $21 = 0; else if ((HEAP32[$$pre$i$i$i4 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i4 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i4 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i4) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $21 = 0;
  } else $21 = $$pre$i$i$i4; else $21 = $$pre$i$i$i4;
  $22 = ($21 | 0) == 0;
  $23 = HEAP32[$__e >> 2] | 0;
  do if (!$23) label = 14; else {
   if ((HEAP32[$23 + 12 >> 2] | 0) != (HEAP32[$23 + 16 >> 2] | 0)) if ($22) {
    $132 = $23;
    break;
   } else {
    $$lcssa = $21;
    $$pre$i2$i$i = $23;
    $__a$2 = $__a$0;
    break L5;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$23 >> 2] | 0) + 36 >> 2] & 63]($23) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 14;
    break;
   } else if ($22) {
    $132 = $23;
    break;
   } else {
    $$lcssa = $21;
    $$pre$i2$i$i = $23;
    $__a$2 = $__a$0;
    break L5;
   }
  } while (0);
  if ((label | 0) == 14) {
   label = 0;
   if ($22) {
    $$lcssa = $21;
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $132 = 0;
  }
  $36 = HEAP8[$__buf >> 0] | 0;
  $38 = ($36 & 1) == 0;
  if ($38) $43 = ($36 & 255) >>> 1; else $43 = HEAP32[$8 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $43 | 0)) {
   if ($38) {
    $51 = ($36 & 255) >>> 1;
    $64 = ($36 & 255) >>> 1;
   } else {
    $45 = HEAP32[$8 >> 2] | 0;
    $51 = $45;
    $64 = $45;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $51 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $57 = 10; else $57 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $57, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $63 = $$pre$phi30Z2D; else $63 = HEAP32[$$pre$phi32Z2D >> 2] | 0;
   HEAP32[$__a_end >> 2] = $63 + $64;
   $__a$1 = $63;
  } else $__a$1 = $__a$0;
  $65 = $21 + 12 | 0;
  $66 = HEAP32[$65 >> 2] | 0;
  $67 = $21 + 16 | 0;
  if (($66 | 0) == (HEAP32[$67 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 36 >> 2] & 63]($21) | 0; else $$0$i$i = HEAPU8[$66 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, $0, $__a$1, $__a_end, $__dc, $9, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$lcssa = $21;
   $$pre$i2$i$i = $132;
   $__a$2 = $__a$1;
   break;
  }
  $79 = HEAP32[$65 >> 2] | 0;
  if (($79 | 0) == (HEAP32[$67 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 40 >> 2] & 63]($21) | 0;
   $$pre$i$i$i4 = $21;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$65 >> 2] = $79 + 1;
   $$pre$i$i$i4 = $21;
   $__a$0 = $__a$1;
   continue;
  }
 }
 $86 = HEAP8[$__grouping >> 0] | 0;
 if (!($86 & 1)) $93 = ($86 & 255) >>> 1; else $93 = HEAP32[$__grouping + 4 >> 2] | 0;
 if ($93) {
  $95 = HEAP32[$__g_end >> 2] | 0;
  if (($95 - $__g | 0) < 160) {
   $100 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $95 + 4;
   HEAP32[$95 >> 2] = $100;
  }
 }
 HEAP32[$__v >> 2] = __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a$2, HEAP32[$__a_end >> 2] | 0, $__err, $0) | 0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, HEAP32[$__g_end >> 2] | 0, $__err);
 if (!$$lcssa) $116 = 0; else if ((HEAP32[$$lcssa + 12 >> 2] | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $116 = 0;
 } else $116 = $$lcssa; else $116 = $$lcssa;
 $117 = ($116 | 0) == 0;
 do if (!$$pre$i2$i$i) label = 50; else {
  if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) if ($117) break; else {
   label = 52;
   break;
  }
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 50;
   break;
  } else if ($117 ^ ($$pre$i2$i$i | 0) == 0) break; else {
   label = 52;
   break;
  }
 } while (0);
 if ((label | 0) == 50) if ($117) label = 52;
 if ((label | 0) == 52) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $116;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$lcssa = 0, $$pre$i$i$i8 = 0, $$pre$i2$i$i = 0, $$pre$phi35Z2D = 0, $$pre$phi37Z2D = 0, $0 = 0, $1 = 0, $11 = 0, $113 = 0, $114 = 0, $12 = 0, $129 = 0, $13 = 0, $25 = 0, $26 = 0, $27 = 0, $40 = 0, $42 = 0, $47 = 0, $49 = 0, $55 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $83 = 0, $9 = 0, $98 = 0, $99 = 0, $__a$0 = 0, $__a$1 = 0, $__a$2 = 0, $__a_end = 0, $__atoms = 0, $__buf = 0, $__dc = 0, $__g = 0, $__g_end = 0, $__grouping = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $vararg_buffer = sp;
 $__atoms = sp + 208 | 0;
 $__grouping = sp + 196 | 0;
 $0 = sp + 192 | 0;
 $__buf = sp + 180 | 0;
 $__a_end = sp + 176 | 0;
 $__g = sp + 16 | 0;
 $__g_end = sp + 8 | 0;
 $__dc = sp + 4 | 0;
 HEAP32[$__grouping + 0 >> 2] = 0;
 HEAP32[$__grouping + 4 >> 2] = 0;
 HEAP32[$__grouping + 8 >> 2] = 0;
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 4904) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$1 >> 2] | 0) + 32 >> 2] & 7]($1, 3416, 3442 | 0, $__atoms) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$__buf + 0 >> 2] = 0;
 HEAP32[$__buf + 4 >> 2] = 0;
 HEAP32[$__buf + 8 >> 2] = 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, 10, 0);
 if (!(HEAP8[$__buf >> 0] & 1)) {
  $11 = $__buf + 1 | 0;
  $$pre$phi35Z2D = $11;
  $$pre$phi37Z2D = $__buf + 8 | 0;
  $12 = $11;
 } else {
  $9 = $__buf + 8 | 0;
  $$pre$phi35Z2D = $__buf + 1 | 0;
  $$pre$phi37Z2D = $9;
  $12 = HEAP32[$9 >> 2] | 0;
 }
 HEAP32[$__a_end >> 2] = $12;
 HEAP32[$__g_end >> 2] = $__g;
 HEAP32[$__dc >> 2] = 0;
 $13 = $__buf + 4 | 0;
 $$pre$i$i$i8 = HEAP32[$__b >> 2] | 0;
 $__a$0 = $12;
 L5 : while (1) {
  if (!$$pre$i$i$i8) $25 = 0; else if ((HEAP32[$$pre$i$i$i8 + 12 >> 2] | 0) == (HEAP32[$$pre$i$i$i8 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i$i$i8 >> 2] | 0) + 36 >> 2] & 63]($$pre$i$i$i8) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $25 = 0;
  } else $25 = $$pre$i$i$i8; else $25 = $$pre$i$i$i8;
  $26 = ($25 | 0) == 0;
  $27 = HEAP32[$__e >> 2] | 0;
  do if (!$27) label = 14; else {
   if ((HEAP32[$27 + 12 >> 2] | 0) != (HEAP32[$27 + 16 >> 2] | 0)) if ($26) {
    $129 = $27;
    break;
   } else {
    $$lcssa = $25;
    $$pre$i2$i$i = $27;
    $__a$2 = $__a$0;
    break L5;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$27 >> 2] | 0) + 36 >> 2] & 63]($27) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 14;
    break;
   } else if ($26) {
    $129 = $27;
    break;
   } else {
    $$lcssa = $25;
    $$pre$i2$i$i = $27;
    $__a$2 = $__a$0;
    break L5;
   }
  } while (0);
  if ((label | 0) == 14) {
   label = 0;
   if ($26) {
    $$lcssa = $25;
    $$pre$i2$i$i = 0;
    $__a$2 = $__a$0;
    break;
   } else $129 = 0;
  }
  $40 = HEAP8[$__buf >> 0] | 0;
  $42 = ($40 & 1) == 0;
  if ($42) $47 = ($40 & 255) >>> 1; else $47 = HEAP32[$13 >> 2] | 0;
  if ((HEAP32[$__a_end >> 2] | 0) == ($__a$0 + $47 | 0)) {
   if ($42) {
    $55 = ($40 & 255) >>> 1;
    $68 = ($40 & 255) >>> 1;
   } else {
    $49 = HEAP32[$13 >> 2] | 0;
    $55 = $49;
    $68 = $49;
   }
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $55 << 1, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $61 = 10; else $61 = (HEAP32[$__buf >> 2] & -2) + -1 | 0;
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, $61, 0);
   if (!(HEAP8[$__buf >> 0] & 1)) $67 = $$pre$phi35Z2D; else $67 = HEAP32[$$pre$phi37Z2D >> 2] | 0;
   HEAP32[$__a_end >> 2] = $67 + $68;
   $__a$1 = $67;
  } else $__a$1 = $__a$0;
  $69 = $25 + 12 | 0;
  $70 = HEAP32[$69 >> 2] | 0;
  $71 = $25 + 16 | 0;
  if (($70 | 0) == (HEAP32[$71 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$25 >> 2] | 0) + 36 >> 2] & 63]($25) | 0; else $$0$i$i = HEAPU8[$70 >> 0] | 0;
  if (__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($$0$i$i & 255, 16, $__a$1, $__a_end, $__dc, 0, $__grouping, $__g, $__g_end, $__atoms) | 0) {
   $$lcssa = $25;
   $$pre$i2$i$i = $129;
   $__a$2 = $__a$1;
   break;
  }
  $83 = HEAP32[$69 >> 2] | 0;
  if (($83 | 0) == (HEAP32[$71 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$25 >> 2] | 0) + 40 >> 2] & 63]($25) | 0;
   $$pre$i$i$i8 = $25;
   $__a$0 = $__a$1;
   continue;
  } else {
   HEAP32[$69 >> 2] = $83 + 1;
   $$pre$i$i$i8 = $25;
   $__a$0 = $__a$1;
   continue;
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf, (HEAP32[$__a_end >> 2] | 0) - $__a$2 | 0, 0);
 if (!(HEAP8[$__buf >> 0] & 1)) $99 = $$pre$phi35Z2D; else $99 = HEAP32[$$pre$phi37Z2D >> 2] | 0;
 $98 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$vararg_buffer >> 2] = $__v;
 if ((__ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($99, $98, 3456, $vararg_buffer) | 0) != 1) HEAP32[$__err >> 2] = 4;
 if (!$$lcssa) $113 = 0; else if ((HEAP32[$$lcssa + 12 >> 2] | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $113 = 0;
 } else $113 = $$lcssa; else $113 = $$lcssa;
 $114 = ($113 | 0) == 0;
 do if (!$$pre$i2$i$i) label = 48; else {
  if ((HEAP32[$$pre$i2$i$i + 12 >> 2] | 0) != (HEAP32[$$pre$i2$i$i + 16 >> 2] | 0)) if ($114) break; else {
   label = 50;
   break;
  }
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 48;
   break;
  } else if ($114 ^ ($$pre$i2$i$i | 0) == 0) break; else {
   label = 50;
   break;
  }
 } while (0);
 if ((label | 0) == 48) if ($114) label = 50;
 if ((label | 0) == 50) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = $113;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__buf);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}

function _try_realloc_chunk($p, $nb) {
 $p = $p | 0;
 $nb = $nb | 0;
 var $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $101 = 0, $103 = 0, $106 = 0, $109 = 0, $110 = 0, $112 = 0, $113 = 0, $115 = 0, $116 = 0, $118 = 0, $119 = 0, $124 = 0, $125 = 0, $134 = 0, $139 = 0, $143 = 0, $149 = 0, $159 = 0, $168 = 0, $2 = 0, $20 = 0, $3 = 0, $33 = 0, $35 = 0, $4 = 0, $45 = 0, $47 = 0, $5 = 0, $56 = 0, $62 = 0, $68 = 0, $7 = 0, $70 = 0, $71 = 0, $74 = 0, $76 = 0, $78 = 0, $8 = 0, $91 = 0, $96 = 0, $98 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $newp$0 = 0, $storemerge = 0, $storemerge21 = 0;
 $0 = $p + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $1 & -8;
 $3 = $p + $2 | 0;
 $4 = HEAP32[3512] | 0;
 $5 = $1 & 3;
 if (!(($5 | 0) != 1 & $p >>> 0 >= $4 >>> 0 & $p >>> 0 < $3 >>> 0)) _abort();
 $7 = $p + ($2 | 4) | 0;
 $8 = HEAP32[$7 >> 2] | 0;
 if (!($8 & 1)) _abort();
 if (!$5) {
  if ($nb >>> 0 < 256) {
   $newp$0 = 0;
   return $newp$0 | 0;
  }
  if ($2 >>> 0 >= ($nb + 4 | 0) >>> 0) if (($2 - $nb | 0) >>> 0 <= HEAP32[3628] << 1 >>> 0) {
   $newp$0 = $p;
   return $newp$0 | 0;
  }
  $newp$0 = 0;
  return $newp$0 | 0;
 }
 if ($2 >>> 0 >= $nb >>> 0) {
  $20 = $2 - $nb | 0;
  if ($20 >>> 0 <= 15) {
   $newp$0 = $p;
   return $newp$0 | 0;
  }
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
  HEAP32[$p + ($nb + 4) >> 2] = $20 | 3;
  HEAP32[$7 >> 2] = HEAP32[$7 >> 2] | 1;
  _dispose_chunk($p + $nb | 0, $20);
  $newp$0 = $p;
  return $newp$0 | 0;
 }
 if (($3 | 0) == (HEAP32[3514] | 0)) {
  $33 = (HEAP32[3511] | 0) + $2 | 0;
  if ($33 >>> 0 <= $nb >>> 0) {
   $newp$0 = 0;
   return $newp$0 | 0;
  }
  $35 = $33 - $nb | 0;
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
  HEAP32[$p + ($nb + 4) >> 2] = $35 | 1;
  HEAP32[3514] = $p + $nb;
  HEAP32[3511] = $35;
  $newp$0 = $p;
  return $newp$0 | 0;
 }
 if (($3 | 0) == (HEAP32[3513] | 0)) {
  $45 = (HEAP32[3510] | 0) + $2 | 0;
  if ($45 >>> 0 < $nb >>> 0) {
   $newp$0 = 0;
   return $newp$0 | 0;
  }
  $47 = $45 - $nb | 0;
  if ($47 >>> 0 > 15) {
   HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
   HEAP32[$p + ($nb + 4) >> 2] = $47 | 1;
   HEAP32[$p + $45 >> 2] = $47;
   $56 = $p + ($45 + 4) | 0;
   HEAP32[$56 >> 2] = HEAP32[$56 >> 2] & -2;
   $storemerge = $p + $nb | 0;
   $storemerge21 = $47;
  } else {
   HEAP32[$0 >> 2] = $1 & 1 | $45 | 2;
   $62 = $p + ($45 + 4) | 0;
   HEAP32[$62 >> 2] = HEAP32[$62 >> 2] | 1;
   $storemerge = 0;
   $storemerge21 = 0;
  }
  HEAP32[3510] = $storemerge21;
  HEAP32[3513] = $storemerge;
  $newp$0 = $p;
  return $newp$0 | 0;
 }
 if ($8 & 2) {
  $newp$0 = 0;
  return $newp$0 | 0;
 }
 $68 = ($8 & -8) + $2 | 0;
 if ($68 >>> 0 < $nb >>> 0) {
  $newp$0 = 0;
  return $newp$0 | 0;
 }
 $70 = $68 - $nb | 0;
 $71 = $8 >>> 3;
 do if ($8 >>> 0 < 256) {
  $74 = HEAP32[$p + ($2 + 8) >> 2] | 0;
  $76 = HEAP32[$p + ($2 + 12) >> 2] | 0;
  $78 = 14072 + ($71 << 1 << 2) | 0;
  if (($74 | 0) != ($78 | 0)) {
   if ($74 >>> 0 < $4 >>> 0) _abort();
   if ((HEAP32[$74 + 12 >> 2] | 0) != ($3 | 0)) _abort();
  }
  if (($76 | 0) == ($74 | 0)) {
   HEAP32[3508] = HEAP32[3508] & ~(1 << $71);
   break;
  }
  if (($76 | 0) == ($78 | 0)) $$pre$phiZ2D = $76 + 8 | 0; else {
   if ($76 >>> 0 < $4 >>> 0) _abort();
   $91 = $76 + 8 | 0;
   if ((HEAP32[$91 >> 2] | 0) == ($3 | 0)) $$pre$phiZ2D = $91; else _abort();
  }
  HEAP32[$74 + 12 >> 2] = $76;
  HEAP32[$$pre$phiZ2D >> 2] = $74;
 } else {
  $96 = HEAP32[$p + ($2 + 24) >> 2] | 0;
  $98 = HEAP32[$p + ($2 + 12) >> 2] | 0;
  do if (($98 | 0) == ($3 | 0)) {
   $109 = $p + ($2 + 20) | 0;
   $110 = HEAP32[$109 >> 2] | 0;
   if (!$110) {
    $112 = $p + ($2 + 16) | 0;
    $113 = HEAP32[$112 >> 2] | 0;
    if (!$113) {
     $R$1 = 0;
     break;
    } else {
     $R$0 = $113;
     $RP$0 = $112;
    }
   } else {
    $R$0 = $110;
    $RP$0 = $109;
   }
   while (1) {
    $115 = $R$0 + 20 | 0;
    $116 = HEAP32[$115 >> 2] | 0;
    if ($116) {
     $R$0 = $116;
     $RP$0 = $115;
     continue;
    }
    $118 = $R$0 + 16 | 0;
    $119 = HEAP32[$118 >> 2] | 0;
    if (!$119) {
     $R$0$lcssa = $R$0;
     $RP$0$lcssa = $RP$0;
     break;
    } else {
     $R$0 = $119;
     $RP$0 = $118;
    }
   }
   if ($RP$0$lcssa >>> 0 < $4 >>> 0) _abort(); else {
    HEAP32[$RP$0$lcssa >> 2] = 0;
    $R$1 = $R$0$lcssa;
    break;
   }
  } else {
   $101 = HEAP32[$p + ($2 + 8) >> 2] | 0;
   if ($101 >>> 0 < $4 >>> 0) _abort();
   $103 = $101 + 12 | 0;
   if ((HEAP32[$103 >> 2] | 0) != ($3 | 0)) _abort();
   $106 = $98 + 8 | 0;
   if ((HEAP32[$106 >> 2] | 0) == ($3 | 0)) {
    HEAP32[$103 >> 2] = $98;
    HEAP32[$106 >> 2] = $101;
    $R$1 = $98;
    break;
   } else _abort();
  } while (0);
  if ($96) {
   $124 = HEAP32[$p + ($2 + 28) >> 2] | 0;
   $125 = 14336 + ($124 << 2) | 0;
   if (($3 | 0) == (HEAP32[$125 >> 2] | 0)) {
    HEAP32[$125 >> 2] = $R$1;
    if (!$R$1) {
     HEAP32[3509] = HEAP32[3509] & ~(1 << $124);
     break;
    }
   } else {
    if ($96 >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort();
    $134 = $96 + 16 | 0;
    if ((HEAP32[$134 >> 2] | 0) == ($3 | 0)) HEAP32[$134 >> 2] = $R$1; else HEAP32[$96 + 20 >> 2] = $R$1;
    if (!$R$1) break;
   }
   $139 = HEAP32[3512] | 0;
   if ($R$1 >>> 0 < $139 >>> 0) _abort();
   HEAP32[$R$1 + 24 >> 2] = $96;
   $143 = HEAP32[$p + ($2 + 16) >> 2] | 0;
   do if ($143) if ($143 >>> 0 < $139 >>> 0) _abort(); else {
    HEAP32[$R$1 + 16 >> 2] = $143;
    HEAP32[$143 + 24 >> 2] = $R$1;
    break;
   } while (0);
   $149 = HEAP32[$p + ($2 + 20) >> 2] | 0;
   if ($149) if ($149 >>> 0 < (HEAP32[3512] | 0) >>> 0) _abort(); else {
    HEAP32[$R$1 + 20 >> 2] = $149;
    HEAP32[$149 + 24 >> 2] = $R$1;
    break;
   }
  }
 } while (0);
 if ($70 >>> 0 < 16) {
  HEAP32[$0 >> 2] = $68 | $1 & 1 | 2;
  $159 = $p + ($68 | 4) | 0;
  HEAP32[$159 >> 2] = HEAP32[$159 >> 2] | 1;
  $newp$0 = $p;
  return $newp$0 | 0;
 } else {
  HEAP32[$0 >> 2] = $1 & 1 | $nb | 2;
  HEAP32[$p + ($nb + 4) >> 2] = $70 | 3;
  $168 = $p + ($68 | 4) | 0;
  HEAP32[$168 >> 2] = HEAP32[$168 >> 2] | 1;
  _dispose_chunk($p + $nb | 0, $70);
  $newp$0 = $p;
  return $newp$0 | 0;
 }
 return 0;
}

function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $__e, $__err, $__ct, $__n) {
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$0$i$i = 0, $$0$i$i10 = 0, $$0$in = 0, $$01 = 0, $$lcssa = 0, $$pre$i2$i$i20 = 0, $$pre$i2$i$i20$lcssa = 0, $$pre$i2$i$i7 = 0, $0 = 0, $106 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $141 = 0, $142 = 0, $156 = 0, $28 = 0, $30 = 0, $40 = 0, $42 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $65 = 0, $77 = 0, $78 = 0, $79 = 0, $91 = 0, $94 = 0, $96 = 0, $__r$0 = 0, $__r$0$in = 0, $__r$0$lcssa = 0, $__r$032 = 0, label = 0;
 $0 = HEAP32[$__b >> 2] | 0;
 do if (!$0) $12 = 0; else if ((HEAP32[$0 + 12 >> 2] | 0) == (HEAP32[$0 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $12 = 0;
  break;
 } else {
  $12 = HEAP32[$__b >> 2] | 0;
  break;
 } else $12 = $0; while (0);
 $13 = ($12 | 0) == 0;
 $14 = HEAP32[$__e >> 2] | 0;
 do if (!$14) label = 11; else {
  if ((HEAP32[$14 + 12 >> 2] | 0) == (HEAP32[$14 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 36 >> 2] & 63]($14) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 11;
   break;
  }
  if ($13) {
   $156 = $14;
   label = 13;
  } else label = 12;
 } while (0);
 if ((label | 0) == 11) if ($13) label = 12; else {
  $156 = 0;
  label = 13;
 }
 L16 : do if ((label | 0) == 12) {
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6;
  $$01 = 0;
 } else if ((label | 0) == 13) {
  $28 = HEAP32[$__b >> 2] | 0;
  $30 = HEAP32[$28 + 12 >> 2] | 0;
  if (($30 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 63]($28) | 0; else $$0$i$i = HEAPU8[$30 >> 0] | 0;
  $40 = $$0$i$i & 255;
  if ($40 << 24 >> 24 > -1) {
   $42 = $__ct + 8 | 0;
   if (HEAP16[(HEAP32[$42 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 2048) {
    $54 = (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 36 >> 2] & 31]($__ct, $40, 0) | 0) << 24 >> 24;
    $55 = HEAP32[$__b >> 2] | 0;
    $56 = $55 + 12 | 0;
    $57 = HEAP32[$56 >> 2] | 0;
    if (($57 | 0) == (HEAP32[$55 + 16 >> 2] | 0)) {
     FUNCTION_TABLE_ii[HEAP32[(HEAP32[$55 >> 2] | 0) + 40 >> 2] & 63]($55) | 0;
     $$0$in = $__n;
     $$pre$i2$i$i7 = $156;
     $79 = $156;
     $__r$0$in = $54;
    } else {
     HEAP32[$56 >> 2] = $57 + 1;
     $$0$in = $__n;
     $$pre$i2$i$i7 = $156;
     $79 = $156;
     $__r$0$in = $54;
    }
    while (1) {
     $__r$0 = $__r$0$in + -48 | 0;
     $$0 = $$0$in + -1 | 0;
     $65 = HEAP32[$__b >> 2] | 0;
     do if (!$65) $77 = 0; else if ((HEAP32[$65 + 12 >> 2] | 0) == (HEAP32[$65 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$65 >> 2] | 0) + 36 >> 2] & 63]($65) | 0) == -1) {
      HEAP32[$__b >> 2] = 0;
      $77 = 0;
      break;
     } else {
      $77 = HEAP32[$__b >> 2] | 0;
      break;
     } else $77 = $65; while (0);
     $78 = ($77 | 0) == 0;
     if (!$79) {
      $$pre$i2$i$i20 = $$pre$i2$i$i7;
      $91 = 0;
     } else if ((HEAP32[$79 + 12 >> 2] | 0) == (HEAP32[$79 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$79 >> 2] | 0) + 36 >> 2] & 63]($79) | 0) == -1) {
      HEAP32[$__e >> 2] = 0;
      $$pre$i2$i$i20 = 0;
      $91 = 0;
     } else {
      $$pre$i2$i$i20 = $$pre$i2$i$i7;
      $91 = $$pre$i2$i$i7;
     } else {
      $$pre$i2$i$i20 = $$pre$i2$i$i7;
      $91 = $79;
     }
     $94 = HEAP32[$__b >> 2] | 0;
     if (!(($78 ^ ($91 | 0) == 0) & ($$0 | 0) > 0)) {
      $$lcssa = $94;
      $$pre$i2$i$i20$lcssa = $$pre$i2$i$i20;
      $__r$0$lcssa = $__r$0;
      break;
     }
     $96 = HEAP32[$94 + 12 >> 2] | 0;
     if (($96 | 0) == (HEAP32[$94 + 16 >> 2] | 0)) $$0$i$i10 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$94 >> 2] | 0) + 36 >> 2] & 63]($94) | 0; else $$0$i$i10 = HEAPU8[$96 >> 0] | 0;
     $106 = $$0$i$i10 & 255;
     if ($106 << 24 >> 24 <= -1) {
      $$01 = $__r$0;
      break L16;
     }
     if (!(HEAP16[(HEAP32[$42 >> 2] | 0) + ($$0$i$i10 << 24 >> 24 << 1) >> 1] & 2048)) {
      $$01 = $__r$0;
      break L16;
     }
     $119 = ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 36 >> 2] & 31]($__ct, $106, 0) | 0) << 24 >> 24) + ($__r$0 * 10 | 0) | 0;
     $120 = HEAP32[$__b >> 2] | 0;
     $121 = $120 + 12 | 0;
     $122 = HEAP32[$121 >> 2] | 0;
     if (($122 | 0) == (HEAP32[$120 + 16 >> 2] | 0)) {
      FUNCTION_TABLE_ii[HEAP32[(HEAP32[$120 >> 2] | 0) + 40 >> 2] & 63]($120) | 0;
      $$0$in = $$0;
      $$pre$i2$i$i7 = $$pre$i2$i$i20;
      $79 = $91;
      $__r$0$in = $119;
      continue;
     } else {
      HEAP32[$121 >> 2] = $122 + 1;
      $$0$in = $$0;
      $$pre$i2$i$i7 = $$pre$i2$i$i20;
      $79 = $91;
      $__r$0$in = $119;
      continue;
     }
    }
    do if (!$$lcssa) $141 = 0; else if ((HEAP32[$$lcssa + 12 >> 2] | 0) == (HEAP32[$$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$lcssa >> 2] | 0) + 36 >> 2] & 63]($$lcssa) | 0) == -1) {
     HEAP32[$__b >> 2] = 0;
     $141 = 0;
     break;
    } else {
     $141 = HEAP32[$__b >> 2] | 0;
     break;
    } else $141 = $$lcssa; while (0);
    $142 = ($141 | 0) == 0;
    do if (!$$pre$i2$i$i20$lcssa) label = 50; else {
     if ((HEAP32[$$pre$i2$i$i20$lcssa + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i20$lcssa + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i20$lcssa >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i20$lcssa) | 0) == -1) {
      HEAP32[$__e >> 2] = 0;
      label = 50;
      break;
     }
     if ($142) {
      $$01 = $__r$0$lcssa;
      break L16;
     } else $__r$032 = $__r$0$lcssa;
    } while (0);
    if ((label | 0) == 50) if ($142) $__r$032 = $__r$0$lcssa; else {
     $$01 = $__r$0$lcssa;
     break;
    }
    HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
    $$01 = $__r$032;
    break;
   }
  }
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
  $$01 = 0;
 } while (0);
 return $$01 | 0;
}

function _fmod($x, $y) {
 $x = +$x;
 $y = +$y;
 var $$0 = 0.0, $$lcssa7 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $106 = 0, $107 = 0, $11 = 0, $112 = 0, $113 = 0, $115 = 0, $118 = 0, $12 = 0, $120 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $130 = 0, $137 = 0, $138 = 0, $139 = 0, $140 = 0, $141 = 0, $146 = 0, $149 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $2 = 0, $23 = 0.0, $25 = 0, $26 = 0, $3 = 0, $37 = 0, $38 = 0, $4 = 0, $44 = 0, $45 = 0, $46 = 0, $55 = 0, $6 = 0, $60 = 0, $61 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $78 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $93 = 0, $94 = 0, $96 = 0, $ex$0$lcssa = 0, $ex$026 = 0, $ex$1 = 0, $ex$2$lcssa = 0, $ex$212 = 0, $ex$3$lcssa = 0, $ex$39 = 0, $ey$0$lcssa = 0, $ey$020 = 0, $ey$1$ph = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $2 = HEAP32[tempDoublePtr >> 2] | 0;
 $3 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $4 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 $6 = $4 & 2047;
 $7 = _bitshift64Lshr($2 | 0, $3 | 0, 52) | 0;
 $9 = $7 & 2047;
 $10 = $1 & -2147483648;
 $11 = _bitshift64Shl($2 | 0, $3 | 0, 1) | 0;
 $12 = tempRet0;
 if (!(($11 | 0) == 0 & ($12 | 0) == 0)) {
  $16 = $3 & 2147483647;
  if (!($16 >>> 0 > 2146435072 | ($16 | 0) == 2146435072 & $2 >>> 0 > 0 | ($6 | 0) == 2047)) {
   $25 = _bitshift64Shl($0 | 0, $1 | 0, 1) | 0;
   $26 = tempRet0;
   if (!($26 >>> 0 > $12 >>> 0 | ($26 | 0) == ($12 | 0) & $25 >>> 0 > $11 >>> 0)) {
    if (!(($25 | 0) == ($11 | 0) & ($26 | 0) == ($12 | 0))) {
     $$0 = $x;
     return +$$0;
    }
    $$0 = $x * 0.0;
    return +$$0;
   }
   if (!$6) {
    $37 = _bitshift64Shl($0 | 0, $1 | 0, 12) | 0;
    $38 = tempRet0;
    if (($38 | 0) > -1 | ($38 | 0) == -1 & $37 >>> 0 > 4294967295) {
     $45 = $37;
     $46 = $38;
     $ex$026 = 0;
     while (1) {
      $44 = $ex$026 + -1 | 0;
      $45 = _bitshift64Shl($45 | 0, $46 | 0, 1) | 0;
      $46 = tempRet0;
      if (!(($46 | 0) > -1 | ($46 | 0) == -1 & $45 >>> 0 > 4294967295)) {
       $ex$0$lcssa = $44;
       break;
      } else $ex$026 = $44;
     }
    } else $ex$0$lcssa = 0;
    $55 = _bitshift64Shl($0 | 0, $1 | 0, 1 - $ex$0$lcssa | 0) | 0;
    $83 = $55;
    $84 = tempRet0;
    $ex$1 = $ex$0$lcssa;
   } else {
    $83 = $0;
    $84 = $1 & 1048575 | 1048576;
    $ex$1 = $6;
   }
   if (!$9) {
    $60 = _bitshift64Shl($2 | 0, $3 | 0, 12) | 0;
    $61 = tempRet0;
    if (($61 | 0) > -1 | ($61 | 0) == -1 & $60 >>> 0 > 4294967295) {
     $68 = $60;
     $69 = $61;
     $ey$020 = 0;
     while (1) {
      $67 = $ey$020 + -1 | 0;
      $68 = _bitshift64Shl($68 | 0, $69 | 0, 1) | 0;
      $69 = tempRet0;
      if (!(($69 | 0) > -1 | ($69 | 0) == -1 & $68 >>> 0 > 4294967295)) {
       $ey$0$lcssa = $67;
       break;
      } else $ey$020 = $67;
     }
    } else $ey$0$lcssa = 0;
    $78 = _bitshift64Shl($2 | 0, $3 | 0, 1 - $ey$0$lcssa | 0) | 0;
    $85 = $78;
    $86 = tempRet0;
    $ey$1$ph = $ey$0$lcssa;
   } else {
    $85 = $2;
    $86 = $3 & 1048575 | 1048576;
    $ey$1$ph = $9;
   }
   $87 = _i64Subtract($83 | 0, $84 | 0, $85 | 0, $86 | 0) | 0;
   $88 = tempRet0;
   $93 = ($88 | 0) > -1 | ($88 | 0) == -1 & $87 >>> 0 > 4294967295;
   L27 : do if (($ex$1 | 0) > ($ey$1$ph | 0)) {
    $152 = $93;
    $153 = $87;
    $154 = $88;
    $94 = $83;
    $96 = $84;
    $ex$212 = $ex$1;
    while (1) {
     if ($152) if (($94 | 0) == ($85 | 0) & ($96 | 0) == ($86 | 0)) break; else {
      $100 = $153;
      $101 = $154;
     } else {
      $100 = $94;
      $101 = $96;
     }
     $102 = _bitshift64Shl($100 | 0, $101 | 0, 1) | 0;
     $103 = tempRet0;
     $104 = $ex$212 + -1 | 0;
     $106 = _i64Subtract($102 | 0, $103 | 0, $85 | 0, $86 | 0) | 0;
     $107 = tempRet0;
     $112 = ($107 | 0) > -1 | ($107 | 0) == -1 & $106 >>> 0 > 4294967295;
     if (($104 | 0) > ($ey$1$ph | 0)) {
      $152 = $112;
      $153 = $106;
      $154 = $107;
      $94 = $102;
      $96 = $103;
      $ex$212 = $104;
     } else {
      $$lcssa7 = $112;
      $113 = $102;
      $115 = $103;
      $155 = $106;
      $156 = $107;
      $ex$2$lcssa = $104;
      break L27;
     }
    }
    $$0 = $x * 0.0;
    return +$$0;
   } else {
    $$lcssa7 = $93;
    $113 = $83;
    $115 = $84;
    $155 = $87;
    $156 = $88;
    $ex$2$lcssa = $ex$1;
   } while (0);
   if ($$lcssa7) if (($113 | 0) == ($85 | 0) & ($115 | 0) == ($86 | 0)) {
    $$0 = $x * 0.0;
    return +$$0;
   } else {
    $118 = $156;
    $120 = $155;
   } else {
    $118 = $115;
    $120 = $113;
   }
   if ($118 >>> 0 < 1048576 | ($118 | 0) == 1048576 & $120 >>> 0 < 0) {
    $126 = $120;
    $127 = $118;
    $ex$39 = $ex$2$lcssa;
    while (1) {
     $128 = _bitshift64Shl($126 | 0, $127 | 0, 1) | 0;
     $129 = tempRet0;
     $130 = $ex$39 + -1 | 0;
     if ($129 >>> 0 < 1048576 | ($129 | 0) == 1048576 & $128 >>> 0 < 0) {
      $126 = $128;
      $127 = $129;
      $ex$39 = $130;
     } else {
      $137 = $128;
      $138 = $129;
      $ex$3$lcssa = $130;
      break;
     }
    }
   } else {
    $137 = $120;
    $138 = $118;
    $ex$3$lcssa = $ex$2$lcssa;
   }
   if (($ex$3$lcssa | 0) > 0) {
    $139 = _i64Add($137 | 0, $138 | 0, 0, -1048576) | 0;
    $140 = tempRet0;
    $141 = _bitshift64Shl($ex$3$lcssa | 0, 0, 52) | 0;
    $149 = $140 | tempRet0;
    $151 = $139 | $141;
   } else {
    $146 = _bitshift64Lshr($137 | 0, $138 | 0, 1 - $ex$3$lcssa | 0) | 0;
    $149 = tempRet0;
    $151 = $146;
   }
   HEAP32[tempDoublePtr >> 2] = $151;
   HEAP32[tempDoublePtr + 4 >> 2] = $149 | $10;
   $$0 = +HEAPF64[tempDoublePtr >> 3];
   return +$$0;
  }
 }
 $23 = $x * $y;
 $$0 = $23 / $23;
 return +$$0;
}

function __ZN15MatrixTranspose7cleanupEv() {
 var $$0$i = 0, $$0$i3 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = SIMD_float32x4(0, 0, 0, 0), $101 = SIMD_float32x4(0, 0, 0, 0), $102 = SIMD_float32x4(0, 0, 0, 0), $107 = 0, $109 = 0, $116 = f0, $12 = 0, $120 = 0, $122 = 0, $124 = 0, $14 = 0, $16 = 0, $18 = 0, $2 = 0, $20 = 0, $22 = 0, $24 = 0, $26 = 0, $28 = 0, $30 = 0, $32 = 0, $4 = 0, $48 = 0, $50 = 0, $53 = 0, $54 = f0, $6 = 0, $70 = 0, $72 = 0, $76 = 0, $77 = 0, $8 = 0, $82 = f0, $83 = 0, $87 = 0, $91 = SIMD_float32x4(0, 0, 0, 0), $92 = SIMD_float32x4(0, 0, 0, 0), $93 = SIMD_float32x4(0, 0, 0, 0), $94 = SIMD_float32x4(0, 0, 0, 0), $95 = SIMD_float32x4(0, 0, 0, 0), $96 = SIMD_float32x4(0, 0, 0, 0), $97 = SIMD_float32x4(0, 0, 0, 0), $98 = SIMD_float32x4(0, 0, 0, 0), $99 = SIMD_float32x4(0, 0, 0, 0), $i$01$i = 0, $i$01$i2 = 0, $ret$1$off0 = 0;
 $0 = HEAP32[4] | 0;
 $1 = HEAP32[12] | 0;
 HEAPF32[$0 >> 2] = Math_fround(0.0);
 HEAPF32[$1 >> 2] = Math_fround(0.0);
 $2 = $0 + 4 | 0;
 HEAPF32[$2 >> 2] = Math_fround(1.0);
 HEAPF32[$1 + 16 >> 2] = Math_fround(1.0);
 $4 = $0 + 8 | 0;
 HEAPF32[$4 >> 2] = Math_fround(2.0);
 HEAPF32[$1 + 32 >> 2] = Math_fround(2.0);
 $6 = $0 + 12 | 0;
 HEAPF32[$6 >> 2] = Math_fround(3.0);
 HEAPF32[$1 + 48 >> 2] = Math_fround(3.0);
 $8 = $0 + 16 | 0;
 HEAPF32[$8 >> 2] = Math_fround(4.0);
 HEAPF32[$1 + 4 >> 2] = Math_fround(4.0);
 $10 = $0 + 20 | 0;
 HEAPF32[$10 >> 2] = Math_fround(5.0);
 HEAPF32[$1 + 20 >> 2] = Math_fround(5.0);
 $12 = $0 + 24 | 0;
 HEAPF32[$12 >> 2] = Math_fround(6.0);
 HEAPF32[$1 + 36 >> 2] = Math_fround(6.0);
 $14 = $0 + 28 | 0;
 HEAPF32[$14 >> 2] = Math_fround(7.0);
 HEAPF32[$1 + 52 >> 2] = Math_fround(7.0);
 $16 = $0 + 32 | 0;
 HEAPF32[$16 >> 2] = Math_fround(8.0);
 HEAPF32[$1 + 8 >> 2] = Math_fround(8.0);
 $18 = $0 + 36 | 0;
 HEAPF32[$18 >> 2] = Math_fround(9.0);
 HEAPF32[$1 + 24 >> 2] = Math_fround(9.0);
 $20 = $0 + 40 | 0;
 HEAPF32[$20 >> 2] = Math_fround(10.0);
 HEAPF32[$1 + 40 >> 2] = Math_fround(10.0);
 $22 = $0 + 44 | 0;
 HEAPF32[$22 >> 2] = Math_fround(11.0);
 HEAPF32[$1 + 56 >> 2] = Math_fround(11.0);
 $24 = $0 + 48 | 0;
 HEAPF32[$24 >> 2] = Math_fround(12.0);
 HEAPF32[$1 + 12 >> 2] = Math_fround(12.0);
 $26 = $0 + 52 | 0;
 HEAPF32[$26 >> 2] = Math_fround(13.0);
 HEAPF32[$1 + 28 >> 2] = Math_fround(13.0);
 $28 = $0 + 56 | 0;
 HEAPF32[$28 >> 2] = Math_fround(14.0);
 HEAPF32[$1 + 44 >> 2] = Math_fround(14.0);
 $30 = $0 + 60 | 0;
 HEAPF32[$30 >> 2] = Math_fround(15.0);
 HEAPF32[$1 + 60 >> 2] = Math_fround(15.0);
 $32 = HEAP32[8] | 0;
 $48 = 8;
 $50 = HEAP32[$48 >> 2] | 0;
 $53 = HEAP32[$48 + 4 >> 2] | 0;
 $54 = Math_fround(HEAPF32[$0 >> 2]);
 HEAPF32[$32 >> 2] = $54;
 HEAPF32[$32 + 4 >> 2] = Math_fround(HEAPF32[$8 >> 2]);
 HEAPF32[$32 + 8 >> 2] = Math_fround(HEAPF32[$16 >> 2]);
 HEAPF32[$32 + 12 >> 2] = Math_fround(HEAPF32[$24 >> 2]);
 HEAPF32[$32 + 16 >> 2] = Math_fround(HEAPF32[$2 >> 2]);
 HEAPF32[$32 + 20 >> 2] = Math_fround(HEAPF32[$10 >> 2]);
 HEAPF32[$32 + 24 >> 2] = Math_fround(HEAPF32[$18 >> 2]);
 HEAPF32[$32 + 28 >> 2] = Math_fround(HEAPF32[$26 >> 2]);
 HEAPF32[$32 + 32 >> 2] = Math_fround(HEAPF32[$4 >> 2]);
 HEAPF32[$32 + 36 >> 2] = Math_fround(HEAPF32[$12 >> 2]);
 HEAPF32[$32 + 40 >> 2] = Math_fround(HEAPF32[$20 >> 2]);
 HEAPF32[$32 + 44 >> 2] = Math_fround(HEAPF32[$28 >> 2]);
 HEAPF32[$32 + 48 >> 2] = Math_fround(HEAPF32[$6 >> 2]);
 HEAPF32[$32 + 52 >> 2] = Math_fround(HEAPF32[$14 >> 2]);
 HEAPF32[$32 + 56 >> 2] = Math_fround(HEAPF32[$22 >> 2]);
 HEAPF32[$32 + 60 >> 2] = Math_fround(HEAPF32[$30 >> 2]);
 $70 = _i64Add($50 | 0, $53 | 0, 1, 0) | 0;
 $72 = 8;
 HEAP32[$72 >> 2] = $70;
 HEAP32[$72 + 4 >> 2] = tempRet0;
 $76 = HEAP32[12] | 0;
 $82 = $54;
 $i$01$i2 = 0;
 while (1) {
  $77 = $i$01$i2 + 1 | 0;
  if (Math_fround(HEAPF32[$76 + ($i$01$i2 << 2) >> 2]) != $82) {
   $$0$i3 = 0;
   break;
  }
  if (($77 | 0) >= 16) {
   $$0$i3 = 1;
   break;
  }
  $82 = Math_fround(HEAPF32[$32 + ($77 << 2) >> 2]);
  $i$01$i2 = $77;
 }
 $83 = HEAP32[6] | 0;
 $87 = HEAP32[10] | 0;
 $91 = SIMD_float32x4_load(HEAPU8, $83);
 $92 = SIMD_float32x4_load(HEAPU8, $83 + 16 | 0);
 $93 = SIMD_float32x4_load(HEAPU8, $83 + 32 | 0);
 $94 = SIMD_float32x4_load(HEAPU8, $83 + 48 | 0);
 $95 = SIMD_float32x4_shuffle($91, $92, 0, 1, 4, 5);
 $96 = SIMD_float32x4_shuffle($93, $94, 0, 1, 4, 5);
 $97 = SIMD_float32x4_shuffle($95, $96, 0, 2, 4, 6);
 $98 = SIMD_float32x4_shuffle($95, $96, 1, 3, 5, 7);
 $99 = SIMD_float32x4_shuffle($91, $92, 2, 3, 6, 7);
 $100 = SIMD_float32x4_shuffle($93, $94, 2, 3, 6, 7);
 $101 = SIMD_float32x4_shuffle($99, $100, 0, 2, 4, 6);
 $102 = SIMD_float32x4_shuffle($99, $100, 1, 3, 5, 7);
 SIMD_float32x4_store(HEAPU8, $87, $97);
 SIMD_float32x4_store(HEAPU8, $87 + 16 | 0, $98);
 SIMD_float32x4_store(HEAPU8, $87 + 32 | 0, $101);
 SIMD_float32x4_store(HEAPU8, $87 + 48 | 0, $102);
 $107 = _i64Add($50 | 0, $53 | 0, 2, 0) | 0;
 $109 = 8;
 HEAP32[$109 >> 2] = $107;
 HEAP32[$109 + 4 >> 2] = tempRet0;
 $i$01$i = 0;
 while (1) {
  $116 = Math_fround(HEAPF32[$76 + ($i$01$i << 2) >> 2]);
  if ($116 != Math_fround(HEAPF32[$32 + ($i$01$i << 2) >> 2])) {
   $$0$i = 0;
   break;
  }
  $i$01$i = $i$01$i + 1 | 0;
  if (($i$01$i | 0) >= 16) {
   $$0$i = 1;
   break;
  }
 }
 $ret$1$off0 = $$0$i & $$0$i3;
 $120 = HEAP32[4] | 0;
 if (!$120) $122 = $32; else {
  __ZdaPv($120);
  $122 = HEAP32[8] | 0;
 }
 if ($122) __ZdaPv($122);
 $124 = HEAP32[12] | 0;
 if (!$124) return $ret$1$off0 | 0;
 __ZdaPv($124);
 return $ret$1$off0 | 0;
}

function __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $$lcssa = 0, $$lcssa74 = 0, $$lcssa75 = 0, $$lcssa76 = 0, $$lcssa77 = 0, $$lcssa78 = 0, $17 = 0, $18 = 0, $19 = 0, $30 = 0, $40 = 0, $44 = 0, $46 = 0, $59 = 0, $73 = 0, $79 = 0, $81 = 0, $83 = 0, $95 = 0, $98 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$117 = 0, $frm_nxt$2 = 0, $nchar16_t$016 = 0, $nchar16_t$1 = 0, label = 0;
 if (!($mode & 4)) $frm_nxt$1$ph = $frm; else if (($frm_end - $frm | 0) > 2) if ((HEAP8[$frm >> 0] | 0) == -17) if ((HEAP8[$frm + 1 >> 0] | 0) == -69) $frm_nxt$1$ph = (HEAP8[$frm + 2 >> 0] | 0) == -65 ? $frm + 3 | 0 : $frm; else $frm_nxt$1$ph = $frm; else $frm_nxt$1$ph = $frm; else $frm_nxt$1$ph = $frm;
 L7 : do if ($frm_nxt$1$ph >>> 0 < $frm_end >>> 0 & ($mx | 0) != 0) {
  $17 = $frm_end;
  $frm_nxt$117 = $frm_nxt$1$ph;
  $nchar16_t$016 = 0;
  L9 : while (1) {
   $18 = HEAP8[$frm_nxt$117 >> 0] | 0;
   $19 = $18 & 255;
   if ($19 >>> 0 > $Maxcode >>> 0) {
    $frm_nxt$1$lcssa = $frm_nxt$117;
    label = 43;
    break L7;
   }
   do if ($18 << 24 >> 24 > -1) {
    $frm_nxt$2 = $frm_nxt$117 + 1 | 0;
    $nchar16_t$1 = $nchar16_t$016;
   } else {
    if (($18 & 255) < 194) {
     $frm_nxt$1$lcssa = $frm_nxt$117;
     label = 43;
     break L7;
    }
    if (($18 & 255) < 224) {
     if (($17 - $frm_nxt$117 | 0) < 2) {
      $frm_nxt$1$lcssa = $frm_nxt$117;
      label = 43;
      break L7;
     }
     $30 = HEAPU8[$frm_nxt$117 + 1 >> 0] | 0;
     if (($30 & 192 | 0) != 128) {
      $frm_nxt$1$lcssa = $frm_nxt$117;
      label = 43;
      break L7;
     }
     if (($30 & 63 | $19 << 6 & 1984) >>> 0 > $Maxcode >>> 0) {
      $frm_nxt$1$lcssa = $frm_nxt$117;
      label = 43;
      break L7;
     }
     $frm_nxt$2 = $frm_nxt$117 + 2 | 0;
     $nchar16_t$1 = $nchar16_t$016;
     break;
    }
    if (($18 & 255) < 240) {
     $40 = $frm_nxt$117;
     if (($17 - $40 | 0) < 3) {
      $frm_nxt$1$lcssa = $frm_nxt$117;
      label = 43;
      break L7;
     }
     $44 = HEAP8[$frm_nxt$117 + 1 >> 0] | 0;
     $46 = HEAP8[$frm_nxt$117 + 2 >> 0] | 0;
     if (($19 | 0) == 224) {
      if (($44 & -32) << 24 >> 24 != -96) {
       $$lcssa77 = $40;
       label = 21;
       break L9;
      }
     } else if (($19 | 0) == 237) {
      if (($44 & -32) << 24 >> 24 != -128) {
       $$lcssa76 = $40;
       label = 23;
       break L9;
      }
     } else if (($44 & -64) << 24 >> 24 != -128) {
      $$lcssa78 = $40;
      label = 25;
      break L9;
     }
     $59 = $46 & 255;
     if (($59 & 192 | 0) != 128) {
      $frm_nxt$1$lcssa = $frm_nxt$117;
      label = 43;
      break L7;
     }
     if ((($44 & 255) << 6 & 4032 | $19 << 12 & 61440 | $59 & 63) >>> 0 > $Maxcode >>> 0) {
      $frm_nxt$1$lcssa = $frm_nxt$117;
      label = 43;
      break L7;
     }
     $frm_nxt$2 = $frm_nxt$117 + 3 | 0;
     $nchar16_t$1 = $nchar16_t$016;
     break;
    }
    if (($18 & 255) >= 245) {
     $frm_nxt$1$lcssa = $frm_nxt$117;
     label = 43;
     break L7;
    }
    $73 = $frm_nxt$117;
    if (($17 - $73 | 0) < 4 | ($mx - $nchar16_t$016 | 0) >>> 0 < 2) {
     $frm_nxt$1$lcssa = $frm_nxt$117;
     label = 43;
     break L7;
    }
    $79 = HEAP8[$frm_nxt$117 + 1 >> 0] | 0;
    $81 = HEAP8[$frm_nxt$117 + 2 >> 0] | 0;
    $83 = HEAP8[$frm_nxt$117 + 3 >> 0] | 0;
    if (($19 | 0) == 240) {
     if (($79 + 112 & 255) >= 48) {
      $$lcssa74 = $73;
      label = 33;
      break L9;
     }
    } else if (($19 | 0) == 244) {
     if (($79 & -16) << 24 >> 24 != -128) {
      $$lcssa = $73;
      label = 35;
      break L9;
     }
    } else if (($79 & -64) << 24 >> 24 != -128) {
     $$lcssa75 = $73;
     label = 37;
     break L9;
    }
    $95 = $81 & 255;
    if (($95 & 192 | 0) != 128) {
     $frm_nxt$1$lcssa = $frm_nxt$117;
     label = 43;
     break L7;
    }
    $98 = $83 & 255;
    if (($98 & 192 | 0) != 128) {
     $frm_nxt$1$lcssa = $frm_nxt$117;
     label = 43;
     break L7;
    }
    if ((($79 & 255) << 12 & 258048 | $19 << 18 & 1835008 | $95 << 6 & 4032 | $98 & 63) >>> 0 > $Maxcode >>> 0) {
     $frm_nxt$1$lcssa = $frm_nxt$117;
     label = 43;
     break L7;
    }
    $frm_nxt$2 = $frm_nxt$117 + 4 | 0;
    $nchar16_t$1 = $nchar16_t$016 + 1 | 0;
   } while (0);
   $nchar16_t$016 = $nchar16_t$1 + 1 | 0;
   if (!($frm_nxt$2 >>> 0 < $frm_end >>> 0 & $nchar16_t$016 >>> 0 < $mx >>> 0)) {
    $frm_nxt$1$lcssa = $frm_nxt$2;
    label = 43;
    break L7;
   } else $frm_nxt$117 = $frm_nxt$2;
  }
  if ((label | 0) == 21) {
   $$0 = $$lcssa77 - $frm | 0;
   break;
  } else if ((label | 0) == 23) {
   $$0 = $$lcssa76 - $frm | 0;
   break;
  } else if ((label | 0) == 25) {
   $$0 = $$lcssa78 - $frm | 0;
   break;
  } else if ((label | 0) == 33) {
   $$0 = $$lcssa74 - $frm | 0;
   break;
  } else if ((label | 0) == 35) {
   $$0 = $$lcssa - $frm | 0;
   break;
  } else if ((label | 0) == 37) {
   $$0 = $$lcssa75 - $frm | 0;
   break;
  }
 } else {
  $frm_nxt$1$lcssa = $frm_nxt$1$ph;
  label = 43;
 } while (0);
 if ((label | 0) == 43) $$0 = $frm_nxt$1$lcssa - $frm | 0;
 return $$0 | 0;
}

function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$012$i$i = 0, $$012$i$i5 = 0, $0 = 0, $1 = 0, $106 = 0, $108 = 0, $109 = 0, $111 = 0, $113 = 0, $115 = 0, $116 = 0, $116$phi = 0, $12 = 0, $123 = 0, $20 = 0, $21 = 0, $25 = 0, $27 = 0, $35 = 0, $36 = 0, $40 = 0, $41 = 0, $47 = 0, $49 = 0, $5 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $59 = 0, $59$phi = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $71 = 0, $81 = 0, $83 = 0, $90 = 0, $97 = 0, $98 = 0, $99 = 0, $__dc$08 = 0, $__dc$1 = 0, $__dg$09 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$010 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__grouping = sp;
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 4896) | 0;
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 5056) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] & 63]($__grouping, $1);
 $5 = HEAP8[$__grouping >> 0] | 0;
 if (!($5 & 1)) $12 = ($5 & 255) >>> 1; else $12 = HEAP32[$__grouping + 4 >> 2] | 0;
 if (!$12) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 7]($0, $__nb, $__ne, $__ob) | 0;
  $20 = $__ob + ($__ne - $__nb << 2) | 0;
  HEAP32[$__oe >> 2] = $20;
  $123 = $20;
 } else {
  HEAP32[$__oe >> 2] = $__ob;
  $21 = HEAP8[$__nb >> 0] | 0;
  if ($21 << 24 >> 24 == 43 | $21 << 24 >> 24 == 45) {
   $25 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 31]($0, $21) | 0;
   $27 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $27 + 4;
   HEAP32[$27 >> 2] = $25;
   $__nf$0 = $__nb + 1 | 0;
  } else $__nf$0 = $__nb;
  if (($__ne - $__nf$0 | 0) > 1) if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
   $35 = $__nf$0 + 1 | 0;
   $36 = HEAP8[$35 >> 0] | 0;
   if ($36 << 24 >> 24 == 88 | $36 << 24 >> 24 == 120) {
    $40 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 31]($0, 48) | 0;
    $41 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $41 + 4;
    HEAP32[$41 >> 2] = $40;
    $47 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 31]($0, HEAP8[$35 >> 0] | 0) | 0;
    $49 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $49 + 4;
    HEAP32[$49 >> 2] = $47;
    $__nf$1 = $__nf$0 + 2 | 0;
   } else $__nf$1 = $__nf$0;
  } else $__nf$1 = $__nf$0; else $__nf$1 = $__nf$0;
  if (($__nf$1 | 0) != ($__ne | 0)) {
   $52 = $__ne + -1 | 0;
   if ($52 >>> 0 > $__nf$1 >>> 0) {
    $$012$i$i5 = $__nf$1;
    $56 = $52;
    $59 = $__ne;
    while (1) {
     $54 = HEAP8[$$012$i$i5 >> 0] | 0;
     HEAP8[$$012$i$i5 >> 0] = HEAP8[$56 >> 0] | 0;
     HEAP8[$56 >> 0] = $54;
     $$012$i$i5 = $$012$i$i5 + 1 | 0;
     $58 = $59 + -2 | 0;
     if ($$012$i$i5 >>> 0 >= $58 >>> 0) break; else {
      $59$phi = $56;
      $56 = $58;
      $59 = $59$phi;
     }
    }
   }
  }
  $64 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] & 63]($1) | 0;
  if ($__nf$1 >>> 0 < $__ne >>> 0) {
   $66 = $__grouping + 1 | 0;
   $67 = $__grouping + 4 | 0;
   $68 = $__grouping + 8 | 0;
   $__dc$08 = 0;
   $__dg$09 = 0;
   $__p$010 = $__nf$1;
   while (1) {
    $71 = (HEAP8[$__grouping >> 0] & 1) == 0;
    if (!(HEAP8[($71 ? $66 : HEAP32[$68 >> 2] | 0) + $__dg$09 >> 0] | 0)) {
     $__dc$1 = $__dc$08;
     $__dg$1 = $__dg$09;
    } else if (($__dc$08 | 0) == (HEAP8[($71 ? $66 : HEAP32[$68 >> 2] | 0) + $__dg$09 >> 0] | 0)) {
     $81 = HEAP32[$__oe >> 2] | 0;
     HEAP32[$__oe >> 2] = $81 + 4;
     HEAP32[$81 >> 2] = $64;
     $83 = HEAP8[$__grouping >> 0] | 0;
     if (!($83 & 1)) $90 = ($83 & 255) >>> 1; else $90 = HEAP32[$67 >> 2] | 0;
     $__dc$1 = 0;
     $__dg$1 = ($__dg$09 >>> 0 < ($90 + -1 | 0) >>> 0 & 1) + $__dg$09 | 0;
    } else {
     $__dc$1 = $__dc$08;
     $__dg$1 = $__dg$09;
    }
    $97 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 44 >> 2] & 31]($0, HEAP8[$__p$010 >> 0] | 0) | 0;
    $98 = HEAP32[$__oe >> 2] | 0;
    $99 = $98 + 4 | 0;
    HEAP32[$__oe >> 2] = $99;
    HEAP32[$98 >> 2] = $97;
    $__p$010 = $__p$010 + 1 | 0;
    if ($__p$010 >>> 0 >= $__ne >>> 0) {
     $108 = $99;
     break;
    } else {
     $__dc$08 = $__dc$1 + 1 | 0;
     $__dg$09 = $__dg$1;
    }
   }
  } else $108 = HEAP32[$__oe >> 2] | 0;
  $106 = $__ob + ($__nf$1 - $__nb << 2) | 0;
  if (($106 | 0) == ($108 | 0)) $123 = $108; else {
   $109 = $108 + -4 | 0;
   if ($109 >>> 0 > $106 >>> 0) {
    $$012$i$i = $106;
    $113 = $109;
    $116 = $108;
    while (1) {
     $111 = HEAP32[$$012$i$i >> 2] | 0;
     HEAP32[$$012$i$i >> 2] = HEAP32[$113 >> 2];
     HEAP32[$113 >> 2] = $111;
     $$012$i$i = $$012$i$i + 4 | 0;
     $115 = $116 + -8 | 0;
     if ($$012$i$i >>> 0 >= $115 >>> 0) {
      $123 = $108;
      break;
     } else {
      $116$phi = $113;
      $113 = $115;
      $116 = $116$phi;
     }
    }
   } else $123 = $108;
  }
 }
 if (($__np | 0) == ($__ne | 0)) $storemerge = $123; else $storemerge = $__ob + ($__np - $__nb << 2) | 0;
 HEAP32[$__op >> 2] = $storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb, $__np, $__ne, $__ob, $__op, $__oe, $__loc) {
 $__nb = $__nb | 0;
 $__np = $__np | 0;
 $__ne = $__ne | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__loc = $__loc | 0;
 var $$012$i$i = 0, $$012$i$i5 = 0, $0 = 0, $1 = 0, $106 = 0, $107 = 0, $109 = 0, $111 = 0, $113 = 0, $115 = 0, $116 = 0, $116$phi = 0, $12 = 0, $21 = 0, $25 = 0, $27 = 0, $35 = 0, $36 = 0, $40 = 0, $41 = 0, $47 = 0, $49 = 0, $5 = 0, $52 = 0, $54 = 0, $56 = 0, $58 = 0, $59 = 0, $59$phi = 0, $64 = 0, $66 = 0, $67 = 0, $68 = 0, $71 = 0, $81 = 0, $83 = 0, $90 = 0, $97 = 0, $98 = 0, $__dc$09 = 0, $__dc$1 = 0, $__dg$010 = 0, $__dg$1 = 0, $__grouping = 0, $__nf$0 = 0, $__nf$1 = 0, $__p$011 = 0, $storemerge = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__grouping = sp;
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 4904) | 0;
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 5048) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$1 >> 2] | 0) + 20 >> 2] & 63]($__grouping, $1);
 $5 = HEAP8[$__grouping >> 0] | 0;
 if (!($5 & 1)) $12 = ($5 & 255) >>> 1; else $12 = HEAP32[$__grouping + 4 >> 2] | 0;
 if (!$12) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] & 7]($0, $__nb, $__ne, $__ob) | 0;
  HEAP32[$__oe >> 2] = $__ob + ($__ne - $__nb);
 } else {
  HEAP32[$__oe >> 2] = $__ob;
  $21 = HEAP8[$__nb >> 0] | 0;
  if ($21 << 24 >> 24 == 43 | $21 << 24 >> 24 == 45) {
   $25 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 31]($0, $21) | 0;
   $27 = HEAP32[$__oe >> 2] | 0;
   HEAP32[$__oe >> 2] = $27 + 1;
   HEAP8[$27 >> 0] = $25;
   $__nf$0 = $__nb + 1 | 0;
  } else $__nf$0 = $__nb;
  if (($__ne - $__nf$0 | 0) > 1) if ((HEAP8[$__nf$0 >> 0] | 0) == 48) {
   $35 = $__nf$0 + 1 | 0;
   $36 = HEAP8[$35 >> 0] | 0;
   if ($36 << 24 >> 24 == 88 | $36 << 24 >> 24 == 120) {
    $40 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 31]($0, 48) | 0;
    $41 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $41 + 1;
    HEAP8[$41 >> 0] = $40;
    $47 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 31]($0, HEAP8[$35 >> 0] | 0) | 0;
    $49 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $49 + 1;
    HEAP8[$49 >> 0] = $47;
    $__nf$1 = $__nf$0 + 2 | 0;
   } else $__nf$1 = $__nf$0;
  } else $__nf$1 = $__nf$0; else $__nf$1 = $__nf$0;
  if (($__nf$1 | 0) != ($__ne | 0)) {
   $52 = $__ne + -1 | 0;
   if ($52 >>> 0 > $__nf$1 >>> 0) {
    $$012$i$i5 = $__nf$1;
    $56 = $52;
    $59 = $__ne;
    while (1) {
     $54 = HEAP8[$$012$i$i5 >> 0] | 0;
     HEAP8[$$012$i$i5 >> 0] = HEAP8[$56 >> 0] | 0;
     HEAP8[$56 >> 0] = $54;
     $$012$i$i5 = $$012$i$i5 + 1 | 0;
     $58 = $59 + -2 | 0;
     if ($$012$i$i5 >>> 0 >= $58 >>> 0) break; else {
      $59$phi = $56;
      $56 = $58;
      $59 = $59$phi;
     }
    }
   }
  }
  $64 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 16 >> 2] & 63]($1) | 0;
  if ($__nf$1 >>> 0 < $__ne >>> 0) {
   $66 = $__grouping + 1 | 0;
   $67 = $__grouping + 4 | 0;
   $68 = $__grouping + 8 | 0;
   $__dc$09 = 0;
   $__dg$010 = 0;
   $__p$011 = $__nf$1;
   while (1) {
    $71 = (HEAP8[$__grouping >> 0] & 1) == 0;
    if (!(HEAP8[($71 ? $66 : HEAP32[$68 >> 2] | 0) + $__dg$010 >> 0] | 0)) {
     $__dc$1 = $__dc$09;
     $__dg$1 = $__dg$010;
    } else if (($__dc$09 | 0) == (HEAP8[($71 ? $66 : HEAP32[$68 >> 2] | 0) + $__dg$010 >> 0] | 0)) {
     $81 = HEAP32[$__oe >> 2] | 0;
     HEAP32[$__oe >> 2] = $81 + 1;
     HEAP8[$81 >> 0] = $64;
     $83 = HEAP8[$__grouping >> 0] | 0;
     if (!($83 & 1)) $90 = ($83 & 255) >>> 1; else $90 = HEAP32[$67 >> 2] | 0;
     $__dc$1 = 0;
     $__dg$1 = ($__dg$010 >>> 0 < ($90 + -1 | 0) >>> 0 & 1) + $__dg$010 | 0;
    } else {
     $__dc$1 = $__dc$09;
     $__dg$1 = $__dg$010;
    }
    $97 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$0 >> 2] | 0) + 28 >> 2] & 31]($0, HEAP8[$__p$011 >> 0] | 0) | 0;
    $98 = HEAP32[$__oe >> 2] | 0;
    HEAP32[$__oe >> 2] = $98 + 1;
    HEAP8[$98 >> 0] = $97;
    $__p$011 = $__p$011 + 1 | 0;
    if ($__p$011 >>> 0 >= $__ne >>> 0) break; else {
     $__dc$09 = $__dc$1 + 1 | 0;
     $__dg$010 = $__dg$1;
    }
   }
  }
  $106 = $__ob + ($__nf$1 - $__nb) | 0;
  $107 = HEAP32[$__oe >> 2] | 0;
  if (($106 | 0) != ($107 | 0)) {
   $109 = $107 + -1 | 0;
   if ($109 >>> 0 > $106 >>> 0) {
    $$012$i$i = $106;
    $113 = $109;
    $116 = $107;
    while (1) {
     $111 = HEAP8[$$012$i$i >> 0] | 0;
     HEAP8[$$012$i$i >> 0] = HEAP8[$113 >> 0] | 0;
     HEAP8[$113 >> 0] = $111;
     $$012$i$i = $$012$i$i + 1 | 0;
     $115 = $116 + -2 | 0;
     if ($$012$i$i >>> 0 >= $115 >>> 0) break; else {
      $116$phi = $113;
      $113 = $115;
      $116 = $116$phi;
     }
    }
   }
  }
 }
 if (($__np | 0) == ($__ne | 0)) $storemerge = HEAP32[$__oe >> 2] | 0; else $storemerge = $__ob + ($__np - $__nb) | 0;
 HEAP32[$__op >> 2] = $storemerge;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grouping);
 STACKTOP = sp;
 return;
}

function __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $$lcssa = 0, $$lcssa72 = 0, $$lcssa73 = 0, $$lcssa74 = 0, $$lcssa75 = 0, $$lcssa76 = 0, $17 = 0, $18 = 0, $19 = 0, $30 = 0, $40 = 0, $44 = 0, $46 = 0, $59 = 0, $73 = 0, $77 = 0, $79 = 0, $81 = 0, $93 = 0, $96 = 0, $frm_nxt$1$lcssa = 0, $frm_nxt$1$ph = 0, $frm_nxt$115 = 0, $frm_nxt$2 = 0, $nchar32_t$014 = 0, label = 0;
 if (!($mode & 4)) $frm_nxt$1$ph = $frm; else if (($frm_end - $frm | 0) > 2) if ((HEAP8[$frm >> 0] | 0) == -17) if ((HEAP8[$frm + 1 >> 0] | 0) == -69) $frm_nxt$1$ph = (HEAP8[$frm + 2 >> 0] | 0) == -65 ? $frm + 3 | 0 : $frm; else $frm_nxt$1$ph = $frm; else $frm_nxt$1$ph = $frm; else $frm_nxt$1$ph = $frm;
 L7 : do if ($frm_nxt$1$ph >>> 0 < $frm_end >>> 0 & ($mx | 0) != 0) {
  $17 = $frm_end;
  $frm_nxt$115 = $frm_nxt$1$ph;
  $nchar32_t$014 = 0;
  L9 : while (1) {
   $18 = HEAP8[$frm_nxt$115 >> 0] | 0;
   $19 = $18 & 255;
   do if ($18 << 24 >> 24 > -1) {
    if ($19 >>> 0 > $Maxcode >>> 0) {
     $frm_nxt$1$lcssa = $frm_nxt$115;
     label = 43;
     break L7;
    }
    $frm_nxt$2 = $frm_nxt$115 + 1 | 0;
   } else {
    if (($18 & 255) < 194) {
     $frm_nxt$1$lcssa = $frm_nxt$115;
     label = 43;
     break L7;
    }
    if (($18 & 255) < 224) {
     if (($17 - $frm_nxt$115 | 0) < 2) {
      $frm_nxt$1$lcssa = $frm_nxt$115;
      label = 43;
      break L7;
     }
     $30 = HEAPU8[$frm_nxt$115 + 1 >> 0] | 0;
     if (($30 & 192 | 0) != 128) {
      $frm_nxt$1$lcssa = $frm_nxt$115;
      label = 43;
      break L7;
     }
     if (($30 & 63 | $19 << 6 & 1984) >>> 0 > $Maxcode >>> 0) {
      $frm_nxt$1$lcssa = $frm_nxt$115;
      label = 43;
      break L7;
     }
     $frm_nxt$2 = $frm_nxt$115 + 2 | 0;
     break;
    }
    if (($18 & 255) < 240) {
     $40 = $frm_nxt$115;
     if (($17 - $40 | 0) < 3) {
      $frm_nxt$1$lcssa = $frm_nxt$115;
      label = 43;
      break L7;
     }
     $44 = HEAP8[$frm_nxt$115 + 1 >> 0] | 0;
     $46 = HEAP8[$frm_nxt$115 + 2 >> 0] | 0;
     if (($19 | 0) == 224) {
      if (($44 & -32) << 24 >> 24 != -96) {
       $$lcssa75 = $40;
       label = 21;
       break L9;
      }
     } else if (($19 | 0) == 237) {
      if (($44 & -32) << 24 >> 24 != -128) {
       $$lcssa74 = $40;
       label = 23;
       break L9;
      }
     } else if (($44 & -64) << 24 >> 24 != -128) {
      $$lcssa76 = $40;
      label = 25;
      break L9;
     }
     $59 = $46 & 255;
     if (($59 & 192 | 0) != 128) {
      $frm_nxt$1$lcssa = $frm_nxt$115;
      label = 43;
      break L7;
     }
     if ((($44 & 255) << 6 & 4032 | $19 << 12 & 61440 | $59 & 63) >>> 0 > $Maxcode >>> 0) {
      $frm_nxt$1$lcssa = $frm_nxt$115;
      label = 43;
      break L7;
     }
     $frm_nxt$2 = $frm_nxt$115 + 3 | 0;
     break;
    }
    if (($18 & 255) >= 245) {
     $frm_nxt$1$lcssa = $frm_nxt$115;
     label = 43;
     break L7;
    }
    $73 = $frm_nxt$115;
    if (($17 - $73 | 0) < 4) {
     $frm_nxt$1$lcssa = $frm_nxt$115;
     label = 43;
     break L7;
    }
    $77 = HEAP8[$frm_nxt$115 + 1 >> 0] | 0;
    $79 = HEAP8[$frm_nxt$115 + 2 >> 0] | 0;
    $81 = HEAP8[$frm_nxt$115 + 3 >> 0] | 0;
    if (($19 | 0) == 240) {
     if (($77 + 112 & 255) >= 48) {
      $$lcssa72 = $73;
      label = 33;
      break L9;
     }
    } else if (($19 | 0) == 244) {
     if (($77 & -16) << 24 >> 24 != -128) {
      $$lcssa = $73;
      label = 35;
      break L9;
     }
    } else if (($77 & -64) << 24 >> 24 != -128) {
     $$lcssa73 = $73;
     label = 37;
     break L9;
    }
    $93 = $79 & 255;
    if (($93 & 192 | 0) != 128) {
     $frm_nxt$1$lcssa = $frm_nxt$115;
     label = 43;
     break L7;
    }
    $96 = $81 & 255;
    if (($96 & 192 | 0) != 128) {
     $frm_nxt$1$lcssa = $frm_nxt$115;
     label = 43;
     break L7;
    }
    if ((($77 & 255) << 12 & 258048 | $19 << 18 & 1835008 | $93 << 6 & 4032 | $96 & 63) >>> 0 > $Maxcode >>> 0) {
     $frm_nxt$1$lcssa = $frm_nxt$115;
     label = 43;
     break L7;
    }
    $frm_nxt$2 = $frm_nxt$115 + 4 | 0;
   } while (0);
   $nchar32_t$014 = $nchar32_t$014 + 1 | 0;
   if (!($frm_nxt$2 >>> 0 < $frm_end >>> 0 & $nchar32_t$014 >>> 0 < $mx >>> 0)) {
    $frm_nxt$1$lcssa = $frm_nxt$2;
    label = 43;
    break L7;
   } else $frm_nxt$115 = $frm_nxt$2;
  }
  if ((label | 0) == 21) {
   $$0 = $$lcssa75 - $frm | 0;
   break;
  } else if ((label | 0) == 23) {
   $$0 = $$lcssa74 - $frm | 0;
   break;
  } else if ((label | 0) == 25) {
   $$0 = $$lcssa76 - $frm | 0;
   break;
  } else if ((label | 0) == 33) {
   $$0 = $$lcssa72 - $frm | 0;
   break;
  } else if ((label | 0) == 35) {
   $$0 = $$lcssa - $frm | 0;
   break;
  } else if ((label | 0) == 37) {
   $$0 = $$lcssa73 - $frm | 0;
   break;
  }
 } else {
  $frm_nxt$1$lcssa = $frm_nxt$1$ph;
  label = 43;
 } while (0);
 if ((label | 0) == 43) $$0 = $frm_nxt$1$lcssa - $frm | 0;
 return $$0 | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this, $st, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$0 = 0, $$0157 = 0, $$0157$lcssa128 = 0, $$0256 = 0, $$0256$lcssa135 = 0, $$1$lcssa = 0, $$148 = 0, $$148$lcssa120 = 0, $$148$lcssa121 = 0, $$2 = 0, $$lcssa143 = 0, $$pre116 = 0, $0 = 0, $13 = 0, $14 = 0, $18 = 0, $25 = 0, $26 = 0, $33 = 0, $34 = 0, $44 = 0, $48 = 0, $49 = 0, $54 = 0, $55 = 0, $57 = 0, $6 = 0, $61 = 0, $61$phi = 0, $62 = 0, $64 = 0, $66 = 0, $7 = 0, $8 = 0, $fend$0$lcssa = 0, $fend$062 = 0, $fend$158 = 0, $fend$2$lcssa = 0, $fend$249 = 0, $fend$3 = 0, $save_state = 0, $storemerge47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $save_state = sp;
 $0 = ($frm | 0) == ($frm_end | 0);
 L1 : do if ($0) {
  HEAP32[$to_nxt >> 2] = $to;
  HEAP32[$frm_nxt >> 2] = $frm;
  $66 = $frm;
  label = 31;
 } else {
  $fend$062 = $frm;
  while (1) {
   if (!(HEAP8[$fend$062 >> 0] | 0)) {
    $fend$0$lcssa = $fend$062;
    break;
   }
   $fend$062 = $fend$062 + 1 | 0;
   if (($fend$062 | 0) == ($frm_end | 0)) {
    $fend$0$lcssa = $frm_end;
    break;
   }
  }
  HEAP32[$to_nxt >> 2] = $to;
  HEAP32[$frm_nxt >> 2] = $frm;
  if ($0 | ($to | 0) == ($to_end | 0)) {
   $66 = $frm;
   label = 31;
  } else {
   $6 = $to_end;
   $7 = $this + 8 | 0;
   $$0157 = $frm;
   $$0256 = $to;
   $fend$158 = $fend$0$lcssa;
   while (1) {
    $8 = $st;
    $13 = HEAP32[$8 + 4 >> 2] | 0;
    $14 = $save_state;
    HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$14 + 4 >> 2] = $13;
    $18 = $fend$158;
    $25 = _uselocale(HEAP32[$7 >> 2] | 0) | 0;
    $26 = _mbsnrtowcs($$0256, $frm_nxt, $18 - $$0157 | 0, $6 - $$0256 >> 2, $st) | 0;
    if ($25) _uselocale($25 | 0) | 0;
    if (($26 | 0) == -1) {
     $$0157$lcssa128 = $$0157;
     $$0256$lcssa135 = $$0256;
     $$lcssa143 = $18;
     break;
    } else if (!$26) {
     $$0 = 2;
     break L1;
    }
    $44 = (HEAP32[$to_nxt >> 2] | 0) + ($26 << 2) | 0;
    HEAP32[$to_nxt >> 2] = $44;
    if (($44 | 0) == ($to_end | 0)) {
     label = 30;
     break;
    }
    $$pre116 = HEAP32[$frm_nxt >> 2] | 0;
    if (($fend$158 | 0) == ($frm_end | 0)) {
     $62 = $$pre116;
     $64 = $44;
     $fend$3 = $frm_end;
    } else {
     $48 = _uselocale(HEAP32[$7 >> 2] | 0) | 0;
     $49 = _mbrtowc($44, $$pre116, 1, $st) | 0;
     if ($48) _uselocale($48 | 0) | 0;
     if ($49) {
      $$0 = 2;
      break L1;
     }
     HEAP32[$to_nxt >> 2] = (HEAP32[$to_nxt >> 2] | 0) + 4;
     $54 = HEAP32[$frm_nxt >> 2] | 0;
     $55 = $54 + 1 | 0;
     HEAP32[$frm_nxt >> 2] = $55;
     L20 : do if (($55 | 0) == ($frm_end | 0)) $fend$2$lcssa = $frm_end; else {
      $61 = $54;
      $fend$249 = $55;
      while (1) {
       $57 = $61 + 2 | 0;
       if (!(HEAP8[$fend$249 >> 0] | 0)) {
        $fend$2$lcssa = $fend$249;
        break L20;
       }
       if (($57 | 0) == ($frm_end | 0)) {
        $fend$2$lcssa = $frm_end;
        break;
       } else {
        $61$phi = $fend$249;
        $fend$249 = $57;
        $61 = $61$phi;
       }
      }
     } while (0);
     $62 = $55;
     $64 = HEAP32[$to_nxt >> 2] | 0;
     $fend$3 = $fend$2$lcssa;
    }
    if (($62 | 0) == ($frm_end | 0) | ($64 | 0) == ($to_end | 0)) {
     $66 = $62;
     label = 31;
     break L1;
    } else {
     $$0157 = $62;
     $$0256 = $64;
     $fend$158 = $fend$3;
    }
   }
   if ((label | 0) == 30) {
    $66 = HEAP32[$frm_nxt >> 2] | 0;
    label = 31;
    break;
   }
   HEAP32[$to_nxt >> 2] = $$0256$lcssa135;
   L29 : do if (($$0157$lcssa128 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) $$1$lcssa = $$0157$lcssa128; else {
    $$148 = $$0157$lcssa128;
    $storemerge47 = $$0256$lcssa135;
    while (1) {
     $33 = _uselocale(HEAP32[$7 >> 2] | 0) | 0;
     $34 = _mbrtowc($storemerge47, $$148, $$lcssa143 - $$148 | 0, $save_state) | 0;
     if ($33) _uselocale($33 | 0) | 0;
     if (($34 | 0) == -2) {
      $$148$lcssa121 = $$148;
      label = 16;
      break;
     } else if (!$34) $$2 = $$148 + 1 | 0; else if (($34 | 0) == -1) {
      $$148$lcssa120 = $$148;
      label = 15;
      break;
     } else $$2 = $$148 + $34 | 0;
     $storemerge47 = (HEAP32[$to_nxt >> 2] | 0) + 4 | 0;
     HEAP32[$to_nxt >> 2] = $storemerge47;
     if (($$2 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) {
      $$1$lcssa = $$2;
      break L29;
     } else $$148 = $$2;
    }
    if ((label | 0) == 15) {
     HEAP32[$frm_nxt >> 2] = $$148$lcssa120;
     $$0 = 2;
     break L1;
    } else if ((label | 0) == 16) {
     HEAP32[$frm_nxt >> 2] = $$148$lcssa121;
     $$0 = 1;
     break L1;
    }
   } while (0);
   HEAP32[$frm_nxt >> 2] = $$1$lcssa;
   $$0 = ($$1$lcssa | 0) != ($frm_end | 0) & 1;
  }
 } while (0);
 if ((label | 0) == 31) $$0 = ($66 | 0) != ($frm_end | 0) & 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this, $st, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$0 = 0, $$0150 = 0, $$0150$lcssa108 = 0, $$0249 = 0, $$0249$lcssa115 = 0, $$1$lcssa = 0, $$136 = 0, $0 = 0, $13 = 0, $14 = 0, $25 = 0, $26 = 0, $30 = 0, $32 = 0, $33 = 0, $34 = 0, $39 = 0, $43 = 0, $47 = 0, $48 = 0, $51 = 0, $56 = 0, $58 = 0, $59 = 0, $6 = 0, $62 = 0, $63 = 0, $65 = 0, $69 = 0, $69$phi = 0, $7 = 0, $70 = 0, $72 = 0, $74 = 0, $8 = 0, $fend$0$lcssa = 0, $fend$055 = 0, $fend$151 = 0, $fend$2$lcssa = 0, $fend$242 = 0, $fend$3 = 0, $n$038 = 0, $p$039 = 0, $save_state = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $save_state = sp;
 $tmp = sp + 8 | 0;
 $0 = ($frm | 0) == ($frm_end | 0);
 L1 : do if ($0) {
  HEAP32[$to_nxt >> 2] = $to;
  HEAP32[$frm_nxt >> 2] = $frm;
  $74 = $frm;
  label = 32;
 } else {
  $fend$055 = $frm;
  while (1) {
   if (!(HEAP32[$fend$055 >> 2] | 0)) {
    $fend$0$lcssa = $fend$055;
    break;
   }
   $fend$055 = $fend$055 + 4 | 0;
   if (($fend$055 | 0) == ($frm_end | 0)) {
    $fend$0$lcssa = $frm_end;
    break;
   }
  }
  HEAP32[$to_nxt >> 2] = $to;
  HEAP32[$frm_nxt >> 2] = $frm;
  if ($0 | ($to | 0) == ($to_end | 0)) {
   $74 = $frm;
   label = 32;
  } else {
   $6 = $to_end;
   $7 = $this + 8 | 0;
   $$0150 = $frm;
   $$0249 = $to;
   $fend$151 = $fend$0$lcssa;
   while (1) {
    $8 = $st;
    $13 = HEAP32[$8 + 4 >> 2] | 0;
    $14 = $save_state;
    HEAP32[$14 >> 2] = HEAP32[$8 >> 2];
    HEAP32[$14 + 4 >> 2] = $13;
    $25 = _uselocale(HEAP32[$7 >> 2] | 0) | 0;
    $26 = _wcsnrtombs($$0249, $frm_nxt, $fend$151 - $$0150 >> 2, $6 - $$0249 | 0, $st) | 0;
    if ($25) _uselocale($25 | 0) | 0;
    if (($26 | 0) == -1) {
     $$0150$lcssa108 = $$0150;
     $$0249$lcssa115 = $$0249;
     break;
    } else if (!$26) {
     $$0 = 1;
     break L1;
    }
    $43 = (HEAP32[$to_nxt >> 2] | 0) + $26 | 0;
    HEAP32[$to_nxt >> 2] = $43;
    if (($43 | 0) == ($to_end | 0)) {
     label = 31;
     break;
    }
    if (($fend$151 | 0) == ($frm_end | 0)) {
     $70 = HEAP32[$frm_nxt >> 2] | 0;
     $72 = $43;
     $fend$3 = $frm_end;
    } else {
     $47 = _uselocale(HEAP32[$7 >> 2] | 0) | 0;
     $48 = _wcrtomb($tmp, 0, $st) | 0;
     if ($47) _uselocale($47 | 0) | 0;
     if (($48 | 0) == -1) {
      $$0 = 2;
      break L1;
     }
     $51 = HEAP32[$to_nxt >> 2] | 0;
     if ($48 >>> 0 > ($6 - $51 | 0) >>> 0) {
      $$0 = 1;
      break L1;
     }
     L22 : do if ($48) {
      $58 = $51;
      $n$038 = $48;
      $p$039 = $tmp;
      while (1) {
       $56 = HEAP8[$p$039 >> 0] | 0;
       HEAP32[$to_nxt >> 2] = $58 + 1;
       HEAP8[$58 >> 0] = $56;
       $59 = $n$038 + -1 | 0;
       if (!$59) break L22;
       $58 = HEAP32[$to_nxt >> 2] | 0;
       $n$038 = $59;
       $p$039 = $p$039 + 1 | 0;
      }
     } while (0);
     $62 = HEAP32[$frm_nxt >> 2] | 0;
     $63 = $62 + 4 | 0;
     HEAP32[$frm_nxt >> 2] = $63;
     L27 : do if (($63 | 0) == ($frm_end | 0)) $fend$2$lcssa = $frm_end; else {
      $69 = $62;
      $fend$242 = $63;
      while (1) {
       $65 = $69 + 8 | 0;
       if (!(HEAP32[$fend$242 >> 2] | 0)) {
        $fend$2$lcssa = $fend$242;
        break L27;
       }
       if (($65 | 0) == ($frm_end | 0)) {
        $fend$2$lcssa = $frm_end;
        break;
       } else {
        $69$phi = $fend$242;
        $fend$242 = $65;
        $69 = $69$phi;
       }
      }
     } while (0);
     $70 = $63;
     $72 = HEAP32[$to_nxt >> 2] | 0;
     $fend$3 = $fend$2$lcssa;
    }
    if (($70 | 0) == ($frm_end | 0) | ($72 | 0) == ($to_end | 0)) {
     $74 = $70;
     label = 32;
     break L1;
    } else {
     $$0150 = $70;
     $$0249 = $72;
     $fend$151 = $fend$3;
    }
   }
   if ((label | 0) == 31) {
    $74 = HEAP32[$frm_nxt >> 2] | 0;
    label = 32;
    break;
   }
   HEAP32[$to_nxt >> 2] = $$0249$lcssa115;
   L36 : do if (($$0150$lcssa108 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) $$1$lcssa = $$0150$lcssa108; else {
    $$136 = $$0150$lcssa108;
    $33 = $$0249$lcssa115;
    while (1) {
     $30 = HEAP32[$$136 >> 2] | 0;
     $32 = _uselocale(HEAP32[$7 >> 2] | 0) | 0;
     $34 = _wcrtomb($33, $30, $save_state) | 0;
     if ($32) _uselocale($32 | 0) | 0;
     if (($34 | 0) == -1) {
      $$1$lcssa = $$136;
      break L36;
     }
     $33 = (HEAP32[$to_nxt >> 2] | 0) + $34 | 0;
     HEAP32[$to_nxt >> 2] = $33;
     $39 = $$136 + 4 | 0;
     if (($39 | 0) == (HEAP32[$frm_nxt >> 2] | 0)) {
      $$1$lcssa = $39;
      break;
     } else $$136 = $39;
    }
   } while (0);
   HEAP32[$frm_nxt >> 2] = $$1$lcssa;
   $$0 = 2;
  }
 } while (0);
 if ((label | 0) == 32) $$0 = ($74 | 0) != ($frm_end | 0) & 1;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg$result, $this, $__s, $__intl, $__iob, $__fl, $__units) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__units = +$__units;
 var $$byval_copy = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $20 = 0, $21 = 0, $25 = 0, $3 = 0, $32 = 0, $4 = 0, $41 = 0, $43 = 0, $44 = 0, $5 = 0, $51 = 0, $59 = 0, $61 = 0, $62 = 0, $65 = 0, $73 = 0, $74 = 0, $75 = 0, $78 = 0, $8 = 0, $80 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 992 | 0;
 $$byval_copy = sp;
 $__buf = sp + 888 | 0;
 $__bb = sp + 880 | 0;
 $__digits = sp + 480 | 0;
 $__loc = sp + 472 | 0;
 $__pat = sp + 884 | 0;
 $__dp = sp + 468 | 0;
 $__ts = sp + 464 | 0;
 $__grp = sp + 452 | 0;
 $__sym = sp + 440 | 0;
 $__sn = sp + 428 | 0;
 $__fd = sp + 424 | 0;
 $__mbuf = sp + 24 | 0;
 $__mi = sp + 16 | 0;
 $__me = sp + 12 | 0;
 $0 = sp + 8 | 0;
 HEAP32[$__bb >> 2] = $__buf;
 HEAPF64[tempDoublePtr >> 3] = $__units;
 HEAP32[$$byval_copy >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $1 = _snprintf($__buf, 100, 4656, $$byval_copy) | 0;
 if ($1 >>> 0 > 99) {
  $3 = __ZNSt3__16__clocEv() | 0;
  HEAPF64[tempDoublePtr >> 3] = $__units;
  HEAP32[$$byval_copy >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $4 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb, $3, 4656, $$byval_copy) | 0;
  $5 = HEAP32[$__bb >> 2] | 0;
  if (!$5) __ZSt17__throw_bad_allocv();
  $8 = _malloc($4 << 2) | 0;
  if (!$8) __ZSt17__throw_bad_allocv(); else {
   $78 = $8;
   $80 = $5;
   $__db$0 = $8;
   $__n$0 = $4;
  }
 } else {
  $78 = 0;
  $80 = 0;
  $__db$0 = $__digits;
  $__n$0 = $1;
 }
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
 $10 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 4896) | 0;
 $11 = HEAP32[$__bb >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$10 >> 2] | 0) + 48 >> 2] & 7]($10, $11, $11 + $__n$0 | 0, $__db$0) | 0;
 if (!$__n$0) $20 = 0; else $20 = (HEAP8[HEAP32[$__bb >> 2] >> 0] | 0) == 45;
 HEAP32[$__grp + 0 >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 HEAP32[$__sym + 0 >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 HEAP32[$__sn + 0 >> 2] = 0;
 HEAP32[$__sn + 4 >> 2] = 0;
 HEAP32[$__sn + 8 >> 2] = 0;
 __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $20, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $21 = HEAP32[$__fd >> 2] | 0;
 if (($__n$0 | 0) > ($21 | 0)) {
  $25 = HEAP8[$__sn >> 0] | 0;
  if (!($25 & 1)) $41 = ($25 & 255) >>> 1; else $41 = HEAP32[$__sn + 4 >> 2] | 0;
  $32 = HEAP8[$__sym >> 0] | 0;
  if (!($32 & 1)) $43 = ($32 & 255) >>> 1; else $43 = HEAP32[$__sym + 4 >> 2] | 0;
  $$pn = $41 + ($__n$0 - $21 << 1 | 1) + $43 | 0;
 } else {
  $44 = HEAP8[$__sn >> 0] | 0;
  if (!($44 & 1)) $59 = ($44 & 255) >>> 1; else $59 = HEAP32[$__sn + 4 >> 2] | 0;
  $51 = HEAP8[$__sym >> 0] | 0;
  if (!($51 & 1)) $61 = ($51 & 255) >>> 1; else $61 = HEAP32[$__sym + 4 >> 2] | 0;
  $$pn = $59 + 2 + $61 | 0;
 }
 $62 = $$pn + $21 | 0;
 if ($62 >>> 0 > 100) {
  $65 = _malloc($62 << 2) | 0;
  if (!$65) __ZSt17__throw_bad_allocv(); else {
   $75 = $65;
   $__mb$0 = $65;
  }
 } else {
  $75 = 0;
  $__mb$0 = $__mbuf;
 }
 __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $__db$0, $__db$0 + ($__n$0 << 2) | 0, $10, $20, $__pat, HEAP32[$__dp >> 2] | 0, HEAP32[$__ts >> 2] | 0, $__grp, $__sym, $__sn, $21);
 HEAP32[$0 >> 2] = HEAP32[$__s >> 2];
 $73 = HEAP32[$__mi >> 2] | 0;
 $74 = HEAP32[$__me >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__mb$0, $73, $74, $__iob, $__fl);
 if ($75) _free($75);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$__loc >> 2] | 0) | 0;
 if ($78) _free($78);
 _free($80);
 STACKTOP = sp;
 return;
}

function __ZNSt3__16locale5__impC2Ej($this, $refs) {
 $this = $this | 0;
 $refs = $refs | 0;
 var $2 = 0, $4 = 0, $5 = 0, $6 = 0;
 HEAP32[$this + 4 >> 2] = $refs + -1;
 HEAP32[$this >> 2] = 4824;
 $2 = $this + 8 | 0;
 __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($2, 28);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this + 144 | 0, 4808, 1);
 $4 = HEAP32[$2 >> 2] | 0;
 $5 = $this + 12 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if (($6 | 0) != ($4 | 0)) HEAP32[$5 >> 2] = $6 + (~(($6 + -4 - $4 | 0) >>> 2) << 2);
 HEAP32[2429] = 0;
 HEAP32[2428] = 3272;
 __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_($this, 9712);
 HEAP32[2427] = 0;
 HEAP32[2426] = 3312;
 __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_($this, 9704);
 HEAP32[2423] = 0;
 HEAP32[2422] = 4920;
 HEAP32[2424] = 0;
 HEAP8[9700] = 0;
 HEAP32[2424] = __ZNSt3__15ctypeIcE13classic_tableEv() | 0;
 __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_($this, 9688);
 HEAP32[2421] = 0;
 HEAP32[2420] = 5880;
 __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_($this, 9680);
 HEAP32[2419] = 0;
 HEAP32[2418] = 6096;
 __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this, 9672);
 __ZNSt3__17codecvtIwc11__mbstate_tEC2Ej(9656, 1);
 __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this, 9656);
 HEAP32[2413] = 0;
 HEAP32[2412] = 6320;
 __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this, 9648);
 HEAP32[2411] = 0;
 HEAP32[2410] = 6440;
 __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this, 9640);
 HEAP32[2405] = 0;
 HEAP32[2404] = 5072;
 HEAP8[9624] = 46;
 HEAP8[9625] = 44;
 HEAP32[2407] = 0;
 HEAP32[2408] = 0;
 HEAP32[2409] = 0;
 __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_($this, 9616);
 HEAP32[2397] = 0;
 HEAP32[2396] = 5112;
 HEAP32[2398] = 46;
 HEAP32[2399] = 44;
 HEAP32[2400] = 0;
 HEAP32[2401] = 0;
 HEAP32[2402] = 0;
 __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_($this, 9584);
 HEAP32[2395] = 0;
 HEAP32[2394] = 3352;
 __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 9576);
 HEAP32[2393] = 0;
 HEAP32[2392] = 3472;
 __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 9568);
 HEAP32[2391] = 0;
 HEAP32[2390] = 3544;
 __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 9560);
 HEAP32[2389] = 0;
 HEAP32[2388] = 3640;
 __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 9552);
 HEAP32[2387] = 0;
 HEAP32[2386] = 4232;
 __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this, 9544);
 HEAP32[2385] = 0;
 HEAP32[2384] = 4296;
 __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this, 9536);
 HEAP32[2383] = 0;
 HEAP32[2382] = 4360;
 __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this, 9528);
 HEAP32[2381] = 0;
 HEAP32[2380] = 4424;
 __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this, 9520);
 HEAP32[2379] = 0;
 HEAP32[2378] = 4488;
 __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 9512);
 HEAP32[2377] = 0;
 HEAP32[2376] = 4568;
 __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 9504);
 HEAP32[2375] = 0;
 HEAP32[2374] = 4624;
 __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 9496);
 HEAP32[2373] = 0;
 HEAP32[2372] = 4672;
 __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 9488);
 HEAP32[2369] = 0;
 HEAP32[2368] = 3720;
 HEAP32[2370] = 3768;
 __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 9472);
 HEAP32[2365] = 0;
 HEAP32[2364] = 3872;
 HEAP32[2366] = 3920;
 __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 9456);
 HEAP32[2361] = 0;
 HEAP32[2360] = 5816;
 HEAP32[2362] = __ZNSt3__16__clocEv() | 0;
 HEAP32[2360] = 4168;
 __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, 9440);
 HEAP32[2357] = 0;
 HEAP32[2356] = 5816;
 HEAP32[2358] = __ZNSt3__16__clocEv() | 0;
 HEAP32[2356] = 4200;
 __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, 9424);
 HEAP32[2355] = 0;
 HEAP32[2354] = 4712;
 __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_($this, 9416);
 HEAP32[2353] = 0;
 HEAP32[2352] = 4752;
 __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_($this, 9408);
 return;
}

function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg$result, $this, $__s, $__intl, $__iob, $__fl, $__units) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__units = +$__units;
 var $$byval_copy = 0, $$pn = 0, $0 = 0, $1 = 0, $10 = 0, $19 = 0, $20 = 0, $24 = 0, $3 = 0, $31 = 0, $4 = 0, $40 = 0, $42 = 0, $43 = 0, $5 = 0, $50 = 0, $58 = 0, $60 = 0, $61 = 0, $63 = 0, $7 = 0, $71 = 0, $72 = 0, $73 = 0, $75 = 0, $76 = 0, $9 = 0, $__bb = 0, $__buf = 0, $__db$0 = 0, $__digits = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__n$0 = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384 | 0;
 $$byval_copy = sp;
 $__buf = sp + 276 | 0;
 $__bb = sp + 64 | 0;
 $__digits = sp + 176 | 0;
 $__loc = sp + 60 | 0;
 $__pat = sp + 172 | 0;
 $__dp = sp + 169 | 0;
 $__ts = sp + 168 | 0;
 $__grp = sp + 48 | 0;
 $__sym = sp + 36 | 0;
 $__sn = sp + 24 | 0;
 $__fd = sp + 20 | 0;
 $__mbuf = sp + 68 | 0;
 $__mi = sp + 16 | 0;
 $__me = sp + 12 | 0;
 $0 = sp + 8 | 0;
 HEAP32[$__bb >> 2] = $__buf;
 HEAPF64[tempDoublePtr >> 3] = $__units;
 HEAP32[$$byval_copy >> 2] = HEAP32[tempDoublePtr >> 2];
 HEAP32[$$byval_copy + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
 $1 = _snprintf($__buf, 100, 4656, $$byval_copy) | 0;
 if ($1 >>> 0 > 99) {
  $3 = __ZNSt3__16__clocEv() | 0;
  HEAPF64[tempDoublePtr >> 3] = $__units;
  HEAP32[$$byval_copy >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $4 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb, $3, 4656, $$byval_copy) | 0;
  $5 = HEAP32[$__bb >> 2] | 0;
  if (!$5) __ZSt17__throw_bad_allocv();
  $7 = _malloc($4) | 0;
  if (!$7) __ZSt17__throw_bad_allocv(); else {
   $75 = $7;
   $76 = $5;
   $__db$0 = $7;
   $__n$0 = $4;
  }
 } else {
  $75 = 0;
  $76 = 0;
  $__db$0 = $__digits;
  $__n$0 = $1;
 }
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
 $9 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 4904) | 0;
 $10 = HEAP32[$__bb >> 2] | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$9 >> 2] | 0) + 32 >> 2] & 7]($9, $10, $10 + $__n$0 | 0, $__db$0) | 0;
 if (!$__n$0) $19 = 0; else $19 = (HEAP8[HEAP32[$__bb >> 2] >> 0] | 0) == 45;
 HEAP32[$__grp + 0 >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 HEAP32[$__sym + 0 >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 HEAP32[$__sn + 0 >> 2] = 0;
 HEAP32[$__sn + 4 >> 2] = 0;
 HEAP32[$__sn + 8 >> 2] = 0;
 __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $19, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $20 = HEAP32[$__fd >> 2] | 0;
 if (($__n$0 | 0) > ($20 | 0)) {
  $24 = HEAP8[$__sn >> 0] | 0;
  if (!($24 & 1)) $40 = ($24 & 255) >>> 1; else $40 = HEAP32[$__sn + 4 >> 2] | 0;
  $31 = HEAP8[$__sym >> 0] | 0;
  if (!($31 & 1)) $42 = ($31 & 255) >>> 1; else $42 = HEAP32[$__sym + 4 >> 2] | 0;
  $$pn = $40 + ($__n$0 - $20 << 1 | 1) + $42 | 0;
 } else {
  $43 = HEAP8[$__sn >> 0] | 0;
  if (!($43 & 1)) $58 = ($43 & 255) >>> 1; else $58 = HEAP32[$__sn + 4 >> 2] | 0;
  $50 = HEAP8[$__sym >> 0] | 0;
  if (!($50 & 1)) $60 = ($50 & 255) >>> 1; else $60 = HEAP32[$__sym + 4 >> 2] | 0;
  $$pn = $58 + 2 + $60 | 0;
 }
 $61 = $$pn + $20 | 0;
 if ($61 >>> 0 > 100) {
  $63 = _malloc($61) | 0;
  if (!$63) __ZSt17__throw_bad_allocv(); else {
   $73 = $63;
   $__mb$0 = $63;
  }
 } else {
  $73 = 0;
  $__mb$0 = $__mbuf;
 }
 __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $__db$0, $__db$0 + $__n$0 | 0, $9, $19, $__pat, HEAP8[$__dp >> 0] | 0, HEAP8[$__ts >> 0] | 0, $__grp, $__sym, $__sn, $20);
 HEAP32[$0 >> 2] = HEAP32[$__s >> 2];
 $71 = HEAP32[$__mi >> 2] | 0;
 $72 = HEAP32[$__me >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__mb$0, $71, $72, $__iob, $__fl);
 _free($73);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$__loc >> 2] | 0) | 0;
 _free($75);
 _free($76);
 STACKTOP = sp;
 return;
}

function __ZN15MatrixTranspose4initEv() {
 var $$0 = 0, $0 = 0, $1 = 0, $102 = f0, $2 = 0, $48 = 0, $50 = 0, $53 = 0, $54 = 0, $56 = 0, $60 = 0, $61 = 0, $65 = f0, $69 = 0, $73 = 0, $77 = SIMD_float32x4(0, 0, 0, 0), $78 = SIMD_float32x4(0, 0, 0, 0), $79 = SIMD_float32x4(0, 0, 0, 0), $80 = SIMD_float32x4(0, 0, 0, 0), $81 = SIMD_float32x4(0, 0, 0, 0), $82 = SIMD_float32x4(0, 0, 0, 0), $83 = SIMD_float32x4(0, 0, 0, 0), $84 = SIMD_float32x4(0, 0, 0, 0), $85 = SIMD_float32x4(0, 0, 0, 0), $86 = SIMD_float32x4(0, 0, 0, 0), $87 = SIMD_float32x4(0, 0, 0, 0), $88 = SIMD_float32x4(0, 0, 0, 0), $93 = 0, $95 = 0, $i$01$i = 0, $i$01$i2 = 0, label = 0;
 $0 = __Znaj(64) | 0;
 HEAP32[4] = $0;
 HEAP32[6] = $0;
 $1 = __Znaj(64) | 0;
 HEAP32[8] = $1;
 HEAP32[10] = $1;
 $2 = __Znaj(64) | 0;
 HEAP32[12] = $2;
 HEAP32[14] = $2;
 HEAPF32[$0 >> 2] = Math_fround(0.0);
 HEAPF32[$2 >> 2] = Math_fround(0.0);
 HEAPF32[$0 + 4 >> 2] = Math_fround(1.0);
 HEAPF32[$2 + 16 >> 2] = Math_fround(1.0);
 HEAPF32[$0 + 8 >> 2] = Math_fround(2.0);
 HEAPF32[$2 + 32 >> 2] = Math_fround(2.0);
 HEAPF32[$0 + 12 >> 2] = Math_fround(3.0);
 HEAPF32[$2 + 48 >> 2] = Math_fround(3.0);
 HEAPF32[$0 + 16 >> 2] = Math_fround(4.0);
 HEAPF32[$2 + 4 >> 2] = Math_fround(4.0);
 HEAPF32[$0 + 20 >> 2] = Math_fround(5.0);
 HEAPF32[$2 + 20 >> 2] = Math_fround(5.0);
 HEAPF32[$0 + 24 >> 2] = Math_fround(6.0);
 HEAPF32[$2 + 36 >> 2] = Math_fround(6.0);
 HEAPF32[$0 + 28 >> 2] = Math_fround(7.0);
 HEAPF32[$2 + 52 >> 2] = Math_fround(7.0);
 HEAPF32[$0 + 32 >> 2] = Math_fround(8.0);
 HEAPF32[$2 + 8 >> 2] = Math_fround(8.0);
 HEAPF32[$0 + 36 >> 2] = Math_fround(9.0);
 HEAPF32[$2 + 24 >> 2] = Math_fround(9.0);
 HEAPF32[$0 + 40 >> 2] = Math_fround(10.0);
 HEAPF32[$2 + 40 >> 2] = Math_fround(10.0);
 HEAPF32[$0 + 44 >> 2] = Math_fround(11.0);
 HEAPF32[$2 + 56 >> 2] = Math_fround(11.0);
 HEAPF32[$0 + 48 >> 2] = Math_fround(12.0);
 HEAPF32[$2 + 12 >> 2] = Math_fround(12.0);
 HEAPF32[$0 + 52 >> 2] = Math_fround(13.0);
 HEAPF32[$2 + 28 >> 2] = Math_fround(13.0);
 HEAPF32[$0 + 56 >> 2] = Math_fround(14.0);
 HEAPF32[$2 + 44 >> 2] = Math_fround(14.0);
 HEAPF32[$0 + 60 >> 2] = Math_fround(15.0);
 HEAPF32[$2 + 60 >> 2] = Math_fround(15.0);
 $48 = 8;
 $50 = HEAP32[$48 >> 2] | 0;
 $53 = HEAP32[$48 + 4 >> 2] | 0;
 HEAPF32[$1 >> 2] = Math_fround(0.0);
 HEAPF32[$1 + 4 >> 2] = Math_fround(4.0);
 HEAPF32[$1 + 8 >> 2] = Math_fround(8.0);
 HEAPF32[$1 + 12 >> 2] = Math_fround(12.0);
 HEAPF32[$1 + 16 >> 2] = Math_fround(1.0);
 HEAPF32[$1 + 20 >> 2] = Math_fround(5.0);
 HEAPF32[$1 + 24 >> 2] = Math_fround(9.0);
 HEAPF32[$1 + 28 >> 2] = Math_fround(13.0);
 HEAPF32[$1 + 32 >> 2] = Math_fround(2.0);
 HEAPF32[$1 + 36 >> 2] = Math_fround(6.0);
 HEAPF32[$1 + 40 >> 2] = Math_fround(10.0);
 HEAPF32[$1 + 44 >> 2] = Math_fround(14.0);
 HEAPF32[$1 + 48 >> 2] = Math_fround(3.0);
 HEAPF32[$1 + 52 >> 2] = Math_fround(7.0);
 HEAPF32[$1 + 56 >> 2] = Math_fround(11.0);
 HEAPF32[$1 + 60 >> 2] = Math_fround(15.0);
 $54 = _i64Add($50 | 0, $53 | 0, 1, 0) | 0;
 $56 = 8;
 HEAP32[$56 >> 2] = $54;
 HEAP32[$56 + 4 >> 2] = tempRet0;
 $60 = HEAP32[12] | 0;
 $61 = HEAP32[8] | 0;
 $i$01$i2 = 0;
 do {
  $65 = Math_fround(HEAPF32[$60 + ($i$01$i2 << 2) >> 2]);
  if ($65 != Math_fround(HEAPF32[$61 + ($i$01$i2 << 2) >> 2])) {
   $$0 = 0;
   label = 7;
   break;
  }
  $i$01$i2 = $i$01$i2 + 1 | 0;
 } while (($i$01$i2 | 0) < 16);
 if ((label | 0) == 7) return $$0 | 0;
 $69 = HEAP32[6] | 0;
 $73 = HEAP32[10] | 0;
 $77 = SIMD_float32x4_load(HEAPU8, $69);
 $78 = SIMD_float32x4_load(HEAPU8, $69 + 16 | 0);
 $79 = SIMD_float32x4_load(HEAPU8, $69 + 32 | 0);
 $80 = SIMD_float32x4_load(HEAPU8, $69 + 48 | 0);
 $81 = SIMD_float32x4_shuffle($77, $78, 0, 1, 4, 5);
 $82 = SIMD_float32x4_shuffle($79, $80, 0, 1, 4, 5);
 $83 = SIMD_float32x4_shuffle($81, $82, 0, 2, 4, 6);
 $84 = SIMD_float32x4_shuffle($81, $82, 1, 3, 5, 7);
 $85 = SIMD_float32x4_shuffle($77, $78, 2, 3, 6, 7);
 $86 = SIMD_float32x4_shuffle($79, $80, 2, 3, 6, 7);
 $87 = SIMD_float32x4_shuffle($85, $86, 0, 2, 4, 6);
 $88 = SIMD_float32x4_shuffle($85, $86, 1, 3, 5, 7);
 SIMD_float32x4_store(HEAPU8, $73, $83);
 SIMD_float32x4_store(HEAPU8, $73 + 16 | 0, $84);
 SIMD_float32x4_store(HEAPU8, $73 + 32 | 0, $87);
 SIMD_float32x4_store(HEAPU8, $73 + 48 | 0, $88);
 $93 = _i64Add($50 | 0, $53 | 0, 2, 0) | 0;
 $95 = 8;
 HEAP32[$95 >> 2] = $93;
 HEAP32[$95 + 4 >> 2] = tempRet0;
 $i$01$i = 0;
 while (1) {
  $102 = Math_fround(HEAPF32[$60 + ($i$01$i << 2) >> 2]);
  if ($102 != Math_fround(HEAPF32[$61 + ($i$01$i << 2) >> 2])) {
   $$0 = 0;
   label = 7;
   break;
  }
  $i$01$i = $i$01$i + 1 | 0;
  if (($i$01$i | 0) >= 16) {
   $$0 = 1;
   label = 7;
   break;
  }
 }
 if ((label | 0) == 7) return $$0 | 0;
 return 0;
}

function __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $$pre = 0, $103 = 0, $106 = 0, $127 = 0, $132 = 0, $134 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $22 = 0, $23 = 0, $35 = 0, $41 = 0, $50 = 0, $52 = 0, $59 = 0, $68 = 0, $78 = 0, $80 = 0, $82 = 0, $88 = 0, $91 = 0, $97 = 0, $99 = 0, label = 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 $$pre = HEAP32[$frm_nxt >> 2] | 0;
 if (!($mode & 4)) $15 = $$pre; else if (($frm_end - $$pre | 0) > 2) if ((HEAP8[$$pre >> 0] | 0) == -17) if ((HEAP8[$$pre + 1 >> 0] | 0) == -69) if ((HEAP8[$$pre + 2 >> 0] | 0) == -65) {
  $14 = $$pre + 3 | 0;
  HEAP32[$frm_nxt >> 2] = $14;
  $15 = $14;
 } else $15 = $$pre; else $15 = $$pre; else $15 = $$pre; else $15 = $$pre;
 L8 : do if ($15 >>> 0 < $frm_end >>> 0) {
  $17 = $frm_end;
  $18 = $to_end;
  $19 = HEAP32[$to_nxt >> 2] | 0;
  $22 = $15;
  while (1) {
   if ($19 >>> 0 >= $to_end >>> 0) {
    $134 = $22;
    label = 40;
    break L8;
   }
   $21 = HEAP8[$22 >> 0] | 0;
   $23 = $21 & 255;
   if ($23 >>> 0 > $Maxcode >>> 0) {
    $$0 = 2;
    break L8;
   }
   do if ($21 << 24 >> 24 > -1) {
    HEAP16[$19 >> 1] = $21 & 255;
    HEAP32[$frm_nxt >> 2] = $22 + 1;
   } else {
    if (($21 & 255) < 194) {
     $$0 = 2;
     break L8;
    }
    if (($21 & 255) < 224) {
     if (($17 - $22 | 0) < 2) {
      $$0 = 1;
      break L8;
     }
     $35 = HEAPU8[$22 + 1 >> 0] | 0;
     if (($35 & 192 | 0) != 128) {
      $$0 = 2;
      break L8;
     }
     $41 = $35 & 63 | $23 << 6 & 1984;
     if ($41 >>> 0 > $Maxcode >>> 0) {
      $$0 = 2;
      break L8;
     }
     HEAP16[$19 >> 1] = $41;
     HEAP32[$frm_nxt >> 2] = $22 + 2;
     break;
    }
    if (($21 & 255) < 240) {
     if (($17 - $22 | 0) < 3) {
      $$0 = 1;
      break L8;
     }
     $50 = HEAP8[$22 + 1 >> 0] | 0;
     $52 = HEAP8[$22 + 2 >> 0] | 0;
     if (($23 | 0) == 224) {
      if (($50 & -32) << 24 >> 24 != -96) {
       $$0 = 2;
       break L8;
      }
     } else if (($23 | 0) == 237) {
      if (($50 & -32) << 24 >> 24 != -128) {
       $$0 = 2;
       break L8;
      }
     } else if (($50 & -64) << 24 >> 24 != -128) {
      $$0 = 2;
      break L8;
     }
     $59 = $52 & 255;
     if (($59 & 192 | 0) != 128) {
      $$0 = 2;
      break L8;
     }
     $68 = ($50 & 255) << 6 & 4032 | $23 << 12 | $59 & 63;
     if (($68 & 65535) >>> 0 > $Maxcode >>> 0) {
      $$0 = 2;
      break L8;
     }
     HEAP16[$19 >> 1] = $68;
     HEAP32[$frm_nxt >> 2] = $22 + 3;
     break;
    }
    if (($21 & 255) >= 245) {
     $$0 = 2;
     break L8;
    }
    if (($17 - $22 | 0) < 4) {
     $$0 = 1;
     break L8;
    }
    $78 = HEAP8[$22 + 1 >> 0] | 0;
    $80 = HEAP8[$22 + 2 >> 0] | 0;
    $82 = HEAP8[$22 + 3 >> 0] | 0;
    if (($23 | 0) == 240) {
     if (($78 + 112 & 255) >= 48) {
      $$0 = 2;
      break L8;
     }
    } else if (($23 | 0) == 244) {
     if (($78 & -16) << 24 >> 24 != -128) {
      $$0 = 2;
      break L8;
     }
    } else if (($78 & -64) << 24 >> 24 != -128) {
     $$0 = 2;
     break L8;
    }
    $88 = $80 & 255;
    if (($88 & 192 | 0) != 128) {
     $$0 = 2;
     break L8;
    }
    $91 = $82 & 255;
    if (($91 & 192 | 0) != 128) {
     $$0 = 2;
     break L8;
    }
    if (($18 - $19 | 0) < 4) {
     $$0 = 1;
     break L8;
    }
    $97 = $23 & 7;
    $99 = $78 & 255;
    $103 = $88 << 6;
    $106 = $91 & 63;
    if (($99 << 12 & 258048 | $97 << 18 | $103 & 4032 | $106) >>> 0 > $Maxcode >>> 0) {
     $$0 = 2;
     break L8;
    }
    HEAP16[$19 >> 1] = $99 << 2 & 60 | $88 >>> 4 & 3 | (($99 >>> 4 & 3 | $97 << 2) << 6) + 16320 | 55296;
    $127 = $19 + 2 | 0;
    HEAP32[$to_nxt >> 2] = $127;
    HEAP16[$127 >> 1] = $106 | $103 & 960 | 56320;
    HEAP32[$frm_nxt >> 2] = (HEAP32[$frm_nxt >> 2] | 0) + 4;
   } while (0);
   $19 = (HEAP32[$to_nxt >> 2] | 0) + 2 | 0;
   HEAP32[$to_nxt >> 2] = $19;
   $132 = HEAP32[$frm_nxt >> 2] | 0;
   if ($132 >>> 0 >= $frm_end >>> 0) {
    $134 = $132;
    label = 40;
    break;
   } else $22 = $132;
  }
 } else {
  $134 = $15;
  label = 40;
 } while (0);
 if ((label | 0) == 40) $$0 = $134 >>> 0 < $frm_end >>> 0 & 1;
 return $$0 | 0;
}

function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result, $this, $__s, $__intl, $__iob, $__fl, $__digits) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__digits = $__digits | 0;
 var $$byval_copy = 0, $$pn = 0, $0 = 0, $1 = 0, $100 = 0, $14 = 0, $15 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $29 = 0, $30 = 0, $37 = 0, $39 = 0, $4 = 0, $46 = 0, $55 = 0, $57 = 0, $58 = 0, $65 = 0, $73 = 0, $75 = 0, $76 = 0, $79 = 0, $9 = 0, $93 = 0, $94 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 480 | 0;
 $$byval_copy = sp + 468 | 0;
 $__loc = sp + 464 | 0;
 $__pat = sp + 472 | 0;
 $__dp = sp + 460 | 0;
 $__ts = sp + 456 | 0;
 $__grp = sp + 444 | 0;
 $__sym = sp + 432 | 0;
 $__sn = sp + 420 | 0;
 $__fd = sp + 416 | 0;
 $__mbuf = sp + 16 | 0;
 $__mi = sp + 8 | 0;
 $__me = sp + 4 | 0;
 $0 = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 4896) | 0;
 $2 = HEAP8[$__digits >> 0] | 0;
 $4 = ($2 & 1) == 0;
 if ($4) $9 = ($2 & 255) >>> 1; else $9 = HEAP32[$__digits + 4 >> 2] | 0;
 if (!$9) $21 = 0; else {
  if ($4) $15 = $__digits + 4 | 0; else $15 = HEAP32[$__digits + 8 >> 2] | 0;
  $14 = HEAP32[$15 >> 2] | 0;
  $21 = ($14 | 0) == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$1 >> 2] | 0) + 44 >> 2] & 31]($1, 45) | 0);
 };
 HEAP32[$__grp + 0 >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 HEAP32[$__sym + 0 >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 HEAP32[$__sn + 0 >> 2] = 0;
 HEAP32[$__sn + 4 >> 2] = 0;
 HEAP32[$__sn + 8 >> 2] = 0;
 __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl, $21, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $22 = HEAP8[$__digits >> 0] | 0;
 $24 = ($22 & 1) == 0;
 if ($24) $30 = ($22 & 255) >>> 1; else $30 = HEAP32[$__digits + 4 >> 2] | 0;
 $29 = HEAP32[$__fd >> 2] | 0;
 if (($30 | 0) > ($29 | 0)) {
  if ($24) $37 = ($22 & 255) >>> 1; else $37 = HEAP32[$__digits + 4 >> 2] | 0;
  $39 = HEAP8[$__sn >> 0] | 0;
  if (!($39 & 1)) $55 = ($39 & 255) >>> 1; else $55 = HEAP32[$__sn + 4 >> 2] | 0;
  $46 = HEAP8[$__sym >> 0] | 0;
  if (!($46 & 1)) $57 = ($46 & 255) >>> 1; else $57 = HEAP32[$__sym + 4 >> 2] | 0;
  $$pn = $55 + ($37 - $29 << 1 | 1) + $57 | 0;
 } else {
  $58 = HEAP8[$__sn >> 0] | 0;
  if (!($58 & 1)) $73 = ($58 & 255) >>> 1; else $73 = HEAP32[$__sn + 4 >> 2] | 0;
  $65 = HEAP8[$__sym >> 0] | 0;
  if (!($65 & 1)) $75 = ($65 & 255) >>> 1; else $75 = HEAP32[$__sym + 4 >> 2] | 0;
  $$pn = $73 + 2 + $75 | 0;
 }
 $76 = $$pn + $29 | 0;
 if ($76 >>> 0 > 100) {
  $79 = _malloc($76 << 2) | 0;
  if (!$79) __ZSt17__throw_bad_allocv(); else {
   $100 = $79;
   $__mb$0 = $79;
  }
 } else {
  $100 = 0;
  $__mb$0 = $__mbuf;
 }
 if (!($22 & 1)) {
  $93 = $__digits + 4 | 0;
  $94 = ($22 & 255) >>> 1;
 } else {
  $93 = HEAP32[$__digits + 8 >> 2] | 0;
  $94 = HEAP32[$__digits + 4 >> 2] | 0;
 }
 __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $93, $93 + ($94 << 2) | 0, $1, $21, $__pat, HEAP32[$__dp >> 2] | 0, HEAP32[$__ts >> 2] | 0, $__grp, $__sym, $__sn, $29);
 HEAP32[$0 >> 2] = HEAP32[$__s >> 2];
 $98 = HEAP32[$__mi >> 2] | 0;
 $99 = HEAP32[$__me >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__mb$0, $98, $99, $__iob, $__fl);
 if ($100) _free($100);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sn);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$__loc >> 2] | 0) | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result, $this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$0$lcssa$i = 0, $$01$i = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $15 = 0, $19 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $38 = 0, $43 = 0, $44 = 0, $47 = 0, $57 = 0, $6 = 0, $60 = 0, $74 = 0, $77 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$26 = 0, $__neg = 0, $__w$07 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 576 | 0;
 $$byval_copy = sp;
 $__wbuf = sp + 72 | 0;
 $__wb = sp + 64 | 0;
 $__wn = sp + 56 | 0;
 $__loc = sp + 52 | 0;
 $__neg = sp + 572 | 0;
 $0 = sp + 48 | 0;
 $__atoms = sp + 8 | 0;
 $__nbuf = sp + 472 | 0;
 HEAP32[$__wb >> 2] = $__wbuf;
 $1 = $__wb + 4 | 0;
 HEAP32[$1 >> 2] = 113;
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 4896) | 0;
 HEAP8[$__neg >> 0] = 0;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 $6 = HEAP32[$__iob + 4 >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 do if (__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $$byval_copy, $__intl, $__loc, $6, $__err, $__neg, $3, $__wb, $__wn, $__wbuf + 400 | 0) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 48 >> 2] & 7]($3, 4600, 4610, $__atoms) | 0;
  $11 = HEAP32[$__wn >> 2] | 0;
  $12 = HEAP32[$__wb >> 2] | 0;
  $15 = $11 - $12 | 0;
  if (($15 | 0) > 392) {
   $19 = _malloc(($15 >> 2) + 2 | 0) | 0;
   if (!$19) __ZSt17__throw_bad_allocv(); else {
    $43 = $19;
    $__nc$0 = $19;
   }
  } else {
   $43 = 0;
   $__nc$0 = $__nbuf;
  }
  if (!(HEAP8[$__neg >> 0] | 0)) $__nc$1 = $__nc$0; else {
   HEAP8[$__nc$0 >> 0] = 45;
   $__nc$1 = $__nc$0 + 1 | 0;
  }
  if ($12 >>> 0 < $11 >>> 0) {
   $25 = $__atoms + 40 | 0;
   $26 = $__atoms;
   $__nc$26 = $__nc$1;
   $__w$07 = $12;
   while (1) {
    $27 = HEAP32[$__w$07 >> 2] | 0;
    $$01$i = $__atoms;
    while (1) {
     if ((HEAP32[$$01$i >> 2] | 0) == ($27 | 0)) {
      $$0$lcssa$i = $$01$i;
      break;
     }
     $$01$i = $$01$i + 4 | 0;
     if (($$01$i | 0) == ($25 | 0)) {
      $$0$lcssa$i = $25;
      break;
     }
    }
    HEAP8[$__nc$26 >> 0] = HEAP8[4600 + ($$0$lcssa$i - $26 >> 2) >> 0] | 0;
    $__w$07 = $__w$07 + 4 | 0;
    $38 = $__nc$26 + 1 | 0;
    if ($__w$07 >>> 0 >= (HEAP32[$__wn >> 2] | 0) >>> 0) {
     $__nc$2$lcssa = $38;
     break;
    } else $__nc$26 = $38;
   }
  } else $__nc$2$lcssa = $__nc$1;
  HEAP8[$__nc$2$lcssa >> 0] = 0;
  HEAP32[$$byval_copy >> 2] = $__v;
  if ((_sscanf($__nbuf, 4536, $$byval_copy) | 0) == 1) {
   _free($43);
   break;
  } else __ZNSt3__121__throw_runtime_errorEPKc(4544);
 } while (0);
 $44 = HEAP32[$__b >> 2] | 0;
 do if (!$44) $77 = 1; else {
  $47 = HEAP32[$44 + 12 >> 2] | 0;
  if (($47 | 0) == (HEAP32[$44 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$44 >> 2] | 0) + 36 >> 2] & 63]($44) | 0; else $$0$i$i$i$i = HEAP32[$47 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $77 = 1;
   break;
  } else {
   $77 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 $57 = HEAP32[$__e >> 2] | 0;
 do if (!$57) label = 29; else {
  $60 = HEAP32[$57 + 12 >> 2] | 0;
  if (($60 | 0) == (HEAP32[$57 + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$57 >> 2] | 0) + 36 >> 2] & 63]($57) | 0; else $$0$i$i1$i$i = HEAP32[$60 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 29;
   break;
  } else if ($77) break; else {
   label = 31;
   break;
  }
 } while (0);
 if ((label | 0) == 29) if ($77) label = 31;
 if ((label | 0) == 31) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$__loc >> 2] | 0) | 0;
 $74 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if ($74) FUNCTION_TABLE_vi[HEAP32[$1 >> 2] & 127]($74);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result, $this, $__s, $__intl, $__iob, $__fl, $__digits) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__digits = $__digits | 0;
 var $$byval_copy = 0, $$pn = 0, $0 = 0, $1 = 0, $14 = 0, $15 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $29 = 0, $30 = 0, $37 = 0, $39 = 0, $4 = 0, $46 = 0, $55 = 0, $57 = 0, $58 = 0, $65 = 0, $73 = 0, $75 = 0, $76 = 0, $78 = 0, $9 = 0, $92 = 0, $93 = 0, $97 = 0, $98 = 0, $99 = 0, $__dp = 0, $__fd = 0, $__grp = 0, $__loc = 0, $__mb$0 = 0, $__mbuf = 0, $__me = 0, $__mi = 0, $__pat = 0, $__sn = 0, $__sym = 0, $__ts = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $$byval_copy = sp + 56 | 0;
 $__loc = sp + 52 | 0;
 $__pat = sp + 164 | 0;
 $__dp = sp + 161 | 0;
 $__ts = sp + 160 | 0;
 $__grp = sp + 40 | 0;
 $__sym = sp + 28 | 0;
 $__sn = sp + 16 | 0;
 $__fd = sp + 12 | 0;
 $__mbuf = sp + 60 | 0;
 $__mi = sp + 8 | 0;
 $__me = sp + 4 | 0;
 $0 = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
 $1 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 4904) | 0;
 $2 = HEAP8[$__digits >> 0] | 0;
 $4 = ($2 & 1) == 0;
 if ($4) $9 = ($2 & 255) >>> 1; else $9 = HEAP32[$__digits + 4 >> 2] | 0;
 if (!$9) $21 = 0; else {
  if ($4) $15 = $__digits + 1 | 0; else $15 = HEAP32[$__digits + 8 >> 2] | 0;
  $14 = HEAP8[$15 >> 0] | 0;
  $21 = $14 << 24 >> 24 == (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$1 >> 2] | 0) + 28 >> 2] & 31]($1, 45) | 0) << 24 >> 24;
 };
 HEAP32[$__grp + 0 >> 2] = 0;
 HEAP32[$__grp + 4 >> 2] = 0;
 HEAP32[$__grp + 8 >> 2] = 0;
 HEAP32[$__sym + 0 >> 2] = 0;
 HEAP32[$__sym + 4 >> 2] = 0;
 HEAP32[$__sym + 8 >> 2] = 0;
 HEAP32[$__sn + 0 >> 2] = 0;
 HEAP32[$__sn + 4 >> 2] = 0;
 HEAP32[$__sn + 8 >> 2] = 0;
 __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl, $21, $__loc, $__pat, $__dp, $__ts, $__grp, $__sym, $__sn, $__fd);
 $22 = HEAP8[$__digits >> 0] | 0;
 $24 = ($22 & 1) == 0;
 if ($24) $30 = ($22 & 255) >>> 1; else $30 = HEAP32[$__digits + 4 >> 2] | 0;
 $29 = HEAP32[$__fd >> 2] | 0;
 if (($30 | 0) > ($29 | 0)) {
  if ($24) $37 = ($22 & 255) >>> 1; else $37 = HEAP32[$__digits + 4 >> 2] | 0;
  $39 = HEAP8[$__sn >> 0] | 0;
  if (!($39 & 1)) $55 = ($39 & 255) >>> 1; else $55 = HEAP32[$__sn + 4 >> 2] | 0;
  $46 = HEAP8[$__sym >> 0] | 0;
  if (!($46 & 1)) $57 = ($46 & 255) >>> 1; else $57 = HEAP32[$__sym + 4 >> 2] | 0;
  $$pn = $55 + ($37 - $29 << 1 | 1) + $57 | 0;
 } else {
  $58 = HEAP8[$__sn >> 0] | 0;
  if (!($58 & 1)) $73 = ($58 & 255) >>> 1; else $73 = HEAP32[$__sn + 4 >> 2] | 0;
  $65 = HEAP8[$__sym >> 0] | 0;
  if (!($65 & 1)) $75 = ($65 & 255) >>> 1; else $75 = HEAP32[$__sym + 4 >> 2] | 0;
  $$pn = $73 + 2 + $75 | 0;
 }
 $76 = $$pn + $29 | 0;
 if ($76 >>> 0 > 100) {
  $78 = _malloc($76) | 0;
  if (!$78) __ZSt17__throw_bad_allocv(); else {
   $99 = $78;
   $__mb$0 = $78;
  }
 } else {
  $99 = 0;
  $__mb$0 = $__mbuf;
 }
 if (!($22 & 1)) {
  $92 = $__digits + 1 | 0;
  $93 = ($22 & 255) >>> 1;
 } else {
  $92 = HEAP32[$__digits + 8 >> 2] | 0;
  $93 = HEAP32[$__digits + 4 >> 2] | 0;
 }
 __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb$0, $__mi, $__me, HEAP32[$__iob + 4 >> 2] | 0, $92, $92 + $93 | 0, $1, $21, $__pat, HEAP8[$__dp >> 0] | 0, HEAP8[$__ts >> 0] | 0, $__grp, $__sym, $__sn, $29);
 HEAP32[$0 >> 2] = HEAP32[$__s >> 2];
 $97 = HEAP32[$__mi >> 2] | 0;
 $98 = HEAP32[$__me >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__mb$0, $97, $98, $__iob, $__fl);
 _free($99);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sn);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sym);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__grp);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$__loc >> 2] | 0) | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg$result, $this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$lcssa$i = 0, $$01$i = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $15 = 0, $18 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $36 = 0, $41 = 0, $42 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $72 = 0, $__atoms = 0, $__loc = 0, $__nbuf = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2$lcssa = 0, $__nc$27 = 0, $__neg = 0, $__w$08 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $$byval_copy = sp;
 $__wbuf = sp + 136 | 0;
 $__wb = sp + 16 | 0;
 $__wn = sp + 12 | 0;
 $__loc = sp + 8 | 0;
 $__neg = sp + 134 | 0;
 $0 = sp + 4 | 0;
 $__atoms = sp + 124 | 0;
 $__nbuf = sp + 24 | 0;
 HEAP32[$__wb >> 2] = $__wbuf;
 $1 = $__wb + 4 | 0;
 HEAP32[$1 >> 2] = 113;
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 4904) | 0;
 HEAP8[$__neg >> 0] = 0;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 $6 = HEAP32[$__iob + 4 >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 do if (__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $$byval_copy, $__intl, $__loc, $6, $__err, $__neg, $3, $__wb, $__wn, $__wbuf + 100 | 0) | 0) {
  FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$3 >> 2] | 0) + 32 >> 2] & 7]($3, 4520, 4530, $__atoms) | 0;
  $11 = HEAP32[$__wn >> 2] | 0;
  $12 = HEAP32[$__wb >> 2] | 0;
  $15 = $11 - $12 | 0;
  if (($15 | 0) > 98) {
   $18 = _malloc($15 + 2 | 0) | 0;
   if (!$18) __ZSt17__throw_bad_allocv(); else {
    $41 = $18;
    $__nc$0 = $18;
   }
  } else {
   $41 = 0;
   $__nc$0 = $__nbuf;
  }
  if (!(HEAP8[$__neg >> 0] | 0)) $__nc$1 = $__nc$0; else {
   HEAP8[$__nc$0 >> 0] = 45;
   $__nc$1 = $__nc$0 + 1 | 0;
  }
  if ($12 >>> 0 < $11 >>> 0) {
   $24 = $__atoms + 10 | 0;
   $25 = $__atoms;
   $__nc$27 = $__nc$1;
   $__w$08 = $12;
   while (1) {
    $26 = HEAP8[$__w$08 >> 0] | 0;
    $$01$i = $__atoms;
    while (1) {
     if ((HEAP8[$$01$i >> 0] | 0) == $26 << 24 >> 24) {
      $$0$lcssa$i = $$01$i;
      break;
     }
     $$01$i = $$01$i + 1 | 0;
     if (($$01$i | 0) == ($24 | 0)) {
      $$0$lcssa$i = $24;
      break;
     }
    }
    HEAP8[$__nc$27 >> 0] = HEAP8[4520 + ($$0$lcssa$i - $25) >> 0] | 0;
    $__w$08 = $__w$08 + 1 | 0;
    $36 = $__nc$27 + 1 | 0;
    if ($__w$08 >>> 0 >= (HEAP32[$__wn >> 2] | 0) >>> 0) {
     $__nc$2$lcssa = $36;
     break;
    } else $__nc$27 = $36;
   }
  } else $__nc$2$lcssa = $__nc$1;
  HEAP8[$__nc$2$lcssa >> 0] = 0;
  HEAP32[$$byval_copy >> 2] = $__v;
  if ((_sscanf($__nbuf, 4536, $$byval_copy) | 0) == 1) {
   _free($41);
   break;
  } else __ZNSt3__121__throw_runtime_errorEPKc(4544);
 } while (0);
 $42 = HEAP32[$__b >> 2] | 0;
 do if (!$42) $54 = 0; else if ((HEAP32[$42 + 12 >> 2] | 0) == (HEAP32[$42 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$42 >> 2] | 0) + 36 >> 2] & 63]($42) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $54 = 0;
  break;
 } else {
  $54 = HEAP32[$__b >> 2] | 0;
  break;
 } else $54 = $42; while (0);
 $55 = ($54 | 0) == 0;
 $56 = HEAP32[$__e >> 2] | 0;
 do if (!$56) label = 26; else {
  if ((HEAP32[$56 + 12 >> 2] | 0) != (HEAP32[$56 + 16 >> 2] | 0)) if ($55) break; else {
   label = 28;
   break;
  }
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$56 >> 2] | 0) + 36 >> 2] & 63]($56) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 26;
   break;
  } else if ($55) break; else {
   label = 28;
   break;
  }
 } while (0);
 if ((label | 0) == 26) if ($55) label = 28;
 if ((label | 0) == 28) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$__loc >> 2] | 0) | 0;
 $72 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if ($72) FUNCTION_TABLE_vi[HEAP32[$1 >> 2] & 127]($72);
 STACKTOP = sp;
 return;
}

function __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $105 = 0, $11 = 0, $110 = 0, $113 = 0, $12 = 0, $125 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $20 = 0, $27 = 0, $38 = 0, $41 = 0, $53 = 0, $58 = 0, $64 = 0, $66 = 0, $7 = 0, $73 = 0, $83 = 0, $87 = 0, $9 = 0, $96 = 0, label = 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 if (!($mode & 2)) label = 4; else if (($to_end - $to | 0) < 3) $$0 = 1; else {
  HEAP32[$to_nxt >> 2] = $to + 1;
  HEAP8[$to >> 0] = -17;
  $7 = HEAP32[$to_nxt >> 2] | 0;
  HEAP32[$to_nxt >> 2] = $7 + 1;
  HEAP8[$7 >> 0] = -69;
  $9 = HEAP32[$to_nxt >> 2] | 0;
  HEAP32[$to_nxt >> 2] = $9 + 1;
  HEAP8[$9 >> 0] = -65;
  label = 4;
 }
 L4 : do if ((label | 0) == 4) {
  $11 = $frm_end;
  $12 = HEAP32[$frm_nxt >> 2] | 0;
  if ($12 >>> 0 < $frm_end >>> 0) {
   $14 = $to_end;
   $16 = $12;
   while (1) {
    $15 = HEAP16[$16 >> 1] | 0;
    $17 = $15 & 65535;
    if ($17 >>> 0 > $Maxcode >>> 0) {
     $$0 = 2;
     break L4;
    }
    do if (($15 & 65535) < 128) {
     $20 = HEAP32[$to_nxt >> 2] | 0;
     if (($14 - $20 | 0) < 1) {
      $$0 = 1;
      break L4;
     }
     HEAP32[$to_nxt >> 2] = $20 + 1;
     HEAP8[$20 >> 0] = $15;
    } else {
     if (($15 & 65535) < 2048) {
      $27 = HEAP32[$to_nxt >> 2] | 0;
      if (($14 - $27 | 0) < 2) {
       $$0 = 1;
       break L4;
      }
      HEAP32[$to_nxt >> 2] = $27 + 1;
      HEAP8[$27 >> 0] = $17 >>> 6 | 192;
      $38 = HEAP32[$to_nxt >> 2] | 0;
      HEAP32[$to_nxt >> 2] = $38 + 1;
      HEAP8[$38 >> 0] = $17 & 63 | 128;
      break;
     }
     if (($15 & 65535) < 55296) {
      $41 = HEAP32[$to_nxt >> 2] | 0;
      if (($14 - $41 | 0) < 3) {
       $$0 = 1;
       break L4;
      }
      HEAP32[$to_nxt >> 2] = $41 + 1;
      HEAP8[$41 >> 0] = $17 >>> 12 | 224;
      $53 = HEAP32[$to_nxt >> 2] | 0;
      HEAP32[$to_nxt >> 2] = $53 + 1;
      HEAP8[$53 >> 0] = $17 >>> 6 & 63 | 128;
      $58 = HEAP32[$to_nxt >> 2] | 0;
      HEAP32[$to_nxt >> 2] = $58 + 1;
      HEAP8[$58 >> 0] = $17 & 63 | 128;
      break;
     }
     if (($15 & 65535) >= 56320) {
      if (($15 & 65535) < 57344) {
       $$0 = 2;
       break L4;
      }
      $113 = HEAP32[$to_nxt >> 2] | 0;
      if (($14 - $113 | 0) < 3) {
       $$0 = 1;
       break L4;
      }
      HEAP32[$to_nxt >> 2] = $113 + 1;
      HEAP8[$113 >> 0] = $17 >>> 12 | 224;
      $125 = HEAP32[$to_nxt >> 2] | 0;
      HEAP32[$to_nxt >> 2] = $125 + 1;
      HEAP8[$125 >> 0] = $17 >>> 6 & 63 | 128;
      $130 = HEAP32[$to_nxt >> 2] | 0;
      HEAP32[$to_nxt >> 2] = $130 + 1;
      HEAP8[$130 >> 0] = $17 & 63 | 128;
      break;
     }
     if (($11 - $16 | 0) < 4) {
      $$0 = 1;
      break L4;
     }
     $64 = $16 + 2 | 0;
     $66 = HEAPU16[$64 >> 1] | 0;
     if (($66 & 64512 | 0) != 56320) {
      $$0 = 2;
      break L4;
     }
     if (($14 - (HEAP32[$to_nxt >> 2] | 0) | 0) < 4) {
      $$0 = 1;
      break L4;
     }
     $73 = $17 & 960;
     if ((($73 << 10) + 65536 | $17 << 10 & 64512 | $66 & 1023) >>> 0 > $Maxcode >>> 0) {
      $$0 = 2;
      break L4;
     }
     HEAP32[$frm_nxt >> 2] = $64;
     $83 = ($73 >>> 6) + 1 | 0;
     $87 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $87 + 1;
     HEAP8[$87 >> 0] = $83 >>> 2 | 240;
     $96 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $96 + 1;
     HEAP8[$96 >> 0] = $17 >>> 2 & 15 | $83 << 4 & 48 | 128;
     $105 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $105 + 1;
     HEAP8[$105 >> 0] = $17 << 4 & 48 | $66 >>> 6 & 15 | 128;
     $110 = HEAP32[$to_nxt >> 2] | 0;
     HEAP32[$to_nxt >> 2] = $110 + 1;
     HEAP8[$110 >> 0] = $66 & 63 | 128;
    } while (0);
    $16 = (HEAP32[$frm_nxt >> 2] | 0) + 2 | 0;
    HEAP32[$frm_nxt >> 2] = $16;
    if ($16 >>> 0 >= $frm_end >>> 0) {
     $$0 = 0;
     break;
    }
   }
  } else $$0 = 0;
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $$pre = 0, $100 = 0, $105 = 0, $107 = 0, $14 = 0, $15 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $22 = 0, $33 = 0, $39 = 0, $47 = 0, $49 = 0, $56 = 0, $66 = 0, $74 = 0, $76 = 0, $78 = 0, $84 = 0, $87 = 0, label = 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 $$pre = HEAP32[$frm_nxt >> 2] | 0;
 if (!($mode & 4)) $15 = $$pre; else if (($frm_end - $$pre | 0) > 2) if ((HEAP8[$$pre >> 0] | 0) == -17) if ((HEAP8[$$pre + 1 >> 0] | 0) == -69) if ((HEAP8[$$pre + 2 >> 0] | 0) == -65) {
  $14 = $$pre + 3 | 0;
  HEAP32[$frm_nxt >> 2] = $14;
  $15 = $14;
 } else $15 = $$pre; else $15 = $$pre; else $15 = $$pre; else $15 = $$pre;
 L8 : do if ($15 >>> 0 < $frm_end >>> 0) {
  $17 = $frm_end;
  $18 = HEAP32[$to_nxt >> 2] | 0;
  $21 = $15;
  while (1) {
   if ($18 >>> 0 >= $to_end >>> 0) {
    $107 = $21;
    label = 39;
    break L8;
   }
   $20 = HEAP8[$21 >> 0] | 0;
   $22 = $20 & 255;
   do if ($20 << 24 >> 24 > -1) {
    if ($22 >>> 0 > $Maxcode >>> 0) {
     $$0 = 2;
     break L8;
    }
    HEAP32[$18 >> 2] = $22;
    HEAP32[$frm_nxt >> 2] = $21 + 1;
   } else {
    if (($20 & 255) < 194) {
     $$0 = 2;
     break L8;
    }
    if (($20 & 255) < 224) {
     if (($17 - $21 | 0) < 2) {
      $$0 = 1;
      break L8;
     }
     $33 = HEAPU8[$21 + 1 >> 0] | 0;
     if (($33 & 192 | 0) != 128) {
      $$0 = 2;
      break L8;
     }
     $39 = $33 & 63 | $22 << 6 & 1984;
     if ($39 >>> 0 > $Maxcode >>> 0) {
      $$0 = 2;
      break L8;
     }
     HEAP32[$18 >> 2] = $39;
     HEAP32[$frm_nxt >> 2] = $21 + 2;
     break;
    }
    if (($20 & 255) < 240) {
     if (($17 - $21 | 0) < 3) {
      $$0 = 1;
      break L8;
     }
     $47 = HEAP8[$21 + 1 >> 0] | 0;
     $49 = HEAP8[$21 + 2 >> 0] | 0;
     if (($22 | 0) == 224) {
      if (($47 & -32) << 24 >> 24 != -96) {
       $$0 = 2;
       break L8;
      }
     } else if (($22 | 0) == 237) {
      if (($47 & -32) << 24 >> 24 != -128) {
       $$0 = 2;
       break L8;
      }
     } else if (($47 & -64) << 24 >> 24 != -128) {
      $$0 = 2;
      break L8;
     }
     $56 = $49 & 255;
     if (($56 & 192 | 0) != 128) {
      $$0 = 2;
      break L8;
     }
     $66 = ($47 & 255) << 6 & 4032 | $22 << 12 & 61440 | $56 & 63;
     if ($66 >>> 0 > $Maxcode >>> 0) {
      $$0 = 2;
      break L8;
     }
     HEAP32[$18 >> 2] = $66;
     HEAP32[$frm_nxt >> 2] = $21 + 3;
     break;
    }
    if (($20 & 255) >= 245) {
     $$0 = 2;
     break L8;
    }
    if (($17 - $21 | 0) < 4) {
     $$0 = 1;
     break L8;
    }
    $74 = HEAP8[$21 + 1 >> 0] | 0;
    $76 = HEAP8[$21 + 2 >> 0] | 0;
    $78 = HEAP8[$21 + 3 >> 0] | 0;
    if (($22 | 0) == 240) {
     if (($74 + 112 & 255) >= 48) {
      $$0 = 2;
      break L8;
     }
    } else if (($22 | 0) == 244) {
     if (($74 & -16) << 24 >> 24 != -128) {
      $$0 = 2;
      break L8;
     }
    } else if (($74 & -64) << 24 >> 24 != -128) {
     $$0 = 2;
     break L8;
    }
    $84 = $76 & 255;
    if (($84 & 192 | 0) != 128) {
     $$0 = 2;
     break L8;
    }
    $87 = $78 & 255;
    if (($87 & 192 | 0) != 128) {
     $$0 = 2;
     break L8;
    }
    $100 = ($74 & 255) << 12 & 258048 | $22 << 18 & 1835008 | $84 << 6 & 4032 | $87 & 63;
    if ($100 >>> 0 > $Maxcode >>> 0) {
     $$0 = 2;
     break L8;
    }
    HEAP32[$18 >> 2] = $100;
    HEAP32[$frm_nxt >> 2] = $21 + 4;
   } while (0);
   $18 = (HEAP32[$to_nxt >> 2] | 0) + 4 | 0;
   HEAP32[$to_nxt >> 2] = $18;
   $105 = HEAP32[$frm_nxt >> 2] | 0;
   if ($105 >>> 0 >= $frm_end >>> 0) {
    $107 = $105;
    label = 39;
    break;
   } else $21 = $105;
  }
 } else {
  $107 = $15;
  label = 39;
 } while (0);
 if ((label | 0) == 39) $$0 = $107 >>> 0 < $frm_end >>> 0 & 1;
 return $$0 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $17 = 0, $2 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $3 = 0, $31 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $39 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 272 | 0;
 $__nb = sp + 268 | 0;
 $__o = sp + 40 | 0;
 $__op = sp + 36 | 0;
 $__oe = sp + 32 | 0;
 $0 = sp + 28 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = $__fmt;
 HEAP32[$3 >> 2] = 37;
 HEAP32[$3 + 4 >> 2] = 0;
 $10 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 3624, HEAP32[$__iob + 4 >> 2] | 0) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $11 = __ZNSt3__16__clocEv() | 0;
 if ($10) {
  HEAP32[$$byval_copy >> 2] = HEAP32[$__iob + 8 >> 2];
  $vararg_ptr1 = $$byval_copy + 4 | 0;
  HEAPF64[tempDoublePtr >> 3] = $__v;
  HEAP32[$vararg_ptr1 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $11, $__fmt, $$byval_copy) | 0;
 } else {
  HEAPF64[tempDoublePtr >> 3] = $__v;
  HEAP32[$$byval_copy >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $11, $__fmt, $$byval_copy) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $17 = __ZNSt3__16__clocEv() | 0;
  if ($10) {
   HEAP32[$$byval_copy >> 2] = HEAP32[$__iob + 8 >> 2];
   $vararg_ptr8 = $$byval_copy + 4 | 0;
   HEAPF64[tempDoublePtr >> 3] = $__v;
   HEAP32[$vararg_ptr8 >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[$vararg_ptr8 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $17, $__fmt, $$byval_copy) | 0;
  } else {
   HEAPF64[tempDoublePtr >> 3] = $__v;
   HEAP32[$$byval_copy >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $17, $__fmt, $$byval_copy) | 0;
  }
  $22 = HEAP32[$__nb >> 2] | 0;
  if (!$22) __ZSt17__throw_bad_allocv(); else {
   $25 = $22;
   $39 = $22;
   $__nc$2 = $__nc$1;
  }
 } else {
  $25 = HEAP32[$__nb >> 2] | 0;
  $39 = 0;
  $__nc$2 = $__nc$0;
 }
 $24 = $25 + $__nc$2 | 0;
 $26 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($25, $24, $__iob) | 0;
 if (($25 | 0) == ($__nar | 0)) {
  $31 = $__nar;
  $37 = 0;
  $__ob$0 = $__o;
 } else {
  $29 = _malloc($__nc$2 << 3) | 0;
  if (!$29) __ZSt17__throw_bad_allocv(); else {
   $31 = $25;
   $37 = $29;
   $__ob$0 = $29;
  }
 }
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($31, $26, $24, $__ob$0, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$2 >> 2] = HEAP32[$__s >> 2];
 $34 = HEAP32[$__op >> 2] | 0;
 $35 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$2 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($1, $$byval_copy, $__ob$0, $34, $35, $__iob, $__fl);
 $36 = HEAP32[$1 >> 2] | 0;
 HEAP32[$__s >> 2] = $36;
 HEAP32[$agg$result >> 2] = $36;
 if ($37) _free($37);
 _free($39);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg$result, $this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$0$i$i$i$i = 0, $$0$i$i1$i$i = 0, $$byval_copy = 0, $0 = 0, $1 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $28 = 0, $3 = 0, $32 = 0, $35 = 0, $4 = 0, $47 = 0, $6 = 0, $61 = 0, $64 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$05 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 432 | 0;
 $$byval_copy = sp + 424 | 0;
 $__wbuf = sp + 24 | 0;
 $__wb = sp + 16 | 0;
 $__wn = sp + 8 | 0;
 $__loc = sp + 4 | 0;
 $__neg = sp + 428 | 0;
 $0 = sp;
 HEAP32[$__wb >> 2] = $__wbuf;
 $1 = $__wb + 4 | 0;
 HEAP32[$1 >> 2] = 113;
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 4896) | 0;
 HEAP8[$__neg >> 0] = 0;
 $4 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $4;
 $6 = HEAP32[$__iob + 4 >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 if (__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b, $$byval_copy, $__intl, $__loc, $6, $__err, $__neg, $3, $__wb, $__wn, $__wbuf + 400 | 0) | 0) {
  if (!(HEAP8[$__v >> 0] & 1)) HEAP8[$__v >> 0] = 0; else HEAP32[HEAP32[$__v + 8 >> 2] >> 2] = 0;
  HEAP32[$__v + 4 >> 2] = 0;
  if (HEAP8[$__neg >> 0] | 0) __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($__v, FUNCTION_TABLE_iii[HEAP32[(HEAP32[$3 >> 2] | 0) + 44 >> 2] & 31]($3, 45) | 0);
  $23 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$3 >> 2] | 0) + 44 >> 2] & 31]($3, 48) | 0;
  $24 = HEAP32[$__wb >> 2] | 0;
  $25 = HEAP32[$__wn >> 2] | 0;
  $26 = $25 + -4 | 0;
  L10 : do if ($24 >>> 0 < $26 >>> 0) {
   $__w$05 = $24;
   while (1) {
    $28 = $__w$05 + 4 | 0;
    if ((HEAP32[$__w$05 >> 2] | 0) != ($23 | 0)) {
     $__w$0$lcssa = $__w$05;
     break L10;
    }
    if ($28 >>> 0 < $26 >>> 0) $__w$05 = $28; else {
     $__w$0$lcssa = $28;
     break;
    }
   }
  } else $__w$0$lcssa = $24; while (0);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v, $__w$0$lcssa, $25) | 0;
 }
 $32 = HEAP32[$__b >> 2] | 0;
 do if (!$32) $64 = 1; else {
  $35 = HEAP32[$32 + 12 >> 2] | 0;
  if (($35 | 0) == (HEAP32[$32 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$32 >> 2] | 0) + 36 >> 2] & 63]($32) | 0; else $$0$i$i$i$i = HEAP32[$35 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $64 = 1;
   break;
  } else {
   $64 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!$4) label = 24; else {
  $47 = HEAP32[$4 + 12 >> 2] | 0;
  if (($47 | 0) == (HEAP32[$4 + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 63]($4) | 0; else $$0$i$i1$i$i = HEAP32[$47 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 24;
   break;
  } else if ($64) break; else {
   label = 26;
   break;
  }
 } while (0);
 if ((label | 0) == 24) if ($64) label = 26;
 if ((label | 0) == 26) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$__loc >> 2] | 0) | 0;
 $61 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if ($61) FUNCTION_TABLE_vi[HEAP32[$1 >> 2] & 127]($61);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $17 = 0, $2 = 0, $22 = 0, $24 = 0, $25 = 0, $26 = 0, $29 = 0, $3 = 0, $31 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$1 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 102 | 0;
 $__nb = sp + 40 | 0;
 $__o = sp + 44 | 0;
 $__op = sp + 36 | 0;
 $__oe = sp + 32 | 0;
 $0 = sp + 28 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = $__fmt;
 HEAP32[$3 >> 2] = 37;
 HEAP32[$3 + 4 >> 2] = 0;
 $10 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 3624, HEAP32[$__iob + 4 >> 2] | 0) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $11 = __ZNSt3__16__clocEv() | 0;
 if ($10) {
  HEAP32[$$byval_copy >> 2] = HEAP32[$__iob + 8 >> 2];
  $vararg_ptr1 = $$byval_copy + 4 | 0;
  HEAPF64[tempDoublePtr >> 3] = $__v;
  HEAP32[$vararg_ptr1 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $11, $__fmt, $$byval_copy) | 0;
 } else {
  HEAPF64[tempDoublePtr >> 3] = $__v;
  HEAP32[$$byval_copy >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $11, $__fmt, $$byval_copy) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $17 = __ZNSt3__16__clocEv() | 0;
  if ($10) {
   HEAP32[$$byval_copy >> 2] = HEAP32[$__iob + 8 >> 2];
   $vararg_ptr8 = $$byval_copy + 4 | 0;
   HEAPF64[tempDoublePtr >> 3] = $__v;
   HEAP32[$vararg_ptr8 >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[$vararg_ptr8 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $17, $__fmt, $$byval_copy) | 0;
  } else {
   HEAPF64[tempDoublePtr >> 3] = $__v;
   HEAP32[$$byval_copy >> 2] = HEAP32[tempDoublePtr >> 2];
   HEAP32[$$byval_copy + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
   $__nc$1 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $17, $__fmt, $$byval_copy) | 0;
  }
  $22 = HEAP32[$__nb >> 2] | 0;
  if (!$22) __ZSt17__throw_bad_allocv(); else {
   $25 = $22;
   $38 = $22;
   $__nc$2 = $__nc$1;
  }
 } else {
  $25 = HEAP32[$__nb >> 2] | 0;
  $38 = 0;
  $__nc$2 = $__nc$0;
 }
 $24 = $25 + $__nc$2 | 0;
 $26 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($25, $24, $__iob) | 0;
 if (($25 | 0) == ($__nar | 0)) {
  $31 = $__nar;
  $37 = 0;
  $__ob$0 = $__o;
 } else {
  $29 = _malloc($__nc$2 << 1) | 0;
  if (!$29) __ZSt17__throw_bad_allocv(); else {
   $31 = $25;
   $37 = $29;
   $__ob$0 = $29;
  }
 }
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($31, $26, $24, $__ob$0, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$2 >> 2] = HEAP32[$__s >> 2];
 $34 = HEAP32[$__op >> 2] | 0;
 $35 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$2 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($1, $$byval_copy, $__ob$0, $34, $35, $__iob, $__fl);
 HEAP32[$agg$result >> 2] = HEAP32[$1 >> 2];
 _free($37);
 _free($38);
 STACKTOP = sp;
 return;
}

function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct, $__in_units, $__exp, $__a, $__a_end, $__decimal_point, $__thousands_sep, $__grouping, $__g, $__g_end, $__dc, $__atoms) {
 $__ct = $__ct | 0;
 $__in_units = $__in_units | 0;
 $__exp = $__exp | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__dc = $__dc | 0;
 $__atoms = $__atoms | 0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $12 = 0, $14 = 0, $19 = 0, $22 = 0, $29 = 0, $3 = 0, $33 = 0, $38 = 0, $40 = 0, $47 = 0, $5 = 0, $50 = 0, $51 = 0, $62 = 0, $65 = 0, $73 = 0, $80 = 0, $82 = 0, $87 = 0, $89 = 0;
 do if ($__ct << 24 >> 24 == $__decimal_point << 24 >> 24) if (!(HEAP8[$__in_units >> 0] | 0)) $$0 = -1; else {
  HEAP8[$__in_units >> 0] = 0;
  $3 = HEAP32[$__a_end >> 2] | 0;
  HEAP32[$__a_end >> 2] = $3 + 1;
  HEAP8[$3 >> 0] = 46;
  $5 = HEAP8[$__grouping >> 0] | 0;
  if (!($5 & 1)) $12 = ($5 & 255) >>> 1; else $12 = HEAP32[$__grouping + 4 >> 2] | 0;
  if (!$12) $$0 = 0; else {
   $14 = HEAP32[$__g_end >> 2] | 0;
   if (($14 - $__g | 0) < 160) {
    $19 = HEAP32[$__dc >> 2] | 0;
    HEAP32[$__g_end >> 2] = $14 + 4;
    HEAP32[$14 >> 2] = $19;
    $$0 = 0;
   } else $$0 = 0;
  }
 } else {
  if ($__ct << 24 >> 24 == $__thousands_sep << 24 >> 24) {
   $22 = HEAP8[$__grouping >> 0] | 0;
   if (!($22 & 1)) $29 = ($22 & 255) >>> 1; else $29 = HEAP32[$__grouping + 4 >> 2] | 0;
   if ($29) {
    if (!(HEAP8[$__in_units >> 0] | 0)) {
     $$0 = -1;
     break;
    }
    $33 = HEAP32[$__g_end >> 2] | 0;
    if (($33 - $__g | 0) >= 160) {
     $$0 = 0;
     break;
    }
    $38 = HEAP32[$__dc >> 2] | 0;
    HEAP32[$__g_end >> 2] = $33 + 4;
    HEAP32[$33 >> 2] = $38;
    HEAP32[$__dc >> 2] = 0;
    $$0 = 0;
    break;
   }
  }
  $40 = $__atoms + 32 | 0;
  $$01$i = $__atoms;
  while (1) {
   if ((HEAP8[$$01$i >> 0] | 0) == $__ct << 24 >> 24) {
    $$0$lcssa$i = $$01$i;
    break;
   }
   $$01$i = $$01$i + 1 | 0;
   if (($$01$i | 0) == ($40 | 0)) {
    $$0$lcssa$i = $40;
    break;
   }
  }
  $47 = $$0$lcssa$i - $__atoms | 0;
  if (($47 | 0) > 31) $$0 = -1; else {
   $50 = HEAP8[3416 + $47 >> 0] | 0;
   if (($47 | 0) == 23 | ($47 | 0) == 22) {
    HEAP8[$__exp >> 0] = 80;
    $62 = HEAP32[$__a_end >> 2] | 0;
    HEAP32[$__a_end >> 2] = $62 + 1;
    HEAP8[$62 >> 0] = $50;
    $$0 = 0;
    break;
   } else if (($47 | 0) == 24 | ($47 | 0) == 25) {
    $51 = HEAP32[$__a_end >> 2] | 0;
    if (($51 | 0) != ($__a | 0)) if ((HEAPU8[$51 + -1 >> 0] & 95 | 0) != (HEAPU8[$__exp >> 0] & 127 | 0)) {
     $$0 = -1;
     break;
    }
    HEAP32[$__a_end >> 2] = $51 + 1;
    HEAP8[$51 >> 0] = $50;
    $$0 = 0;
    break;
   } else {
    $65 = $50 & 95;
    if (($65 | 0) == (HEAP8[$__exp >> 0] | 0)) {
     HEAP8[$__exp >> 0] = $65 | 128;
     if (HEAP8[$__in_units >> 0] | 0) {
      HEAP8[$__in_units >> 0] = 0;
      $73 = HEAP8[$__grouping >> 0] | 0;
      if (!($73 & 1)) $80 = ($73 & 255) >>> 1; else $80 = HEAP32[$__grouping + 4 >> 2] | 0;
      if ($80) {
       $82 = HEAP32[$__g_end >> 2] | 0;
       if (($82 - $__g | 0) < 160) {
        $87 = HEAP32[$__dc >> 2] | 0;
        HEAP32[$__g_end >> 2] = $82 + 4;
        HEAP32[$82 >> 2] = $87;
       }
      }
     }
    }
    $89 = HEAP32[$__a_end >> 2] | 0;
    HEAP32[$__a_end >> 2] = $89 + 1;
    HEAP8[$89 >> 0] = $50;
    if (($47 | 0) > 21) {
     $$0 = 0;
     break;
    }
    HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
    $$0 = 0;
    break;
   }
  }
 } while (0);
 return $$0 | 0;
}

function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg$result, $this, $__c, $__set, $__msgid, $__dflt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__c = $__c | 0;
 $__set = $__set | 0;
 $__msgid = $__msgid | 0;
 $__dflt = $__dflt | 0;
 var $$05$i = 0, $$05$i13 = 0, $0 = 0, $1 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $21 = 0, $24 = 0, $25 = 0, $3 = 0, $33 = 0, $45 = 0, $46 = 0, $48 = 0, $49 = 0, $51 = 0, $52 = 0, $54 = 0, $62 = 0, $63 = 0, $7 = 0, $71 = 0, $__bn$i11 = 0, $__buf$i10 = 0, $__mb$i9 = 0, $__ndflt = 0, $__p$04$i = 0, $__p$04$i18 = 0, $__wn$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 $__mb$i9 = sp + 168 | 0;
 $__buf$i10 = sp + 40 | 0;
 $__bn$i11 = sp + 32 | 0;
 $__wn$i = sp + 28 | 0;
 $__ndflt = sp + 16 | 0;
 $0 = sp + 8 | 0;
 $1 = sp;
 HEAP32[$__ndflt + 0 >> 2] = 0;
 HEAP32[$__ndflt + 4 >> 2] = 0;
 HEAP32[$__ndflt + 8 >> 2] = 0;
 HEAP32[$0 + 4 >> 2] = 0;
 HEAP32[$0 >> 2] = 6560;
 $3 = HEAP8[$__dflt >> 0] | 0;
 if (!($3 & 1)) {
  $15 = $__dflt + 4 | 0;
  $16 = ($3 & 255) >>> 1;
  $17 = $__dflt + 4 | 0;
 } else {
  $7 = HEAP32[$__dflt + 8 >> 2] | 0;
  $15 = $7;
  $16 = HEAP32[$__dflt + 4 >> 2] | 0;
  $17 = $7;
 }
 $14 = $15 + ($16 << 2) | 0;
 L5 : do if ($17 >>> 0 < $14 >>> 0) {
  $19 = $__buf$i10 + 32 | 0;
  $$05$i13 = $17;
  $21 = 6560 | 0;
  while (1) {
   HEAP32[$__wn$i >> 2] = $$05$i13;
   $24 = (FUNCTION_TABLE_iiiiiiiii[HEAP32[$21 + 12 >> 2] & 15]($0, $__mb$i9, $$05$i13, $14, $__wn$i, $__buf$i10, $19, $__bn$i11) | 0) == 2;
   $25 = HEAP32[$__wn$i >> 2] | 0;
   if ($24 | ($25 | 0) == ($$05$i13 | 0)) break;
   if ($__buf$i10 >>> 0 < (HEAP32[$__bn$i11 >> 2] | 0) >>> 0) {
    $__p$04$i18 = $__buf$i10;
    do {
     __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt, HEAP8[$__p$04$i18 >> 0] | 0);
     $__p$04$i18 = $__p$04$i18 + 1 | 0;
    } while ($__p$04$i18 >>> 0 < (HEAP32[$__bn$i11 >> 2] | 0) >>> 0);
    $33 = HEAP32[$__wn$i >> 2] | 0;
   } else $33 = $25;
   if ($33 >>> 0 >= $14 >>> 0) break L5;
   $$05$i13 = $33;
   $21 = HEAP32[$0 >> 2] | 0;
  }
  __ZNSt3__121__throw_runtime_errorEPKc(5784);
 } while (0);
 if (!(HEAP8[$__ndflt >> 0] & 1)) $45 = $__ndflt + 1 | 0; else $45 = HEAP32[$__ndflt + 8 >> 2] | 0;
 $46 = _catgets((($__c | 0) == -1 ? -1 : $__c << 1) | 0, $__set | 0, $__msgid | 0, $45 | 0) | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 >> 2] = 6664;
 $48 = _strlen($46 | 0) | 0;
 $49 = $46 + $48 | 0;
 L22 : do if (($48 | 0) > 0) {
  $51 = $49;
  $52 = $__buf$i10 + 128 | 0;
  $$05$i = $46;
  $54 = 6664 | 0;
  while (1) {
   HEAP32[$__wn$i >> 2] = $$05$i;
   $62 = (FUNCTION_TABLE_iiiiiiiii[HEAP32[$54 + 16 >> 2] & 15]($1, $__mb$i9, $$05$i, ($51 - $$05$i | 0) > 32 ? $$05$i + 32 | 0 : $49, $__wn$i, $__buf$i10, $52, $__bn$i11) | 0) == 2;
   $63 = HEAP32[$__wn$i >> 2] | 0;
   if ($62 | ($63 | 0) == ($$05$i | 0)) break;
   if ($__buf$i10 >>> 0 < (HEAP32[$__bn$i11 >> 2] | 0) >>> 0) {
    $__p$04$i = $__buf$i10;
    do {
     __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($agg$result, HEAP32[$__p$04$i >> 2] | 0);
     $__p$04$i = $__p$04$i + 4 | 0;
    } while ($__p$04$i >>> 0 < (HEAP32[$__bn$i11 >> 2] | 0) >>> 0);
    $71 = HEAP32[$__wn$i >> 2] | 0;
   } else $71 = $63;
   if ($71 >>> 0 >= $49 >>> 0) break L22;
   $$05$i = $71;
   $54 = HEAP32[$1 >> 2] | 0;
  }
  __ZNSt3__121__throw_runtime_errorEPKc(5784);
 } while (0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg$result, $this, $__b, $__e, $__intl, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__intl = $__intl | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $33 = 0, $4 = 0, $45 = 0, $46 = 0, $6 = 0, $63 = 0, $__loc = 0, $__neg = 0, $__w$0$lcssa = 0, $__w$05 = 0, $__wb = 0, $__wbuf = 0, $__wn = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $$byval_copy = sp + 24 | 0;
 $__wbuf = sp + 32 | 0;
 $__wb = sp + 16 | 0;
 $__wn = sp + 8 | 0;
 $__loc = sp + 4 | 0;
 $__neg = sp + 28 | 0;
 $0 = sp;
 HEAP32[$__wb >> 2] = $__wbuf;
 $1 = $__wb + 4 | 0;
 HEAP32[$1 >> 2] = 113;
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 4904) | 0;
 HEAP8[$__neg >> 0] = 0;
 $4 = HEAP32[$__e >> 2] | 0;
 HEAP32[$0 >> 2] = $4;
 $6 = HEAP32[$__iob + 4 >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 if (__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b, $$byval_copy, $__intl, $__loc, $6, $__err, $__neg, $3, $__wb, $__wn, $__wbuf + 100 | 0) | 0) {
  if (!(HEAP8[$__v >> 0] & 1)) {
   HEAP8[$__v + 1 >> 0] = 0;
   HEAP8[$__v >> 0] = 0;
  } else {
   HEAP8[HEAP32[$__v + 8 >> 2] >> 0] = 0;
   HEAP32[$__v + 4 >> 2] = 0;
  }
  if (HEAP8[$__neg >> 0] | 0) __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__v, FUNCTION_TABLE_iii[HEAP32[(HEAP32[$3 >> 2] | 0) + 28 >> 2] & 31]($3, 45) | 0);
  $24 = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$3 >> 2] | 0) + 28 >> 2] & 31]($3, 48) | 0;
  $25 = HEAP32[$__wb >> 2] | 0;
  $26 = HEAP32[$__wn >> 2] | 0;
  $27 = $26 + -1 | 0;
  L10 : do if ($25 >>> 0 < $27 >>> 0) {
   $__w$05 = $25;
   while (1) {
    $29 = $__w$05 + 1 | 0;
    if ((HEAP8[$__w$05 >> 0] | 0) != $24 << 24 >> 24) {
     $__w$0$lcssa = $__w$05;
     break L10;
    }
    if ($29 >>> 0 < $27 >>> 0) $__w$05 = $29; else {
     $__w$0$lcssa = $29;
     break;
    }
   }
  } else $__w$0$lcssa = $25; while (0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($__v, $__w$0$lcssa, $26) | 0;
 }
 $33 = HEAP32[$__b >> 2] | 0;
 do if (!$33) $45 = 0; else if ((HEAP32[$33 + 12 >> 2] | 0) == (HEAP32[$33 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$33 >> 2] | 0) + 36 >> 2] & 63]($33) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $45 = 0;
  break;
 } else {
  $45 = HEAP32[$__b >> 2] | 0;
  break;
 } else $45 = $33; while (0);
 $46 = ($45 | 0) == 0;
 do if (!$4) label = 21; else {
  if ((HEAP32[$4 + 12 >> 2] | 0) != (HEAP32[$4 + 16 >> 2] | 0)) if ($46) break; else {
   label = 23;
   break;
  }
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 36 >> 2] & 63]($4) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 21;
   break;
  } else if ($46 ^ ($4 | 0) == 0) break; else {
   label = 23;
   break;
  }
 } while (0);
 if ((label | 0) == 21) if ($46) label = 23;
 if ((label | 0) == 23) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$__loc >> 2] | 0) | 0;
 $63 = HEAP32[$__wb >> 2] | 0;
 HEAP32[$__wb >> 2] = 0;
 if ($63) FUNCTION_TABLE_vi[HEAP32[$1 >> 2] & 127]($63);
 STACKTOP = sp;
 return;
}

function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct, $__in_units, $__exp, $__a, $__a_end, $__decimal_point, $__thousands_sep, $__grouping, $__g, $__g_end, $__dc, $__atoms) {
 $__ct = $__ct | 0;
 $__in_units = $__in_units | 0;
 $__exp = $__exp | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__dc = $__dc | 0;
 $__atoms = $__atoms | 0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $12 = 0, $14 = 0, $19 = 0, $22 = 0, $29 = 0, $3 = 0, $33 = 0, $38 = 0, $40 = 0, $47 = 0, $48 = 0, $5 = 0, $51 = 0, $52 = 0, $64 = 0, $72 = 0, $79 = 0, $81 = 0, $86 = 0, $88 = 0;
 do if (($__ct | 0) == ($__decimal_point | 0)) if (!(HEAP8[$__in_units >> 0] | 0)) $$0 = -1; else {
  HEAP8[$__in_units >> 0] = 0;
  $3 = HEAP32[$__a_end >> 2] | 0;
  HEAP32[$__a_end >> 2] = $3 + 1;
  HEAP8[$3 >> 0] = 46;
  $5 = HEAP8[$__grouping >> 0] | 0;
  if (!($5 & 1)) $12 = ($5 & 255) >>> 1; else $12 = HEAP32[$__grouping + 4 >> 2] | 0;
  if (!$12) $$0 = 0; else {
   $14 = HEAP32[$__g_end >> 2] | 0;
   if (($14 - $__g | 0) < 160) {
    $19 = HEAP32[$__dc >> 2] | 0;
    HEAP32[$__g_end >> 2] = $14 + 4;
    HEAP32[$14 >> 2] = $19;
    $$0 = 0;
   } else $$0 = 0;
  }
 } else {
  if (($__ct | 0) == ($__thousands_sep | 0)) {
   $22 = HEAP8[$__grouping >> 0] | 0;
   if (!($22 & 1)) $29 = ($22 & 255) >>> 1; else $29 = HEAP32[$__grouping + 4 >> 2] | 0;
   if ($29) {
    if (!(HEAP8[$__in_units >> 0] | 0)) {
     $$0 = -1;
     break;
    }
    $33 = HEAP32[$__g_end >> 2] | 0;
    if (($33 - $__g | 0) >= 160) {
     $$0 = 0;
     break;
    }
    $38 = HEAP32[$__dc >> 2] | 0;
    HEAP32[$__g_end >> 2] = $33 + 4;
    HEAP32[$33 >> 2] = $38;
    HEAP32[$__dc >> 2] = 0;
    $$0 = 0;
    break;
   }
  }
  $40 = $__atoms + 128 | 0;
  $$01$i = $__atoms;
  while (1) {
   if ((HEAP32[$$01$i >> 2] | 0) == ($__ct | 0)) {
    $$0$lcssa$i = $$01$i;
    break;
   }
   $$01$i = $$01$i + 4 | 0;
   if (($$01$i | 0) == ($40 | 0)) {
    $$0$lcssa$i = $40;
    break;
   }
  }
  $47 = $$0$lcssa$i - $__atoms | 0;
  $48 = $47 >> 2;
  if (($47 | 0) > 124) $$0 = -1; else {
   $51 = HEAP8[3416 + $48 >> 0] | 0;
   if (($48 | 0) == 24 | ($48 | 0) == 25) {
    $52 = HEAP32[$__a_end >> 2] | 0;
    if (($52 | 0) != ($__a | 0)) if ((HEAPU8[$52 + -1 >> 0] & 95 | 0) != (HEAPU8[$__exp >> 0] & 127 | 0)) {
     $$0 = -1;
     break;
    }
    HEAP32[$__a_end >> 2] = $52 + 1;
    HEAP8[$52 >> 0] = $51;
    $$0 = 0;
    break;
   } else if (($48 | 0) == 23 | ($48 | 0) == 22) HEAP8[$__exp >> 0] = 80; else {
    $64 = $51 & 95;
    if (($64 | 0) == (HEAP8[$__exp >> 0] | 0)) {
     HEAP8[$__exp >> 0] = $64 | 128;
     if (HEAP8[$__in_units >> 0] | 0) {
      HEAP8[$__in_units >> 0] = 0;
      $72 = HEAP8[$__grouping >> 0] | 0;
      if (!($72 & 1)) $79 = ($72 & 255) >>> 1; else $79 = HEAP32[$__grouping + 4 >> 2] | 0;
      if ($79) {
       $81 = HEAP32[$__g_end >> 2] | 0;
       if (($81 - $__g | 0) < 160) {
        $86 = HEAP32[$__dc >> 2] | 0;
        HEAP32[$__g_end >> 2] = $81 + 4;
        HEAP32[$81 >> 2] = $86;
       }
      }
     }
    }
   }
   $88 = HEAP32[$__a_end >> 2] | 0;
   HEAP32[$__a_end >> 2] = $88 + 1;
   HEAP8[$88 >> 0] = $51;
   if (($47 | 0) > 84) $$0 = 0; else {
    HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
    $$0 = 0;
   }
  }
 } while (0);
 return $$0 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $28 = 0, $3 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 $$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 102 | 0;
 $__nb = sp + 40 | 0;
 $__o = sp + 44 | 0;
 $__op = sp + 36 | 0;
 $__oe = sp + 32 | 0;
 $0 = sp + 28 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = $__fmt;
 HEAP32[$3 >> 2] = 37;
 HEAP32[$3 + 4 >> 2] = 0;
 $10 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 3616, HEAP32[$__iob + 4 >> 2] | 0) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $11 = __ZNSt3__16__clocEv() | 0;
 if ($10) {
  HEAP32[$$byval_copy >> 2] = HEAP32[$__iob + 8 >> 2];
  $vararg_ptr1 = $$byval_copy + 4 | 0;
  HEAPF64[tempDoublePtr >> 3] = $__v;
  HEAP32[$vararg_ptr1 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $11, $__fmt, $$byval_copy) | 0;
 } else {
  HEAPF64[tempDoublePtr >> 3] = $__v;
  HEAP32[$$byval_copy >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $11, $__fmt, $$byval_copy) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $17 = __ZNSt3__16__clocEv() | 0;
  HEAP32[$$byval_copy >> 2] = HEAP32[$__iob + 8 >> 2];
  $vararg_ptr8 = $$byval_copy + 4 | 0;
  HEAPF64[tempDoublePtr >> 3] = $__v;
  HEAP32[$vararg_ptr8 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr8 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $20 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $17, $__fmt, $$byval_copy) | 0;
  $21 = HEAP32[$__nb >> 2] | 0;
  if (!$21) __ZSt17__throw_bad_allocv(); else {
   $24 = $21;
   $38 = $21;
   $__nc$2 = $20;
  }
 } else {
  $24 = HEAP32[$__nb >> 2] | 0;
  $38 = 0;
  $__nc$2 = $__nc$0;
 }
 $23 = $24 + $__nc$2 | 0;
 $25 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($24, $23, $__iob) | 0;
 if (($24 | 0) == ($__nar | 0)) {
  $30 = $__nar;
  $36 = 0;
  $__ob$0 = $__o;
 } else {
  $28 = _malloc($__nc$2 << 1) | 0;
  if (!$28) __ZSt17__throw_bad_allocv(); else {
   $30 = $24;
   $36 = $28;
   $__ob$0 = $28;
  }
 }
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($30, $25, $23, $__ob$0, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$2 >> 2] = HEAP32[$__s >> 2];
 $33 = HEAP32[$__op >> 2] | 0;
 $34 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$2 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($1, $$byval_copy, $__ob$0, $33, $34, $__iob, $__fl);
 $35 = HEAP32[$1 >> 2] | 0;
 HEAP32[$__s >> 2] = $35;
 HEAP32[$agg$result >> 2] = $35;
 if ($36) _free($36);
 if ($38) _free($38);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = +$__v;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $17 = 0, $2 = 0, $20 = 0, $21 = 0, $23 = 0, $24 = 0, $25 = 0, $28 = 0, $3 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $38 = 0, $__fmt = 0, $__nar = 0, $__nb = 0, $__nc$0 = 0, $__nc$2 = 0, $__o = 0, $__ob$0 = 0, $__oe = 0, $__op = 0, $vararg_ptr1 = 0, $vararg_ptr8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 304 | 0;
 $$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 272 | 0;
 $__nb = sp + 268 | 0;
 $__o = sp + 40 | 0;
 $__op = sp + 36 | 0;
 $__oe = sp + 32 | 0;
 $0 = sp + 28 | 0;
 $1 = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = $__fmt;
 HEAP32[$3 >> 2] = 37;
 HEAP32[$3 + 4 >> 2] = 0;
 $10 = __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmt + 1 | 0, 3616, HEAP32[$__iob + 4 >> 2] | 0) | 0;
 HEAP32[$__nb >> 2] = $__nar;
 $11 = __ZNSt3__16__clocEv() | 0;
 if ($10) {
  HEAP32[$$byval_copy >> 2] = HEAP32[$__iob + 8 >> 2];
  $vararg_ptr1 = $$byval_copy + 4 | 0;
  HEAPF64[tempDoublePtr >> 3] = $__v;
  HEAP32[$vararg_ptr1 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr1 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $11, $__fmt, $$byval_copy) | 0;
 } else {
  HEAPF64[tempDoublePtr >> 3] = $__v;
  HEAP32[$$byval_copy >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$$byval_copy + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $__nc$0 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 30, $11, $__fmt, $$byval_copy) | 0;
 }
 if (($__nc$0 | 0) > 29) {
  $17 = __ZNSt3__16__clocEv() | 0;
  HEAP32[$$byval_copy >> 2] = HEAP32[$__iob + 8 >> 2];
  $vararg_ptr8 = $$byval_copy + 4 | 0;
  HEAPF64[tempDoublePtr >> 3] = $__v;
  HEAP32[$vararg_ptr8 >> 2] = HEAP32[tempDoublePtr >> 2];
  HEAP32[$vararg_ptr8 + 4 >> 2] = HEAP32[tempDoublePtr + 4 >> 2];
  $20 = __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb, $17, $__fmt, $$byval_copy) | 0;
  $21 = HEAP32[$__nb >> 2] | 0;
  if (!$21) __ZSt17__throw_bad_allocv(); else {
   $24 = $21;
   $38 = $21;
   $__nc$2 = $20;
  }
 } else {
  $24 = HEAP32[$__nb >> 2] | 0;
  $38 = 0;
  $__nc$2 = $__nc$0;
 }
 $23 = $24 + $__nc$2 | 0;
 $25 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($24, $23, $__iob) | 0;
 if (($24 | 0) == ($__nar | 0)) {
  $30 = $__nar;
  $36 = 0;
  $__ob$0 = $__o;
 } else {
  $28 = _malloc($__nc$2 << 3) | 0;
  if (!$28) __ZSt17__throw_bad_allocv(); else {
   $30 = $24;
   $36 = $28;
   $__ob$0 = $28;
  }
 }
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($30, $25, $23, $__ob$0, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$2 >> 2] = HEAP32[$__s >> 2];
 $33 = HEAP32[$__op >> 2] | 0;
 $34 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$2 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($1, $$byval_copy, $__ob$0, $33, $34, $__iob, $__fl);
 $35 = HEAP32[$1 >> 2] | 0;
 HEAP32[$__s >> 2] = $35;
 HEAP32[$agg$result >> 2] = $35;
 if ($36) _free($36);
 _free($38);
 STACKTOP = sp;
 return;
}

function _wcsrtombs($s, $ws, $n, $st) {
 $s = $s | 0;
 $ws = $ws | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $$0 = 0, $$01$lcssa = 0, $$0129 = 0, $$0129$lcssa = 0, $$0218 = 0, $$1 = 0, $$13 = 0, $$223 = 0, $$223$lcssa = 0, $$24$lcssa = 0, $$2428 = 0, $$2428$lcssa = 0, $$3 = 0, $$35 = 0, $$422 = 0, $$422$lcssa = 0, $$422$lcssa52 = 0, $$5 = 0, $$pn = 0, $13 = 0, $14 = 0, $19 = 0, $2 = 0, $27 = 0, $29 = 0, $3 = 0, $30 = 0, $35 = 0, $46 = 0, $5 = 0, $7 = 0, $buf = 0, $ws2$019 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $buf = sp;
 if (!$s) {
  $2 = HEAP32[$ws >> 2] | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  if (!$3) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  } else {
   $$0218 = 0;
   $5 = $3;
   $ws2$019 = $2;
  }
  while (1) {
   if ($5 >>> 0 > 127) {
    $7 = _wcrtomb($buf, $5, 0) | 0;
    if (($7 | 0) == -1) {
     $$0 = -1;
     label = 26;
     break;
    } else $$pn = $7;
   } else $$pn = 1;
   $$13 = $$pn + $$0218 | 0;
   $ws2$019 = $ws2$019 + 4 | 0;
   $5 = HEAP32[$ws2$019 >> 2] | 0;
   if (!$5) {
    $$0 = $$13;
    label = 26;
    break;
   } else $$0218 = $$13;
  }
  if ((label | 0) == 26) {
   STACKTOP = sp;
   return $$0 | 0;
  }
 }
 L14 : do if ($n >>> 0 > 3) {
  $$0129 = $s;
  $$2428 = $n;
  $14 = HEAP32[$ws >> 2] | 0;
  while (1) {
   $13 = HEAP32[$14 >> 2] | 0;
   if (($13 + -1 | 0) >>> 0 > 126) {
    if (!$13) {
     $$0129$lcssa = $$0129;
     $$2428$lcssa = $$2428;
     break;
    }
    $19 = _wcrtomb($$0129, $13, 0) | 0;
    if (($19 | 0) == -1) {
     $$0 = -1;
     label = 26;
     break;
    }
    $$1 = $$0129 + $19 | 0;
    $$35 = $$2428 - $19 | 0;
    $27 = $14;
   } else {
    HEAP8[$$0129 >> 0] = $13;
    $$1 = $$0129 + 1 | 0;
    $$35 = $$2428 + -1 | 0;
    $27 = HEAP32[$ws >> 2] | 0;
   }
   $14 = $27 + 4 | 0;
   HEAP32[$ws >> 2] = $14;
   if ($$35 >>> 0 <= 3) {
    $$01$lcssa = $$1;
    $$24$lcssa = $$35;
    break L14;
   } else {
    $$0129 = $$1;
    $$2428 = $$35;
   }
  }
  if ((label | 0) == 26) {
   STACKTOP = sp;
   return $$0 | 0;
  }
  HEAP8[$$0129$lcssa >> 0] = 0;
  HEAP32[$ws >> 2] = 0;
  $$0 = $n - $$2428$lcssa | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$01$lcssa = $s;
  $$24$lcssa = $n;
 } while (0);
 if (!$$24$lcssa) {
  $$0 = $n;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $$223 = $$01$lcssa;
 $$422 = $$24$lcssa;
 $30 = HEAP32[$ws >> 2] | 0;
 while (1) {
  $29 = HEAP32[$30 >> 2] | 0;
  if (($29 + -1 | 0) >>> 0 > 126) {
   if (!$29) {
    $$223$lcssa = $$223;
    $$422$lcssa = $$422;
    label = 19;
    break;
   }
   $35 = _wcrtomb($buf, $29, 0) | 0;
   if (($35 | 0) == -1) {
    $$0 = -1;
    label = 26;
    break;
   }
   if ($$422 >>> 0 < $35 >>> 0) {
    $$422$lcssa52 = $$422;
    label = 22;
    break;
   }
   _wcrtomb($$223, HEAP32[$30 >> 2] | 0, 0) | 0;
   $$3 = $$223 + $35 | 0;
   $$5 = $$422 - $35 | 0;
   $46 = $30;
  } else {
   HEAP8[$$223 >> 0] = $29;
   $$3 = $$223 + 1 | 0;
   $$5 = $$422 + -1 | 0;
   $46 = HEAP32[$ws >> 2] | 0;
  }
  $30 = $46 + 4 | 0;
  HEAP32[$ws >> 2] = $30;
  if (!$$5) {
   $$0 = $n;
   label = 26;
   break;
  } else {
   $$223 = $$3;
   $$422 = $$5;
  }
 }
 if ((label | 0) == 19) {
  HEAP8[$$223$lcssa >> 0] = 0;
  HEAP32[$ws >> 2] = 0;
  $$0 = $n - $$422$lcssa | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 22) {
  $$0 = $n - $$422$lcssa52 | 0;
  STACKTOP = sp;
  return $$0 | 0;
 } else if ((label | 0) == 26) {
  STACKTOP = sp;
  return $$0 | 0;
 }
 return 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i3$i$i915 = 0, $0 = 0, $13 = 0, $16 = 0, $28 = 0, $3 = 0, $30 = 0, $46 = 0, $47 = 0, $48 = 0, $56 = 0, $59 = 0, $71 = 0, $83 = 0, $84 = 0, label = 0;
 $0 = HEAP32[$__b >> 2] | 0;
 do if (!$0) $83 = 1; else {
  $3 = HEAP32[$0 + 12 >> 2] | 0;
  if (($3 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0) | 0; else $$0$i$i$i$i = HEAP32[$3 >> 2] | 0;
  if (($$0$i$i$i$i | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $83 = 1;
   break;
  } else {
   $83 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 $13 = HEAP32[$__e >> 2] | 0;
 do if (!$13) label = 14; else {
  $16 = HEAP32[$13 + 12 >> 2] | 0;
  if (($16 | 0) == (HEAP32[$13 + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$13 >> 2] | 0) + 36 >> 2] & 63]($13) | 0; else $$0$i$i1$i$i = HEAP32[$16 >> 2] | 0;
  if (($$0$i$i1$i$i | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 14;
   break;
  } else if ($83) {
   $$pre$i3$i$i915 = $13;
   label = 17;
   break;
  } else {
   label = 16;
   break;
  }
 } while (0);
 if ((label | 0) == 14) if ($83) label = 16; else {
  $$pre$i3$i$i915 = 0;
  label = 17;
 }
 L22 : do if ((label | 0) == 16) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6; else if ((label | 0) == 17) {
  $28 = HEAP32[$__b >> 2] | 0;
  $30 = HEAP32[$28 + 12 >> 2] | 0;
  if (($30 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 63]($28) | 0; else $$0$i$i = HEAP32[$30 >> 2] | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 52 >> 2] & 31]($__ct, $$0$i$i, 0) | 0) << 24 >> 24 != 37) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   break;
  }
  $46 = HEAP32[$__b >> 2] | 0;
  $47 = $46 + 12 | 0;
  $48 = HEAP32[$47 >> 2] | 0;
  if (($48 | 0) == (HEAP32[$46 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$46 >> 2] | 0) + 40 >> 2] & 63]($46) | 0;
   $56 = HEAP32[$__b >> 2] | 0;
  } else {
   HEAP32[$47 >> 2] = $48 + 4;
   $56 = $46;
  }
  do if (!$56) $84 = 1; else {
   $59 = HEAP32[$56 + 12 >> 2] | 0;
   if (($59 | 0) == (HEAP32[$56 + 16 >> 2] | 0)) $$0$i$i$i$i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$56 >> 2] | 0) + 36 >> 2] & 63]($56) | 0; else $$0$i$i$i$i1 = HEAP32[$59 >> 2] | 0;
   if (($$0$i$i$i$i1 | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $84 = 1;
    break;
   } else {
    $84 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  do if (!$$pre$i3$i$i915) label = 38; else {
   $71 = HEAP32[$$pre$i3$i$i915 + 12 >> 2] | 0;
   if (($71 | 0) == (HEAP32[$$pre$i3$i$i915 + 16 >> 2] | 0)) $$0$i$i1$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i915 >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i915) | 0; else $$0$i$i1$i$i7 = HEAP32[$71 >> 2] | 0;
   if (($$0$i$i1$i$i7 | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 38;
    break;
   } else if ($84) break L22; else break;
  } while (0);
  if ((label | 0) == 38) if (!$84) break;
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 } while (0);
 return;
}

function _scanexp($f, $pok) {
 $f = $f | 0;
 $pok = $pok | 0;
 var $$lcssa17 = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $2 = 0, $20 = 0, $35 = 0, $36 = 0, $47 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $58 = 0, $60 = 0, $61 = 0, $62 = 0, $76 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $96 = 0, $97 = 0, $c$0 = 0, $c$1$be = 0, $c$1$be$lcssa = 0, $c$111 = 0, $c$2$be = 0, $c$2$lcssa = 0, $c$27 = 0, $c$3$be = 0, $neg$0 = 0, $x$012 = 0;
 $0 = $f + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $f + 100 | 0;
 if ($1 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
  HEAP32[$0 >> 2] = $1 + 1;
  $9 = HEAPU8[$1 >> 0] | 0;
 } else $9 = ___shgetc($f) | 0;
 if (($9 | 0) == 43 | ($9 | 0) == 45) {
  $11 = ($9 | 0) == 45 & 1;
  $12 = HEAP32[$0 >> 2] | 0;
  if ($12 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $12 + 1;
   $20 = HEAPU8[$12 >> 0] | 0;
  } else $20 = ___shgetc($f) | 0;
  if (($20 + -48 | 0) >>> 0 > 9 & ($pok | 0) != 0) if (!(HEAP32[$2 >> 2] | 0)) {
   $c$0 = $20;
   $neg$0 = $11;
  } else {
   HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
   $c$0 = $20;
   $neg$0 = $11;
  } else {
   $c$0 = $20;
   $neg$0 = $11;
  }
 } else {
  $c$0 = $9;
  $neg$0 = 0;
 }
 if (($c$0 + -48 | 0) >>> 0 > 9) {
  if (!(HEAP32[$2 >> 2] | 0)) {
   $96 = -2147483648;
   $97 = 0;
   tempRet0 = $96;
   return $97 | 0;
  }
  HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
  $96 = -2147483648;
  $97 = 0;
  tempRet0 = $96;
  return $97 | 0;
 } else {
  $c$111 = $c$0;
  $x$012 = 0;
 }
 while (1) {
  $35 = $c$111 + -48 + ($x$012 * 10 | 0) | 0;
  $36 = HEAP32[$0 >> 2] | 0;
  if ($36 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $36 + 1;
   $c$1$be = HEAPU8[$36 >> 0] | 0;
  } else $c$1$be = ___shgetc($f) | 0;
  if (($c$1$be + -48 | 0) >>> 0 < 10 & ($35 | 0) < 214748364) {
   $c$111 = $c$1$be;
   $x$012 = $35;
  } else {
   $$lcssa17 = $35;
   $c$1$be$lcssa = $c$1$be;
   break;
  }
 }
 $47 = (($$lcssa17 | 0) < 0) << 31 >> 31;
 if (($c$1$be$lcssa + -48 | 0) >>> 0 < 10) {
  $52 = $$lcssa17;
  $53 = $47;
  $c$27 = $c$1$be$lcssa;
  while (1) {
   $54 = ___muldi3($52 | 0, $53 | 0, 10, 0) | 0;
   $55 = tempRet0;
   $58 = _i64Add($c$27 | 0, (($c$27 | 0) < 0) << 31 >> 31 | 0, -48, -1) | 0;
   $60 = _i64Add($58 | 0, tempRet0 | 0, $54 | 0, $55 | 0) | 0;
   $61 = tempRet0;
   $62 = HEAP32[$0 >> 2] | 0;
   if ($62 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
    HEAP32[$0 >> 2] = $62 + 1;
    $c$2$be = HEAPU8[$62 >> 0] | 0;
   } else $c$2$be = ___shgetc($f) | 0;
   if (($c$2$be + -48 | 0) >>> 0 < 10 & (($61 | 0) < 21474836 | ($61 | 0) == 21474836 & $60 >>> 0 < 2061584302)) {
    $52 = $60;
    $53 = $61;
    $c$27 = $c$2$be;
   } else {
    $90 = $60;
    $91 = $61;
    $c$2$lcssa = $c$2$be;
    break;
   }
  }
 } else {
  $90 = $$lcssa17;
  $91 = $47;
  $c$2$lcssa = $c$1$be$lcssa;
 }
 if (($c$2$lcssa + -48 | 0) >>> 0 < 10) do {
  $76 = HEAP32[$0 >> 2] | 0;
  if ($76 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
   HEAP32[$0 >> 2] = $76 + 1;
   $c$3$be = HEAPU8[$76 >> 0] | 0;
  } else $c$3$be = ___shgetc($f) | 0;
 } while (($c$3$be + -48 | 0) >>> 0 < 10);
 if (HEAP32[$2 >> 2] | 0) HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + -1;
 $89 = ($neg$0 | 0) != 0;
 $92 = _i64Subtract(0, 0, $90 | 0, $91 | 0) | 0;
 $96 = $89 ? tempRet0 : $91;
 $97 = $89 ? $92 : $90;
 tempRet0 = $96;
 return $97 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIwEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$0$i$i = 0, $$0$i$i$i$i = 0, $$0$i$i$i$i1 = 0, $$0$i$i1$i$i = 0, $$0$i$i1$i$i7 = 0, $$pre$i3$i$i9 = 0, $0 = 0, $13 = 0, $16 = 0, $26 = 0, $28 = 0, $3 = 0, $41 = 0, $42 = 0, $43 = 0, $51 = 0, $54 = 0, $66 = 0, $78 = 0, $79 = 0, $80 = 0, label = 0;
 L1 : while (1) {
  $0 = HEAP32[$__b >> 2] | 0;
  do if (!$0) $78 = 1; else {
   $3 = HEAP32[$0 + 12 >> 2] | 0;
   if (($3 | 0) == (HEAP32[$0 + 16 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0) | 0; else $$0$i$i$i$i = HEAP32[$3 >> 2] | 0;
   if (($$0$i$i$i$i | 0) == -1) {
    HEAP32[$__b >> 2] = 0;
    $78 = 1;
    break;
   } else {
    $78 = (HEAP32[$__b >> 2] | 0) == 0;
    break;
   }
  } while (0);
  $13 = HEAP32[$__e >> 2] | 0;
  do if (!$13) label = 15; else {
   $16 = HEAP32[$13 + 12 >> 2] | 0;
   if (($16 | 0) == (HEAP32[$13 + 16 >> 2] | 0)) $$0$i$i1$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$13 >> 2] | 0) + 36 >> 2] & 63]($13) | 0; else $$0$i$i1$i$i = HEAP32[$16 >> 2] | 0;
   if (($$0$i$i1$i$i | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 15;
    break;
   } else if ($78) {
    $79 = $13;
    break;
   } else {
    $$pre$i3$i$i9 = $13;
    break L1;
   }
  } while (0);
  if ((label | 0) == 15) {
   label = 0;
   if ($78) {
    $$pre$i3$i$i9 = 0;
    break;
   } else $79 = 0;
  }
  $26 = HEAP32[$__b >> 2] | 0;
  $28 = HEAP32[$26 + 12 >> 2] | 0;
  if (($28 | 0) == (HEAP32[$26 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$26 >> 2] | 0) + 36 >> 2] & 63]($26) | 0; else $$0$i$i = HEAP32[$28 >> 2] | 0;
  if (!(FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 12 >> 2] & 31]($__ct, 8192, $$0$i$i) | 0)) {
   $$pre$i3$i$i9 = $79;
   break;
  }
  $41 = HEAP32[$__b >> 2] | 0;
  $42 = $41 + 12 | 0;
  $43 = HEAP32[$42 >> 2] | 0;
  if (($43 | 0) == (HEAP32[$41 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$41 >> 2] | 0) + 40 >> 2] & 63]($41) | 0;
   continue;
  } else {
   HEAP32[$42 >> 2] = $43 + 4;
   continue;
  }
 }
 $51 = HEAP32[$__b >> 2] | 0;
 do if (!$51) $80 = 1; else {
  $54 = HEAP32[$51 + 12 >> 2] | 0;
  if (($54 | 0) == (HEAP32[$51 + 16 >> 2] | 0)) $$0$i$i$i$i1 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$51 >> 2] | 0) + 36 >> 2] & 63]($51) | 0; else $$0$i$i$i$i1 = HEAP32[$54 >> 2] | 0;
  if (($$0$i$i$i$i1 | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $80 = 1;
   break;
  } else {
   $80 = (HEAP32[$__b >> 2] | 0) == 0;
   break;
  }
 } while (0);
 do if (!$$pre$i3$i$i9) label = 37; else {
  $66 = HEAP32[$$pre$i3$i$i9 + 12 >> 2] | 0;
  if (($66 | 0) == (HEAP32[$$pre$i3$i$i9 + 16 >> 2] | 0)) $$0$i$i1$i$i7 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i3$i$i9 >> 2] | 0) + 36 >> 2] & 63]($$pre$i3$i$i9) | 0; else $$0$i$i1$i$i7 = HEAP32[$66 >> 2] | 0;
  if (($$0$i$i1$i$i7 | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 37;
   break;
  } else if ($80) break; else {
   label = 39;
   break;
  }
 } while (0);
 if ((label | 0) == 37) if ($80) label = 39;
 if ((label | 0) == 39) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 return;
}

function __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt, $Maxcode, $mode) {
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 $Maxcode = $Maxcode | 0;
 $mode = $mode | 0;
 var $$0 = 0, $11 = 0, $13 = 0, $14 = 0, $15 = 0, $20 = 0, $27 = 0, $38 = 0, $41 = 0, $43 = 0, $53 = 0, $58 = 0, $69 = 0, $7 = 0, $75 = 0, $80 = 0, $9 = 0, label = 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 if (!($mode & 2)) label = 4; else if (($to_end - $to | 0) < 3) $$0 = 1; else {
  HEAP32[$to_nxt >> 2] = $to + 1;
  HEAP8[$to >> 0] = -17;
  $7 = HEAP32[$to_nxt >> 2] | 0;
  HEAP32[$to_nxt >> 2] = $7 + 1;
  HEAP8[$7 >> 0] = -69;
  $9 = HEAP32[$to_nxt >> 2] | 0;
  HEAP32[$to_nxt >> 2] = $9 + 1;
  HEAP8[$9 >> 0] = -65;
  label = 4;
 }
 L4 : do if ((label | 0) == 4) {
  $11 = HEAP32[$frm_nxt >> 2] | 0;
  if ($11 >>> 0 < $frm_end >>> 0) {
   $13 = $to_end;
   $15 = $11;
   while (1) {
    $14 = HEAP32[$15 >> 2] | 0;
    if (($14 & -2048 | 0) == 55296 | $14 >>> 0 > $Maxcode >>> 0) {
     $$0 = 2;
     break L4;
    }
    do if ($14 >>> 0 < 128) {
     $20 = HEAP32[$to_nxt >> 2] | 0;
     if (($13 - $20 | 0) < 1) {
      $$0 = 1;
      break L4;
     }
     HEAP32[$to_nxt >> 2] = $20 + 1;
     HEAP8[$20 >> 0] = $14;
    } else {
     if ($14 >>> 0 < 2048) {
      $27 = HEAP32[$to_nxt >> 2] | 0;
      if (($13 - $27 | 0) < 2) {
       $$0 = 1;
       break L4;
      }
      HEAP32[$to_nxt >> 2] = $27 + 1;
      HEAP8[$27 >> 0] = $14 >>> 6 | 192;
      $38 = HEAP32[$to_nxt >> 2] | 0;
      HEAP32[$to_nxt >> 2] = $38 + 1;
      HEAP8[$38 >> 0] = $14 & 63 | 128;
      break;
     }
     $41 = HEAP32[$to_nxt >> 2] | 0;
     $43 = $13 - $41 | 0;
     if ($14 >>> 0 < 65536) {
      if (($43 | 0) < 3) {
       $$0 = 1;
       break L4;
      }
      HEAP32[$to_nxt >> 2] = $41 + 1;
      HEAP8[$41 >> 0] = $14 >>> 12 | 224;
      $53 = HEAP32[$to_nxt >> 2] | 0;
      HEAP32[$to_nxt >> 2] = $53 + 1;
      HEAP8[$53 >> 0] = $14 >>> 6 & 63 | 128;
      $58 = HEAP32[$to_nxt >> 2] | 0;
      HEAP32[$to_nxt >> 2] = $58 + 1;
      HEAP8[$58 >> 0] = $14 & 63 | 128;
      break;
     } else {
      if (($43 | 0) < 4) {
       $$0 = 1;
       break L4;
      }
      HEAP32[$to_nxt >> 2] = $41 + 1;
      HEAP8[$41 >> 0] = $14 >>> 18 | 240;
      $69 = HEAP32[$to_nxt >> 2] | 0;
      HEAP32[$to_nxt >> 2] = $69 + 1;
      HEAP8[$69 >> 0] = $14 >>> 12 & 63 | 128;
      $75 = HEAP32[$to_nxt >> 2] | 0;
      HEAP32[$to_nxt >> 2] = $75 + 1;
      HEAP8[$75 >> 0] = $14 >>> 6 & 63 | 128;
      $80 = HEAP32[$to_nxt >> 2] | 0;
      HEAP32[$to_nxt >> 2] = $80 + 1;
      HEAP8[$80 >> 0] = $14 & 63 | 128;
      break;
     }
    } while (0);
    $15 = (HEAP32[$frm_nxt >> 2] | 0) + 4 | 0;
    HEAP32[$frm_nxt >> 2] = $15;
    if ($15 >>> 0 >= $frm_end >>> 0) {
     $$0 = 0;
     break;
    }
   }
  } else $$0 = 0;
 } while (0);
 return $$0 | 0;
}

function _mbsnrtowcs($wcs, $src, $n, $wn, $st) {
 $wcs = $wcs | 0;
 $src = $src | 0;
 $n = $n | 0;
 $wn = $wn | 0;
 $st = $st | 0;
 var $$0$lcssa = 0, $$014$ = 0, $$014$lcssa = 0, $$01428 = 0, $$031 = 0, $$115 = 0, $$2 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $13 = 0, $14 = 0, $17 = 0, $21 = 0, $22 = 0, $30 = 0, $32 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $cnt$0$lcssa = 0, $cnt$029 = 0, $cnt$2 = 0, $cnt$2$lcssa = 0, $cnt$3 = 0, $s = 0, $wbuf = 0, $wcs$ = 0, $wn$ = 0, $ws$0$lcssa = 0, $ws$030 = 0, $ws$1 = 0, $ws$2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040 | 0;
 $wbuf = sp + 8 | 0;
 $s = sp;
 $0 = HEAP32[$src >> 2] | 0;
 HEAP32[$s >> 2] = $0;
 $1 = ($wcs | 0) != 0;
 $wn$ = $1 ? $wn : 256;
 $wcs$ = $1 ? $wcs : $wbuf;
 L1 : do if (($0 | 0) != 0 & ($wn$ | 0) != 0) {
  $$01428 = $wn$;
  $$031 = $n;
  $32 = $0;
  $cnt$029 = 0;
  $ws$030 = $wcs$;
  while (1) {
   $4 = $$031 >>> 2;
   $5 = $4 >>> 0 >= $$01428 >>> 0;
   if (!($5 | $$031 >>> 0 > 131)) {
    $$0$lcssa = $$031;
    $$014$lcssa = $$01428;
    $17 = $32;
    $cnt$0$lcssa = $cnt$029;
    $ws$0$lcssa = $ws$030;
    label = 7;
    break L1;
   }
   $$014$ = $5 ? $$01428 : $4;
   $7 = $$031 - $$014$ | 0;
   $8 = _mbsrtowcs($ws$030, $s, $$014$, $st) | 0;
   if (($8 | 0) == -1) {
    $cnt$3 = -1;
    break L1;
   }
   if (($ws$030 | 0) == ($wbuf | 0)) {
    $$115 = $$01428;
    $ws$1 = $wbuf;
   } else {
    $$115 = $$01428 - $8 | 0;
    $ws$1 = $ws$030 + ($8 << 2) | 0;
   }
   $13 = $8 + $cnt$029 | 0;
   $14 = HEAP32[$s >> 2] | 0;
   if (($14 | 0) != 0 & ($$115 | 0) != 0) {
    $$01428 = $$115;
    $$031 = $7;
    $32 = $14;
    $cnt$029 = $13;
    $ws$030 = $ws$1;
   } else {
    $$0$lcssa = $7;
    $$014$lcssa = $$115;
    $17 = $14;
    $cnt$0$lcssa = $13;
    $ws$0$lcssa = $ws$1;
    label = 7;
    break;
   }
  }
 } else {
  $$0$lcssa = $n;
  $$014$lcssa = $wn$;
  $17 = $0;
  $cnt$0$lcssa = 0;
  $ws$0$lcssa = $wcs$;
  label = 7;
 } while (0);
 L9 : do if ((label | 0) == 7) if (($17 | 0) != 0 & ($$014$lcssa | 0) != 0 & ($$0$lcssa | 0) != 0) {
  $$2 = $$0$lcssa;
  $$3 = $$014$lcssa;
  $21 = $17;
  $cnt$2 = $cnt$0$lcssa;
  $ws$2 = $ws$0$lcssa;
  while (1) {
   $22 = _mbrtowc($ws$2, $21, $$2, $st) | 0;
   if (($22 + 2 | 0) >>> 0 < 3) {
    $$lcssa = $22;
    $cnt$2$lcssa = $cnt$2;
    break;
   }
   $21 = (HEAP32[$s >> 2] | 0) + $22 | 0;
   HEAP32[$s >> 2] = $21;
   $$3 = $$3 + -1 | 0;
   $30 = $cnt$2 + 1 | 0;
   if (!(($$3 | 0) != 0 & ($$2 | 0) != ($22 | 0))) {
    $cnt$3 = $30;
    break L9;
   } else {
    $$2 = $$2 - $22 | 0;
    $cnt$2 = $30;
    $ws$2 = $ws$2 + 4 | 0;
   }
  }
  if (!$$lcssa) {
   HEAP32[$s >> 2] = 0;
   $cnt$3 = $cnt$2$lcssa;
   break;
  } else if (($$lcssa | 0) == -1) {
   $cnt$3 = -1;
   break;
  } else {
   HEAP32[$st >> 2] = 0;
   $cnt$3 = $cnt$2$lcssa;
   break;
  }
 } else $cnt$3 = $cnt$0$lcssa; while (0);
 if (!$1) {
  STACKTOP = sp;
  return $cnt$3 | 0;
 }
 HEAP32[$src >> 2] = HEAP32[$s >> 2];
 STACKTOP = sp;
 return $cnt$3 | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_white_spaceERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$0$i$i = 0, $$pre$i2$i$i6 = 0, $0 = 0, $1 = 0, $13 = 0, $14 = 0, $15 = 0, $27 = 0, $29 = 0, $46 = 0, $47 = 0, $48 = 0, $56 = 0, $68 = 0, $69 = 0, $83 = 0, label = 0;
 $0 = $__ct + 8 | 0;
 L1 : while (1) {
  $1 = HEAP32[$__b >> 2] | 0;
  do if (!$1) $13 = 0; else if ((HEAP32[$1 + 12 >> 2] | 0) == (HEAP32[$1 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 36 >> 2] & 63]($1) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $13 = 0;
   break;
  } else {
   $13 = HEAP32[$__b >> 2] | 0;
   break;
  } else $13 = $1; while (0);
  $14 = ($13 | 0) == 0;
  $15 = HEAP32[$__e >> 2] | 0;
  do if (!$15) label = 12; else {
   if ((HEAP32[$15 + 12 >> 2] | 0) != (HEAP32[$15 + 16 >> 2] | 0)) if ($14) {
    $83 = $15;
    break;
   } else {
    $$pre$i2$i$i6 = $15;
    break L1;
   }
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$15 >> 2] | 0) + 36 >> 2] & 63]($15) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 12;
    break;
   } else if ($14) {
    $83 = $15;
    break;
   } else {
    $$pre$i2$i$i6 = $15;
    break L1;
   }
  } while (0);
  if ((label | 0) == 12) {
   label = 0;
   if ($14) {
    $$pre$i2$i$i6 = 0;
    break;
   } else $83 = 0;
  }
  $27 = HEAP32[$__b >> 2] | 0;
  $29 = HEAP32[$27 + 12 >> 2] | 0;
  if (($29 | 0) == (HEAP32[$27 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$27 >> 2] | 0) + 36 >> 2] & 63]($27) | 0; else $$0$i$i = HEAPU8[$29 >> 0] | 0;
  if (($$0$i$i & 255) << 24 >> 24 <= -1) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  if (!(HEAP16[(HEAP32[$0 >> 2] | 0) + ($$0$i$i << 24 >> 24 << 1) >> 1] & 8192)) {
   $$pre$i2$i$i6 = $83;
   break;
  }
  $46 = HEAP32[$__b >> 2] | 0;
  $47 = $46 + 12 | 0;
  $48 = HEAP32[$47 >> 2] | 0;
  if (($48 | 0) == (HEAP32[$46 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$46 >> 2] | 0) + 40 >> 2] & 63]($46) | 0;
   continue;
  } else {
   HEAP32[$47 >> 2] = $48 + 1;
   continue;
  }
 }
 $56 = HEAP32[$__b >> 2] | 0;
 do if (!$56) $68 = 0; else if ((HEAP32[$56 + 12 >> 2] | 0) == (HEAP32[$56 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$56 >> 2] | 0) + 36 >> 2] & 63]($56) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $68 = 0;
  break;
 } else {
  $68 = HEAP32[$__b >> 2] | 0;
  break;
 } else $68 = $56; while (0);
 $69 = ($68 | 0) == 0;
 do if (!$$pre$i2$i$i6) label = 32; else {
  if ((HEAP32[$$pre$i2$i$i6 + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i6 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i6 >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i6) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 32;
   break;
  }
  if (!$69) label = 33;
 } while (0);
 if ((label | 0) == 32) if ($69) label = 33;
 if ((label | 0) == 33) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 return;
}

function __ZNSt3__110__stdinbufIcE9__getcharEb($this, $__consume) {
 $this = $this | 0;
 $__consume = $__consume | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $12 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $26 = 0, $27 = 0, $29 = 0, $3 = 0, $32 = 0, $33 = 0, $34 = 0, $38 = 0, $4 = 0, $40 = 0, $46 = 0, $51 = 0, $6 = 0, $60 = 0, $64 = 0, $8 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$0$lcssa14 = 0, $__nread$2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__enxt = sp + 4 | 0;
 $__inxt = sp;
 $0 = $this + 52 | 0;
 L1 : do if (!(HEAP8[$0 >> 0] | 0)) {
  $6 = HEAP32[$this + 44 >> 2] | 0;
  $8 = ($6 | 0) > 1 ? $6 : 1;
  if (($8 | 0) > 0) {
   $10 = $this + 32 | 0;
   $__i$09 = 0;
   do {
    $12 = _getc(HEAP32[$10 >> 2] | 0) | 0;
    if (($12 | 0) == -1) {
     $$0 = -1;
     break L1;
    }
    HEAP8[$__extbuf + $__i$09 >> 0] = $12;
    $__i$09 = $__i$09 + 1 | 0;
   } while (($__i$09 | 0) < ($8 | 0));
  }
  L9 : do if (!(HEAP8[$this + 53 >> 0] | 0)) {
   $21 = $this + 40 | 0;
   $22 = $this + 36 | 0;
   $23 = $__1buf + 1 | 0;
   $24 = $this + 32 | 0;
   $__nread$0 = $8;
   while (1) {
    $26 = HEAP32[$21 >> 2] | 0;
    $27 = $26;
    $29 = HEAP32[$27 >> 2] | 0;
    $32 = HEAP32[$27 + 4 >> 2] | 0;
    $33 = HEAP32[$22 >> 2] | 0;
    $34 = $__extbuf + $__nread$0 | 0;
    $38 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$33 >> 2] | 0) + 16 >> 2] & 15]($33, $26, $__extbuf, $34, $__enxt, $__1buf, $23, $__inxt) | 0;
    if (($38 | 0) == 2) {
     $$0 = -1;
     break L1;
    } else if (($38 | 0) == 3) {
     $__nread$0$lcssa14 = $__nread$0;
     break;
    } else if (($38 | 0) != 1) {
     $__nread$2 = $__nread$0;
     break L9;
    }
    $40 = HEAP32[$21 >> 2] | 0;
    HEAP32[$40 >> 2] = $29;
    HEAP32[$40 + 4 >> 2] = $32;
    if (($__nread$0 | 0) == 8) {
     $$0 = -1;
     break L1;
    }
    $46 = _getc(HEAP32[$24 >> 2] | 0) | 0;
    if (($46 | 0) == -1) {
     $$0 = -1;
     break L1;
    }
    HEAP8[$34 >> 0] = $46;
    $__nread$0 = $__nread$0 + 1 | 0;
   }
   HEAP8[$__1buf >> 0] = HEAP8[$__extbuf >> 0] | 0;
   $__nread$2 = $__nread$0$lcssa14;
  } else {
   HEAP8[$__1buf >> 0] = HEAP8[$__extbuf >> 0] | 0;
   $__nread$2 = $8;
  } while (0);
  if ($__consume) {
   $60 = HEAP8[$__1buf >> 0] | 0;
   HEAP32[$this + 48 >> 2] = $60 & 255;
   $64 = $60;
  } else {
   $51 = $this + 32 | 0;
   $__i2$0 = $__nread$2;
   while (1) {
    if (($__i2$0 | 0) <= 0) break;
    $__i2$0 = $__i2$0 + -1 | 0;
    if ((_ungetc(HEAPU8[$__extbuf + $__i2$0 >> 0] | 0, HEAP32[$51 >> 2] | 0) | 0) == -1) {
     $$0 = -1;
     break L1;
    }
   }
   $64 = HEAP8[$__1buf >> 0] | 0;
  }
  $$0 = $64 & 255;
 } else {
  $3 = $this + 48 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  if ($__consume) {
   HEAP32[$3 >> 2] = -1;
   HEAP8[$0 >> 0] = 0;
   $$0 = $4;
  } else $$0 = $4;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__18ios_base4InitC2Ev($this) {
 $this = $this | 0;
 var $$sum$i1 = 0, $$sum$i11 = 0, $$sum1$i12 = 0, $$sum1$i2 = 0, $0 = 0, $1 = 0, $10 = 0, $18 = 0, $29 = 0, $36 = 0, $40 = 0, $5 = 0, $51 = 0, $6 = 0, $62 = 0;
 $0 = HEAP32[_stdin >> 2] | 0;
 __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t(1032, $0, 1088);
 HEAP32[80] = 2276;
 HEAP32[82] = 2296;
 HEAP32[81] = 0;
 $1 = HEAP32[566] | 0;
 __ZNSt3__18ios_base4initEPv(320 + $1 | 0, 1032);
 HEAP32[$1 + 392 >> 2] = 0;
 HEAP32[$1 + 396 >> 2] = -1;
 $5 = HEAP32[_stdout >> 2] | 0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(1136, $5, 1096 | 0);
 HEAP32[102] = 2356;
 HEAP32[103] = 2376;
 $6 = HEAP32[586] | 0;
 __ZNSt3__18ios_base4initEPv(408 + $6 | 0, 1136);
 $$sum$i1 = $6 + 72 | 0;
 HEAP32[408 + $$sum$i1 >> 2] = 0;
 $$sum1$i2 = $6 + 76 | 0;
 HEAP32[408 + $$sum1$i2 >> 2] = -1;
 $10 = HEAP32[_stderr >> 2] | 0;
 __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t(1184, $10, 1104 | 0);
 HEAP32[124] = 2356;
 HEAP32[125] = 2376;
 __ZNSt3__18ios_base4initEPv(496 + $6 | 0, 1184);
 HEAP32[496 + $$sum$i1 >> 2] = 0;
 HEAP32[496 + $$sum1$i2 >> 2] = -1;
 $18 = HEAP32[(HEAP32[(HEAP32[124] | 0) + -12 >> 2] | 0) + 520 >> 2] | 0;
 HEAP32[146] = 2356;
 HEAP32[147] = 2376;
 __ZNSt3__18ios_base4initEPv(584 + $6 | 0, $18);
 HEAP32[584 + $$sum$i1 >> 2] = 0;
 HEAP32[584 + $$sum1$i2 >> 2] = -1;
 HEAP32[(HEAP32[(HEAP32[80] | 0) + -12 >> 2] | 0) + 392 >> 2] = 408;
 $29 = (HEAP32[(HEAP32[124] | 0) + -12 >> 2] | 0) + 500 | 0;
 HEAP32[$29 >> 2] = HEAP32[$29 >> 2] | 8192;
 HEAP32[(HEAP32[(HEAP32[124] | 0) + -12 >> 2] | 0) + 568 >> 2] = 408;
 __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t(1232, $0, 1112 | 0);
 HEAP32[168] = 2316;
 HEAP32[170] = 2336;
 HEAP32[169] = 0;
 $36 = HEAP32[576] | 0;
 __ZNSt3__18ios_base4initEPv(672 + $36 | 0, 1232);
 HEAP32[$36 + 744 >> 2] = 0;
 HEAP32[$36 + 748 >> 2] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(1288, $5, 1120 | 0);
 HEAP32[190] = 2396;
 HEAP32[191] = 2416;
 $40 = HEAP32[596] | 0;
 __ZNSt3__18ios_base4initEPv(760 + $40 | 0, 1288);
 $$sum$i11 = $40 + 72 | 0;
 HEAP32[760 + $$sum$i11 >> 2] = 0;
 $$sum1$i12 = $40 + 76 | 0;
 HEAP32[760 + $$sum1$i12 >> 2] = -1;
 __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t(1336, $10, 1128 | 0);
 HEAP32[212] = 2396;
 HEAP32[213] = 2416;
 __ZNSt3__18ios_base4initEPv(848 + $40 | 0, 1336);
 HEAP32[848 + $$sum$i11 >> 2] = 0;
 HEAP32[848 + $$sum1$i12 >> 2] = -1;
 $51 = HEAP32[(HEAP32[(HEAP32[212] | 0) + -12 >> 2] | 0) + 872 >> 2] | 0;
 HEAP32[234] = 2396;
 HEAP32[235] = 2416;
 __ZNSt3__18ios_base4initEPv(936 + $40 | 0, $51);
 HEAP32[936 + $$sum$i11 >> 2] = 0;
 HEAP32[936 + $$sum1$i12 >> 2] = -1;
 HEAP32[(HEAP32[(HEAP32[168] | 0) + -12 >> 2] | 0) + 744 >> 2] = 760;
 $62 = (HEAP32[(HEAP32[212] | 0) + -12 >> 2] | 0) + 852 | 0;
 HEAP32[$62 >> 2] = HEAP32[$62 >> 2] | 8192;
 HEAP32[(HEAP32[(HEAP32[212] | 0) + -12 >> 2] | 0) + 920 >> 2] = 760;
 return;
}

function __ZNSt3__110__stdinbufIwE9__getcharEb($this, $__consume) {
 $this = $this | 0;
 $__consume = $__consume | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $12 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $27 = 0, $28 = 0, $3 = 0, $30 = 0, $33 = 0, $34 = 0, $35 = 0, $39 = 0, $4 = 0, $41 = 0, $47 = 0, $53 = 0, $6 = 0, $62 = 0, $8 = 0, $__1buf = 0, $__enxt = 0, $__extbuf = 0, $__i$09 = 0, $__i2$0 = 0, $__inxt = 0, $__nread$0 = 0, $__nread$0$lcssa14 = 0, $__nread$2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__enxt = sp + 4 | 0;
 $__inxt = sp;
 $0 = $this + 52 | 0;
 L1 : do if (!(HEAP8[$0 >> 0] | 0)) {
  $6 = HEAP32[$this + 44 >> 2] | 0;
  $8 = ($6 | 0) > 1 ? $6 : 1;
  if (($8 | 0) > 0) {
   $10 = $this + 32 | 0;
   $__i$09 = 0;
   do {
    $12 = _getc(HEAP32[$10 >> 2] | 0) | 0;
    if (($12 | 0) == -1) {
     $$0 = -1;
     break L1;
    }
    HEAP8[$__extbuf + $__i$09 >> 0] = $12;
    $__i$09 = $__i$09 + 1 | 0;
   } while (($__i$09 | 0) < ($8 | 0));
  }
  L11 : do if (!(HEAP8[$this + 53 >> 0] | 0)) {
   $21 = $this + 40 | 0;
   $22 = $this + 36 | 0;
   $23 = $__1buf + 4 | 0;
   $24 = $this + 32 | 0;
   $__nread$0 = $8;
   while (1) {
    $27 = HEAP32[$21 >> 2] | 0;
    $28 = $27;
    $30 = HEAP32[$28 >> 2] | 0;
    $33 = HEAP32[$28 + 4 >> 2] | 0;
    $34 = HEAP32[$22 >> 2] | 0;
    $35 = $__extbuf + $__nread$0 | 0;
    $39 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$34 >> 2] | 0) + 16 >> 2] & 15]($34, $27, $__extbuf, $35, $__enxt, $__1buf, $23, $__inxt) | 0;
    if (($39 | 0) == 2) {
     $$0 = -1;
     break L1;
    } else if (($39 | 0) == 3) {
     $__nread$0$lcssa14 = $__nread$0;
     break;
    } else if (($39 | 0) != 1) {
     $__nread$2 = $__nread$0;
     break L11;
    }
    $41 = HEAP32[$21 >> 2] | 0;
    HEAP32[$41 >> 2] = $30;
    HEAP32[$41 + 4 >> 2] = $33;
    if (($__nread$0 | 0) == 8) {
     $$0 = -1;
     break L1;
    }
    $47 = _getc(HEAP32[$24 >> 2] | 0) | 0;
    if (($47 | 0) == -1) {
     $$0 = -1;
     break L1;
    }
    HEAP8[$35 >> 0] = $47;
    $__nread$0 = $__nread$0 + 1 | 0;
   }
   HEAP32[$__1buf >> 2] = HEAP8[$__extbuf >> 0];
   $__nread$2 = $__nread$0$lcssa14;
  } else {
   HEAP32[$__1buf >> 2] = HEAP8[$__extbuf >> 0];
   $__nread$2 = $8;
  } while (0);
  if ($__consume) {
   $62 = HEAP32[$__1buf >> 2] | 0;
   HEAP32[$this + 48 >> 2] = $62;
   $$0 = $62;
   break;
  }
  $53 = $this + 32 | 0;
  $__i2$0 = $__nread$2;
  while (1) {
   if (($__i2$0 | 0) <= 0) break;
   $__i2$0 = $__i2$0 + -1 | 0;
   if ((_ungetc(HEAP8[$__extbuf + $__i2$0 >> 0] | 0, HEAP32[$53 >> 2] | 0) | 0) == -1) {
    $$0 = -1;
    break L1;
   }
  }
  $$0 = HEAP32[$__1buf >> 2] | 0;
 } else {
  $3 = $this + 48 | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  if ($__consume) {
   HEAP32[$3 >> 2] = -1;
   HEAP8[$0 >> 0] = 0;
   $$0 = $4;
  } else $$0 = $4;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_percentERS4_S4_RjRKNS_5ctypeIcEE($this, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$0$i$i = 0, $$pre$i2$i$i611 = 0, $0 = 0, $12 = 0, $13 = 0, $14 = 0, $28 = 0, $30 = 0, $48 = 0, $49 = 0, $50 = 0, $58 = 0, $70 = 0, $71 = 0, label = 0;
 $0 = HEAP32[$__b >> 2] | 0;
 do if (!$0) $12 = 0; else if ((HEAP32[$0 + 12 >> 2] | 0) == (HEAP32[$0 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 36 >> 2] & 63]($0) | 0) == -1) {
  HEAP32[$__b >> 2] = 0;
  $12 = 0;
  break;
 } else {
  $12 = HEAP32[$__b >> 2] | 0;
  break;
 } else $12 = $0; while (0);
 $13 = ($12 | 0) == 0;
 $14 = HEAP32[$__e >> 2] | 0;
 do if (!$14) label = 11; else {
  if ((HEAP32[$14 + 12 >> 2] | 0) == (HEAP32[$14 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$14 >> 2] | 0) + 36 >> 2] & 63]($14) | 0) == -1) {
   HEAP32[$__e >> 2] = 0;
   label = 11;
   break;
  }
  if ($13) {
   $$pre$i2$i$i611 = $14;
   label = 13;
  } else label = 12;
 } while (0);
 if ((label | 0) == 11) if ($13) label = 12; else {
  $$pre$i2$i$i611 = 0;
  label = 13;
 }
 L16 : do if ((label | 0) == 12) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 6; else if ((label | 0) == 13) {
  $28 = HEAP32[$__b >> 2] | 0;
  $30 = HEAP32[$28 + 12 >> 2] | 0;
  if (($30 | 0) == (HEAP32[$28 + 16 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$28 >> 2] | 0) + 36 >> 2] & 63]($28) | 0; else $$0$i$i = HEAPU8[$30 >> 0] | 0;
  if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$__ct >> 2] | 0) + 36 >> 2] & 31]($__ct, $$0$i$i & 255, 0) | 0) << 24 >> 24 != 37) {
   HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4;
   break;
  }
  $48 = HEAP32[$__b >> 2] | 0;
  $49 = $48 + 12 | 0;
  $50 = HEAP32[$49 >> 2] | 0;
  if (($50 | 0) == (HEAP32[$48 + 16 >> 2] | 0)) {
   FUNCTION_TABLE_ii[HEAP32[(HEAP32[$48 >> 2] | 0) + 40 >> 2] & 63]($48) | 0;
   $58 = HEAP32[$__b >> 2] | 0;
  } else {
   HEAP32[$49 >> 2] = $50 + 1;
   $58 = $48;
  }
  do if (!$58) $70 = 0; else if ((HEAP32[$58 + 12 >> 2] | 0) == (HEAP32[$58 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$58 >> 2] | 0) + 36 >> 2] & 63]($58) | 0) == -1) {
   HEAP32[$__b >> 2] = 0;
   $70 = 0;
   break;
  } else {
   $70 = HEAP32[$__b >> 2] | 0;
   break;
  } else $70 = $58; while (0);
  $71 = ($70 | 0) == 0;
  do if (!$$pre$i2$i$i611) label = 31; else {
   if ((HEAP32[$$pre$i2$i$i611 + 12 >> 2] | 0) == (HEAP32[$$pre$i2$i$i611 + 16 >> 2] | 0)) if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$$pre$i2$i$i611 >> 2] | 0) + 36 >> 2] & 63]($$pre$i2$i$i611) | 0) == -1) {
    HEAP32[$__e >> 2] = 0;
    label = 31;
    break;
   }
   if ($71) break L16;
  } while (0);
  if ((label | 0) == 31) if (!$71) break;
  HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 2;
 } while (0);
 return;
}

function _wcsnrtombs($dst, $wcs, $wn, $n, $st) {
 $dst = $dst | 0;
 $wcs = $wcs | 0;
 $wn = $wn | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $$0$lcssa = 0, $$014$$0 = 0, $$014$lcssa = 0, $$01428 = 0, $$031 = 0, $$115 = 0, $$2 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $1 = 0, $12 = 0, $13 = 0, $16 = 0, $21 = 0, $22 = 0, $31 = 0, $33 = 0, $4 = 0, $6 = 0, $7 = 0, $buf = 0, $cnt$0$lcssa = 0, $cnt$029 = 0, $cnt$2 = 0, $cnt$2$lcssa = 0, $cnt$3 = 0, $dst$ = 0, $n$ = 0, $s$0$lcssa = 0, $s$030 = 0, $s$1 = 0, $s$2 = 0, $ws = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272 | 0;
 $buf = sp + 8 | 0;
 $ws = sp;
 $0 = HEAP32[$wcs >> 2] | 0;
 HEAP32[$ws >> 2] = $0;
 $1 = ($dst | 0) != 0;
 $n$ = $1 ? $n : 256;
 $dst$ = $1 ? $dst : $buf;
 L1 : do if (($0 | 0) != 0 & ($n$ | 0) != 0) {
  $$01428 = $n$;
  $$031 = $wn;
  $33 = $0;
  $cnt$029 = 0;
  $s$030 = $dst$;
  while (1) {
   $4 = $$031 >>> 0 >= $$01428 >>> 0;
   if (!($4 | $$031 >>> 0 > 32)) {
    $$0$lcssa = $$031;
    $$014$lcssa = $$01428;
    $16 = $33;
    $cnt$0$lcssa = $cnt$029;
    $s$0$lcssa = $s$030;
    label = 7;
    break L1;
   }
   $$014$$0 = $4 ? $$01428 : $$031;
   $6 = $$031 - $$014$$0 | 0;
   $7 = _wcsrtombs($s$030, $ws, $$014$$0, 0) | 0;
   if (($7 | 0) == -1) {
    $cnt$3 = -1;
    break L1;
   }
   if (($s$030 | 0) == ($buf | 0)) {
    $$115 = $$01428;
    $s$1 = $buf;
   } else {
    $$115 = $$01428 - $7 | 0;
    $s$1 = $s$030 + $7 | 0;
   }
   $12 = $7 + $cnt$029 | 0;
   $13 = HEAP32[$ws >> 2] | 0;
   if (($13 | 0) != 0 & ($$115 | 0) != 0) {
    $$01428 = $$115;
    $$031 = $6;
    $33 = $13;
    $cnt$029 = $12;
    $s$030 = $s$1;
   } else {
    $$0$lcssa = $6;
    $$014$lcssa = $$115;
    $16 = $13;
    $cnt$0$lcssa = $12;
    $s$0$lcssa = $s$1;
    label = 7;
    break;
   }
  }
 } else {
  $$0$lcssa = $wn;
  $$014$lcssa = $n$;
  $16 = $0;
  $cnt$0$lcssa = 0;
  $s$0$lcssa = $dst$;
  label = 7;
 } while (0);
 L9 : do if ((label | 0) == 7) if (($16 | 0) != 0 & ($$014$lcssa | 0) != 0 & ($$0$lcssa | 0) != 0) {
  $$2 = $$0$lcssa;
  $$3 = $$014$lcssa;
  $21 = $16;
  $cnt$2 = $cnt$0$lcssa;
  $s$2 = $s$0$lcssa;
  while (1) {
   $22 = _wcrtomb($s$2, HEAP32[$21 >> 2] | 0, 0) | 0;
   if (($22 + 1 | 0) >>> 0 < 2) {
    $$lcssa = $22;
    $cnt$2$lcssa = $cnt$2;
    break;
   }
   $21 = (HEAP32[$ws >> 2] | 0) + 4 | 0;
   HEAP32[$ws >> 2] = $21;
   $$2 = $$2 + -1 | 0;
   $31 = $cnt$2 + 1 | 0;
   if (!(($$3 | 0) != ($22 | 0) & ($$2 | 0) != 0)) {
    $cnt$3 = $31;
    break L9;
   } else {
    $$3 = $$3 - $22 | 0;
    $cnt$2 = $31;
    $s$2 = $s$2 + $22 | 0;
   }
  }
  if (!$$lcssa) {
   HEAP32[$ws >> 2] = 0;
   $cnt$3 = $cnt$2$lcssa;
  } else $cnt$3 = -1;
 } else $cnt$3 = $cnt$0$lcssa; while (0);
 if (!$1) {
  STACKTOP = sp;
  return $cnt$3 | 0;
 }
 HEAP32[$wcs >> 2] = HEAP32[$ws >> 2];
 STACKTOP = sp;
 return $cnt$3 | 0;
}

function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this) {
 $this = $this | 0;
 if (!(HEAP8[5264] | 0)) if (___cxa_guard_acquire(5264) | 0) {
  if (!(HEAP8[10648] | 0)) if (___cxa_guard_acquire(10648) | 0) {
   _memset(10360, 0, 288) | 0;
   ___cxa_atexit(119, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(10648);
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10360, 10656) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10372, 10688) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10384, 10728) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10396, 10752) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10408, 10776) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10420, 10792) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10432, 10816) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10444, 10840) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10456, 10872) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10468, 10912) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10480, 10944) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10492, 10984) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10504, 11024) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10516, 11040) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10528, 11056) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10540, 11072) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10552, 10776) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10564, 11088) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10576, 11104) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10588, 11120) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10600, 11136) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10612, 11152) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10624, 11168) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(10636, 11184) | 0;
  HEAP32[1314] = 10360;
  ___cxa_guard_release(5264);
 }
 return HEAP32[1314] | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this) {
 $this = $this | 0;
 if (!(HEAP8[5248] | 0)) if (___cxa_guard_acquire(5248) | 0) {
  if (!(HEAP8[11488] | 0)) if (___cxa_guard_acquire(11488) | 0) {
   _memset(11200, 0, 288) | 0;
   ___cxa_atexit(118, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(11488);
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11200, 11496) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11212, 11504) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11224, 11520) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11236, 11528) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11248, 11536) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11260, 11544) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11272, 11552) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11284, 11560) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11296, 11568) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11308, 11584) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11320, 11592) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11332, 11608) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11344, 11624) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11356, 11632) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11368, 11640) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11380, 11648) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11392, 11536) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11404, 11656) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11416, 11664) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11428, 11672) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11440, 11680) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11452, 11688) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11464, 11696) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(11476, 11704) | 0;
  HEAP32[1310] = 11200;
  ___cxa_guard_release(5248);
 }
 return HEAP32[1310] | 0;
}

function __ZN15MatrixTranspose11transpose64Ey($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $48 = 0, $5 = 0, $65 = 0, $66 = 0, $74 = 0, $75 = 0, $76 = 0, $80 = 0, $81 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $5 = 8;
  $80 = HEAP32[$5 + 4 >> 2] | 0;
  $81 = HEAP32[$5 >> 2] | 0;
  tempRet0 = $80;
  return $81 | 0;
 }
 $11 = HEAP32[4] | 0;
 $12 = HEAP32[8] | 0;
 $13 = $11 + 16 | 0;
 $14 = $12 + 4 | 0;
 $15 = $11 + 32 | 0;
 $16 = $12 + 8 | 0;
 $17 = $11 + 48 | 0;
 $18 = $12 + 12 | 0;
 $19 = $11 + 4 | 0;
 $20 = $12 + 16 | 0;
 $21 = $11 + 20 | 0;
 $22 = $12 + 20 | 0;
 $23 = $11 + 36 | 0;
 $24 = $12 + 24 | 0;
 $25 = $11 + 52 | 0;
 $26 = $12 + 28 | 0;
 $27 = $11 + 8 | 0;
 $28 = $12 + 32 | 0;
 $29 = $11 + 24 | 0;
 $30 = $12 + 36 | 0;
 $31 = $11 + 40 | 0;
 $32 = $12 + 40 | 0;
 $33 = $11 + 56 | 0;
 $34 = $12 + 44 | 0;
 $35 = $11 + 12 | 0;
 $36 = $12 + 48 | 0;
 $37 = $11 + 28 | 0;
 $38 = $12 + 52 | 0;
 $39 = $11 + 44 | 0;
 $40 = $12 + 56 | 0;
 $41 = $11 + 60 | 0;
 $42 = $12 + 60 | 0;
 $43 = 8;
 $45 = HEAP32[$43 >> 2] | 0;
 $48 = HEAP32[$43 + 4 >> 2] | 0;
 $65 = 0;
 $66 = 0;
 do {
  HEAPF32[$12 >> 2] = Math_fround(HEAPF32[$11 >> 2]);
  HEAPF32[$14 >> 2] = Math_fround(HEAPF32[$13 >> 2]);
  HEAPF32[$16 >> 2] = Math_fround(HEAPF32[$15 >> 2]);
  HEAPF32[$18 >> 2] = Math_fround(HEAPF32[$17 >> 2]);
  HEAPF32[$20 >> 2] = Math_fround(HEAPF32[$19 >> 2]);
  HEAPF32[$22 >> 2] = Math_fround(HEAPF32[$21 >> 2]);
  HEAPF32[$24 >> 2] = Math_fround(HEAPF32[$23 >> 2]);
  HEAPF32[$26 >> 2] = Math_fround(HEAPF32[$25 >> 2]);
  HEAPF32[$28 >> 2] = Math_fround(HEAPF32[$27 >> 2]);
  HEAPF32[$30 >> 2] = Math_fround(HEAPF32[$29 >> 2]);
  HEAPF32[$32 >> 2] = Math_fround(HEAPF32[$31 >> 2]);
  HEAPF32[$34 >> 2] = Math_fround(HEAPF32[$33 >> 2]);
  HEAPF32[$36 >> 2] = Math_fround(HEAPF32[$35 >> 2]);
  HEAPF32[$38 >> 2] = Math_fround(HEAPF32[$37 >> 2]);
  HEAPF32[$40 >> 2] = Math_fround(HEAPF32[$39 >> 2]);
  HEAPF32[$42 >> 2] = Math_fround(HEAPF32[$41 >> 2]);
  $65 = _i64Add($65 | 0, $66 | 0, 1, 0) | 0;
  $66 = tempRet0;
 } while ($66 >>> 0 < $1 >>> 0 | ($66 | 0) == ($1 | 0) & $65 >>> 0 < $0 >>> 0);
 $74 = _i64Add($45 | 0, $48 | 0, $0 | 0, $1 | 0) | 0;
 $75 = tempRet0;
 $76 = 8;
 HEAP32[$76 >> 2] = $74;
 HEAP32[$76 + 4 >> 2] = $75;
 $80 = $75;
 $81 = $74;
 tempRet0 = $80;
 return $81 | 0;
}

function __ZN15MatrixTranspose11transpose32Ey($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $45 = 0, $48 = 0, $5 = 0, $65 = 0, $66 = 0, $74 = 0, $75 = 0, $76 = 0, $80 = 0, $81 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $5 = 8;
  $80 = HEAP32[$5 + 4 >> 2] | 0;
  $81 = HEAP32[$5 >> 2] | 0;
  tempRet0 = $80;
  return $81 | 0;
 }
 $11 = HEAP32[4] | 0;
 $12 = HEAP32[8] | 0;
 $13 = $11 + 16 | 0;
 $14 = $12 + 4 | 0;
 $15 = $11 + 32 | 0;
 $16 = $12 + 8 | 0;
 $17 = $11 + 48 | 0;
 $18 = $12 + 12 | 0;
 $19 = $11 + 4 | 0;
 $20 = $12 + 16 | 0;
 $21 = $11 + 20 | 0;
 $22 = $12 + 20 | 0;
 $23 = $11 + 36 | 0;
 $24 = $12 + 24 | 0;
 $25 = $11 + 52 | 0;
 $26 = $12 + 28 | 0;
 $27 = $11 + 8 | 0;
 $28 = $12 + 32 | 0;
 $29 = $11 + 24 | 0;
 $30 = $12 + 36 | 0;
 $31 = $11 + 40 | 0;
 $32 = $12 + 40 | 0;
 $33 = $11 + 56 | 0;
 $34 = $12 + 44 | 0;
 $35 = $11 + 12 | 0;
 $36 = $12 + 48 | 0;
 $37 = $11 + 28 | 0;
 $38 = $12 + 52 | 0;
 $39 = $11 + 44 | 0;
 $40 = $12 + 56 | 0;
 $41 = $11 + 60 | 0;
 $42 = $12 + 60 | 0;
 $43 = 8;
 $45 = HEAP32[$43 >> 2] | 0;
 $48 = HEAP32[$43 + 4 >> 2] | 0;
 $65 = 0;
 $66 = 0;
 do {
  HEAPF32[$12 >> 2] = Math_fround(HEAPF32[$11 >> 2]);
  HEAPF32[$14 >> 2] = Math_fround(HEAPF32[$13 >> 2]);
  HEAPF32[$16 >> 2] = Math_fround(HEAPF32[$15 >> 2]);
  HEAPF32[$18 >> 2] = Math_fround(HEAPF32[$17 >> 2]);
  HEAPF32[$20 >> 2] = Math_fround(HEAPF32[$19 >> 2]);
  HEAPF32[$22 >> 2] = Math_fround(HEAPF32[$21 >> 2]);
  HEAPF32[$24 >> 2] = Math_fround(HEAPF32[$23 >> 2]);
  HEAPF32[$26 >> 2] = Math_fround(HEAPF32[$25 >> 2]);
  HEAPF32[$28 >> 2] = Math_fround(HEAPF32[$27 >> 2]);
  HEAPF32[$30 >> 2] = Math_fround(HEAPF32[$29 >> 2]);
  HEAPF32[$32 >> 2] = Math_fround(HEAPF32[$31 >> 2]);
  HEAPF32[$34 >> 2] = Math_fround(HEAPF32[$33 >> 2]);
  HEAPF32[$36 >> 2] = Math_fround(HEAPF32[$35 >> 2]);
  HEAPF32[$38 >> 2] = Math_fround(HEAPF32[$37 >> 2]);
  HEAPF32[$40 >> 2] = Math_fround(HEAPF32[$39 >> 2]);
  HEAPF32[$42 >> 2] = Math_fround(HEAPF32[$41 >> 2]);
  $65 = _i64Add($65 | 0, $66 | 0, 1, 0) | 0;
  $66 = tempRet0;
 } while ($66 >>> 0 < $1 >>> 0 | ($66 | 0) == ($1 | 0) & $65 >>> 0 < $0 >>> 0);
 $74 = _i64Add($45 | 0, $48 | 0, $0 | 0, $1 | 0) | 0;
 $75 = tempRet0;
 $76 = 8;
 HEAP32[$76 >> 2] = $74;
 HEAP32[$76 + 4 >> 2] = $75;
 $80 = $75;
 $81 = $74;
 tempRet0 = $80;
 return $81 | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__lv = 0, $__names = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $$byval_copy2 = sp + 60 | 0;
 $$byval_copy = sp + 56 | 0;
 $__lv = sp + 52 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 44 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 36 | 0;
 $4 = sp + 32 | 0;
 $__names = sp + 8 | 0;
 $5 = sp;
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  HEAP32[$__lv >> 2] = -1;
  $12 = HEAP32[(HEAP32[$this >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[$1 >> 2] = HEAP32[$__b >> 2];
  HEAP32[$2 >> 2] = HEAP32[$__e >> 2];
  HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$1 + 0 >> 2];
  HEAP32[$$byval_copy2 + 0 >> 2] = HEAP32[$2 + 0 >> 2];
  FUNCTION_TABLE_viiiiiii[$12 & 63]($0, $this, $$byval_copy, $$byval_copy2, $__iob, $__err, $__lv);
  $15 = HEAP32[$0 >> 2] | 0;
  HEAP32[$__b >> 2] = $15;
  $16 = HEAP32[$__lv >> 2] | 0;
  if (!$16) HEAP8[$__v >> 0] = 0; else if (($16 | 0) == 1) HEAP8[$__v >> 0] = 1; else {
   HEAP8[$__v >> 0] = 1;
   HEAP32[$__err >> 2] = 4;
  }
  HEAP32[$agg$result >> 2] = $15;
 } else {
  __ZNKSt3__18ios_base6getlocEv($3, $__iob);
  $17 = __ZNKSt3__16locale9use_facetERNS0_2idE($3, 4896) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$3 >> 2] | 0) | 0;
  __ZNKSt3__18ios_base6getlocEv($4, $__iob);
  $19 = __ZNKSt3__16locale9use_facetERNS0_2idE($4, 5056) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$4 >> 2] | 0) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$19 >> 2] | 0) + 24 >> 2] & 63]($__names, $19);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$19 >> 2] | 0) + 28 >> 2] & 63]($__names + 12 | 0, $19);
  HEAP32[$5 >> 2] = HEAP32[$__e >> 2];
  HEAP32[$$byval_copy2 + 0 >> 2] = HEAP32[$5 + 0 >> 2];
  HEAP8[$__v >> 0] = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy2, $__names, $__names + 24 | 0, $17, $__err, 1) | 0) == ($__names | 0) & 1;
  HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__names + 12 | 0);
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__names);
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $12 = 0, $15 = 0, $16 = 0, $17 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__lv = 0, $__names = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $$byval_copy2 = sp + 60 | 0;
 $$byval_copy = sp + 56 | 0;
 $__lv = sp + 52 | 0;
 $0 = sp + 48 | 0;
 $1 = sp + 44 | 0;
 $2 = sp + 40 | 0;
 $3 = sp + 36 | 0;
 $4 = sp + 32 | 0;
 $__names = sp + 8 | 0;
 $5 = sp;
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  HEAP32[$__lv >> 2] = -1;
  $12 = HEAP32[(HEAP32[$this >> 2] | 0) + 16 >> 2] | 0;
  HEAP32[$1 >> 2] = HEAP32[$__b >> 2];
  HEAP32[$2 >> 2] = HEAP32[$__e >> 2];
  HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$1 + 0 >> 2];
  HEAP32[$$byval_copy2 + 0 >> 2] = HEAP32[$2 + 0 >> 2];
  FUNCTION_TABLE_viiiiiii[$12 & 63]($0, $this, $$byval_copy, $$byval_copy2, $__iob, $__err, $__lv);
  $15 = HEAP32[$0 >> 2] | 0;
  HEAP32[$__b >> 2] = $15;
  $16 = HEAP32[$__lv >> 2] | 0;
  if (!$16) HEAP8[$__v >> 0] = 0; else if (($16 | 0) == 1) HEAP8[$__v >> 0] = 1; else {
   HEAP8[$__v >> 0] = 1;
   HEAP32[$__err >> 2] = 4;
  }
  HEAP32[$agg$result >> 2] = $15;
 } else {
  __ZNKSt3__18ios_base6getlocEv($3, $__iob);
  $17 = __ZNKSt3__16locale9use_facetERNS0_2idE($3, 4904) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$3 >> 2] | 0) | 0;
  __ZNKSt3__18ios_base6getlocEv($4, $__iob);
  $19 = __ZNKSt3__16locale9use_facetERNS0_2idE($4, 5048) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$4 >> 2] | 0) | 0;
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$19 >> 2] | 0) + 24 >> 2] & 63]($__names, $19);
  FUNCTION_TABLE_vii[HEAP32[(HEAP32[$19 >> 2] | 0) + 28 >> 2] & 63]($__names + 12 | 0, $19);
  HEAP32[$5 >> 2] = HEAP32[$__e >> 2];
  HEAP32[$$byval_copy2 + 0 >> 2] = HEAP32[$5 + 0 >> 2];
  HEAP8[$__v >> 0] = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy2, $__names, $__names + 24 | 0, $17, $__err, 1) | 0) == ($__names | 0) & 1;
  HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__names + 12 | 0);
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__names);
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct, $__base, $__a, $__a_end, $__dc, $__thousands_sep, $__grouping, $__g, $__g_end, $__atoms) {
 $__ct = $__ct | 0;
 $__base = $__base | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__dc = $__dc | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__atoms = $__atoms | 0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $34 = 0, $4 = 0, $46 = 0, $49 = 0, label = 0;
 $0 = HEAP32[$__a_end >> 2] | 0;
 $1 = ($0 | 0) == ($__a | 0);
 do if ($1) {
  $4 = (HEAP8[$__atoms + 24 >> 0] | 0) == $__ct << 24 >> 24;
  if (!$4) if ((HEAP8[$__atoms + 25 >> 0] | 0) != $__ct << 24 >> 24) {
   label = 5;
   break;
  }
  HEAP32[$__a_end >> 2] = $__a + 1;
  HEAP8[$__a >> 0] = $4 ? 43 : 45;
  HEAP32[$__dc >> 2] = 0;
  $$0 = 0;
 } else label = 5; while (0);
 do if ((label | 0) == 5) {
  $10 = HEAP8[$__grouping >> 0] | 0;
  if (!($10 & 1)) $17 = ($10 & 255) >>> 1; else $17 = HEAP32[$__grouping + 4 >> 2] | 0;
  if (($17 | 0) != 0 ? $__ct << 24 >> 24 == $__thousands_sep << 24 >> 24 : 0) {
   $20 = HEAP32[$__g_end >> 2] | 0;
   if (($20 - $__g | 0) >= 160) {
    $$0 = 0;
    break;
   }
   $25 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $20 + 4;
   HEAP32[$20 >> 2] = $25;
   HEAP32[$__dc >> 2] = 0;
   $$0 = 0;
   break;
  }
  $27 = $__atoms + 26 | 0;
  $$01$i = $__atoms;
  while (1) {
   if ((HEAP8[$$01$i >> 0] | 0) == $__ct << 24 >> 24) {
    $$0$lcssa$i = $$01$i;
    break;
   }
   $$01$i = $$01$i + 1 | 0;
   if (($$01$i | 0) == ($27 | 0)) {
    $$0$lcssa$i = $27;
    break;
   }
  }
  $34 = $$0$lcssa$i - $__atoms | 0;
  if (($34 | 0) > 23) $$0 = -1; else {
   if (($__base | 0) == 10 | ($__base | 0) == 8) {
    if (($34 | 0) >= ($__base | 0)) {
     $$0 = -1;
     break;
    }
   } else if (($__base | 0) == 16) if (($34 | 0) >= 22) {
    if ($1) {
     $$0 = -1;
     break;
    }
    if (($0 - $__a | 0) >= 3) {
     $$0 = -1;
     break;
    }
    if ((HEAP8[$0 + -1 >> 0] | 0) != 48) {
     $$0 = -1;
     break;
    }
    HEAP32[$__dc >> 2] = 0;
    $46 = HEAP8[3416 + $34 >> 0] | 0;
    HEAP32[$__a_end >> 2] = $0 + 1;
    HEAP8[$0 >> 0] = $46;
    $$0 = 0;
    break;
   }
   $49 = HEAP8[3416 + $34 >> 0] | 0;
   HEAP32[$__a_end >> 2] = $0 + 1;
   HEAP8[$0 >> 0] = $49;
   HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
   $$0 = 0;
  }
 } while (0);
 return $$0 | 0;
}

function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct, $__base, $__a, $__a_end, $__dc, $__thousands_sep, $__grouping, $__g, $__g_end, $__atoms) {
 $__ct = $__ct | 0;
 $__base = $__base | 0;
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__dc = $__dc | 0;
 $__thousands_sep = $__thousands_sep | 0;
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__atoms = $__atoms | 0;
 var $$0 = 0, $$0$lcssa$i = 0, $$01$i = 0, $0 = 0, $1 = 0, $10 = 0, $17 = 0, $20 = 0, $25 = 0, $27 = 0, $34 = 0, $35 = 0, $4 = 0, $47 = 0, $50 = 0, label = 0;
 $0 = HEAP32[$__a_end >> 2] | 0;
 $1 = ($0 | 0) == ($__a | 0);
 do if ($1) {
  $4 = (HEAP32[$__atoms + 96 >> 2] | 0) == ($__ct | 0);
  if (!$4) if ((HEAP32[$__atoms + 100 >> 2] | 0) != ($__ct | 0)) {
   label = 5;
   break;
  }
  HEAP32[$__a_end >> 2] = $__a + 1;
  HEAP8[$__a >> 0] = $4 ? 43 : 45;
  HEAP32[$__dc >> 2] = 0;
  $$0 = 0;
 } else label = 5; while (0);
 do if ((label | 0) == 5) {
  $10 = HEAP8[$__grouping >> 0] | 0;
  if (!($10 & 1)) $17 = ($10 & 255) >>> 1; else $17 = HEAP32[$__grouping + 4 >> 2] | 0;
  if (($17 | 0) != 0 & ($__ct | 0) == ($__thousands_sep | 0)) {
   $20 = HEAP32[$__g_end >> 2] | 0;
   if (($20 - $__g | 0) >= 160) {
    $$0 = 0;
    break;
   }
   $25 = HEAP32[$__dc >> 2] | 0;
   HEAP32[$__g_end >> 2] = $20 + 4;
   HEAP32[$20 >> 2] = $25;
   HEAP32[$__dc >> 2] = 0;
   $$0 = 0;
   break;
  }
  $27 = $__atoms + 104 | 0;
  $$01$i = $__atoms;
  while (1) {
   if ((HEAP32[$$01$i >> 2] | 0) == ($__ct | 0)) {
    $$0$lcssa$i = $$01$i;
    break;
   }
   $$01$i = $$01$i + 4 | 0;
   if (($$01$i | 0) == ($27 | 0)) {
    $$0$lcssa$i = $27;
    break;
   }
  }
  $34 = $$0$lcssa$i - $__atoms | 0;
  $35 = $34 >> 2;
  if (($34 | 0) > 92) $$0 = -1; else {
   if (($__base | 0) == 10 | ($__base | 0) == 8) {
    if (($35 | 0) >= ($__base | 0)) {
     $$0 = -1;
     break;
    }
   } else if (($__base | 0) == 16) if (($34 | 0) >= 88) {
    if ($1) {
     $$0 = -1;
     break;
    }
    if (($0 - $__a | 0) >= 3) {
     $$0 = -1;
     break;
    }
    if ((HEAP8[$0 + -1 >> 0] | 0) != 48) {
     $$0 = -1;
     break;
    }
    HEAP32[$__dc >> 2] = 0;
    $47 = HEAP8[3416 + $35 >> 0] | 0;
    HEAP32[$__a_end >> 2] = $0 + 1;
    HEAP8[$0 >> 0] = $47;
    $$0 = 0;
    break;
   }
   $50 = HEAP8[3416 + $35 >> 0] | 0;
   HEAP32[$__a_end >> 2] = $0 + 1;
   HEAP8[$0 >> 0] = $50;
   HEAP32[$__dc >> 2] = (HEAP32[$__dc >> 2] | 0) + 1;
   $$0 = 0;
  }
 } while (0);
 return $$0 | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$0$i$i = 0, $$byval_copy = 0, $$ph = 0, $$pre$phi4Z2D = 0, $$pre$phiZ2D = 0, $0 = 0, $1 = 0, $11 = 0, $13 = 0, $18 = 0, $21 = 0, $23 = 0, $25 = 0, $32 = 0, $33 = 0, $34 = 0, $36 = 0, $37 = 0, $39 = 0, $40 = 0, $8 = 0, $__nm = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp + 20 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 12 | 0;
 $__nm = sp;
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  $8 = HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[$0 >> 2] = HEAP32[$__s >> 2];
  HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
  FUNCTION_TABLE_viiiiii[$8 & 15]($agg$result, $this, $$byval_copy, $__iob, $__fl, $__v & 1);
 } else {
  __ZNKSt3__18ios_base6getlocEv($1, $__iob);
  $11 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 5056) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$1 >> 2] | 0) | 0;
  $13 = HEAP32[$11 >> 2] | 0;
  if ($__v) FUNCTION_TABLE_vii[HEAP32[$13 + 24 >> 2] & 63]($__nm, $11); else FUNCTION_TABLE_vii[HEAP32[$13 + 28 >> 2] & 63]($__nm, $11);
  $18 = HEAP8[$__nm >> 0] | 0;
  if (!($18 & 1)) {
   $23 = $__nm + 4 | 0;
   $$ph = $23;
   $$pre$phi4Z2D = $__nm + 8 | 0;
   $$pre$phiZ2D = $23;
  } else {
   $21 = $__nm + 8 | 0;
   $$ph = HEAP32[$21 >> 2] | 0;
   $$pre$phi4Z2D = $21;
   $$pre$phiZ2D = $__nm + 4 | 0;
  }
  $25 = $18;
  $34 = $$ph;
  while (1) {
   if (!($25 & 1)) {
    $32 = $$pre$phiZ2D;
    $33 = ($25 & 255) >>> 1;
   } else {
    $32 = HEAP32[$$pre$phi4Z2D >> 2] | 0;
    $33 = HEAP32[$$pre$phiZ2D >> 2] | 0;
   }
   if (($34 | 0) == ($32 + ($33 << 2) | 0)) break;
   $36 = HEAP32[$34 >> 2] | 0;
   $37 = HEAP32[$__s >> 2] | 0;
   if ($37) {
    $39 = $37 + 24 | 0;
    $40 = HEAP32[$39 >> 2] | 0;
    if (($40 | 0) == (HEAP32[$37 + 28 >> 2] | 0)) $$0$i$i = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$37 >> 2] | 0) + 52 >> 2] & 31]($37, $36) | 0; else {
     HEAP32[$39 >> 2] = $40 + 4;
     HEAP32[$40 >> 2] = $36;
     $$0$i$i = $36;
    }
    if (($$0$i$i | 0) == -1) HEAP32[$__s >> 2] = 0;
   }
   $25 = HEAP8[$__nm >> 0] | 0;
   $34 = $34 + 4 | 0;
  }
  HEAP32[$agg$result >> 2] = HEAP32[$__s >> 2];
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__nm);
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$ph = 0, $$pre$phi4Z2D = 0, $$pre$phi6Z2D = 0, $0 = 0, $1 = 0, $11 = 0, $13 = 0, $18 = 0, $21 = 0, $23 = 0, $24 = 0, $26 = 0, $33 = 0, $34 = 0, $35 = 0, $37 = 0, $38 = 0, $40 = 0, $41 = 0, $8 = 0, $__nm = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $$byval_copy = sp + 20 | 0;
 $0 = sp + 16 | 0;
 $1 = sp + 12 | 0;
 $__nm = sp;
 if (!(HEAP32[$__iob + 4 >> 2] & 1)) {
  $8 = HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] | 0;
  HEAP32[$0 >> 2] = HEAP32[$__s >> 2];
  HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
  FUNCTION_TABLE_viiiiii[$8 & 15]($agg$result, $this, $$byval_copy, $__iob, $__fl, $__v & 1);
 } else {
  __ZNKSt3__18ios_base6getlocEv($1, $__iob);
  $11 = __ZNKSt3__16locale9use_facetERNS0_2idE($1, 5048) | 0;
  __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$1 >> 2] | 0) | 0;
  $13 = HEAP32[$11 >> 2] | 0;
  if ($__v) FUNCTION_TABLE_vii[HEAP32[$13 + 24 >> 2] & 63]($__nm, $11); else FUNCTION_TABLE_vii[HEAP32[$13 + 28 >> 2] & 63]($__nm, $11);
  $18 = HEAP8[$__nm >> 0] | 0;
  if (!($18 & 1)) {
   $23 = $__nm + 1 | 0;
   $$ph = $23;
   $$pre$phi4Z2D = $23;
   $$pre$phi6Z2D = $__nm + 8 | 0;
  } else {
   $21 = $__nm + 8 | 0;
   $$ph = HEAP32[$21 >> 2] | 0;
   $$pre$phi4Z2D = $__nm + 1 | 0;
   $$pre$phi6Z2D = $21;
  }
  $24 = $__nm + 4 | 0;
  $26 = $18;
  $35 = $$ph;
  while (1) {
   if (!($26 & 1)) {
    $33 = $$pre$phi4Z2D;
    $34 = ($26 & 255) >>> 1;
   } else {
    $33 = HEAP32[$$pre$phi6Z2D >> 2] | 0;
    $34 = HEAP32[$24 >> 2] | 0;
   }
   if (($35 | 0) == ($33 + $34 | 0)) break;
   $37 = HEAP8[$35 >> 0] | 0;
   $38 = HEAP32[$__s >> 2] | 0;
   do if ($38) {
    $40 = $38 + 24 | 0;
    $41 = HEAP32[$40 >> 2] | 0;
    if (($41 | 0) != (HEAP32[$38 + 28 >> 2] | 0)) {
     HEAP32[$40 >> 2] = $41 + 1;
     HEAP8[$41 >> 0] = $37;
     break;
    }
    if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$38 >> 2] | 0) + 52 >> 2] & 31]($38, $37 & 255) | 0) == -1) HEAP32[$__s >> 2] = 0;
   } while (0);
   $26 = HEAP8[$__nm >> 0] | 0;
   $35 = $35 + 1 | 0;
  }
  HEAP32[$agg$result >> 2] = HEAP32[$__s >> 2];
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__nm);
 }
 STACKTOP = sp;
 return;
}

function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping, $__g, $__g_end, $__err) {
 $__grouping = $__grouping | 0;
 $__g = $__g | 0;
 $__g_end = $__g_end | 0;
 $__err = $__err | 0;
 var $$012$i$i = 0, $$lcssa6 = 0, $0 = 0, $10 = 0, $12 = 0, $14 = 0, $16 = 0, $17 = 0, $17$phi = 0, $20 = 0, $29 = 0, $31 = 0, $32 = 0, $35 = 0, $36 = 0, $38 = 0, $47 = 0, $7 = 0, $__ig$011 = 0, $__r$012 = 0, $or$cond2 = 0, $or$cond2$lcssa = 0, $or$cond210 = 0, $or$cond213 = 0;
 $0 = HEAP8[$__grouping >> 0] | 0;
 if (!($0 & 1)) $7 = ($0 & 255) >>> 1; else $7 = HEAP32[$__grouping + 4 >> 2] | 0;
 L5 : do if ($7) {
  if (($__g | 0) == ($__g_end | 0)) $20 = $0; else {
   $10 = $__g_end + -4 | 0;
   if ($10 >>> 0 > $__g >>> 0) {
    $$012$i$i = $__g;
    $14 = $10;
    $17 = $__g_end;
    while (1) {
     $12 = HEAP32[$$012$i$i >> 2] | 0;
     HEAP32[$$012$i$i >> 2] = HEAP32[$14 >> 2];
     HEAP32[$14 >> 2] = $12;
     $$012$i$i = $$012$i$i + 4 | 0;
     $16 = $17 + -8 | 0;
     if ($$012$i$i >>> 0 >= $16 >>> 0) break; else {
      $17$phi = $14;
      $14 = $16;
      $17 = $17$phi;
     }
    }
    $20 = HEAP8[$__grouping >> 0] | 0;
   } else $20 = $0;
  }
  if (!($20 & 1)) {
   $32 = $__grouping + 1 | 0;
   $35 = ($20 & 255) >>> 1;
  } else {
   $32 = HEAP32[$__grouping + 8 >> 2] | 0;
   $35 = HEAP32[$__grouping + 4 >> 2] | 0;
  }
  $29 = $__g_end + -4 | 0;
  $31 = HEAP8[$32 >> 0] | 0;
  $or$cond210 = $31 << 24 >> 24 < 1 | $31 << 24 >> 24 == 127;
  L17 : do if ($29 >>> 0 > $__g >>> 0) {
   $36 = $32 + $35 | 0;
   $38 = $31;
   $__ig$011 = $32;
   $__r$012 = $__g;
   $or$cond213 = $or$cond210;
   while (1) {
    if (!$or$cond213) if (($38 << 24 >> 24 | 0) != (HEAP32[$__r$012 >> 2] | 0)) break;
    $__ig$011 = ($36 - $__ig$011 | 0) > 1 ? $__ig$011 + 1 | 0 : $__ig$011;
    $__r$012 = $__r$012 + 4 | 0;
    $47 = HEAP8[$__ig$011 >> 0] | 0;
    $or$cond2 = $47 << 24 >> 24 < 1 | $47 << 24 >> 24 == 127;
    if ($__r$012 >>> 0 >= $29 >>> 0) {
     $$lcssa6 = $47;
     $or$cond2$lcssa = $or$cond2;
     break L17;
    } else {
     $38 = $47;
     $or$cond213 = $or$cond2;
    }
   }
   HEAP32[$__err >> 2] = 4;
   break L5;
  } else {
   $$lcssa6 = $31;
   $or$cond2$lcssa = $or$cond210;
  } while (0);
  if (!$or$cond2$lcssa) if (((HEAP32[$29 >> 2] | 0) + -1 | 0) >>> 0 >= $$lcssa6 << 24 >> 24 >>> 0) HEAP32[$__err >> 2] = 4;
 } while (0);
 return;
}

function _memchr($src, $c, $n) {
 $src = $src | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$0$lcssa = 0, $$0$lcssa44 = 0, $$019 = 0, $$1$lcssa = 0, $$110 = 0, $$24 = 0, $$3 = 0, $$lcssa = 0, $0 = 0, $13 = 0, $15 = 0, $17 = 0, $20 = 0, $26 = 0, $27 = 0, $32 = 0, $4 = 0, $5 = 0, $8 = 0, $9 = 0, $s$0$lcssa = 0, $s$0$lcssa43 = 0, $s$020 = 0, $s$15 = 0, $s$2 = 0, $w$0$lcssa = 0, $w$011 = 0, label = 0;
 $0 = $c & 255;
 $4 = ($n | 0) != 0;
 L1 : do if (($src & 3 | 0) != 0 & $4) {
  $5 = $c & 255;
  $$019 = $n;
  $s$020 = $src;
  while (1) {
   if ((HEAP8[$s$020 >> 0] | 0) == $5 << 24 >> 24) {
    $$0$lcssa44 = $$019;
    $s$0$lcssa43 = $s$020;
    label = 6;
    break L1;
   }
   $8 = $s$020 + 1 | 0;
   $9 = $$019 + -1 | 0;
   $13 = ($9 | 0) != 0;
   if (($8 & 3 | 0) != 0 & $13) {
    $$019 = $9;
    $s$020 = $8;
   } else {
    $$0$lcssa = $9;
    $$lcssa = $13;
    $s$0$lcssa = $8;
    label = 5;
    break;
   }
  }
 } else {
  $$0$lcssa = $n;
  $$lcssa = $4;
  $s$0$lcssa = $src;
  label = 5;
 } while (0);
 if ((label | 0) == 5) if ($$lcssa) {
  $$0$lcssa44 = $$0$lcssa;
  $s$0$lcssa43 = $s$0$lcssa;
  label = 6;
 } else {
  $$3 = 0;
  $s$2 = $s$0$lcssa;
 }
 L8 : do if ((label | 0) == 6) {
  $15 = $c & 255;
  if ((HEAP8[$s$0$lcssa43 >> 0] | 0) == $15 << 24 >> 24) {
   $$3 = $$0$lcssa44;
   $s$2 = $s$0$lcssa43;
  } else {
   $17 = Math_imul($0, 16843009) | 0;
   L11 : do if ($$0$lcssa44 >>> 0 > 3) {
    $$110 = $$0$lcssa44;
    $w$011 = $s$0$lcssa43;
    while (1) {
     $20 = HEAP32[$w$011 >> 2] ^ $17;
     if (($20 & -2139062144 ^ -2139062144) & $20 + -16843009) {
      $$1$lcssa = $$110;
      $w$0$lcssa = $w$011;
      break L11;
     }
     $26 = $w$011 + 4 | 0;
     $27 = $$110 + -4 | 0;
     if ($27 >>> 0 > 3) {
      $$110 = $27;
      $w$011 = $26;
     } else {
      $$1$lcssa = $27;
      $w$0$lcssa = $26;
      break;
     }
    }
   } else {
    $$1$lcssa = $$0$lcssa44;
    $w$0$lcssa = $s$0$lcssa43;
   } while (0);
   if (!$$1$lcssa) {
    $$3 = 0;
    $s$2 = $w$0$lcssa;
   } else {
    $$24 = $$1$lcssa;
    $s$15 = $w$0$lcssa;
    while (1) {
     if ((HEAP8[$s$15 >> 0] | 0) == $15 << 24 >> 24) {
      $$3 = $$24;
      $s$2 = $s$15;
      break L8;
     }
     $32 = $s$15 + 1 | 0;
     $$24 = $$24 + -1 | 0;
     if (!$$24) {
      $$3 = 0;
      $s$2 = $32;
      break;
     } else $s$15 = $32;
    }
   }
  }
 } while (0);
 return (($$3 | 0) != 0 ? $s$2 : 0) | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $14 = 0, $20 = 0, $23 = 0, $24 = 0, $26 = 0, $33 = 0, $44 = 0, $6 = 0, $is_dst_type_derived_from_static_type$0$off01 = 0, label = 0;
 L1 : do if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
   $6 = $info + 28 | 0;
   if ((HEAP32[$6 >> 2] | 0) != 1) HEAP32[$6 >> 2] = $path_below;
  }
 } else {
  if (($this | 0) != (HEAP32[$info >> 2] | 0)) {
   $44 = HEAP32[$this + 8 >> 2] | 0;
   FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$44 >> 2] | 0) + 24 >> 2] & 3]($44, $info, $current_ptr, $path_below, $use_strcmp);
   break;
  }
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $14 = $info + 20 | 0;
   if ((HEAP32[$14 >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$info + 32 >> 2] = $path_below;
    $20 = $info + 44 | 0;
    if ((HEAP32[$20 >> 2] | 0) == 4) break;
    $23 = $info + 52 | 0;
    HEAP8[$23 >> 0] = 0;
    $24 = $info + 53 | 0;
    HEAP8[$24 >> 0] = 0;
    $26 = HEAP32[$this + 8 >> 2] | 0;
    FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$26 >> 2] | 0) + 20 >> 2] & 15]($26, $info, $current_ptr, $current_ptr, 1, $use_strcmp);
    if (!(HEAP8[$24 >> 0] | 0)) {
     $is_dst_type_derived_from_static_type$0$off01 = 0;
     label = 13;
    } else if (!(HEAP8[$23 >> 0] | 0)) {
     $is_dst_type_derived_from_static_type$0$off01 = 1;
     label = 13;
    }
    do if ((label | 0) == 13) {
     HEAP32[$14 >> 2] = $current_ptr;
     $33 = $info + 40 | 0;
     HEAP32[$33 >> 2] = (HEAP32[$33 >> 2] | 0) + 1;
     if ((HEAP32[$info + 36 >> 2] | 0) == 1) if ((HEAP32[$info + 24 >> 2] | 0) == 2) {
      HEAP8[$info + 54 >> 0] = 1;
      if ($is_dst_type_derived_from_static_type$0$off01) break;
     } else label = 16; else label = 16;
     if ((label | 0) == 16) if ($is_dst_type_derived_from_static_type$0$off01) break;
     HEAP32[$20 >> 2] = 4;
     break L1;
    } while (0);
    HEAP32[$20 >> 2] = 3;
    break;
   }
  }
  if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZN15MatrixTranspose13simdTransposeEy($0, $1) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $21 = 0, $24 = 0, $25 = SIMD_float32x4(0, 0, 0, 0), $26 = SIMD_float32x4(0, 0, 0, 0), $27 = SIMD_float32x4(0, 0, 0, 0), $28 = SIMD_float32x4(0, 0, 0, 0), $29 = SIMD_float32x4(0, 0, 0, 0), $30 = SIMD_float32x4(0, 0, 0, 0), $31 = SIMD_float32x4(0, 0, 0, 0), $32 = SIMD_float32x4(0, 0, 0, 0), $33 = SIMD_float32x4(0, 0, 0, 0), $34 = SIMD_float32x4(0, 0, 0, 0), $35 = SIMD_float32x4(0, 0, 0, 0), $36 = SIMD_float32x4(0, 0, 0, 0), $41 = 0, $42 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $56 = 0, $57 = 0;
 if (($0 | 0) == 0 & ($1 | 0) == 0) {
  $5 = 8;
  $56 = HEAP32[$5 + 4 >> 2] | 0;
  $57 = HEAP32[$5 >> 2] | 0;
  tempRet0 = $56;
  return $57 | 0;
 }
 $11 = HEAP32[6] | 0;
 $12 = $11 + 16 | 0;
 $13 = $11 + 32 | 0;
 $14 = $11 + 48 | 0;
 $15 = HEAP32[10] | 0;
 $16 = $15 + 16 | 0;
 $17 = $15 + 32 | 0;
 $18 = $15 + 48 | 0;
 $19 = 8;
 $21 = HEAP32[$19 >> 2] | 0;
 $24 = HEAP32[$19 + 4 >> 2] | 0;
 $41 = 0;
 $42 = 0;
 do {
  $25 = SIMD_float32x4_load(HEAPU8, $11);
  $26 = SIMD_float32x4_load(HEAPU8, $12);
  $27 = SIMD_float32x4_load(HEAPU8, $13);
  $28 = SIMD_float32x4_load(HEAPU8, $14);
  $29 = SIMD_float32x4_shuffle($25, $26, 0, 1, 4, 5);
  $30 = SIMD_float32x4_shuffle($27, $28, 0, 1, 4, 5);
  $31 = SIMD_float32x4_shuffle($29, $30, 0, 2, 4, 6);
  $32 = SIMD_float32x4_shuffle($29, $30, 1, 3, 5, 7);
  $33 = SIMD_float32x4_shuffle($25, $26, 2, 3, 6, 7);
  $34 = SIMD_float32x4_shuffle($27, $28, 2, 3, 6, 7);
  $35 = SIMD_float32x4_shuffle($33, $34, 0, 2, 4, 6);
  $36 = SIMD_float32x4_shuffle($33, $34, 1, 3, 5, 7);
  SIMD_float32x4_store(HEAPU8, $15, $31);
  SIMD_float32x4_store(HEAPU8, $16, $32);
  SIMD_float32x4_store(HEAPU8, $17, $35);
  SIMD_float32x4_store(HEAPU8, $18, $36);
  $41 = _i64Add($41 | 0, $42 | 0, 1, 0) | 0;
  $42 = tempRet0;
 } while ($42 >>> 0 < $1 >>> 0 | ($42 | 0) == ($1 | 0) & $41 >>> 0 < $0 >>> 0);
 $50 = _i64Add($21 | 0, $24 | 0, $0 | 0, $1 | 0) | 0;
 $51 = tempRet0;
 $52 = 8;
 HEAP32[$52 >> 2] = $50;
 HEAP32[$52 + 4 >> 2] = $51;
 $56 = $51;
 $57 = $50;
 tempRet0 = $56;
 return $57 | 0;
}

function _mbrtowc($wc, $src, $n, $st) {
 $wc = $wc | 0;
 $src = $src | 0;
 $n = $n | 0;
 $st = $st | 0;
 var $$0 = 0, $$02 = 0, $$1 = 0, $$lcssa = 0, $$lcssa16 = 0, $$st = 0, $0 = 0, $11 = 0, $14 = 0, $2 = 0, $21 = 0, $23 = 0, $32 = 0, $8 = 0, $9 = 0, $c$0 = 0, $c$1 = 0, $c$2 = 0, $s$0 = 0, $s$1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $wc;
 $$st = ($st | 0) == 0 ? 12776 : $st;
 $2 = HEAP32[$$st >> 2] | 0;
 L1 : do if (!$src) {
  if (!$2) {
   $$0 = 0;
   STACKTOP = sp;
   return $$0 | 0;
  }
 } else {
  if (!$wc) {
   HEAP32[$0 >> 2] = $0;
   $11 = $0;
  } else $11 = $wc;
  if (!$n) {
   $$0 = -2;
   STACKTOP = sp;
   return $$0 | 0;
  }
  do if (!$2) {
   $8 = HEAP8[$src >> 0] | 0;
   $9 = $8 & 255;
   if ($8 << 24 >> 24 > -1) {
    HEAP32[$11 >> 2] = $9;
    $$0 = $8 << 24 >> 24 != 0 & 1;
    STACKTOP = sp;
    return $$0 | 0;
   } else {
    $14 = $9 + -194 | 0;
    if ($14 >>> 0 > 50) break L1;
    $$02 = $n + -1 | 0;
    $c$0 = HEAP32[12560 + ($14 << 2) >> 2] | 0;
    $s$0 = $src + 1 | 0;
    break;
   }
  } else {
   $$02 = $n;
   $c$0 = $2;
   $s$0 = $src;
  } while (0);
  L17 : do if (!$$02) $c$2 = $c$0; else {
   $21 = HEAP8[$s$0 >> 0] | 0;
   $23 = ($21 & 255) >>> 3;
   if (($23 + -16 | $23 + ($c$0 >> 26)) >>> 0 > 7) break L1; else {
    $$1 = $$02;
    $32 = $21;
    $c$1 = $c$0;
    $s$1 = $s$0;
   }
   while (1) {
    $s$1 = $s$1 + 1 | 0;
    $c$1 = ($32 & 255) + -128 | $c$1 << 6;
    $$1 = $$1 + -1 | 0;
    if (($c$1 | 0) >= 0) {
     $$lcssa = $c$1;
     $$lcssa16 = $$1;
     break;
    }
    if (!$$1) {
     $c$2 = $c$1;
     break L17;
    }
    $32 = HEAP8[$s$1 >> 0] | 0;
    if (($32 & -64) << 24 >> 24 != -128) break L1;
   }
   HEAP32[$$st >> 2] = 0;
   HEAP32[$11 >> 2] = $$lcssa;
   $$0 = $n - $$lcssa16 | 0;
   STACKTOP = sp;
   return $$0 | 0;
  } while (0);
  HEAP32[$$st >> 2] = $c$2;
  $$0 = -2;
  STACKTOP = sp;
  return $$0 | 0;
 } while (0);
 HEAP32[$$st >> 2] = 0;
 HEAP32[(___errno_location() | 0) >> 2] = 84;
 $$0 = -1;
 STACKTOP = sp;
 return $$0 | 0;
}

function ___cxx_global_array_dtor69($0) {
 $0 = $0 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11476 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11464 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11452 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11440 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11428 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11416 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11404 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11392 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11380 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11368 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11356 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11344 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11332 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11320 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11308 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11296 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11284 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11272 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11260 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11248 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11236 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11224 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11212 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(11200);
 return;
}

function ___cxx_global_array_dtor45($0) {
 $0 = $0 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10636 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10624 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10612 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10600 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10588 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10576 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10564 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10552 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10540 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10528 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10516 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10504 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10492 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10480 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10468 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10456 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10444 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10432 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10420 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10408 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10396 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10384 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10372 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(10360);
 return;
}

function ___cxx_global_array_dtor42($0) {
 $0 = $0 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10324 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10312 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10300 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10288 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10276 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10264 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10252 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10240 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10228 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10216 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10204 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10192 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10180 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10168 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10156 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10144 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10132 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10120 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10108 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10096 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10084 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10072 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10060 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(10048);
 return;
}

function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result, $this, $__c, $__set, $__msgid, $__dflt) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__c = $__c | 0;
 $__set = $__set | 0;
 $__msgid = $__msgid | 0;
 $__dflt = $__dflt | 0;
 var $$01$i = 0, $$01$i5 = 0, $0 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $25 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $37 = 0, $4 = 0, $__ndflt = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__ndflt = sp;
 HEAP32[$__ndflt + 0 >> 2] = 0;
 HEAP32[$__ndflt + 4 >> 2] = 0;
 HEAP32[$__ndflt + 8 >> 2] = 0;
 $0 = HEAP8[$__dflt >> 0] | 0;
 if (!($0 & 1)) {
  $12 = $__dflt + 1 | 0;
  $13 = ($0 & 255) >>> 1;
  $14 = $__dflt + 1 | 0;
 } else {
  $4 = HEAP32[$__dflt + 8 >> 2] | 0;
  $12 = $4;
  $13 = HEAP32[$__dflt + 4 >> 2] | 0;
  $14 = $4;
 }
 $11 = $12 + $13 | 0;
 if ($14 >>> 0 < $11 >>> 0) {
  $$01$i5 = $14;
  do {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($__ndflt, HEAP8[$$01$i5 >> 0] | 0);
   $$01$i5 = $$01$i5 + 1 | 0;
  } while (($$01$i5 | 0) != ($11 | 0));
  $25 = ($__c | 0) == -1 ? -1 : $__c << 1;
  if (!(HEAP8[$__ndflt >> 0] & 1)) {
   $37 = $25;
   label = 9;
  } else {
   $29 = $25;
   $30 = HEAP32[$__ndflt + 8 >> 2] | 0;
  }
 } else {
  $37 = ($__c | 0) == -1 ? -1 : $__c << 1;
  label = 9;
 }
 if ((label | 0) == 9) {
  $29 = $37;
  $30 = $__ndflt + 1 | 0;
 }
 $31 = _catgets($29 | 0, $__set | 0, $__msgid | 0, $30 | 0) | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 $32 = _strlen($31 | 0) | 0;
 $33 = $31 + $32 | 0;
 if (($32 | 0) > 0) {
  $$01$i = $31;
  do {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($agg$result, HEAP8[$$01$i >> 0] | 0);
   $$01$i = $$01$i + 1 | 0;
  } while (($$01$i | 0) != ($33 | 0));
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__ndflt);
 STACKTOP = sp;
 return;
}

function ___cxx_global_array_dtor($0) {
 $0 = $0 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(9996 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(9984 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(9972 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(9960 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(9948 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(9936 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(9924 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(9912 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(9900 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(9888 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(9876 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(9864 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(9852 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(9840 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(9828 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(9816 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(9804 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(9792 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(9780 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(9768 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(9756 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(9744 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(9732 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(9720);
 return;
}

function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $__s, $__ob, $__op, $__oe, $__iob, $__fl) {
 $agg$result = $agg$result | 0;
 $__s = $__s | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 var $0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $29 = 0, $3 = 0, $32 = 0, $33 = 0, $5 = 0, $6 = 0, $7 = 0, $__ns$0 = 0, $__sp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__sp = sp;
 $0 = HEAP32[$__s >> 2] | 0;
 L1 : do if (!$0) HEAP32[$agg$result >> 2] = 0; else {
  $2 = $__oe;
  $3 = $__ob;
  $5 = $2 - $3 >> 2;
  $6 = $__iob + 12 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  $__ns$0 = ($7 | 0) > ($5 | 0) ? $7 - $5 | 0 : 0;
  $10 = $__op;
  $11 = $10 - $3 | 0;
  $12 = $11 >> 2;
  if (($11 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, $__ob, $12) | 0) != ($12 | 0)) {
   HEAP32[$__s >> 2] = 0;
   HEAP32[$agg$result >> 2] = 0;
   break;
  }
  do if (($__ns$0 | 0) > 0) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($__sp, $__ns$0, $__fl);
   if (!(HEAP8[$__sp >> 0] & 1)) $29 = $__sp + 4 | 0; else $29 = HEAP32[$__sp + 8 >> 2] | 0;
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, $29, $__ns$0) | 0) == ($__ns$0 | 0)) {
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
    break;
   } else {
    HEAP32[$__s >> 2] = 0;
    HEAP32[$agg$result >> 2] = 0;
    __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($__sp);
    break L1;
   }
  } while (0);
  $32 = $2 - $10 | 0;
  $33 = $32 >> 2;
  if (($32 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, $__op, $33) | 0) != ($33 | 0)) {
   HEAP32[$__s >> 2] = 0;
   HEAP32[$agg$result >> 2] = 0;
   break;
  }
  HEAP32[$6 >> 2] = 0;
  HEAP32[$agg$result >> 2] = $0;
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $__s, $__ob, $__op, $__oe, $__iob, $__fl) {
 $agg$result = $agg$result | 0;
 $__s = $__s | 0;
 $__ob = $__ob | 0;
 $__op = $__op | 0;
 $__oe = $__oe | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 var $0 = 0, $10 = 0, $2 = 0, $27 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $__ns$0 = 0, $__sp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__sp = sp;
 $0 = HEAP32[$__s >> 2] | 0;
 L1 : do if (!$0) HEAP32[$agg$result >> 2] = 0; else {
  $2 = $__oe;
  $3 = $__ob;
  $4 = $2 - $3 | 0;
  $5 = $__iob + 12 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  $__ns$0 = ($6 | 0) > ($4 | 0) ? $6 - $4 | 0 : 0;
  $9 = $__op;
  $10 = $9 - $3 | 0;
  if (($10 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, $__ob, $10) | 0) != ($10 | 0)) {
   HEAP32[$__s >> 2] = 0;
   HEAP32[$agg$result >> 2] = 0;
   break;
  }
  do if (($__ns$0 | 0) > 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($__sp, $__ns$0, $__fl);
   if (!(HEAP8[$__sp >> 0] & 1)) $27 = $__sp + 1 | 0; else $27 = HEAP32[$__sp + 8 >> 2] | 0;
   if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, $27, $__ns$0) | 0) == ($__ns$0 | 0)) {
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
    break;
   } else {
    HEAP32[$__s >> 2] = 0;
    HEAP32[$agg$result >> 2] = 0;
    __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($__sp);
    break L1;
   }
  } while (0);
  $30 = $2 - $9 | 0;
  if (($30 | 0) > 0) if ((FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 31]($0, $__op, $30) | 0) != ($30 | 0)) {
   HEAP32[$__s >> 2] = 0;
   HEAP32[$agg$result >> 2] = 0;
   break;
  }
  HEAP32[$5 >> 2] = 0;
  HEAP32[$agg$result >> 2] = $0;
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $5 = 0, $7 = 0, $8 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $$byval_copy = sp;
 $__fmt = sp + 116 | 0;
 $__nar = sp + 104 | 0;
 $__o = sp + 20 | 0;
 $__op = sp + 16 | 0;
 $__oe = sp + 12 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 HEAP8[$__fmt + 0 >> 0] = HEAP8[3696] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[3697] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[3698] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[3699] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[3700] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[3701] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 3600, 0, HEAP32[$__iob + 4 >> 2] | 0);
 $5 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $__v;
 $7 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 12, $5, $__fmt, $$byval_copy) | 0) | 0;
 $8 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $7, $__iob) | 0;
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar, $8, $7, $__o, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 $11 = HEAP32[$__op >> 2] | 0;
 $12 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__o, $11, $12, $__iob, $__fl);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $5 = 0, $7 = 0, $8 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $$byval_copy = sp;
 $__fmt = sp + 116 | 0;
 $__nar = sp + 104 | 0;
 $__o = sp + 20 | 0;
 $__op = sp + 16 | 0;
 $__oe = sp + 12 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 HEAP8[$__fmt + 0 >> 0] = HEAP8[3696] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[3697] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[3698] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[3699] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[3700] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[3701] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 3600, 1, HEAP32[$__iob + 4 >> 2] | 0);
 $5 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $__v;
 $7 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 12, $5, $__fmt, $$byval_copy) | 0) | 0;
 $8 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $7, $__iob) | 0;
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar, $8, $7, $__o, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 $11 = HEAP32[$__op >> 2] | 0;
 $12 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__o, $11, $12, $__iob, $__fl);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $5 = 0, $7 = 0, $8 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $$byval_copy = sp;
 $__fmt = sp + 56 | 0;
 $__nar = sp + 44 | 0;
 $__o = sp + 20 | 0;
 $__op = sp + 16 | 0;
 $__oe = sp + 12 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 HEAP8[$__fmt + 0 >> 0] = HEAP8[3696] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[3697] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[3698] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[3699] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[3700] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[3701] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 3600, 0, HEAP32[$__iob + 4 >> 2] | 0);
 $5 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $__v;
 $7 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 12, $5, $__fmt, $$byval_copy) | 0) | 0;
 $8 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $7, $__iob) | 0;
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar, $8, $7, $__o, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 $11 = HEAP32[$__op >> 2] | 0;
 $12 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__o, $11, $12, $__iob, $__fl);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $12 = 0, $5 = 0, $7 = 0, $8 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $$byval_copy = sp;
 $__fmt = sp + 56 | 0;
 $__nar = sp + 44 | 0;
 $__o = sp + 20 | 0;
 $__op = sp + 16 | 0;
 $__oe = sp + 12 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 HEAP8[$__fmt + 0 >> 0] = HEAP8[3696] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[3697] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[3698] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[3699] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[3700] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[3701] | 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 3600, 1, HEAP32[$__iob + 4 >> 2] | 0);
 $5 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $__v;
 $7 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 12, $5, $__fmt, $$byval_copy) | 0) | 0;
 $8 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $7, $__iob) | 0;
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar, $8, $7, $__o, $__op, $__oe, $0);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 $11 = HEAP32[$__op >> 2] | 0;
 $12 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__o, $11, $12, $__iob, $__fl);
 STACKTOP = sp;
 return;
}

function ___dynamic_cast($static_ptr, $static_type, $dst_type, $src2dst_offset) {
 $static_ptr = $static_ptr | 0;
 $static_type = $static_type | 0;
 $dst_type = $dst_type | 0;
 $src2dst_offset = $src2dst_offset | 0;
 var $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $27 = 0, $4 = 0, $6 = 0, $dst_ptr$0 = 0, $info = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $info = sp;
 $0 = HEAP32[$static_ptr >> 2] | 0;
 $4 = $static_ptr + (HEAP32[$0 + -8 >> 2] | 0) | 0;
 $6 = HEAP32[$0 + -4 >> 2] | 0;
 HEAP32[$info >> 2] = $dst_type;
 HEAP32[$info + 4 >> 2] = $static_ptr;
 HEAP32[$info + 8 >> 2] = $static_type;
 HEAP32[$info + 12 >> 2] = $src2dst_offset;
 $10 = $info + 16 | 0;
 $11 = $info + 20 | 0;
 $12 = $info + 24 | 0;
 $13 = $info + 28 | 0;
 $14 = $info + 32 | 0;
 $15 = $info + 40 | 0;
 $16 = ($6 | 0) == ($dst_type | 0);
 dest = $10 + 0 | 0;
 stop = dest + 36 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP16[$10 + 36 >> 1] = 0;
 HEAP8[$10 + 38 >> 0] = 0;
 do if ($16) {
  HEAP32[$info + 48 >> 2] = 1;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$6 >> 2] | 0) + 20 >> 2] & 15]($6, $info, $4, $4, 1, 0);
  $dst_ptr$0 = (HEAP32[$12 >> 2] | 0) == 1 ? $4 : 0;
 } else {
  FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$6 >> 2] | 0) + 24 >> 2] & 3]($6, $info, $4, 1, 0);
  $27 = HEAP32[$info + 36 >> 2] | 0;
  if (!$27) {
   $dst_ptr$0 = (HEAP32[$15 >> 2] | 0) == 1 & (HEAP32[$13 >> 2] | 0) == 1 & (HEAP32[$14 >> 2] | 0) == 1 ? HEAP32[$11 >> 2] | 0 : 0;
   break;
  } else if (($27 | 0) != 1) {
   $dst_ptr$0 = 0;
   break;
  }
  if ((HEAP32[$12 >> 2] | 0) != 1) if (!((HEAP32[$15 >> 2] | 0) == 0 & (HEAP32[$13 >> 2] | 0) == 1 & (HEAP32[$14 >> 2] | 0) == 1)) {
   $dst_ptr$0 = 0;
   break;
  }
  $dst_ptr$0 = HEAP32[$10 >> 2] | 0;
 } while (0);
 STACKTOP = sp;
 return $dst_ptr$0 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this, $__res_arg) {
 $this = $this | 0;
 $__res_arg = $__res_arg | 0;
 var $1 = 0, $14 = 0, $16 = 0, $20 = 0, $22 = 0, $28 = 0, $4 = 0, $43 = 0, $8 = 0, $__new_data$0 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0;
 if ($__res_arg >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 $1 = HEAP8[$this >> 0] | 0;
 if (!($1 & 1)) {
  $22 = 10;
  $8 = $1;
 } else {
  $4 = HEAP32[$this >> 2] | 0;
  $22 = ($4 & -2) + -1 | 0;
  $8 = $4 & 255;
 }
 if (!($8 & 1)) $14 = ($8 & 255) >>> 1; else $14 = HEAP32[$this + 4 >> 2] | 0;
 $16 = $14 >>> 0 > $__res_arg >>> 0 ? $14 : $__res_arg;
 if ($16 >>> 0 < 11) $20 = 10; else $20 = ($16 + 16 & -16) + -1 | 0;
 do if (($20 | 0) != ($22 | 0)) {
  do if (($20 | 0) == 10) {
   $__new_data$1 = $this + 1 | 0;
   $__now_long$0$off0 = 0;
   $__p$0 = HEAP32[$this + 8 >> 2] | 0;
   $__was_long$0$off0 = 1;
  } else {
   $28 = $20 + 1 | 0;
   if ($20 >>> 0 > $22 >>> 0) $__new_data$0 = __Znwj($28) | 0; else $__new_data$0 = __Znwj($28) | 0;
   if (!($8 & 1)) {
    $__new_data$1 = $__new_data$0;
    $__now_long$0$off0 = 1;
    $__p$0 = $this + 1 | 0;
    $__was_long$0$off0 = 0;
    break;
   } else {
    $__new_data$1 = $__new_data$0;
    $__now_long$0$off0 = 1;
    $__p$0 = HEAP32[$this + 8 >> 2] | 0;
    $__was_long$0$off0 = 1;
    break;
   }
  } while (0);
  if (!($8 & 1)) $43 = ($8 & 255) >>> 1; else $43 = HEAP32[$this + 4 >> 2] | 0;
  _memcpy($__new_data$1 | 0, $__p$0 | 0, $43 + 1 | 0) | 0;
  if ($__was_long$0$off0) __ZdlPv($__p$0);
  if ($__now_long$0$off0) {
   HEAP32[$this >> 2] = $20 + 1 | 1;
   HEAP32[$this + 4 >> 2] = $14;
   HEAP32[$this + 8 >> 2] = $__new_data$1;
   break;
  } else {
   HEAP8[$this >> 0] = $14 << 1;
   break;
  }
 } while (0);
 return;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192 | 0;
 $$byval_copy = sp;
 $__fmt = sp + 180 | 0;
 $__nar = sp + 160 | 0;
 $__o = sp + 12 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 HEAP8[$__fmt + 0 >> 0] = HEAP8[3704] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[3705] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[3706] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[3707] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[3708] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[3709] | 0;
 $2 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $__v;
 $3 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 20, $2, $__fmt, $$byval_copy) | 0;
 $4 = $__nar + $3 | 0;
 $5 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $4, $__iob) | 0;
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 $6 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 4896) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$6 >> 2] | 0) + 48 >> 2] & 7]($6, $__nar, $4, $__o) | 0;
 $11 = $__o + ($3 << 2) | 0;
 if (($5 | 0) == ($4 | 0)) $__op$0 = $11; else $__op$0 = $__o + ($5 - $__nar << 2) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__o, $__op$0, $11, $__iob, $__fl);
 STACKTOP = sp;
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this, $__res_arg) {
 $this = $this | 0;
 $__res_arg = $__res_arg | 0;
 var $$sink = 0, $1 = 0, $14 = 0, $16 = 0, $20 = 0, $22 = 0, $29 = 0, $4 = 0, $44 = 0, $8 = 0, $__new_data$1 = 0, $__now_long$0$off0 = 0, $__p$0 = 0, $__was_long$0$off0 = 0;
 if ($__res_arg >>> 0 > 1073741807) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 $1 = HEAP8[$this >> 0] | 0;
 if (!($1 & 1)) {
  $22 = 1;
  $8 = $1;
 } else {
  $4 = HEAP32[$this >> 2] | 0;
  $22 = ($4 & -2) + -1 | 0;
  $8 = $4 & 255;
 }
 if (!($8 & 1)) $14 = ($8 & 255) >>> 1; else $14 = HEAP32[$this + 4 >> 2] | 0;
 $16 = $14 >>> 0 > $__res_arg >>> 0 ? $14 : $__res_arg;
 if ($16 >>> 0 < 2) $20 = 1; else $20 = ($16 + 4 & -4) + -1 | 0;
 do if (($20 | 0) != ($22 | 0)) {
  do if (($20 | 0) == 1) {
   $__new_data$1 = $this + 4 | 0;
   $__now_long$0$off0 = 0;
   $__p$0 = HEAP32[$this + 8 >> 2] | 0;
   $__was_long$0$off0 = 1;
  } else {
   $29 = ($20 << 2) + 4 | 0;
   if ($20 >>> 0 > $22 >>> 0) $$sink = __Znwj($29) | 0; else $$sink = __Znwj($29) | 0;
   if (!($8 & 1)) {
    $__new_data$1 = $$sink;
    $__now_long$0$off0 = 1;
    $__p$0 = $this + 4 | 0;
    $__was_long$0$off0 = 0;
    break;
   } else {
    $__new_data$1 = $$sink;
    $__now_long$0$off0 = 1;
    $__p$0 = HEAP32[$this + 8 >> 2] | 0;
    $__was_long$0$off0 = 1;
    break;
   }
  } while (0);
  if (!($8 & 1)) $44 = ($8 & 255) >>> 1; else $44 = HEAP32[$this + 4 >> 2] | 0;
  _wmemcpy($__new_data$1, $__p$0, $44 + 1 | 0) | 0;
  if ($__was_long$0$off0) __ZdlPv($__p$0);
  if ($__now_long$0$off0) {
   HEAP32[$this >> 2] = $20 + 1 | 1;
   HEAP32[$this + 4 >> 2] = $14;
   HEAP32[$this + 8 >> 2] = $__new_data$1;
   break;
  } else {
   HEAP8[$this >> 0] = $14 << 1;
   break;
  }
 } while (0);
 return;
}

function __ZNSt3__111__stdoutbufIcE8overflowEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $20 = 0, $27 = 0, $31 = 0, $9 = 0, $__1buf = 0, $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, $pbase$0$lcssa6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__extbe = sp + 4 | 0;
 $__e = sp;
 $0 = ($__c | 0) == -1;
 L1 : do if ($0) label = 11; else {
  HEAP8[$__1buf >> 0] = $__c;
  if (HEAP8[$this + 44 >> 0] | 0) if ((_fwrite($__1buf | 0, 1, 1, HEAP32[$this + 32 >> 2] | 0) | 0) == 1) {
   label = 11;
   break;
  } else {
   $$0 = -1;
   break;
  }
  HEAP32[$__extbe >> 2] = $__extbuf;
  $9 = $__1buf + 1 | 0;
  $10 = $this + 36 | 0;
  $11 = $this + 40 | 0;
  $12 = $__extbuf + 8 | 0;
  $13 = $__extbuf;
  $14 = $this + 32 | 0;
  $pbase$0 = $__1buf;
  while (1) {
   $15 = HEAP32[$10 >> 2] | 0;
   $20 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$15 >> 2] | 0) + 12 >> 2] & 15]($15, HEAP32[$11 >> 2] | 0, $pbase$0, $9, $__e, $__extbuf, $12, $__extbe) | 0;
   if ((HEAP32[$__e >> 2] | 0) == ($pbase$0 | 0)) {
    $$0 = -1;
    break L1;
   }
   if (($20 | 0) == 3) {
    $pbase$0$lcssa6 = $pbase$0;
    break;
   }
   $27 = ($20 | 0) == 1;
   if ($20 >>> 0 >= 2) {
    $$0 = -1;
    break L1;
   }
   $31 = (HEAP32[$__extbe >> 2] | 0) - $13 | 0;
   if ((_fwrite($__extbuf | 0, 1, $31 | 0, HEAP32[$14 >> 2] | 0) | 0) != ($31 | 0)) {
    $$0 = -1;
    break L1;
   }
   if ($27) $pbase$0 = $27 ? HEAP32[$__e >> 2] | 0 : $pbase$0; else {
    label = 11;
    break L1;
   }
  }
  if ((_fwrite($pbase$0$lcssa6 | 0, 1, 1, HEAP32[$14 >> 2] | 0) | 0) == 1) label = 11; else $$0 = -1;
 } while (0);
 if ((label | 0) == 11) $$0 = $0 ? 0 : $__c;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__111__stdoutbufIwE8overflowEj($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $19 = 0, $26 = 0, $30 = 0, $8 = 0, $9 = 0, $__1buf = 0, $__e = 0, $__extbe = 0, $__extbuf = 0, $pbase$0 = 0, $pbase$0$lcssa6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__1buf = sp + 8 | 0;
 $__extbe = sp + 4 | 0;
 $__e = sp;
 $0 = ($__c | 0) == -1;
 L1 : do if ($0) label = 11; else {
  HEAP32[$__1buf >> 2] = $__c;
  if (HEAP8[$this + 44 >> 0] | 0) if ((_fwrite($__1buf | 0, 4, 1, HEAP32[$this + 32 >> 2] | 0) | 0) == 1) {
   label = 11;
   break;
  } else {
   $$0 = -1;
   break;
  }
  HEAP32[$__extbe >> 2] = $__extbuf;
  $8 = $__1buf + 4 | 0;
  $9 = $this + 36 | 0;
  $10 = $this + 40 | 0;
  $11 = $__extbuf + 8 | 0;
  $12 = $__extbuf;
  $13 = $this + 32 | 0;
  $pbase$0 = $__1buf;
  while (1) {
   $14 = HEAP32[$9 >> 2] | 0;
   $19 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$14 >> 2] | 0) + 12 >> 2] & 15]($14, HEAP32[$10 >> 2] | 0, $pbase$0, $8, $__e, $__extbuf, $11, $__extbe) | 0;
   if ((HEAP32[$__e >> 2] | 0) == ($pbase$0 | 0)) {
    $$0 = -1;
    break L1;
   }
   if (($19 | 0) == 3) {
    $pbase$0$lcssa6 = $pbase$0;
    break;
   }
   $26 = ($19 | 0) == 1;
   if ($19 >>> 0 >= 2) {
    $$0 = -1;
    break L1;
   }
   $30 = (HEAP32[$__extbe >> 2] | 0) - $12 | 0;
   if ((_fwrite($__extbuf | 0, 1, $30 | 0, HEAP32[$13 >> 2] | 0) | 0) != ($30 | 0)) {
    $$0 = -1;
    break L1;
   }
   if ($26) $pbase$0 = $26 ? HEAP32[$__e >> 2] | 0 : $pbase$0; else {
    label = 11;
    break L1;
   }
  }
  if ((_fwrite($pbase$0$lcssa6 | 0, 1, 1, HEAP32[$13 >> 2] | 0) | 0) == 1) label = 11; else $$0 = -1;
 } while (0);
 if ((label | 0) == 11) $$0 = $0 ? 0 : $__c;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg$result, $this, $__s, $__iob, $__fl, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__op$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 $$byval_copy = sp;
 $__fmt = sp + 72 | 0;
 $__nar = sp + 52 | 0;
 $__o = sp + 12 | 0;
 $0 = sp + 8 | 0;
 $1 = sp + 4 | 0;
 HEAP8[$__fmt + 0 >> 0] = HEAP8[3704] | 0;
 HEAP8[$__fmt + 1 >> 0] = HEAP8[3705] | 0;
 HEAP8[$__fmt + 2 >> 0] = HEAP8[3706] | 0;
 HEAP8[$__fmt + 3 >> 0] = HEAP8[3707] | 0;
 HEAP8[$__fmt + 4 >> 0] = HEAP8[3708] | 0;
 HEAP8[$__fmt + 5 >> 0] = HEAP8[3709] | 0;
 $2 = __ZNSt3__16__clocEv() | 0;
 HEAP32[$$byval_copy >> 2] = $__v;
 $3 = __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 20, $2, $__fmt, $$byval_copy) | 0;
 $4 = $__nar + $3 | 0;
 $5 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $4, $__iob) | 0;
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 $6 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 4904) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$6 >> 2] | 0) + 32 >> 2] & 7]($6, $__nar, $4, $__o) | 0;
 $11 = $__o + $3 | 0;
 if (($5 | 0) == ($4 | 0)) $__op$0 = $11; else $__op$0 = $__o + ($5 - $__nar) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__s >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__o, $__op$0, $11, $__iob, $__fl);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this) {
 $this = $this | 0;
 if (!(HEAP8[5232] | 0)) if (___cxa_guard_acquire(5232) | 0) {
  if (!(HEAP8[11880] | 0)) if (___cxa_guard_acquire(11880) | 0) {
   _memset(11712, 0, 168) | 0;
   ___cxa_atexit(117, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(11880);
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11712, 11888) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11724, 11920) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11736, 11952) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11748, 11984) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11760, 12024) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11772, 12064) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11784, 12096) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11796, 12136) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11808, 12152) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11820, 12168) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11832, 12184) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11844, 12200) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11856, 12216) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(11868, 12232) | 0;
  HEAP32[1306] = 11712;
  ___cxa_guard_release(5232);
 }
 return HEAP32[1306] | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this) {
 $this = $this | 0;
 if (!(HEAP8[5216] | 0)) if (___cxa_guard_acquire(5216) | 0) {
  if (!(HEAP8[12416] | 0)) if (___cxa_guard_acquire(12416) | 0) {
   _memset(12248, 0, 168) | 0;
   ___cxa_atexit(116, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(12416);
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12248, 12424) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12260, 12432) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12272, 12440) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12284, 12448) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12296, 12464) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12308, 12480) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12320, 12488) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12332, 12504) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12344, 12512) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12356, 12520) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12368, 12528) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12380, 12536) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12392, 12544) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(12404, 12552) | 0;
  HEAP32[1302] = 12248;
  ___cxa_guard_release(5216);
 }
 return HEAP32[1302] | 0;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg$result, $this, $__s, $__iob, $__fl, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $11 = 0, $12 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 $$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 204 | 0;
 $__o = sp + 32 | 0;
 $__op = sp + 28 | 0;
 $__oe = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = $__fmt;
 HEAP32[$4 >> 2] = 37;
 HEAP32[$4 + 4 >> 2] = 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 3608, 0, HEAP32[$__iob + 4 >> 2] | 0);
 $11 = __ZNSt3__16__clocEv() | 0;
 $12 = $$byval_copy;
 HEAP32[$12 >> 2] = $0;
 HEAP32[$12 + 4 >> 2] = $1;
 $17 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 23, $11, $__fmt, $$byval_copy) | 0) | 0;
 $18 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $17, $__iob) | 0;
 __ZNKSt3__18ios_base6getlocEv($2, $__iob);
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar, $18, $17, $__o, $__op, $__oe, $2);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$2 >> 2] | 0) | 0;
 HEAP32[$3 >> 2] = HEAP32[$__s >> 2];
 $21 = HEAP32[$__op >> 2] | 0;
 $22 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$3 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__o, $21, $22, $__iob, $__fl);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg$result, $this, $__s, $__iob, $__fl, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $11 = 0, $12 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 196 | 0;
 $__o = sp + 32 | 0;
 $__op = sp + 28 | 0;
 $__oe = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = $__fmt;
 HEAP32[$4 >> 2] = 37;
 HEAP32[$4 + 4 >> 2] = 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 3608, 1, HEAP32[$__iob + 4 >> 2] | 0);
 $11 = __ZNSt3__16__clocEv() | 0;
 $12 = $$byval_copy;
 HEAP32[$12 >> 2] = $0;
 HEAP32[$12 + 4 >> 2] = $1;
 $17 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 22, $11, $__fmt, $$byval_copy) | 0) | 0;
 $18 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $17, $__iob) | 0;
 __ZNKSt3__18ios_base6getlocEv($2, $__iob);
 __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nar, $18, $17, $__o, $__op, $__oe, $2);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$2 >> 2] | 0) | 0;
 HEAP32[$3 >> 2] = HEAP32[$__s >> 2];
 $21 = HEAP32[$__op >> 2] | 0;
 $22 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$3 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__o, $21, $22, $__iob, $__fl);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg$result, $this, $__s, $__iob, $__fl, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $11 = 0, $12 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 75 | 0;
 $__o = sp + 32 | 0;
 $__op = sp + 28 | 0;
 $__oe = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = $__fmt;
 HEAP32[$4 >> 2] = 37;
 HEAP32[$4 + 4 >> 2] = 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 3608, 0, HEAP32[$__iob + 4 >> 2] | 0);
 $11 = __ZNSt3__16__clocEv() | 0;
 $12 = $$byval_copy;
 HEAP32[$12 >> 2] = $0;
 HEAP32[$12 + 4 >> 2] = $1;
 $17 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 23, $11, $__fmt, $$byval_copy) | 0) | 0;
 $18 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $17, $__iob) | 0;
 __ZNKSt3__18ios_base6getlocEv($2, $__iob);
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar, $18, $17, $__o, $__op, $__oe, $2);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$2 >> 2] | 0) | 0;
 HEAP32[$3 >> 2] = HEAP32[$__s >> 2];
 $21 = HEAP32[$__op >> 2] | 0;
 $22 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$3 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__o, $21, $22, $__iob, $__fl);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg$result, $this, $__s, $__iob, $__fl, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $__iob = $__iob | 0;
 $__fl = $__fl | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $$byval_copy = 0, $11 = 0, $12 = 0, $17 = 0, $18 = 0, $2 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $__fmt = 0, $__nar = 0, $__o = 0, $__oe = 0, $__op = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 $$byval_copy = sp + 8 | 0;
 $__fmt = sp;
 $__nar = sp + 74 | 0;
 $__o = sp + 32 | 0;
 $__op = sp + 28 | 0;
 $__oe = sp + 24 | 0;
 $2 = sp + 20 | 0;
 $3 = sp + 16 | 0;
 $4 = $__fmt;
 HEAP32[$4 >> 2] = 37;
 HEAP32[$4 + 4 >> 2] = 0;
 __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmt + 1 | 0, 3608, 1, HEAP32[$__iob + 4 >> 2] | 0);
 $11 = __ZNSt3__16__clocEv() | 0;
 $12 = $$byval_copy;
 HEAP32[$12 >> 2] = $0;
 HEAP32[$12 + 4 >> 2] = $1;
 $17 = $__nar + (__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__nar, 22, $11, $__fmt, $$byval_copy) | 0) | 0;
 $18 = __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nar, $17, $__iob) | 0;
 __ZNKSt3__18ios_base6getlocEv($2, $__iob);
 __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nar, $18, $17, $__o, $__op, $__oe, $2);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$2 >> 2] | 0) | 0;
 HEAP32[$3 >> 2] = HEAP32[$__s >> 2];
 $21 = HEAP32[$__op >> 2] | 0;
 $22 = HEAP32[$__oe >> 2] | 0;
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$3 + 0 >> 2];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg$result, $$byval_copy, $__o, $21, $22, $__iob, $__fl);
 STACKTOP = sp;
 return;
}

function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $10 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $9 = 0, $p$0 = 0;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below); else {
  $3 = $info + 52 | 0;
  $4 = HEAP8[$3 >> 0] | 0;
  $5 = $info + 53 | 0;
  $6 = HEAP8[$5 >> 0] | 0;
  $9 = HEAP32[$this + 12 >> 2] | 0;
  $10 = $this + ($9 << 3) + 16 | 0;
  HEAP8[$3 >> 0] = 0;
  HEAP8[$5 >> 0] = 0;
  __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this + 16 | 0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
  L3 : do if (($9 | 0) > 1) {
   $13 = $info + 24 | 0;
   $14 = $this + 8 | 0;
   $15 = $info + 54 | 0;
   $p$0 = $this + 24 | 0;
   do {
    if (HEAP8[$15 >> 0] | 0) break L3;
    if (!(HEAP8[$3 >> 0] | 0)) {
     if (HEAP8[$5 >> 0] | 0) if (!(HEAP32[$14 >> 2] & 1)) break L3;
    } else {
     if ((HEAP32[$13 >> 2] | 0) == 1) break L3;
     if (!(HEAP32[$14 >> 2] & 2)) break L3;
    }
    HEAP8[$3 >> 0] = 0;
    HEAP8[$5 >> 0] = 0;
    __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($p$0, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
    $p$0 = $p$0 + 8 | 0;
   } while ($p$0 >>> 0 < $10 >>> 0);
  } while (0);
  HEAP8[$3 >> 0] = $4;
  HEAP8[$5 >> 0] = $6;
 }
 return;
}

function __ZNSt3__114__num_put_base14__format_floatEPcPKcj($__fmtp, $__len, $__flags) {
 $__fmtp = $__fmtp | 0;
 $__len = $__len | 0;
 $__flags = $__flags | 0;
 var $$0 = 0, $$012 = 0, $$1 = 0, $$2$lcssa = 0, $$2$ph = 0, $$23 = 0, $11 = 0, $14 = 0, $15 = 0, $23 = 0, $6 = 0, $7 = 0, $8 = 0, $specify_precision$0$off0$ph = 0;
 if (!($__flags & 2048)) $$0 = $__fmtp; else {
  HEAP8[$__fmtp >> 0] = 43;
  $$0 = $__fmtp + 1 | 0;
 }
 if (!($__flags & 1024)) $$1 = $$0; else {
  HEAP8[$$0 >> 0] = 35;
  $$1 = $$0 + 1 | 0;
 }
 $6 = $__flags & 260;
 $7 = $__flags >>> 14;
 $8 = ($6 | 0) == 260;
 if ($8) {
  $$2$ph = $$1;
  $specify_precision$0$off0$ph = 0;
 } else {
  HEAP8[$$1 >> 0] = 46;
  HEAP8[$$1 + 1 >> 0] = 42;
  $$2$ph = $$1 + 2 | 0;
  $specify_precision$0$off0$ph = 1;
 }
 $11 = HEAP8[$__len >> 0] | 0;
 if (!($11 << 24 >> 24)) $$2$lcssa = $$2$ph; else {
  $$012 = $__len;
  $$23 = $$2$ph;
  $15 = $11;
  while (1) {
   $$012 = $$012 + 1 | 0;
   $14 = $$23 + 1 | 0;
   HEAP8[$$23 >> 0] = $15;
   $15 = HEAP8[$$012 >> 0] | 0;
   if (!($15 << 24 >> 24)) {
    $$2$lcssa = $14;
    break;
   } else $$23 = $14;
  }
 }
 do if (($6 | 0) == 4) if (!($7 & 1)) {
  HEAP8[$$2$lcssa >> 0] = 102;
  break;
 } else {
  HEAP8[$$2$lcssa >> 0] = 70;
  break;
 } else if (($6 | 0) == 256) if (!($7 & 1)) {
  HEAP8[$$2$lcssa >> 0] = 101;
  break;
 } else {
  HEAP8[$$2$lcssa >> 0] = 69;
  break;
 } else {
  $23 = ($7 & 1 | 0) != 0;
  if ($8) if ($23) {
   HEAP8[$$2$lcssa >> 0] = 65;
   break;
  } else {
   HEAP8[$$2$lcssa >> 0] = 97;
   break;
  } else if ($23) {
   HEAP8[$$2$lcssa >> 0] = 71;
   break;
  } else {
   HEAP8[$$2$lcssa >> 0] = 103;
   break;
  }
 } while (0);
 return $specify_precision$0$off0$ph | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6appendIPwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$01 = 0, $0 = 0, $1 = 0, $13 = 0, $16 = 0, $17 = 0, $22 = 0, $27 = 0, $28 = 0, $34 = 0, $39 = 0, $46 = 0, $8 = 0, $__p$0$lcssa = 0, $__p$02 = 0;
 $0 = $__first;
 $1 = HEAP8[$this >> 0] | 0;
 if (!($1 & 1)) {
  $16 = ($1 & 255) >>> 1;
  $17 = 1;
  $46 = $1;
 } else {
  $8 = HEAP32[$this >> 2] | 0;
  $16 = HEAP32[$this + 4 >> 2] | 0;
  $17 = ($8 & -2) + -1 | 0;
  $46 = $8 & 255;
 }
 $13 = $__last - $0 >> 2;
 do if ($13) {
  if (($17 - $16 | 0) >>> 0 < $13 >>> 0) {
   __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this, $17, $16 + $13 - $17 | 0, $16, $16, 0, 0);
   $22 = HEAP8[$this >> 0] | 0;
  } else $22 = $46;
  if (!($22 & 1)) $28 = $this + 4 | 0; else $28 = HEAP32[$this + 8 >> 2] | 0;
  $27 = $28 + ($16 << 2) | 0;
  if (($__first | 0) == ($__last | 0)) $__p$0$lcssa = $27; else {
   $34 = $16 + (($__last + -4 - $0 | 0) >>> 2) + 1 | 0;
   $$01 = $__first;
   $__p$02 = $27;
   while (1) {
    HEAP32[$__p$02 >> 2] = HEAP32[$$01 >> 2];
    $$01 = $$01 + 4 | 0;
    if (($$01 | 0) == ($__last | 0)) break; else $__p$02 = $__p$02 + 4 | 0;
   }
   $__p$0$lcssa = $28 + ($34 << 2) | 0;
  }
  HEAP32[$__p$0$lcssa >> 2] = 0;
  $39 = $16 + $13 | 0;
  if (!(HEAP8[$this >> 0] & 1)) {
   HEAP8[$this >> 0] = $39 << 1;
   break;
  } else {
   HEAP32[$this + 4 >> 2] = $39;
   break;
  }
 } while (0);
 return $this | 0;
}

function _mbtowc($wc, $src, $n) {
 $wc = $wc | 0;
 $src = $src | 0;
 $n = $n | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $12 = 0, $14 = 0, $22 = 0, $23 = 0, $31 = 0, $35 = 0, $4 = 0, $40 = 0, $44 = 0, $5 = 0, $7 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = $wc;
 if (!$src) {
  $$0 = 0;
  STACKTOP = sp;
  return $$0 | 0;
 }
 do if ($n) {
  if (!$wc) {
   HEAP32[$0 >> 2] = $0;
   $7 = $0;
  } else $7 = $wc;
  $4 = HEAP8[$src >> 0] | 0;
  $5 = $4 & 255;
  if ($4 << 24 >> 24 > -1) {
   HEAP32[$7 >> 2] = $5;
   $$0 = $4 << 24 >> 24 != 0 & 1;
   STACKTOP = sp;
   return $$0 | 0;
  }
  $10 = $5 + -194 | 0;
  if ($10 >>> 0 <= 50) {
   $12 = $src + 1 | 0;
   $14 = HEAP32[12560 + ($10 << 2) >> 2] | 0;
   if ($n >>> 0 < 4) if ($14 & -2147483648 >>> (($n * 6 | 0) + -6 | 0)) break;
   $22 = HEAPU8[$12 >> 0] | 0;
   $23 = $22 >>> 3;
   if (($23 + -16 | $23 + ($14 >> 26)) >>> 0 <= 7) {
    $31 = $22 + -128 | $14 << 6;
    if (($31 | 0) >= 0) {
     HEAP32[$7 >> 2] = $31;
     $$0 = 2;
     STACKTOP = sp;
     return $$0 | 0;
    }
    $35 = HEAPU8[$src + 2 >> 0] | 0;
    if (($35 & 192 | 0) == 128) {
     $40 = $35 + -128 | $31 << 6;
     if (($40 | 0) >= 0) {
      HEAP32[$7 >> 2] = $40;
      $$0 = 3;
      STACKTOP = sp;
      return $$0 | 0;
     }
     $44 = HEAPU8[$src + 3 >> 0] | 0;
     if (($44 & 192 | 0) == 128) {
      HEAP32[$7 >> 2] = $44 + -128 | $40 << 6;
      $$0 = 4;
      STACKTOP = sp;
      return $$0 | 0;
     }
    }
   }
  }
 } while (0);
 HEAP32[(___errno_location() | 0) >> 2] = 84;
 $$0 = -1;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__110__stdinbufIwE9pbackfailEj($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$01 = 0, $1 = 0, $11 = 0, $19 = 0, $23 = 0, $24 = 0, $26 = 0, $3 = 0, $5 = 0, $8 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__enxt = sp + 8 | 0;
 $__ci = sp + 4 | 0;
 $__inxt = sp;
 $1 = $this + 52 | 0;
 $3 = (HEAP8[$1 >> 0] | 0) != 0;
 L1 : do if (($__c | 0) == -1) if ($3) $$01 = -1; else {
  $5 = HEAP32[$this + 48 >> 2] | 0;
  HEAP8[$1 >> 0] = ($5 | 0) != -1 & 1;
  $$01 = $5;
 } else {
  $8 = $this + 48 | 0;
  L3 : do if ($3) {
   HEAP32[$__ci >> 2] = HEAP32[$8 >> 2];
   $11 = HEAP32[$this + 36 >> 2] | 0;
   $19 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$11 >> 2] | 0) + 12 >> 2] & 15]($11, HEAP32[$this + 40 >> 2] | 0, $__ci, $__ci + 4 | 0, $__inxt, $__extbuf, $__extbuf + 8 | 0, $__enxt) | 0;
   if (($19 | 0) == 3) {
    HEAP8[$__extbuf >> 0] = HEAP32[$8 >> 2];
    HEAP32[$__enxt >> 2] = $__extbuf + 1;
   } else if (($19 | 0) == 1 | ($19 | 0) == 2) {
    $$01 = -1;
    break L1;
   }
   $23 = $this + 32 | 0;
   while (1) {
    $24 = HEAP32[$__enxt >> 2] | 0;
    if ($24 >>> 0 <= $__extbuf >>> 0) break L3;
    $26 = $24 + -1 | 0;
    HEAP32[$__enxt >> 2] = $26;
    if ((_ungetc(HEAP8[$26 >> 0] | 0, HEAP32[$23 >> 2] | 0) | 0) == -1) {
     $$01 = -1;
     break L1;
    }
   }
  } while (0);
  HEAP32[$8 >> 2] = $__c;
  HEAP8[$1 >> 0] = 1;
  $$01 = $__c;
 } while (0);
 STACKTOP = sp;
 return $$01 | 0;
}

function __ZNSt3__110__stdinbufIcE9pbackfailEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$01 = 0, $1 = 0, $12 = 0, $20 = 0, $24 = 0, $25 = 0, $27 = 0, $3 = 0, $5 = 0, $8 = 0, $__ci = 0, $__enxt = 0, $__extbuf = 0, $__inxt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__extbuf = sp + 16 | 0;
 $__enxt = sp + 4 | 0;
 $__ci = sp + 8 | 0;
 $__inxt = sp;
 $1 = $this + 52 | 0;
 $3 = (HEAP8[$1 >> 0] | 0) != 0;
 L1 : do if (($__c | 0) == -1) if ($3) $$01 = -1; else {
  $5 = HEAP32[$this + 48 >> 2] | 0;
  HEAP8[$1 >> 0] = ($5 | 0) != -1 & 1;
  $$01 = $5;
 } else {
  $8 = $this + 48 | 0;
  L3 : do if ($3) {
   HEAP8[$__ci >> 0] = HEAP32[$8 >> 2];
   $12 = HEAP32[$this + 36 >> 2] | 0;
   $20 = FUNCTION_TABLE_iiiiiiiii[HEAP32[(HEAP32[$12 >> 2] | 0) + 12 >> 2] & 15]($12, HEAP32[$this + 40 >> 2] | 0, $__ci, $__ci + 1 | 0, $__inxt, $__extbuf, $__extbuf + 8 | 0, $__enxt) | 0;
   if (($20 | 0) == 3) {
    HEAP8[$__extbuf >> 0] = HEAP32[$8 >> 2];
    HEAP32[$__enxt >> 2] = $__extbuf + 1;
   } else if (($20 | 0) == 1 | ($20 | 0) == 2) {
    $$01 = -1;
    break L1;
   }
   $24 = $this + 32 | 0;
   while (1) {
    $25 = HEAP32[$__enxt >> 2] | 0;
    if ($25 >>> 0 <= $__extbuf >>> 0) break L3;
    $27 = $25 + -1 | 0;
    HEAP32[$__enxt >> 2] = $27;
    if ((_ungetc(HEAP8[$27 >> 0] | 0, HEAP32[$24 >> 2] | 0) | 0) == -1) {
     $$01 = -1;
     break L1;
    }
   }
  } while (0);
  HEAP32[$8 >> 2] = $__c;
  HEAP8[$1 >> 0] = 1;
  $$01 = $__c;
 } while (0);
 STACKTOP = sp;
 return $$01 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 $__p_new_stuff = $__p_new_stuff | 0;
 var $10 = 0, $12 = 0, $17 = 0, $18 = 0, $20 = 0, $23 = 0, $31 = 0, $9 = 0;
 if ((1073741806 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if (!(HEAP8[$this >> 0] & 1)) $20 = $this + 4 | 0; else $20 = HEAP32[$this + 8 >> 2] | 0;
 if ($__old_cap >>> 0 < 536870887) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $12 = $9 >>> 0 < $10 >>> 0 ? $10 : $9;
  if ($12 >>> 0 < 2) $17 = 2; else $17 = $12 + 4 & -4;
 } else $17 = 1073741807;
 $18 = __Znwj($17 << 2) | 0;
 if ($__n_copy) _wmemcpy($18, $20, $__n_copy) | 0;
 if ($__n_add) _wmemcpy($18 + ($__n_copy << 2) | 0, $__p_new_stuff, $__n_add) | 0;
 $23 = $__old_sz - $__n_del | 0;
 if (($23 | 0) != ($__n_copy | 0)) _wmemcpy($18 + ($__n_add + $__n_copy << 2) | 0, $20 + ($__n_del + $__n_copy << 2) | 0, $23 - $__n_copy | 0) | 0;
 if (($__old_cap | 0) != 1) __ZdlPv($20);
 HEAP32[$this + 8 >> 2] = $18;
 HEAP32[$this >> 2] = $17 | 1;
 $31 = $23 + $__n_add | 0;
 HEAP32[$this + 4 >> 2] = $31;
 HEAP32[$18 + ($31 << 2) >> 2] = 0;
 return;
}

function __ZL25default_terminate_handlerv() {
 var $0 = 0, $11 = 0, $2 = 0, $21 = 0, $22 = 0, $24 = 0, $29 = 0, $30 = 0, $34 = 0, $6 = 0, $8 = 0, $thrown_object = 0, $vararg_buffer10 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $vararg_buffer10 = sp;
 $thrown_object = sp + 12 | 0;
 $0 = ___cxa_get_globals_fast() | 0;
 if ($0) {
  $2 = HEAP32[$0 >> 2] | 0;
  if ($2) {
   $6 = $2 + 48 | 0;
   $8 = HEAP32[$6 >> 2] | 0;
   $11 = HEAP32[$6 + 4 >> 2] | 0;
   if (!(($8 & -256 | 0) == 1126902528 & ($11 | 0) == 1129074247)) {
    HEAP32[$vararg_buffer10 >> 2] = HEAP32[3198];
    _abort_message(12912, $vararg_buffer10);
   }
   if (($8 | 0) == 1126902529 & ($11 | 0) == 1129074247) $21 = HEAP32[$2 + 44 >> 2] | 0; else $21 = $2 + 80 | 0;
   HEAP32[$thrown_object >> 2] = $21;
   $22 = HEAP32[$2 >> 2] | 0;
   $24 = HEAP32[$22 + 4 >> 2] | 0;
   if (FUNCTION_TABLE_iiii[HEAP32[(HEAP32[13288 >> 2] | 0) + 16 >> 2] & 31](13288, $22, $thrown_object) | 0) {
    $29 = HEAP32[$thrown_object >> 2] | 0;
    $30 = HEAP32[3198] | 0;
    $34 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$29 >> 2] | 0) + 8 >> 2] & 63]($29) | 0;
    HEAP32[$vararg_buffer10 >> 2] = $30;
    HEAP32[$vararg_buffer10 + 4 >> 2] = $24;
    HEAP32[$vararg_buffer10 + 8 >> 2] = $34;
    _abort_message(12816, $vararg_buffer10);
   } else {
    HEAP32[$vararg_buffer10 >> 2] = HEAP32[3198];
    HEAP32[$vararg_buffer10 + 4 >> 2] = $24;
    _abort_message(12864, $vararg_buffer10);
   }
  }
 }
 _abort_message(12952, $vararg_buffer10);
}

function _MUSL_vfprintf($f, $fmt, $ap) {
 $f = $f | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$ = 0, $$0 = 0, $11 = 0, $12 = 0, $2 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ap2 = 0, $internal_buf = 0, $nl_arg = 0, $nl_type = 0, $ret$1 = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224 | 0;
 $ap2 = sp + 120 | 0;
 $nl_type = sp + 80 | 0;
 $nl_arg = sp;
 $internal_buf = sp + 136 | 0;
 dest = $nl_type + 0 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
 if ((_printf_core(0, $fmt, $ap2, $nl_arg, $nl_type) | 0) < 0) {
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $2 = $f + 48 | 0;
 if (!(HEAP32[$2 >> 2] | 0)) {
  $6 = $f + 44 | 0;
  $7 = HEAP32[$6 >> 2] | 0;
  HEAP32[$6 >> 2] = $internal_buf;
  $8 = $f + 28 | 0;
  HEAP32[$8 >> 2] = $internal_buf;
  $9 = $f + 20 | 0;
  HEAP32[$9 >> 2] = $internal_buf;
  HEAP32[$2 >> 2] = 80;
  $11 = $f + 16 | 0;
  HEAP32[$11 >> 2] = $internal_buf + 80;
  $12 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
  if (!$7) $ret$1 = $12; else {
   FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, 0, 0) | 0;
   $$ = (HEAP32[$9 >> 2] | 0) == 0 ? -1 : $12;
   HEAP32[$6 >> 2] = $7;
   HEAP32[$2 >> 2] = 0;
   HEAP32[$11 >> 2] = 0;
   HEAP32[$8 >> 2] = 0;
   HEAP32[$9 >> 2] = 0;
   $ret$1 = $$;
  }
 } else $ret$1 = _printf_core($f, $fmt, $ap2, $nl_arg, $nl_type) | 0;
 $$0 = $ret$1;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add, $__p_new_stuff) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 $__p_new_stuff = $__p_new_stuff | 0;
 var $10 = 0, $12 = 0, $16 = 0, $17 = 0, $19 = 0, $22 = 0, $30 = 0, $9 = 0;
 if ((-18 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if (!(HEAP8[$this >> 0] & 1)) $19 = $this + 1 | 0; else $19 = HEAP32[$this + 8 >> 2] | 0;
 if ($__old_cap >>> 0 < 2147483623) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $12 = $9 >>> 0 < $10 >>> 0 ? $10 : $9;
  if ($12 >>> 0 < 11) $16 = 11; else $16 = $12 + 16 & -16;
 } else $16 = -17;
 $17 = __Znwj($16) | 0;
 if ($__n_copy) _memcpy($17 | 0, $19 | 0, $__n_copy | 0) | 0;
 if ($__n_add) _memcpy($17 + $__n_copy | 0, $__p_new_stuff | 0, $__n_add | 0) | 0;
 $22 = $__old_sz - $__n_del | 0;
 if (($22 | 0) != ($__n_copy | 0)) _memcpy($17 + ($__n_add + $__n_copy) | 0, $19 + ($__n_del + $__n_copy) | 0, $22 - $__n_copy | 0) | 0;
 if (($__old_cap | 0) != 10) __ZdlPv($19);
 HEAP32[$this + 8 >> 2] = $17;
 HEAP32[$this >> 2] = $16 | 1;
 $30 = $22 + $__n_add | 0;
 HEAP32[$this + 4 >> 2] = $30;
 HEAP8[$17 + $30 >> 0] = 0;
 return;
}

function __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg$result, $ec, $what_arg) {
 $agg$result = $agg$result | 0;
 $ec = $ec | 0;
 $what_arg = $what_arg | 0;
 var $0 = 0, $1 = 0, $10 = 0, $13 = 0, $17 = 0, $18 = 0, $28 = 0, $29 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 $1 = HEAP32[$ec >> 2] | 0;
 if ($1) {
  $3 = HEAP8[$what_arg >> 0] | 0;
  if (!($3 & 1)) $10 = ($3 & 255) >>> 1; else $10 = HEAP32[$what_arg + 4 >> 2] | 0;
  if (!$10) $17 = $1; else {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($what_arg, 1896) | 0;
   $17 = HEAP32[$ec >> 2] | 0;
  }
  $13 = HEAP32[$ec + 4 >> 2] | 0;
  FUNCTION_TABLE_viii[HEAP32[(HEAP32[$13 >> 2] | 0) + 24 >> 2] & 3]($0, $13, $17);
  $18 = HEAP8[$0 >> 0] | 0;
  if (!($18 & 1)) {
   $28 = $0 + 1 | 0;
   $29 = ($18 & 255) >>> 1;
  } else {
   $28 = HEAP32[$0 + 8 >> 2] | 0;
   $29 = HEAP32[$0 + 4 >> 2] | 0;
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($what_arg, $28, $29) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 };
 HEAP32[$agg$result + 0 >> 2] = HEAP32[$what_arg + 0 >> 2];
 HEAP32[$agg$result + 4 >> 2] = HEAP32[$what_arg + 4 >> 2];
 HEAP32[$agg$result + 8 >> 2] = HEAP32[$what_arg + 8 >> 2];
 HEAP32[$what_arg + 0 >> 2] = 0;
 HEAP32[$what_arg + 4 >> 2] = 0;
 HEAP32[$what_arg + 8 >> 2] = 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendIPcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueERS5_E4typeES9_S9_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$01 = 0, $0 = 0, $1 = 0, $12 = 0, $15 = 0, $16 = 0, $21 = 0, $27 = 0, $33 = 0, $40 = 0, $8 = 0, $__p$02 = 0, $scevgep3 = 0;
 $0 = $__first;
 $1 = HEAP8[$this >> 0] | 0;
 if (!($1 & 1)) {
  $15 = ($1 & 255) >>> 1;
  $16 = 10;
  $40 = $1;
 } else {
  $8 = HEAP32[$this >> 2] | 0;
  $15 = HEAP32[$this + 4 >> 2] | 0;
  $16 = ($8 & -2) + -1 | 0;
  $40 = $8 & 255;
 }
 $12 = $__last - $0 | 0;
 do if (($__last | 0) != ($__first | 0)) {
  if (($16 - $15 | 0) >>> 0 < $12 >>> 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $16, $15 + $12 - $16 | 0, $15, $15, 0, 0);
   $21 = HEAP8[$this >> 0] | 0;
  } else $21 = $40;
  if (!($21 & 1)) $27 = $this + 1 | 0; else $27 = HEAP32[$this + 8 >> 2] | 0;
  $scevgep3 = $__last + ($15 - $0) | 0;
  $$01 = $__first;
  $__p$02 = $27 + $15 | 0;
  while (1) {
   HEAP8[$__p$02 >> 0] = HEAP8[$$01 >> 0] | 0;
   $$01 = $$01 + 1 | 0;
   if (($$01 | 0) == ($__last | 0)) break; else $__p$02 = $__p$02 + 1 | 0;
  }
  HEAP8[$27 + $scevgep3 >> 0] = 0;
  $33 = $15 + $12 | 0;
  if (!(HEAP8[$this >> 0] & 1)) {
   HEAP8[$this >> 0] = $33 << 1;
   break;
  } else {
   HEAP32[$this + 4 >> 2] = $33;
   break;
  }
 } while (0);
 return $this | 0;
}

function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg$result, $this, $__s, $0, $1, $__tm, $__fmt, $__mod) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $$01$i$i = 0, $10 = 0, $11 = 0, $21 = 0, $24 = 0, $25 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $__nar = 0, $__ne = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $__nar = sp + 4 | 0;
 $__ne = sp;
 HEAP32[$__ne >> 2] = $__nar + 100;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this + 8 | 0, $__nar, $__ne, $__tm, $__fmt, $__mod);
 $4 = HEAP32[$__ne >> 2] | 0;
 $5 = HEAP32[$__s >> 2] | 0;
 if (($__nar | 0) == ($4 | 0)) $24 = $5; else {
  $$01$i$i = $__nar;
  $8 = $5;
  while (1) {
   $7 = HEAP8[$$01$i$i >> 0] | 0;
   do if (!$8) $25 = 0; else {
    $10 = $8 + 24 | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    if (($11 | 0) == (HEAP32[$8 + 28 >> 2] | 0)) {
     $21 = (FUNCTION_TABLE_iii[HEAP32[(HEAP32[$8 >> 2] | 0) + 52 >> 2] & 31]($8, $7 & 255) | 0) == -1;
     $25 = $21 ? 0 : $8;
     break;
    } else {
     HEAP32[$10 >> 2] = $11 + 1;
     HEAP8[$11 >> 0] = $7;
     $25 = $8;
     break;
    }
   } while (0);
   $$01$i$i = $$01$i$i + 1 | 0;
   if (($$01$i$i | 0) == ($4 | 0)) {
    $24 = $25;
    break;
   } else $8 = $25;
  }
 }
 HEAP32[$agg$result >> 2] = $24;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg$result, $this, $__s, $0, $1, $__tm, $__fmt, $__mod) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__s = $__s | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $$0$i$i$i$i = 0, $$01$i$i = 0, $10 = 0, $11 = 0, $23 = 0, $24 = 0, $4 = 0, $5 = 0, $7 = 0, $8 = 0, $__nar = 0, $__ne = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416 | 0;
 $__nar = sp + 8 | 0;
 $__ne = sp;
 HEAP32[$__ne >> 2] = $__nar + 400;
 __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this + 8 | 0, $__nar, $__ne, $__tm, $__fmt, $__mod);
 $4 = HEAP32[$__ne >> 2] | 0;
 $5 = HEAP32[$__s >> 2] | 0;
 if (($__nar | 0) == ($4 | 0)) $23 = $5; else {
  $$01$i$i = $__nar;
  $8 = $5;
  while (1) {
   $7 = HEAP32[$$01$i$i >> 2] | 0;
   if (!$8) $24 = 0; else {
    $10 = $8 + 24 | 0;
    $11 = HEAP32[$10 >> 2] | 0;
    if (($11 | 0) == (HEAP32[$8 + 28 >> 2] | 0)) $$0$i$i$i$i = FUNCTION_TABLE_iii[HEAP32[(HEAP32[$8 >> 2] | 0) + 52 >> 2] & 31]($8, $7) | 0; else {
     HEAP32[$10 >> 2] = $11 + 4;
     HEAP32[$11 >> 2] = $7;
     $$0$i$i$i$i = $7;
    }
    $24 = ($$0$i$i$i$i | 0) == -1 ? 0 : $8;
   }
   $$01$i$i = $$01$i$i + 4 | 0;
   if (($$01$i$i | 0) == ($4 | 0)) {
    $23 = $24;
    break;
   } else $8 = $24;
  }
 }
 HEAP32[$agg$result >> 2] = $23;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $14 = 0, $22 = 0, $23 = 0, $29 = 0, $31 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = $this + 8 | 0;
 $5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 63]($1) | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 if (!($6 & 1)) $23 = ($6 & 255) >>> 1; else $23 = HEAP32[$5 + 4 >> 2] | 0;
 $14 = HEAP8[$5 + 12 >> 0] | 0;
 if (!($14 & 1)) $22 = ($14 & 255) >>> 1; else $22 = HEAP32[$5 + 16 >> 2] | 0;
 do if (($23 | 0) == (0 - $22 | 0)) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; else {
  HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
  HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
  $29 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $5, $5 + 24 | 0, $__ct, $__err, 0) | 0;
  $31 = HEAP32[$__h >> 2] | 0;
  if (($29 | 0) == ($5 | 0) & ($31 | 0) == 12) {
   HEAP32[$__h >> 2] = 0;
   break;
  }
  if (($29 - $5 | 0) == 12 & ($31 | 0) < 12) HEAP32[$__h >> 2] = $31 + 12;
 } while (0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_am_pmERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $14 = 0, $22 = 0, $23 = 0, $29 = 0, $31 = 0, $5 = 0, $6 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = $this + 8 | 0;
 $5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 8 >> 2] & 63]($1) | 0;
 $6 = HEAP8[$5 >> 0] | 0;
 if (!($6 & 1)) $23 = ($6 & 255) >>> 1; else $23 = HEAP32[$5 + 4 >> 2] | 0;
 $14 = HEAP8[$5 + 12 >> 0] | 0;
 if (!($14 & 1)) $22 = ($14 & 255) >>> 1; else $22 = HEAP32[$5 + 16 >> 2] | 0;
 do if (($23 | 0) == (0 - $22 | 0)) HEAP32[$__err >> 2] = HEAP32[$__err >> 2] | 4; else {
  HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
  HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
  $29 = __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $5, $5 + 24 | 0, $__ct, $__err, 0) | 0;
  $31 = HEAP32[$__h >> 2] | 0;
  if (($29 | 0) == ($5 | 0) & ($31 | 0) == 12) {
   HEAP32[$__h >> 2] = 0;
   break;
  }
  if (($29 - $5 | 0) == 12 & ($31 | 0) < 12) HEAP32[$__h >> 2] = $31 + 12;
 } while (0);
 STACKTOP = sp;
 return;
}

function ___fwritex($s, $l, $f) {
 $s = $s | 0;
 $l = $l | 0;
 $f = $f | 0;
 var $$0 = 0, $$01 = 0, $$02 = 0, $0 = 0, $1 = 0, $19 = 0, $29 = 0, $5 = 0, $6 = 0, $7 = 0, $i$0 = 0, $i$0$lcssa7 = 0, $i$1 = 0;
 $0 = $f + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 do if (!$1) if (!(___towrite($f) | 0)) {
  $7 = HEAP32[$0 >> 2] | 0;
  break;
 } else {
  $$0 = 0;
  return $$0 | 0;
 } else $7 = $1; while (0);
 $5 = $f + 20 | 0;
 $6 = HEAP32[$5 >> 2] | 0;
 if (($7 - $6 | 0) >>> 0 < $l >>> 0) {
  $$0 = FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, $s, $l) | 0;
  return $$0 | 0;
 }
 L11 : do if ((HEAP8[$f + 75 >> 0] | 0) > -1) {
  $i$0 = $l;
  while (1) {
   if (!$i$0) {
    $$01 = $l;
    $$02 = $s;
    $29 = $6;
    $i$1 = 0;
    break L11;
   }
   $19 = $i$0 + -1 | 0;
   if ((HEAP8[$s + $19 >> 0] | 0) == 10) {
    $i$0$lcssa7 = $i$0;
    break;
   } else $i$0 = $19;
  }
  if ((FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, $s, $i$0$lcssa7) | 0) >>> 0 < $i$0$lcssa7 >>> 0) {
   $$0 = $i$0$lcssa7;
   return $$0 | 0;
  } else {
   $$01 = $l - $i$0$lcssa7 | 0;
   $$02 = $s + $i$0$lcssa7 | 0;
   $29 = HEAP32[$5 >> 2] | 0;
   $i$1 = $i$0$lcssa7;
   break;
  }
 } else {
  $$01 = $l;
  $$02 = $s;
  $29 = $6;
  $i$1 = 0;
 } while (0);
 _memcpy($29 | 0, $$02 | 0, $$01 | 0) | 0;
 HEAP32[$5 >> 2] = (HEAP32[$5 >> 2] | 0) + $$01;
 $$0 = $i$1 + $$01 | 0;
 return $$0 | 0;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$0$i = 0, $11 = 0, $13 = 0, $14 = 0, $16 = 0, $19 = 0, $4 = 0, $5 = 0, $__v = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $__v = sp;
 $4 = HEAP32[$this + 8 >> 2] | 0;
 $5 = HEAP32[$this + 4 >> 2] | 0;
 if ($4 - $5 >> 2 >>> 0 < $__n >>> 0) {
  $11 = HEAP32[$this >> 2] | 0;
  $13 = $5 - $11 >> 2;
  $14 = $13 + $__n | 0;
  if ($14 >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
  $16 = $4 - $11 | 0;
  if ($16 >> 2 >>> 0 < 536870911) {
   $19 = $16 >> 1;
   $$0$i = $19 >>> 0 < $14 >>> 0 ? $14 : $19;
  } else $$0$i = 1073741823;
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($__v, $$0$i, $13, $this + 16 | 0);
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($__v, $__n);
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this, $__v);
  __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($__v);
 } else __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this, $__n);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $13 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = $this + 8 | 0;
 $6 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] & 63]($2) | 0;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 $9 = HEAP8[$6 >> 0] | 0;
 if (!($9 & 1)) {
  $21 = $6 + 4 | 0;
  $22 = ($9 & 255) >>> 1;
  $23 = $6 + 4 | 0;
 } else {
  $13 = HEAP32[$6 + 8 >> 2] | 0;
  $21 = $13;
  $22 = HEAP32[$6 + 4 >> 2] | 0;
  $23 = $13;
 }
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, $23, $21 + ($22 << 2) | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, $13 = 0, $2 = 0, $21 = 0, $22 = 0, $23 = 0, $6 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 $2 = $this + 8 | 0;
 $6 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$2 >> 2] | 0) + 20 >> 2] & 63]($2) | 0;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 $9 = HEAP8[$6 >> 0] | 0;
 if (!($9 & 1)) {
  $21 = $6 + 1 | 0;
  $22 = ($9 & 255) >>> 1;
  $23 = $6 + 1 | 0;
 } else {
  $13 = HEAP32[$6 + 8 >> 2] | 0;
  $21 = $13;
  $22 = HEAP32[$6 + 4 >> 2] | 0;
  $23 = $13;
 }
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, $23, $21 + $22 | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $1 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 L1 : do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0;
 } else {
  $1 = ___errno_location() | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = 0;
  $4 = _strtoll_l($__a, $__p2, $__base, __ZNSt3__16__clocEv() | 0) | 0;
  $5 = tempRet0;
  $6 = HEAP32[$1 >> 2] | 0;
  if (!$6) HEAP32[$1 >> 2] = $2;
  if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0;
   break;
  }
  do if (($6 | 0) == 34) {
   HEAP32[$__err >> 2] = 4;
   if (($5 | 0) > 0 | ($5 | 0) == 0 & $4 >>> 0 > 0) {
    $$0 = 2147483647;
    break L1;
   }
  } else {
   if (($5 | 0) < -1 | ($5 | 0) == -1 & $4 >>> 0 < 2147483648) {
    HEAP32[$__err >> 2] = 4;
    break;
   }
   if (($5 | 0) > 0 | ($5 | 0) == 0 & $4 >>> 0 > 2147483647) {
    HEAP32[$__err >> 2] = 4;
    $$0 = 2147483647;
    break L1;
   } else {
    $$0 = $4;
    break L1;
   }
  } while (0);
  $$0 = -2147483648;
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function _vsnprintf($s, $n, $fmt, $ap) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$$02 = 0, $$0 = 0, $$01 = 0, $$02 = 0, $10 = 0, $11 = 0, $13 = 0, $15 = 0, $5 = 0, $8 = 0, $b = 0, $f = 0, dest = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $b = sp + 112 | 0;
 $f = sp;
 dest = $f + 0 | 0;
 src = 15432 | 0;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = HEAP32[src >> 2];
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 if (($n + -1 | 0) >>> 0 > 2147483646) if (!$n) {
  $$01 = $b;
  $$02 = 1;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 75;
  $$0 = -1;
  STACKTOP = sp;
  return $$0 | 0;
 } else {
  $$01 = $s;
  $$02 = $n;
 }
 $5 = -2 - $$01 | 0;
 $$$02 = $$02 >>> 0 > $5 >>> 0 ? $5 : $$02;
 HEAP32[$f + 48 >> 2] = $$$02;
 $8 = $f + 20 | 0;
 HEAP32[$8 >> 2] = $$01;
 HEAP32[$f + 44 >> 2] = $$01;
 $10 = $$01 + $$$02 | 0;
 $11 = $f + 16 | 0;
 HEAP32[$11 >> 2] = $10;
 HEAP32[$f + 28 >> 2] = $10;
 $13 = _MUSL_vfprintf($f, $fmt, $ap) | 0;
 if (!$$$02) {
  $$0 = $13;
  STACKTOP = sp;
  return $$0 | 0;
 }
 $15 = HEAP32[$8 >> 2] | 0;
 HEAP8[$15 + ((($15 | 0) == (HEAP32[$11 >> 2] | 0)) << 31 >> 31) >> 0] = 0;
 $$0 = $13;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 var $10 = 0, $12 = 0, $17 = 0, $18 = 0, $20 = 0, $21 = 0, $9 = 0;
 if ((1073741807 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if (!(HEAP8[$this >> 0] & 1)) $20 = $this + 4 | 0; else $20 = HEAP32[$this + 8 >> 2] | 0;
 if ($__old_cap >>> 0 < 536870887) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $12 = $9 >>> 0 < $10 >>> 0 ? $10 : $9;
  if ($12 >>> 0 < 2) $17 = 2; else $17 = $12 + 4 & -4;
 } else $17 = 1073741807;
 $18 = __Znwj($17 << 2) | 0;
 if ($__n_copy) _wmemcpy($18, $20, $__n_copy) | 0;
 $21 = $__old_sz - $__n_del | 0;
 if (($21 | 0) != ($__n_copy | 0)) _wmemcpy($18 + ($__n_add + $__n_copy << 2) | 0, $20 + ($__n_del + $__n_copy << 2) | 0, $21 - $__n_copy | 0) | 0;
 if (($__old_cap | 0) != 1) __ZdlPv($20);
 HEAP32[$this + 8 >> 2] = $18;
 HEAP32[$this >> 2] = $17 | 1;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $__old_cap, $__delta_cap, $__old_sz, $__n_copy, $__n_del, $__n_add) {
 $this = $this | 0;
 $__old_cap = $__old_cap | 0;
 $__delta_cap = $__delta_cap | 0;
 $__old_sz = $__old_sz | 0;
 $__n_copy = $__n_copy | 0;
 $__n_del = $__n_del | 0;
 $__n_add = $__n_add | 0;
 var $10 = 0, $12 = 0, $16 = 0, $17 = 0, $19 = 0, $20 = 0, $9 = 0;
 if ((-17 - $__old_cap | 0) >>> 0 < $__delta_cap >>> 0) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if (!(HEAP8[$this >> 0] & 1)) $19 = $this + 1 | 0; else $19 = HEAP32[$this + 8 >> 2] | 0;
 if ($__old_cap >>> 0 < 2147483623) {
  $9 = $__delta_cap + $__old_cap | 0;
  $10 = $__old_cap << 1;
  $12 = $9 >>> 0 < $10 >>> 0 ? $10 : $9;
  if ($12 >>> 0 < 11) $16 = 11; else $16 = $12 + 16 & -16;
 } else $16 = -17;
 $17 = __Znwj($16) | 0;
 if ($__n_copy) _memcpy($17 | 0, $19 | 0, $__n_copy | 0) | 0;
 $20 = $__old_sz - $__n_del | 0;
 if (($20 | 0) != ($__n_copy | 0)) _memcpy($17 + ($__n_add + $__n_copy) | 0, $19 + ($__n_del + $__n_copy) | 0, $20 - $__n_copy | 0) | 0;
 if (($__old_cap | 0) != 10) __ZdlPv($19);
 HEAP32[$this + 8 >> 2] = $17;
 HEAP32[$this >> 2] = $16 | 1;
 return;
}

function ___cxx_global_array_dtor93($0) {
 $0 = $0 | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11868 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11856 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11844 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11832 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11820 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11808 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11796 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11784 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11772 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11760 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11748 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11736 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11724 | 0);
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev(11712);
 return;
}
function ___cxx_global_array_dtor108($0) {
 $0 = $0 | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12404 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12392 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12380 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12368 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12356 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12344 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12332 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12320 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12308 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12296 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12284 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12272 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12260 | 0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev(12248);
 return;
}

function __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i($this, $info, $dst_ptr, $current_ptr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 var $16 = 0, $17 = 0, $22 = 0, $25 = 0, $5 = 0, $6 = 0;
 HEAP8[$info + 53 >> 0] = 1;
 do if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
  HEAP8[$info + 52 >> 0] = 1;
  $5 = $info + 16 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  if (!$6) {
   HEAP32[$5 >> 2] = $dst_ptr;
   HEAP32[$info + 24 >> 2] = $path_below;
   HEAP32[$info + 36 >> 2] = 1;
   if (!(($path_below | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0)) break;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  if (($6 | 0) != ($dst_ptr | 0)) {
   $25 = $info + 36 | 0;
   HEAP32[$25 >> 2] = (HEAP32[$25 >> 2] | 0) + 1;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  $16 = $info + 24 | 0;
  $17 = HEAP32[$16 >> 2] | 0;
  if (($17 | 0) == 2) {
   HEAP32[$16 >> 2] = $path_below;
   $22 = $path_below;
  } else $22 = $17;
  if (($22 | 0) == 1 ? (HEAP32[$info + 48 >> 2] | 0) == 1 : 0) HEAP8[$info + 54 >> 0] = 1;
 } while (0);
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$02 = 0, $0 = 0, $10 = 0, $12 = 0, $2 = 0, $20 = 0, $3 = 0, $__p$0$lcssa = 0, $__p$0$ph = 0, $__p$01 = 0;
 $0 = $__first;
 $2 = $__last - $0 | 0;
 $3 = $2 >> 2;
 if ($3 >>> 0 > 1073741807) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($3 >>> 0 < 2) {
  HEAP8[$this >> 0] = $2 >>> 1;
  $__p$0$ph = $this + 4 | 0;
 } else {
  $10 = $3 + 4 & -4;
  $12 = __Znwj($10 << 2) | 0;
  HEAP32[$this + 8 >> 2] = $12;
  HEAP32[$this >> 2] = $10 | 1;
  HEAP32[$this + 4 >> 2] = $3;
  $__p$0$ph = $12;
 }
 if (($__first | 0) == ($__last | 0)) $__p$0$lcssa = $__p$0$ph; else {
  $20 = (($__last + -4 - $0 | 0) >>> 2) + 1 | 0;
  $$02 = $__first;
  $__p$01 = $__p$0$ph;
  while (1) {
   HEAP32[$__p$01 >> 2] = HEAP32[$$02 >> 2];
   $$02 = $$02 + 4 | 0;
   if (($$02 | 0) == ($__last | 0)) break; else $__p$01 = $__p$01 + 4 | 0;
  }
  $__p$0$lcssa = $__p$0$ph + ($20 << 2) | 0;
 }
 HEAP32[$__p$0$lcssa >> 2] = 0;
 return;
}

function __ZNSt3__114__num_put_base12__format_intEPcPKcbj($__fmtp, $__len, $__signd, $__flags) {
 $__fmtp = $__fmtp | 0;
 $__len = $__len | 0;
 $__signd = $__signd | 0;
 $__flags = $__flags | 0;
 var $$0 = 0, $$012 = 0, $$1$lcssa = 0, $$1$ph = 0, $$13 = 0, $10 = 0, $13 = 0, $6 = 0, $9 = 0;
 if (!($__flags & 2048)) $$0 = $__fmtp; else {
  HEAP8[$__fmtp >> 0] = 43;
  $$0 = $__fmtp + 1 | 0;
 }
 if (!($__flags & 512)) $$1$ph = $$0; else {
  HEAP8[$$0 >> 0] = 35;
  $$1$ph = $$0 + 1 | 0;
 }
 $6 = HEAP8[$__len >> 0] | 0;
 if (!($6 << 24 >> 24)) $$1$lcssa = $$1$ph; else {
  $$012 = $__len;
  $$13 = $$1$ph;
  $10 = $6;
  while (1) {
   $$012 = $$012 + 1 | 0;
   $9 = $$13 + 1 | 0;
   HEAP8[$$13 >> 0] = $10;
   $10 = HEAP8[$$012 >> 0] | 0;
   if (!($10 << 24 >> 24)) {
    $$1$lcssa = $9;
    break;
   } else $$13 = $9;
  }
 }
 $13 = $__flags & 74;
 do if (($13 | 0) == 64) HEAP8[$$1$lcssa >> 0] = 111; else if (($13 | 0) == 8) if (!($__flags & 16384)) {
  HEAP8[$$1$lcssa >> 0] = 120;
  break;
 } else {
  HEAP8[$$1$lcssa >> 0] = 88;
  break;
 } else if ($__signd) {
  HEAP8[$$1$lcssa >> 0] = 100;
  break;
 } else {
  HEAP8[$$1$lcssa >> 0] = 117;
  break;
 } while (0);
 return;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $st, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $st = $st | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 var $$016 = 0, $$1 = 0, $$pn = 0, $2 = 0, $3 = 0, $7 = 0, $8 = 0, $nbytes$0$lcssa = 0, $nbytes$07 = 0, $nbytes$1 = 0, $nwchar_t$08 = 0;
 L1 : do if (($mx | 0) == 0 | ($frm | 0) == ($frm_end | 0)) $nbytes$0$lcssa = 0; else {
  $2 = $frm_end;
  $3 = $this + 8 | 0;
  $$016 = $frm;
  $nbytes$07 = 0;
  $nwchar_t$08 = 0;
  while (1) {
   $7 = _uselocale(HEAP32[$3 >> 2] | 0) | 0;
   $8 = _mbrlen($$016, $2 - $$016 | 0, $st) | 0;
   if ($7) _uselocale($7 | 0) | 0;
   if (!$8) {
    $$1 = $$016 + 1 | 0;
    $$pn = 1;
   } else if (($8 | 0) == -2 | ($8 | 0) == -1) {
    $nbytes$0$lcssa = $nbytes$07;
    break L1;
   } else {
    $$1 = $$016 + $8 | 0;
    $$pn = $8;
   }
   $nbytes$1 = $$pn + $nbytes$07 | 0;
   $nwchar_t$08 = $nwchar_t$08 + 1 | 0;
   if ($nwchar_t$08 >>> 0 >= $mx >>> 0 | ($$1 | 0) == ($frm_end | 0)) {
    $nbytes$0$lcssa = $nbytes$1;
    break;
   } else {
    $$016 = $$1;
    $nbytes$07 = $nbytes$1;
   }
  }
 } while (0);
 return $nbytes$0$lcssa | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9push_backEw($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$pn = 0, $0 = 0, $19 = 0, $2 = 0, $20 = 0, $__cap$0 = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0;
 $0 = HEAP8[$this >> 0] | 0;
 $2 = ($0 & 1) != 0;
 if ($2) {
  $__cap$0 = (HEAP32[$this >> 2] & -2) + -1 | 0;
  $__sz$0 = HEAP32[$this + 4 >> 2] | 0;
 } else {
  $__cap$0 = 1;
  $__sz$0 = ($0 & 255) >>> 1;
 }
 if (($__sz$0 | 0) == ($__cap$0 | 0)) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this, $__cap$0, 1, $__cap$0, $__cap$0, 0, 0);
  if (!(HEAP8[$this >> 0] & 1)) label = 7; else label = 8;
 } else if ($2) label = 8; else label = 7;
 if ((label | 0) == 7) {
  HEAP8[$this >> 0] = ($__sz$0 << 1) + 2;
  $$pn = $this + 4 | 0;
  $__p$0$sum$pre$phiZZZ2D = $__sz$0 + 1 | 0;
 } else if ((label | 0) == 8) {
  $19 = HEAP32[$this + 8 >> 2] | 0;
  $20 = $__sz$0 + 1 | 0;
  HEAP32[$this + 4 >> 2] = $20;
  $$pn = $19;
  $__p$0$sum$pre$phiZZZ2D = $20;
 }
 HEAP32[$$pn + ($__sz$0 << 2) >> 2] = $__c;
 HEAP32[$$pn + ($__p$0$sum$pre$phiZZZ2D << 2) >> 2] = 0;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9push_backEc($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 var $$pn = 0, $0 = 0, $19 = 0, $2 = 0, $20 = 0, $__cap$0 = 0, $__p$0$sum$pre$phiZZZ2D = 0, $__sz$0 = 0, label = 0;
 $0 = HEAP8[$this >> 0] | 0;
 $2 = ($0 & 1) != 0;
 if ($2) {
  $__cap$0 = (HEAP32[$this >> 2] & -2) + -1 | 0;
  $__sz$0 = HEAP32[$this + 4 >> 2] | 0;
 } else {
  $__cap$0 = 10;
  $__sz$0 = ($0 & 255) >>> 1;
 }
 if (($__sz$0 | 0) == ($__cap$0 | 0)) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $__cap$0, 1, $__cap$0, $__cap$0, 0, 0);
  if (!(HEAP8[$this >> 0] & 1)) label = 7; else label = 8;
 } else if ($2) label = 8; else label = 7;
 if ((label | 0) == 7) {
  HEAP8[$this >> 0] = ($__sz$0 << 1) + 2;
  $$pn = $this + 1 | 0;
  $__p$0$sum$pre$phiZZZ2D = $__sz$0 + 1 | 0;
 } else if ((label | 0) == 8) {
  $19 = HEAP32[$this + 8 >> 2] | 0;
  $20 = $__sz$0 + 1 | 0;
  HEAP32[$this + 4 >> 2] = $20;
  $$pn = $19;
  $__p$0$sum$pre$phiZZZ2D = $20;
 }
 HEAP8[$$pn + $__sz$0 >> 0] = $__c;
 HEAP8[$$pn + $__p$0$sum$pre$phiZZZ2D >> 0] = 0;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($this, $__first, $__last) {
 $this = $this | 0;
 $__first = $__first | 0;
 $__last = $__last | 0;
 var $$02 = 0, $0 = 0, $10 = 0, $16 = 0, $2 = 0, $9 = 0, $__p$0$lcssa = 0, $__p$0$ph = 0, $__p$01 = 0;
 $0 = $__first;
 $2 = $__last - $0 | 0;
 if ($2 >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($2 >>> 0 < 11) {
  HEAP8[$this >> 0] = $2 << 1;
  $__p$0$ph = $this + 1 | 0;
 } else {
  $9 = $2 + 16 & -16;
  $10 = __Znwj($9) | 0;
  HEAP32[$this + 8 >> 2] = $10;
  HEAP32[$this >> 2] = $9 | 1;
  HEAP32[$this + 4 >> 2] = $2;
  $__p$0$ph = $10;
 }
 if (($__first | 0) == ($__last | 0)) $__p$0$lcssa = $__p$0$ph; else {
  $16 = $__last - $0 | 0;
  $$02 = $__first;
  $__p$01 = $__p$0$ph;
  while (1) {
   HEAP8[$__p$01 >> 0] = HEAP8[$$02 >> 0] | 0;
   $$02 = $$02 + 1 | 0;
   if (($$02 | 0) == ($__last | 0)) break; else $__p$01 = $__p$01 + 1 | 0;
  }
  $__p$0$lcssa = $__p$0$ph + $16 | 0;
 }
 HEAP8[$__p$0$lcssa >> 0] = 0;
 return;
}

function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $14 = 0, $20 = 0, $6 = 0;
 do if ((HEAP32[$info + 8 >> 2] | 0) == ($this | 0)) {
  if ((HEAP32[$info + 4 >> 2] | 0) == ($current_ptr | 0)) {
   $6 = $info + 28 | 0;
   if ((HEAP32[$6 >> 2] | 0) != 1) HEAP32[$6 >> 2] = $path_below;
  }
 } else if ((HEAP32[$info >> 2] | 0) == ($this | 0)) {
  if ((HEAP32[$info + 16 >> 2] | 0) != ($current_ptr | 0)) {
   $14 = $info + 20 | 0;
   if ((HEAP32[$14 >> 2] | 0) != ($current_ptr | 0)) {
    HEAP32[$info + 32 >> 2] = $path_below;
    HEAP32[$14 >> 2] = $current_ptr;
    $20 = $info + 40 | 0;
    HEAP32[$20 >> 2] = (HEAP32[$20 >> 2] | 0) + 1;
    if ((HEAP32[$info + 36 >> 2] | 0) == 1) if ((HEAP32[$info + 24 >> 2] | 0) == 2) HEAP8[$info + 54 >> 0] = 1;
    HEAP32[$info + 44 >> 2] = 4;
    break;
   }
  }
  if (($path_below | 0) == 1) HEAP32[$info + 32 >> 2] = 1;
 } while (0);
 return;
}

function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $1 = 0, $15 = 0, $18 = 0, $19 = 0, $2 = 0, $4 = 0, $5 = 0, $6 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $18 = 0;
  $19 = 0;
 } else {
  $1 = ___errno_location() | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = 0;
  $4 = _strtoll_l($__a, $__p2, $__base, __ZNSt3__16__clocEv() | 0) | 0;
  $5 = tempRet0;
  $6 = HEAP32[$1 >> 2] | 0;
  if (!$6) HEAP32[$1 >> 2] = $2;
  if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
   HEAP32[$__err >> 2] = 4;
   $18 = 0;
   $19 = 0;
   break;
  }
  if (($6 | 0) == 34) {
   HEAP32[$__err >> 2] = 4;
   $15 = ($5 | 0) > 0 | ($5 | 0) == 0 & $4 >>> 0 > 0;
   tempRet0 = $15 ? 2147483647 : -2147483648;
   STACKTOP = sp;
   return ($15 ? -1 : 0) | 0;
  } else {
   $18 = $5;
   $19 = $4;
  }
 } while (0);
 tempRet0 = $18;
 STACKTOP = sp;
 return $19 | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $st, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $st = $st | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $$0 = 0, $12 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $5 = 0, $6 = 0, $n$02 = 0, $p$03 = 0, $tmp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmp = sp;
 HEAP32[$to_nxt >> 2] = $to;
 $2 = _uselocale(HEAP32[$this + 8 >> 2] | 0) | 0;
 $3 = _wcrtomb($tmp, 0, $st) | 0;
 if ($2) _uselocale($2 | 0) | 0;
 L4 : do if (($3 | 0) == 0 | ($3 | 0) == -1) $$0 = 2; else {
  $5 = $3 + -1 | 0;
  $6 = HEAP32[$to_nxt >> 2] | 0;
  if ($5 >>> 0 > ($to_end - $6 | 0) >>> 0) $$0 = 1; else if (!$5) $$0 = 0; else {
   $14 = $6;
   $n$02 = $5;
   $p$03 = $tmp;
   while (1) {
    $12 = HEAP8[$p$03 >> 0] | 0;
    HEAP32[$to_nxt >> 2] = $14 + 1;
    HEAP8[$14 >> 0] = $12;
    $15 = $n$02 + -1 | 0;
    if (!$15) {
     $$0 = 0;
     break L4;
    }
    $14 = HEAP32[$to_nxt >> 2] | 0;
    $n$02 = $15;
    $p$03 = $p$03 + 1 | 0;
   }
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg$result, $__iob, $__atoms, $__decimal_point, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $0 = 0, $4 = 0, $__loc = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 4896) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 7]($0, 3416, 3448 | 0, $__atoms) | 0;
 $4 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 5056) | 0;
 HEAP32[$__decimal_point >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 63]($4) | 0;
 HEAP32[$__thousands_sep >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] & 63]($4) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] & 63]($agg$result, $4);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$__loc >> 2] | 0) | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg$result, $__iob, $__atoms, $__decimal_point, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__decimal_point = $__decimal_point | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $0 = 0, $4 = 0, $__loc = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 4904) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] & 7]($0, 3416, 3448 | 0, $__atoms) | 0;
 $4 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 5048) | 0;
 HEAP8[$__decimal_point >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 12 >> 2] & 63]($4) | 0;
 HEAP8[$__thousands_sep >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] & 63]($4) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] & 63]($agg$result, $4);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$__loc >> 2] | 0) | 0;
 STACKTOP = sp;
 return;
}

function ___shgetc($f) {
 $f = $f | 0;
 var $$0 = 0, $$pre = 0, $$pre3 = 0, $0 = 0, $1 = 0, $12 = 0, $19 = 0, $27 = 0, $32 = 0, $6 = 0, $9 = 0, label = 0;
 $0 = $f + 104 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (!$1) label = 3; else if ((HEAP32[$f + 108 >> 2] | 0) < ($1 | 0)) label = 3;
 if ((label | 0) == 3) {
  $6 = ___uflow($f) | 0;
  if (($6 | 0) >= 0) {
   $9 = HEAP32[$0 >> 2] | 0;
   $$pre = HEAP32[$f + 8 >> 2] | 0;
   if (!$9) label = 8; else {
    $12 = HEAP32[$f + 4 >> 2] | 0;
    $19 = $9 - (HEAP32[$f + 108 >> 2] | 0) + -1 | 0;
    if (($$pre - $12 | 0) > ($19 | 0)) HEAP32[$f + 100 >> 2] = $12 + $19; else label = 8;
   }
   if ((label | 0) == 8) HEAP32[$f + 100 >> 2] = $$pre;
   $$pre3 = HEAP32[$f + 4 >> 2] | 0;
   if ($$pre) {
    $27 = $f + 108 | 0;
    HEAP32[$27 >> 2] = $$pre + 1 - $$pre3 + (HEAP32[$27 >> 2] | 0);
   }
   $32 = $$pre3 + -1 | 0;
   if ((HEAPU8[$32 >> 0] | 0 | 0) == ($6 | 0)) {
    $$0 = $6;
    return $$0 | 0;
   }
   HEAP8[$32 >> 0] = $6;
   $$0 = $6;
   return $$0 | 0;
  }
 }
 HEAP32[$f + 100 >> 2] = 0;
 $$0 = -1;
 return $$0 | 0;
}

function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $5 = 0, $6 = 0, $9 = 0, $p$0 = 0;
 L1 : do if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below); else {
  $5 = HEAP32[$this + 12 >> 2] | 0;
  $6 = $this + ($5 << 3) + 16 | 0;
  __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this + 16 | 0, $info, $adjustedPtr, $path_below);
  if (($5 | 0) > 1) {
   $9 = $info + 54 | 0;
   $p$0 = $this + 24 | 0;
   do {
    __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($p$0, $info, $adjustedPtr, $path_below);
    if (HEAP8[$9 >> 0] | 0) break L1;
    $p$0 = $p$0 + 8 | 0;
   } while ($p$0 >>> 0 < $6 >>> 0);
  }
 } while (0);
 return;
}

function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this, $thrown_type, $adjustedPtr) {
 $this = $this | 0;
 $thrown_type = $thrown_type | 0;
 $adjustedPtr = $adjustedPtr | 0;
 var $$1 = 0, $2 = 0, $info = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $info = sp;
 if (($this | 0) == ($thrown_type | 0)) $$1 = 1; else if (!$thrown_type) $$1 = 0; else {
  $2 = ___dynamic_cast($thrown_type, 13616, 13672, 0) | 0;
  if (!$2) $$1 = 0; else {
   dest = $info + 0 | 0;
   stop = dest + 56 | 0;
   do {
    HEAP32[dest >> 2] = 0;
    dest = dest + 4 | 0;
   } while ((dest | 0) < (stop | 0));
   HEAP32[$info >> 2] = $2;
   HEAP32[$info + 8 >> 2] = $this;
   HEAP32[$info + 12 >> 2] = -1;
   HEAP32[$info + 48 >> 2] = 1;
   FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$2 >> 2] | 0) + 28 >> 2] & 7]($2, $info, HEAP32[$adjustedPtr >> 2] | 0, 1);
   if ((HEAP32[$info + 24 >> 2] | 0) == 1) {
    HEAP32[$adjustedPtr >> 2] = HEAP32[$info + 16 >> 2];
    $$1 = 1;
   } else $$1 = 0;
  }
 }
 STACKTOP = sp;
 return $$1 | 0;
}

function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0;
 } else {
  if ((HEAP8[$__a >> 0] | 0) == 45) {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0;
   break;
  }
  $3 = ___errno_location() | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  HEAP32[$3 >> 2] = 0;
  $6 = _strtoull_l($__a, $__p2, $__base, __ZNSt3__16__clocEv() | 0) | 0;
  $7 = tempRet0;
  $8 = HEAP32[$3 >> 2] | 0;
  if (!$8) HEAP32[$3 >> 2] = $4;
  if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0;
   break;
  }
  if (($8 | 0) == 34 | ($7 >>> 0 > 0 | ($7 | 0) == 0 & $6 >>> 0 > 65535)) {
   HEAP32[$__err >> 2] = 4;
   $$0 = -1;
   break;
  } else {
   $$0 = $6 & 65535;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0;
 } else {
  if ((HEAP8[$__a >> 0] | 0) == 45) {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0;
   break;
  }
  $3 = ___errno_location() | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  HEAP32[$3 >> 2] = 0;
  $6 = _strtoull_l($__a, $__p2, $__base, __ZNSt3__16__clocEv() | 0) | 0;
  $7 = tempRet0;
  $8 = HEAP32[$3 >> 2] | 0;
  if (!$8) HEAP32[$3 >> 2] = $4;
  if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0;
   break;
  }
  if (($8 | 0) == 34 | ($7 >>> 0 > 0 | ($7 | 0) == 0 & $6 >>> 0 > 4294967295)) {
   HEAP32[$__err >> 2] = 4;
   $$0 = -1;
   break;
  } else {
   $$0 = $6;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $$0 = 0, $3 = 0, $4 = 0, $6 = 0, $7 = 0, $8 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0;
 } else {
  if ((HEAP8[$__a >> 0] | 0) == 45) {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0;
   break;
  }
  $3 = ___errno_location() | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  HEAP32[$3 >> 2] = 0;
  $6 = _strtoull_l($__a, $__p2, $__base, __ZNSt3__16__clocEv() | 0) | 0;
  $7 = tempRet0;
  $8 = HEAP32[$3 >> 2] | 0;
  if (!$8) HEAP32[$3 >> 2] = $4;
  if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0;
   break;
  }
  if (($8 | 0) == 34 | ($7 >>> 0 > 0 | ($7 | 0) == 0 & $6 >>> 0 > 4294967295)) {
   HEAP32[$__err >> 2] = 4;
   $$0 = -1;
   break;
  } else {
   $$0 = $6;
   break;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a, $__a_end, $__err, $__base) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 $__base = $__base | 0;
 var $13 = 0, $14 = 0, $3 = 0, $4 = 0, $6 = 0, $8 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $13 = 0;
  $14 = 0;
 } else {
  if ((HEAP8[$__a >> 0] | 0) == 45) {
   HEAP32[$__err >> 2] = 4;
   $13 = 0;
   $14 = 0;
   break;
  }
  $3 = ___errno_location() | 0;
  $4 = HEAP32[$3 >> 2] | 0;
  HEAP32[$3 >> 2] = 0;
  $6 = _strtoull_l($__a, $__p2, $__base, __ZNSt3__16__clocEv() | 0) | 0;
  $8 = HEAP32[$3 >> 2] | 0;
  if (!$8) HEAP32[$3 >> 2] = $4;
  if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
   HEAP32[$__err >> 2] = 4;
   $13 = 0;
   $14 = 0;
   break;
  }
  if (($8 | 0) == 34) {
   HEAP32[$__err >> 2] = 4;
   $13 = -1;
   $14 = -1;
  } else {
   $13 = tempRet0;
   $14 = $6;
  }
 } while (0);
 tempRet0 = $13;
 STACKTOP = sp;
 return $14 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $1 = 0, $15 = 0, $16 = 0, $21 = 0, $27 = 0, $28 = 0, $4 = 0, $8 = 0;
 if ($__n) {
  $1 = HEAP8[$this >> 0] | 0;
  if (!($1 & 1)) {
   $16 = 10;
   $8 = $1;
  } else {
   $4 = HEAP32[$this >> 2] | 0;
   $16 = ($4 & -2) + -1 | 0;
   $8 = $4 & 255;
  }
  if (!($8 & 1)) $15 = ($8 & 255) >>> 1; else $15 = HEAP32[$this + 4 >> 2] | 0;
  if (($16 - $15 | 0) >>> 0 < $__n >>> 0) {
   __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this, $16, $__n - $16 + $15 | 0, $15, $15, 0, 0);
   $21 = HEAP8[$this >> 0] | 0;
  } else $21 = $8;
  if (!($21 & 1)) $27 = $this + 1 | 0; else $27 = HEAP32[$this + 8 >> 2] | 0;
  _memset($27 + $15 | 0, $__c | 0, $__n | 0) | 0;
  $28 = $15 + $__n | 0;
  if (!(HEAP8[$this >> 0] & 1)) HEAP8[$this >> 0] = $28 << 1; else HEAP32[$this + 4 >> 2] = $28;
  HEAP8[$27 + $28 >> 0] = 0;
 }
 return $this | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 $2 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 4896) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 16 | 0, $__b, $$byval_copy, $__err, $2);
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 $2 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 4896) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 24 | 0, $__b, $$byval_copy, $__err, $2);
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 $2 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 4904) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 16 | 0, $__b, $$byval_copy, $__err, $2);
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 $2 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 4904) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 24 | 0, $__b, $$byval_copy, $__err, $2);
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 $2 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 4896) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__tm + 20 | 0, $__b, $$byval_copy, $__err, $2);
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 __ZNKSt3__18ios_base6getlocEv($0, $__iob);
 $2 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 4904) | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$0 >> 2] | 0) | 0;
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__tm + 20 | 0, $__b, $$byval_copy, $__err, $2);
 HEAP32[$agg$result >> 2] = HEAP32[$__b >> 2];
 STACKTOP = sp;
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $10 = 0, $14 = 0, $27 = 0, $3 = 0, $6 = 0, $9 = 0;
 $0 = HEAP8[$this >> 0] | 0;
 if (!($0 & 1)) {
  $6 = 10;
  $9 = $0;
 } else {
  $3 = HEAP32[$this >> 2] | 0;
  $6 = ($3 & -2) + -1 | 0;
  $9 = $3 & 255;
 }
 $10 = ($9 & 1) == 0;
 do if ($6 >>> 0 < $__n >>> 0) {
  if ($10) $27 = ($9 & 255) >>> 1; else $27 = HEAP32[$this + 4 >> 2] | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $6, $__n - $6 | 0, $27, 0, $27, $__n, $__s);
 } else {
  if ($10) $14 = $this + 1 | 0; else $14 = HEAP32[$this + 8 >> 2] | 0;
  _memmove($14 | 0, $__s | 0, $__n | 0) | 0;
  HEAP8[$14 + $__n >> 0] = 0;
  if (!(HEAP8[$this >> 0] & 1)) {
   HEAP8[$this >> 0] = $__n << 1;
   break;
  } else {
   HEAP32[$this + 4 >> 2] = $__n;
   break;
  }
 } while (0);
 return $this | 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$01 = 0, $1 = 0, $11 = 0, $14 = 0, $2 = 0, $3 = 0, $__i$0$lcssa = 0, $__i$02 = 0, $storemerge = 0;
 L1 : do if (($__n | 0) > 0) {
  $1 = $this + 12 | 0;
  $2 = $this + 16 | 0;
  $$01 = $__s;
  $__i$02 = 0;
  while (1) {
   $3 = HEAP32[$1 >> 2] | 0;
   if ($3 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
    HEAP32[$1 >> 2] = $3 + 1;
    $storemerge = HEAP8[$3 >> 0] | 0;
   } else {
    $11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 40 >> 2] & 63]($this) | 0;
    if (($11 | 0) == -1) {
     $__i$0$lcssa = $__i$02;
     break L1;
    }
    $storemerge = $11 & 255;
   }
   HEAP8[$$01 >> 0] = $storemerge;
   $14 = $__i$02 + 1 | 0;
   if (($14 | 0) < ($__n | 0)) {
    $$01 = $$01 + 1 | 0;
    $__i$02 = $14;
   } else {
    $__i$0$lcssa = $14;
    break;
   }
  }
 } else $__i$0$lcssa = 0; while (0);
 return $__i$0$lcssa | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $10 = 0, $14 = 0, $27 = 0, $3 = 0, $6 = 0, $9 = 0;
 $0 = HEAP8[$this >> 0] | 0;
 if (!($0 & 1)) {
  $6 = 1;
  $9 = $0;
 } else {
  $3 = HEAP32[$this >> 2] | 0;
  $6 = ($3 & -2) + -1 | 0;
  $9 = $3 & 255;
 }
 $10 = ($9 & 1) == 0;
 do if ($6 >>> 0 < $__n >>> 0) {
  if ($10) $27 = ($9 & 255) >>> 1; else $27 = HEAP32[$this + 4 >> 2] | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE21__grow_by_and_replaceEjjjjjjPKw($this, $6, $__n - $6 | 0, $27, 0, $27, $__n, $__s);
 } else {
  if ($10) $14 = $this + 4 | 0; else $14 = HEAP32[$this + 8 >> 2] | 0;
  _wmemmove($14, $__s, $__n) | 0;
  HEAP32[$14 + ($__n << 2) >> 2] = 0;
  if (!(HEAP8[$this >> 0] & 1)) {
   HEAP8[$this >> 0] = $__n << 1;
   break;
  } else {
   HEAP32[$this + 4 >> 2] = $__n;
   break;
  }
 } while (0);
 return $this | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$01 = 0, $1 = 0, $11 = 0, $13 = 0, $2 = 0, $3 = 0, $__i$0$lcssa = 0, $__i$02 = 0, $storemerge = 0;
 L1 : do if (($__n | 0) > 0) {
  $1 = $this + 12 | 0;
  $2 = $this + 16 | 0;
  $$01 = $__s;
  $__i$02 = 0;
  while (1) {
   $3 = HEAP32[$1 >> 2] | 0;
   if ($3 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
    HEAP32[$1 >> 2] = $3 + 4;
    $storemerge = HEAP32[$3 >> 2] | 0;
   } else {
    $11 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 40 >> 2] & 63]($this) | 0;
    if (($11 | 0) == -1) {
     $__i$0$lcssa = $__i$02;
     break L1;
    } else $storemerge = $11;
   }
   HEAP32[$$01 >> 2] = $storemerge;
   $13 = $__i$02 + 1 | 0;
   if (($13 | 0) < ($__n | 0)) {
    $$01 = $$01 + 4 | 0;
    $__i$02 = $13;
   } else {
    $__i$0$lcssa = $13;
    break;
   }
  }
 } else $__i$0$lcssa = 0; while (0);
 return $__i$0$lcssa | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $0 = 0, $14 = 0, $15 = 0, $24 = 0, $25 = 0, $3 = 0, $7 = 0;
 $0 = HEAP8[$this >> 0] | 0;
 if (!($0 & 1)) {
  $15 = 10;
  $7 = $0;
 } else {
  $3 = HEAP32[$this >> 2] | 0;
  $15 = ($3 & -2) + -1 | 0;
  $7 = $3 & 255;
 }
 if (!($7 & 1)) $14 = ($7 & 255) >>> 1; else $14 = HEAP32[$this + 4 >> 2] | 0;
 if (($15 - $14 | 0) >>> 0 < $__n >>> 0) __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this, $15, $__n - $15 + $14 | 0, $14, $14, 0, $__n, $__s); else if ($__n) {
  if (!($7 & 1)) $24 = $this + 1 | 0; else $24 = HEAP32[$this + 8 >> 2] | 0;
  _memcpy($24 + $14 | 0, $__s | 0, $__n | 0) | 0;
  $25 = $14 + $__n | 0;
  if (!(HEAP8[$this >> 0] & 1)) HEAP8[$this >> 0] = $25 << 1; else HEAP32[$this + 4 >> 2] = $25;
  HEAP8[$24 + $25 >> 0] = 0;
 }
 return $this | 0;
}

function __ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc($this, $__wb, $__we, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__wb = $__wb | 0;
 $__we = $__we | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $1 = 0, $11 = 0, $12 = 0, $9 = 0, $__nar = 0, $__nb = 0, $__ne = 0, $mb = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 $__nar = sp + 16 | 0;
 $__ne = sp + 12 | 0;
 $mb = sp;
 $__nb = sp + 8 | 0;
 HEAP32[$__ne >> 2] = $__nar + 100;
 __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this, $__nar, $__ne, $__tm, $__fmt, $__mod);
 $1 = $mb;
 HEAP32[$1 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$__nb >> 2] = $__nar;
 $9 = (HEAP32[$__we >> 2] | 0) - $__wb >> 2;
 $11 = _uselocale(HEAP32[$this >> 2] | 0) | 0;
 $12 = _mbsrtowcs($__wb, $__nb, $9, $mb) | 0;
 if ($11) _uselocale($11 | 0) | 0;
 if (($12 | 0) == -1) __ZNSt3__121__throw_runtime_errorEPKc(5784); else {
  HEAP32[$__we >> 2] = $__wb + ($12 << 2);
  STACKTOP = sp;
  return;
 }
}

function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this, $__lo1, $__hi1, $__lo2, $__hi2) {
 $this = $this | 0;
 $__lo1 = $__lo1 | 0;
 $__hi1 = $__hi1 | 0;
 $__lo2 = $__lo2 | 0;
 $__hi2 = $__hi2 | 0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $2 = 0, $3 = 0, $6 = 0, label = 0;
 L1 : do if (($__lo2 | 0) == ($__hi2 | 0)) {
  $$02$lcssa = $__lo1;
  label = 6;
 } else {
  $$015 = $__lo2;
  $$024 = $__lo1;
  while (1) {
   if (($$024 | 0) == ($__hi1 | 0)) {
    $$0 = -1;
    break L1;
   }
   $2 = HEAP8[$$024 >> 0] | 0;
   $3 = HEAP8[$$015 >> 0] | 0;
   if ($2 << 24 >> 24 < $3 << 24 >> 24) {
    $$0 = -1;
    break L1;
   }
   if ($3 << 24 >> 24 < $2 << 24 >> 24) {
    $$0 = 1;
    break L1;
   }
   $6 = $$024 + 1 | 0;
   $$015 = $$015 + 1 | 0;
   if (($$015 | 0) == ($__hi2 | 0)) {
    $$02$lcssa = $6;
    label = 6;
    break;
   } else $$024 = $6;
  }
 } while (0);
 if ((label | 0) == 6) $$0 = ($$02$lcssa | 0) != ($__hi1 | 0) & 1;
 return $$0 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = $this + 8 | 0;
 $5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] & 63]($1) | 0;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $11 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $5, $5 + 288 | 0, $__ct, $__err, 0) | 0) - $5 | 0;
 if (($11 | 0) < 288) HEAP32[$__m >> 2] = (($11 | 0) / 12 | 0 | 0) % 12 | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__get_monthnameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $11 = 0, $5 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = $this + 8 | 0;
 $5 = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$1 >> 2] | 0) + 4 >> 2] & 63]($1) | 0;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $11 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $5, $5 + 288 | 0, $__ct, $__err, 0) | 0) - $5 | 0;
 if (($11 | 0) < 288) HEAP32[$__m >> 2] = (($11 | 0) / 12 | 0 | 0) % 12 | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this, $ec, $what_arg) {
 $this = $this | 0;
 $ec = $ec | 0;
 $what_arg = $what_arg | 0;
 var $0 = 0, $1 = 0, $10 = 0, $4 = 0, $9 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 $0 = sp + 12 | 0;
 $1 = sp;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($1, $what_arg, _strlen($what_arg | 0) | 0);
 __ZNSt3__112system_error6__initERKNS_10error_codeENS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($0, $ec, $1);
 __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this, $0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($1);
 HEAP32[$this >> 2] = 1912;
 $4 = $ec;
 $9 = HEAP32[$4 + 4 >> 2] | 0;
 $10 = $this + 8 | 0;
 HEAP32[$10 >> 2] = HEAP32[$4 >> 2];
 HEAP32[$10 + 4 >> 2] = $9;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__w, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = $this + 8 | 0;
 $4 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$1 >> 2] >> 2] & 63]($1) | 0;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $10 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $4, $4 + 168 | 0, $__ct, $__err, 0) | 0) - $4 | 0;
 if (($10 | 0) < 168) HEAP32[$__w >> 2] = (($10 | 0) / 12 | 0 | 0) % 7 | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__get_weekdaynameERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__w, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $4 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 $1 = $this + 8 | 0;
 $4 = FUNCTION_TABLE_ii[HEAP32[HEAP32[$1 >> 2] >> 2] & 63]($1) | 0;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $10 = (__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b, $$byval_copy, $4, $4 + 168 | 0, $__ct, $__err, 0) | 0) - $4 | 0;
 if (($10 | 0) < 168) HEAP32[$__w >> 2] = (($10 | 0) / 12 | 0 | 0) % 7 | 0;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this, $__lo1, $__hi1, $__lo2, $__hi2) {
 $this = $this | 0;
 $__lo1 = $__lo1 | 0;
 $__hi1 = $__hi1 | 0;
 $__lo2 = $__lo2 | 0;
 $__hi2 = $__hi2 | 0;
 var $$0 = 0, $$015 = 0, $$02$lcssa = 0, $$024 = 0, $2 = 0, $3 = 0, $6 = 0, label = 0;
 L1 : do if (($__lo2 | 0) == ($__hi2 | 0)) {
  $$02$lcssa = $__lo1;
  label = 6;
 } else {
  $$015 = $__lo2;
  $$024 = $__lo1;
  while (1) {
   if (($$024 | 0) == ($__hi1 | 0)) {
    $$0 = -1;
    break L1;
   }
   $2 = HEAP32[$$024 >> 2] | 0;
   $3 = HEAP32[$$015 >> 2] | 0;
   if (($2 | 0) < ($3 | 0)) {
    $$0 = -1;
    break L1;
   }
   if (($3 | 0) < ($2 | 0)) {
    $$0 = 1;
    break L1;
   }
   $6 = $$024 + 4 | 0;
   $$015 = $$015 + 4 | 0;
   if (($$015 | 0) == ($__hi2 | 0)) {
    $$02$lcssa = $6;
    label = 6;
    break;
   } else $$024 = $6;
  }
 } while (0);
 if ((label | 0) == 6) $$0 = ($$02$lcssa | 0) != ($__hi1 | 0) & 1;
 return $$0 | 0;
}

function __ZNSt3__111__stdoutbufIwE4syncEv($this) {
 $this = $this | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__extbe = 0, $__extbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__extbuf = sp + 8 | 0;
 $__extbe = sp;
 $0 = $this + 36 | 0;
 $1 = $this + 40 | 0;
 $2 = $__extbuf + 8 | 0;
 $3 = $__extbuf;
 $4 = $this + 32 | 0;
 while (1) {
  $5 = HEAP32[$0 >> 2] | 0;
  $10 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 15]($5, HEAP32[$1 >> 2] | 0, $__extbuf, $2, $__extbe) | 0;
  $13 = (HEAP32[$__extbe >> 2] | 0) - $3 | 0;
  if ((_fwrite($__extbuf | 0, 1, $13 | 0, HEAP32[$4 >> 2] | 0) | 0) != ($13 | 0)) {
   $$0 = -1;
   break;
  }
  if (($10 | 0) == 2) {
   $$0 = -1;
   break;
  } else if (($10 | 0) != 1) {
   label = 4;
   break;
  }
 }
 if ((label | 0) == 4) $$0 = ((_fflush(HEAP32[$4 >> 2] | 0) | 0) != 0) << 31 >> 31;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNSt3__111__stdoutbufIcE4syncEv($this) {
 $this = $this | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $__extbe = 0, $__extbuf = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__extbuf = sp + 8 | 0;
 $__extbe = sp;
 $0 = $this + 36 | 0;
 $1 = $this + 40 | 0;
 $2 = $__extbuf + 8 | 0;
 $3 = $__extbuf;
 $4 = $this + 32 | 0;
 while (1) {
  $5 = HEAP32[$0 >> 2] | 0;
  $10 = FUNCTION_TABLE_iiiiii[HEAP32[(HEAP32[$5 >> 2] | 0) + 20 >> 2] & 15]($5, HEAP32[$1 >> 2] | 0, $__extbuf, $2, $__extbe) | 0;
  $13 = (HEAP32[$__extbe >> 2] | 0) - $3 | 0;
  if ((_fwrite($__extbuf | 0, 1, $13 | 0, HEAP32[$4 >> 2] | 0) | 0) != ($13 | 0)) {
   $$0 = -1;
   break;
  }
  if (($10 | 0) == 2) {
   $$0 = -1;
   break;
  } else if (($10 | 0) != 1) {
   label = 4;
   break;
  }
 }
 if ((label | 0) == 4) $$0 = ((_fflush(HEAP32[$4 >> 2] | 0) | 0) != 0) << 31 >> 31;
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, 3960, 3992 | 0);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg$result, $this, $__b, $__e, $__iob, $__err, $__tm) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__tm = $__tm | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__tm, 3808, 3816 | 0);
 STACKTOP = sp;
 return;
}

function ___remdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $rem = __stackBase__ | 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
 $4$1 = tempRet0;
 ___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, tempRet0, $rem) | 0;
 $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
 $10$1 = tempRet0;
 STACKTOP = __stackBase__;
 return (tempRet0 = $10$1, $10$0) | 0;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIfEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIeEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE23__do_get_floating_pointIdEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIjEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedIyEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedItEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE17__do_get_unsignedImEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}

function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 $__b = $__b | 0;
 $__n = $__n | 0;
 $__e = $__e | 0;
 var $$ = 0, $$pr = 0, $0 = 0, $13 = 0, $15 = 0, $2 = 0, $21 = 0, $4 = 0, $6 = 0, $7 = 0;
 $0 = $__b + 4 | 0;
 $2 = (HEAP32[$0 >> 2] | 0) != 113;
 $4 = HEAP32[$__b >> 2] | 0;
 $6 = $4;
 $7 = (HEAP32[$__e >> 2] | 0) - $6 | 0;
 $$ = $7 >>> 0 < 2147483647 ? $7 << 1 : -1;
 $13 = (HEAP32[$__n >> 2] | 0) - $6 >> 2;
 $15 = _realloc($2 ? $4 : 0, $$) | 0;
 if (!$15) __ZSt17__throw_bad_allocv();
 if ($2) {
  HEAP32[$__b >> 2] = $15;
  $21 = $15;
 } else {
  $$pr = HEAP32[$__b >> 2] | 0;
  HEAP32[$__b >> 2] = $15;
  if (!$$pr) $21 = $15; else {
   FUNCTION_TABLE_vi[HEAP32[$0 >> 2] & 127]($$pr);
   $21 = HEAP32[$__b >> 2] | 0;
  }
 }
 HEAP32[$0 >> 2] = 125;
 HEAP32[$__n >> 2] = $21 + ($13 << 2);
 HEAP32[$__e >> 2] = (HEAP32[$__b >> 2] | 0) + ($$ >>> 2 << 2);
 return;
}

function __ZNSt3__119__double_or_nothingIjEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 $__b = $__b | 0;
 $__n = $__n | 0;
 $__e = $__e | 0;
 var $$ = 0, $$pr = 0, $0 = 0, $13 = 0, $15 = 0, $2 = 0, $21 = 0, $4 = 0, $6 = 0, $7 = 0;
 $0 = $__b + 4 | 0;
 $2 = (HEAP32[$0 >> 2] | 0) != 113;
 $4 = HEAP32[$__b >> 2] | 0;
 $6 = $4;
 $7 = (HEAP32[$__e >> 2] | 0) - $6 | 0;
 $$ = $7 >>> 0 < 2147483647 ? $7 << 1 : -1;
 $13 = (HEAP32[$__n >> 2] | 0) - $6 >> 2;
 $15 = _realloc($2 ? $4 : 0, $$) | 0;
 if (!$15) __ZSt17__throw_bad_allocv();
 if ($2) {
  HEAP32[$__b >> 2] = $15;
  $21 = $15;
 } else {
  $$pr = HEAP32[$__b >> 2] | 0;
  HEAP32[$__b >> 2] = $15;
  if (!$$pr) $21 = $15; else {
   FUNCTION_TABLE_vi[HEAP32[$0 >> 2] & 127]($$pr);
   $21 = HEAP32[$__b >> 2] | 0;
  }
 }
 HEAP32[$0 >> 2] = 125;
 HEAP32[$__n >> 2] = $21 + ($13 << 2);
 HEAP32[$__e >> 2] = (HEAP32[$__b >> 2] | 0) + ($$ >>> 2 << 2);
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIxEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg$result, $this, $__b, $__e, $__iob, $__err, $__v) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__iob = $__iob | 0;
 $__err = $__err | 0;
 $__v = $__v | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $0 = 0, $1 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy1 = sp + 12 | 0;
 $$byval_copy = sp + 8 | 0;
 $0 = sp + 4 | 0;
 $1 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__b >> 2];
 HEAP32[$1 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$$byval_copy1 + 0 >> 2] = HEAP32[$1 + 0 >> 2];
 __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE15__do_get_signedIlEES4_S4_S4_RNS_8ios_baseERjRT_($agg$result, $this, $$byval_copy, $$byval_copy1, $__iob, $__err, $__v);
 STACKTOP = sp;
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$02 = 0, $1 = 0, $15 = 0, $2 = 0, $3 = 0, $6 = 0, $__i$0$lcssa = 0, $__i$01 = 0;
 L1 : do if (($__n | 0) > 0) {
  $1 = $this + 24 | 0;
  $2 = $this + 28 | 0;
  $$02 = $__s;
  $__i$01 = 0;
  while (1) {
   $3 = HEAP32[$1 >> 2] | 0;
   if ($3 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
    $6 = HEAP32[$$02 >> 2] | 0;
    HEAP32[$1 >> 2] = $3 + 4;
    HEAP32[$3 >> 2] = $6;
   } else if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] & 31]($this, HEAP32[$$02 >> 2] | 0) | 0) == -1) {
    $__i$0$lcssa = $__i$01;
    break L1;
   }
   $15 = $__i$01 + 1 | 0;
   if (($15 | 0) < ($__n | 0)) {
    $$02 = $$02 + 4 | 0;
    $__i$01 = $15;
   } else {
    $__i$0$lcssa = $15;
    break;
   }
  }
 } else $__i$0$lcssa = 0; while (0);
 return $__i$0$lcssa | 0;
}

function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg$result, $__iob, $__atoms, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $0 = 0, $4 = 0, $__loc = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 4896) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 48 >> 2] & 7]($0, 3416, 3442 | 0, $__atoms) | 0;
 $4 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 5056) | 0;
 HEAP32[$__thousands_sep >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] & 63]($4) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] & 63]($agg$result, $4);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$__loc >> 2] | 0) | 0;
 STACKTOP = sp;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$02 = 0, $1 = 0, $16 = 0, $2 = 0, $3 = 0, $6 = 0, $__i$0$lcssa = 0, $__i$01 = 0;
 L1 : do if (($__n | 0) > 0) {
  $1 = $this + 24 | 0;
  $2 = $this + 28 | 0;
  $$02 = $__s;
  $__i$01 = 0;
  while (1) {
   $3 = HEAP32[$1 >> 2] | 0;
   if ($3 >>> 0 < (HEAP32[$2 >> 2] | 0) >>> 0) {
    $6 = HEAP8[$$02 >> 0] | 0;
    HEAP32[$1 >> 2] = $3 + 1;
    HEAP8[$3 >> 0] = $6;
   } else if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] & 31]($this, HEAPU8[$$02 >> 0] | 0) | 0) == -1) {
    $__i$0$lcssa = $__i$01;
    break L1;
   }
   $16 = $__i$01 + 1 | 0;
   if (($16 | 0) < ($__n | 0)) {
    $$02 = $$02 + 1 | 0;
    $__i$01 = $16;
   } else {
    $__i$0$lcssa = $16;
    break;
   }
  }
 } else $__i$0$lcssa = 0; while (0);
 return $__i$0$lcssa | 0;
}

function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg$result, $__iob, $__atoms, $__thousands_sep) {
 $agg$result = $agg$result | 0;
 $__iob = $__iob | 0;
 $__atoms = $__atoms | 0;
 $__thousands_sep = $__thousands_sep | 0;
 var $0 = 0, $4 = 0, $__loc = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__loc = sp;
 __ZNKSt3__18ios_base6getlocEv($__loc, $__iob);
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 4904) | 0;
 FUNCTION_TABLE_iiiii[HEAP32[(HEAP32[$0 >> 2] | 0) + 32 >> 2] & 7]($0, 3416, 3442 | 0, $__atoms) | 0;
 $4 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 5048) | 0;
 HEAP8[$__thousands_sep >> 0] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$4 >> 2] | 0) + 16 >> 2] & 63]($4) | 0;
 FUNCTION_TABLE_vii[HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] & 63]($agg$result, $4);
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$__loc >> 2] | 0) | 0;
 STACKTOP = sp;
 return;
}

function _scalbn($x, $n) {
 $x = +$x;
 $n = $n | 0;
 var $$0 = 0, $1 = 0.0, $12 = 0, $15 = 0, $16 = 0, $2 = 0, $5 = 0, $8 = 0.0, $9 = 0, $y$0 = 0.0;
 if (($n | 0) > 1023) {
  $1 = $x * 8988465674311579538646525.0e283;
  $2 = $n + -1023 | 0;
  if (($2 | 0) > 1023) {
   $5 = $n + -2046 | 0;
   $$0 = ($5 | 0) > 1023 ? 1023 : $5;
   $y$0 = $1 * 8988465674311579538646525.0e283;
  } else {
   $$0 = $2;
   $y$0 = $1;
  }
 } else if (($n | 0) < -1022) {
  $8 = $x * 2.2250738585072014e-308;
  $9 = $n + 1022 | 0;
  if (($9 | 0) < -1022) {
   $12 = $n + 2044 | 0;
   $$0 = ($12 | 0) < -1022 ? -1022 : $12;
   $y$0 = $8 * 2.2250738585072014e-308;
  } else {
   $$0 = $9;
   $y$0 = $8;
  }
 } else {
  $$0 = $n;
  $y$0 = $x;
 }
 $15 = _bitshift64Shl($$0 + 1023 | 0, 0, 52) | 0;
 $16 = tempRet0;
 HEAP32[tempDoublePtr >> 2] = $15;
 HEAP32[tempDoublePtr + 4 >> 2] = $16;
 return +($y$0 * +HEAPF64[tempDoublePtr >> 3]);
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE26__swap_out_circular_bufferERNS_14__split_bufferIS3_RS5_EE($this, $__v) {
 $this = $this | 0;
 $__v = $__v | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $13 = 0, $14 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $6 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 $1 = $this + 4 | 0;
 $3 = $__v + 4 | 0;
 $6 = (HEAP32[$1 >> 2] | 0) - $0 | 0;
 $10 = (HEAP32[$3 >> 2] | 0) + (0 - ($6 >> 2) << 2) | 0;
 HEAP32[$3 >> 2] = $10;
 _memcpy($10 | 0, $0 | 0, $6 | 0) | 0;
 $11 = HEAP32[$this >> 2] | 0;
 HEAP32[$this >> 2] = HEAP32[$3 >> 2];
 HEAP32[$3 >> 2] = $11;
 $13 = $__v + 8 | 0;
 $14 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = HEAP32[$13 >> 2];
 HEAP32[$13 >> 2] = $14;
 $16 = $this + 8 | 0;
 $17 = $__v + 12 | 0;
 $18 = HEAP32[$16 >> 2] | 0;
 HEAP32[$16 >> 2] = HEAP32[$17 >> 2];
 HEAP32[$17 >> 2] = $18;
 HEAP32[$__v >> 2] = HEAP32[$3 >> 2];
 return;
}

function __ZNSt3__119__double_or_nothingIcEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b, $__n, $__e) {
 $__b = $__b | 0;
 $__n = $__n | 0;
 $__e = $__e | 0;
 var $$ = 0, $$pr = 0, $0 = 0, $12 = 0, $14 = 0, $19 = 0, $2 = 0, $4 = 0, $6 = 0, $7 = 0;
 $0 = $__b + 4 | 0;
 $2 = (HEAP32[$0 >> 2] | 0) != 113;
 $4 = HEAP32[$__b >> 2] | 0;
 $6 = $4;
 $7 = (HEAP32[$__e >> 2] | 0) - $6 | 0;
 $$ = $7 >>> 0 < 2147483647 ? $7 << 1 : -1;
 $12 = (HEAP32[$__n >> 2] | 0) - $6 | 0;
 $14 = _realloc($2 ? $4 : 0, $$) | 0;
 if (!$14) __ZSt17__throw_bad_allocv();
 if ($2) {
  HEAP32[$__b >> 2] = $14;
  $19 = $14;
 } else {
  $$pr = HEAP32[$__b >> 2] | 0;
  HEAP32[$__b >> 2] = $14;
  if (!$$pr) $19 = $14; else {
   FUNCTION_TABLE_vi[HEAP32[$0 >> 2] & 127]($$pr);
   $19 = HEAP32[$__b >> 2] | 0;
  }
 }
 HEAP32[$0 >> 2] = 125;
 HEAP32[$__n >> 2] = $19 + $12;
 HEAP32[$__e >> 2] = (HEAP32[$__b >> 2] | 0) + $$;
 return;
}

function _wcrtomb($s, $wc, $st) {
 $s = $s | 0;
 $wc = $wc | 0;
 $st = $st | 0;
 var $$0 = 0;
 if (!$s) {
  $$0 = 1;
  return $$0 | 0;
 }
 if ($wc >>> 0 < 128) {
  HEAP8[$s >> 0] = $wc;
  $$0 = 1;
  return $$0 | 0;
 }
 if ($wc >>> 0 < 2048) {
  HEAP8[$s >> 0] = $wc >>> 6 | 192;
  HEAP8[$s + 1 >> 0] = $wc & 63 | 128;
  $$0 = 2;
  return $$0 | 0;
 }
 if ($wc >>> 0 < 55296 | ($wc & -8192 | 0) == 57344) {
  HEAP8[$s >> 0] = $wc >>> 12 | 224;
  HEAP8[$s + 1 >> 0] = $wc >>> 6 & 63 | 128;
  HEAP8[$s + 2 >> 0] = $wc & 63 | 128;
  $$0 = 3;
  return $$0 | 0;
 }
 if (($wc + -65536 | 0) >>> 0 < 1048576) {
  HEAP8[$s >> 0] = $wc >>> 18 | 240;
  HEAP8[$s + 1 >> 0] = $wc >>> 12 & 63 | 128;
  HEAP8[$s + 2 >> 0] = $wc >>> 6 & 63 | 128;
  HEAP8[$s + 3 >> 0] = $wc & 63 | 128;
  $$0 = 4;
  return $$0 | 0;
 } else {
  HEAP32[(___errno_location() | 0) >> 2] = 84;
  $$0 = -1;
  return $$0 | 0;
 }
 return 0;
}

function __ZNSt3__16locale5__impD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $10 = 0, $12 = 0, $18 = 0, $2 = 0, $3 = 0, $6 = 0, $7 = 0, $i$01 = 0;
 HEAP32[$this >> 2] = 4824;
 $0 = $this + 8 | 0;
 $1 = $this + 12 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 $3 = HEAP32[$0 >> 2] | 0;
 if (($2 | 0) != ($3 | 0)) {
  $18 = $2;
  $6 = $3;
  $i$01 = 0;
  while (1) {
   $7 = HEAP32[$6 + ($i$01 << 2) >> 2] | 0;
   if (!$7) {
    $10 = $18;
    $12 = $6;
   } else {
    __ZNSt3__114__shared_count16__release_sharedEv($7) | 0;
    $10 = HEAP32[$1 >> 2] | 0;
    $12 = HEAP32[$0 >> 2] | 0;
   }
   $i$01 = $i$01 + 1 | 0;
   if ($i$01 >>> 0 >= $10 - $12 >> 2 >>> 0) break; else {
    $18 = $10;
    $6 = $12;
   }
  }
 }
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this + 144 | 0);
 __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($0);
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__y, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $__t$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 4) | 0;
 if (!(HEAP32[$__err >> 2] & 4)) {
  if (($2 | 0) < 69) $__t$0 = $2 + 2e3 | 0; else $__t$0 = ($2 + -69 | 0) >>> 0 < 31 ? $2 + 1900 | 0 : $2;
  HEAP32[$__y >> 2] = $__t$0 + -1900;
 }
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_yearERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__y, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $__t$0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 4) | 0;
 if (!(HEAP32[$__err >> 2] & 4)) {
  if (($2 | 0) < 69) $__t$0 = $2 + 2e3 | 0; else $__t$0 = ($2 + -69 | 0) >>> 0 < 31 ? $2 + 1900 | 0 : $2;
  HEAP32[$__y >> 2] = $__t$0 + -1900;
 }
 STACKTOP = sp;
 return;
}

function _frexp($x, $e) {
 $x = +$x;
 $e = $e | 0;
 var $$0 = 0.0, $$01 = 0.0, $0 = 0, $1 = 0, $2 = 0, $4 = 0, $7 = 0.0, $storemerge = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 $2 = _bitshift64Lshr($0 | 0, $1 | 0, 52) | 0;
 $4 = $2 & 2047;
 if (!$4) {
  if ($x != 0.0) {
   $7 = +_frexp($x * 18446744073709551616.0, $e);
   $$01 = $7;
   $storemerge = (HEAP32[$e >> 2] | 0) + -64 | 0;
  } else {
   $$01 = $x;
   $storemerge = 0;
  }
  HEAP32[$e >> 2] = $storemerge;
  $$0 = $$01;
  return +$$0;
 } else if (($4 | 0) == 2047) {
  $$0 = $x;
  return +$$0;
 } else {
  HEAP32[$e >> 2] = $4 + -1022;
  HEAP32[tempDoublePtr >> 2] = $0;
  HEAP32[tempDoublePtr + 4 >> 2] = $1 & -2146435073 | 1071644672;
  $$0 = +HEAPF64[tempDoublePtr >> 3];
  return +$$0;
 }
 return +(0.0);
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($3 & 4 | 0) == 0 & ($2 | 0) > 0 & ($2 | 0) < 13) HEAP32[$__h >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_12_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($3 & 4 | 0) == 0 & ($2 | 0) > 0 & ($2 | 0) < 13) HEAP32[$__h >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this) {
 $this = $this | 0;
 var $12 = 0, $20 = 0, $__s = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__s = sp;
 if (HEAP32[$this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0) {
  __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_($__s, $this);
  if (HEAP8[$__s >> 0] | 0) {
   $12 = HEAP32[$this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] & 63]($12) | 0) == -1) {
    $20 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0;
    __ZNSt3__18ios_base5clearEj($this + $20 | 0, HEAP32[$this + ($20 + 16) >> 2] | 1);
   }
  }
  __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 }
 STACKTOP = sp;
 return $this | 0;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this) {
 $this = $this | 0;
 var $12 = 0, $20 = 0, $__s = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__s = sp;
 if (HEAP32[$this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0) {
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($__s, $this);
  if (HEAP8[$__s >> 0] | 0) {
   $12 = HEAP32[$this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0;
   if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$12 >> 2] | 0) + 24 >> 2] & 63]($12) | 0) == -1) {
    $20 = HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0;
    __ZNSt3__18ios_base5clearEj($this + $20 | 0, HEAP32[$this + ($20 + 16) >> 2] | 1);
   }
  }
  __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 }
 STACKTOP = sp;
 return $this | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__d, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($3 & 4 | 0) == 0 & ($2 | 0) > 0 & ($2 | 0) < 32) HEAP32[$__d >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE9__get_dayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__d, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($3 & 4 | 0) == 0 & ($2 | 0) > 0 & ($2 | 0) < 32) HEAP32[$__d >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__d, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 3) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($3 & 4 | 0) == 0 & ($2 | 0) < 366) HEAP32[$__d >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE18__get_day_year_numERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__d, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__d = $__d | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 3) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($3 & 4 | 0) == 0 & ($2 | 0) < 366) HEAP32[$__d >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($3 & 4 | 0) == 0 & ($2 | 0) < 13) HEAP32[$__m >> 2] = $2 + -1; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_monthERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($3 & 4 | 0) == 0 & ($2 | 0) < 13) HEAP32[$__m >> 2] = $2 + -1; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $_frm_nxt = 0, $_to_nxt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $1 = __ZNSt3__1L13utf16_to_utf8EPKtS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0;
 HEAP32[$frm_nxt >> 2] = $frm + ((HEAP32[$_frm_nxt >> 2] | 0) - $frm >> 1 << 1);
 HEAP32[$to_nxt >> 2] = $to + ((HEAP32[$_to_nxt >> 2] | 0) - $to);
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__w, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 1) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($3 & 4 | 0) == 0 & ($2 | 0) < 7) HEAP32[$__w >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__s, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($3 & 4 | 0) == 0 & ($2 | 0) < 61) HEAP32[$__s >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($3 & 4 | 0) == 0 & ($2 | 0) < 60) HEAP32[$__m >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13__get_weekdayERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__w, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__w = $__w | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 1) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($3 & 4 | 0) == 0 & ($2 | 0) < 7) HEAP32[$__w >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_secondERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__s, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($3 & 4 | 0) == 0 & ($2 | 0) < 61) HEAP32[$__s >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE12__get_minuteERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__m, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__m = $__m | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($3 & 4 | 0) == 0 & ($2 | 0) < 60) HEAP32[$__m >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $_frm_nxt = 0, $_to_nxt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $1 = __ZNSt3__1L13utf8_to_utf16EPKhS1_RS1_PtS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0;
 HEAP32[$frm_nxt >> 2] = $frm + ((HEAP32[$_frm_nxt >> 2] | 0) - $frm);
 HEAP32[$to_nxt >> 2] = $to + ((HEAP32[$_to_nxt >> 2] | 0) - $to >> 1 << 1);
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $_frm_nxt = 0, $_to_nxt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $1 = __ZNSt3__1L12ucs4_to_utf8EPKjS1_RS1_PhS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0;
 HEAP32[$frm_nxt >> 2] = $frm + ((HEAP32[$_frm_nxt >> 2] | 0) - $frm >> 2 << 2);
 HEAP32[$to_nxt >> 2] = $to + ((HEAP32[$_to_nxt >> 2] | 0) - $to);
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $$0 = f0, $1 = 0, $2 = 0, $4 = 0.0, $5 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = Math_fround(0.0);
 } else {
  $1 = ___errno_location() | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = 0;
  $4 = +_strtold_l($__a, $__p2, __ZNSt3__16__clocEv() | 0);
  $5 = HEAP32[$1 >> 2] | 0;
  if (!$5) HEAP32[$1 >> 2] = $2;
  if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
   HEAP32[$__err >> 2] = 4;
   $$0 = Math_fround(0.0);
   break;
  }
  if (($5 | 0) == 34) HEAP32[$__err >> 2] = 4;
  $$0 = Math_fround($4);
 } while (0);
 STACKTOP = sp;
 return Math_fround($$0);
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this, $0, $frm, $frm_end, $frm_nxt, $to, $to_end, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $to_end = $to_end | 0;
 $to_nxt = $to_nxt | 0;
 var $1 = 0, $_frm_nxt = 0, $_to_nxt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $_frm_nxt = sp + 4 | 0;
 $_to_nxt = sp;
 HEAP32[$_frm_nxt >> 2] = $frm;
 HEAP32[$_to_nxt >> 2] = $to;
 $1 = __ZNSt3__1L12utf8_to_ucs4EPKhS1_RS1_PjS3_RS3_mNS_12codecvt_modeE($frm, $frm_end, $_frm_nxt, $to, $to_end, $_to_nxt, 1114111, 0) | 0;
 HEAP32[$frm_nxt >> 2] = $frm + ((HEAP32[$_frm_nxt >> 2] | 0) - $frm);
 HEAP32[$to_nxt >> 2] = $to + ((HEAP32[$_to_nxt >> 2] | 0) - $to >> 2 << 2);
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($3 & 4 | 0) == 0 & ($2 | 0) < 24) HEAP32[$__h >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE10__get_hourERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__h, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__h = $__h | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 2) | 0;
 $3 = HEAP32[$__err >> 2] | 0;
 if (($3 & 4 | 0) == 0 & ($2 | 0) < 24) HEAP32[$__h >> 2] = $2; else HEAP32[$__err >> 2] = $3 | 4;
 STACKTOP = sp;
 return;
}

function __ZN15MatrixTransposeC2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $8 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 $1 = __Znwj(40) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($0, 64, 15);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($1, $0);
 HEAP32[$1 + 12 >> 2] = 1;
 HEAP32[$1 + 16 >> 2] = 2;
 HEAP32[$1 + 20 >> 2] = 15;
 HEAP32[$1 + 24 >> 2] = 16;
 HEAP32[$1 + 28 >> 2] = 17;
 $8 = $1 + 32 | 0;
 HEAP32[$8 >> 2] = 1e3;
 HEAP32[$8 + 4 >> 2] = 0;
 HEAP32[$this >> 2] = $1;
 HEAP8[$this + 4 >> 0] = 0;
 HEAP8[$this + 5 >> 0] = 1;
 HEAP8[$this + 6 >> 0] = 1;
 __ZN4Base10Benchmarks3addEPNS_9BenchmarkE($this);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($0);
 STACKTOP = sp;
 return;
}

function _strtold_l($s, $p, $loc) {
 $s = $s | 0;
 $p = $p | 0;
 $loc = $loc | 0;
 var $0 = 0, $1 = 0, $12 = 0, $16 = 0, $4 = 0.0, $f$i$i = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $f$i$i = sp;
 dest = $f$i$i + 0 | 0;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $0 = $f$i$i + 4 | 0;
 HEAP32[$0 >> 2] = $s;
 $1 = $f$i$i + 8 | 0;
 HEAP32[$1 >> 2] = -1;
 HEAP32[$f$i$i + 44 >> 2] = $s;
 HEAP32[$f$i$i + 76 >> 2] = -1;
 ___shlim($f$i$i, 0);
 $4 = +___floatscan($f$i$i, 2, 1);
 $12 = (HEAP32[$0 >> 2] | 0) - (HEAP32[$1 >> 2] | 0) + (HEAP32[$f$i$i + 108 >> 2] | 0) | 0;
 if (!$p) {
  STACKTOP = sp;
  return +$4;
 }
 if (!$12) $16 = $s; else $16 = $s + $12 | 0;
 HEAP32[$p >> 2] = $16;
 STACKTOP = sp;
 return +$4;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $16 = 0, $21 = 0, $27 = 0, $30 = 0, $4 = 0;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $4 = HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0;
 if (HEAP32[$1 + ($4 + 24) >> 2] | 0) if (!(HEAP32[$1 + ($4 + 16) >> 2] | 0)) if (HEAP32[$1 + ($4 + 4) >> 2] & 8192) if (!(__ZSt18uncaught_exceptionv() | 0)) {
  $16 = HEAP32[$0 >> 2] | 0;
  $21 = HEAP32[$16 + ((HEAP32[(HEAP32[$16 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0;
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 24 >> 2] & 63]($21) | 0) == -1) {
   $27 = HEAP32[$0 >> 2] | 0;
   $30 = HEAP32[(HEAP32[$27 >> 2] | 0) + -12 >> 2] | 0;
   __ZNSt3__18ios_base5clearEj($27 + $30 | 0, HEAP32[$27 + ($30 + 16) >> 2] | 1);
  }
 }
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0, $16 = 0, $21 = 0, $27 = 0, $30 = 0, $4 = 0;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $4 = HEAP32[(HEAP32[$1 >> 2] | 0) + -12 >> 2] | 0;
 if (HEAP32[$1 + ($4 + 24) >> 2] | 0) if (!(HEAP32[$1 + ($4 + 16) >> 2] | 0)) if (HEAP32[$1 + ($4 + 4) >> 2] & 8192) if (!(__ZSt18uncaught_exceptionv() | 0)) {
  $16 = HEAP32[$0 >> 2] | 0;
  $21 = HEAP32[$16 + ((HEAP32[(HEAP32[$16 >> 2] | 0) + -12 >> 2] | 0) + 24) >> 2] | 0;
  if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$21 >> 2] | 0) + 24 >> 2] & 63]($21) | 0) == -1) {
   $27 = HEAP32[$0 >> 2] | 0;
   $30 = HEAP32[(HEAP32[$27 >> 2] | 0) + -12 >> 2] | 0;
   __ZNSt3__18ios_base5clearEj($27 + $30 | 0, HEAP32[$27 + ($30 + 16) >> 2] | 1);
  }
 }
 return;
}

function _realloc($oldmem, $bytes) {
 $oldmem = $oldmem | 0;
 $bytes = $bytes | 0;
 var $12 = 0, $15 = 0, $20 = 0, $8 = 0, $9 = 0, $mem$0 = 0;
 if (!$oldmem) {
  $mem$0 = _malloc($bytes) | 0;
  return $mem$0 | 0;
 }
 if ($bytes >>> 0 > 4294967231) {
  HEAP32[(___errno_location() | 0) >> 2] = 12;
  $mem$0 = 0;
  return $mem$0 | 0;
 }
 if ($bytes >>> 0 < 11) $8 = 16; else $8 = $bytes + 11 & -8;
 $9 = _try_realloc_chunk($oldmem + -8 | 0, $8) | 0;
 if ($9) {
  $mem$0 = $9 + 8 | 0;
  return $mem$0 | 0;
 }
 $12 = _malloc($bytes) | 0;
 if (!$12) {
  $mem$0 = 0;
  return $mem$0 | 0;
 }
 $15 = HEAP32[$oldmem + -4 >> 2] | 0;
 $20 = ($15 & -8) - (($15 & 3 | 0) == 0 ? 8 : 4) | 0;
 _memcpy($12 | 0, $oldmem | 0, ($20 >>> 0 < $bytes >>> 0 ? $20 : $bytes) | 0) | 0;
 _free($oldmem);
 $mem$0 = $12;
 return $mem$0 | 0;
}

function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $$0 = 0.0, $1 = 0, $2 = 0, $4 = 0.0, $5 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0.0;
 } else {
  $1 = ___errno_location() | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = 0;
  $4 = +_strtold_l($__a, $__p2, __ZNSt3__16__clocEv() | 0);
  $5 = HEAP32[$1 >> 2] | 0;
  if (!$5) HEAP32[$1 >> 2] = $2;
  if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0.0;
   break;
  }
  if (($5 | 0) == 34) {
   HEAP32[$__err >> 2] = 4;
   $$0 = $4;
  } else $$0 = $4;
 } while (0);
 STACKTOP = sp;
 return +$$0;
}

function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a, $__a_end, $__err) {
 $__a = $__a | 0;
 $__a_end = $__a_end | 0;
 $__err = $__err | 0;
 var $$0 = 0.0, $1 = 0, $2 = 0, $4 = 0.0, $5 = 0, $__p2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p2 = sp;
 do if (($__a | 0) == ($__a_end | 0)) {
  HEAP32[$__err >> 2] = 4;
  $$0 = 0.0;
 } else {
  $1 = ___errno_location() | 0;
  $2 = HEAP32[$1 >> 2] | 0;
  HEAP32[$1 >> 2] = 0;
  $4 = +_strtold_l($__a, $__p2, __ZNSt3__16__clocEv() | 0);
  $5 = HEAP32[$1 >> 2] | 0;
  if (!$5) HEAP32[$1 >> 2] = $2;
  if ((HEAP32[$__p2 >> 2] | 0) != ($__a_end | 0)) {
   HEAP32[$__err >> 2] = 4;
   $$0 = 0.0;
   break;
  }
  if (($5 | 0) == 34) {
   HEAP32[$__err >> 2] = 4;
   $$0 = $4;
  } else $$0 = $4;
 } while (0);
 STACKTOP = sp;
 return +$$0;
}

function ___divdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $7$0 = 0, $7$1 = 0, $10$0 = 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
 $4$1 = tempRet0;
 $7$0 = $2$0 ^ $1$0;
 $7$1 = $2$1 ^ $1$1;
 $10$0 = _i64Subtract((___udivmoddi4($4$0, $4$1, _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0, tempRet0, 0) | 0) ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
 return $10$0 | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $1 = 0, $2 = 0, $8 = 0, $offset_to_base$0 = 0;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $1 >> 8;
 if (!($1 & 1)) $offset_to_base$0 = $2; else $offset_to_base$0 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $2 >> 2] | 0;
 $8 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 20 >> 2] & 15]($8, $info, $dst_ptr, $current_ptr + $offset_to_base$0 | 0, ($1 & 2 | 0) != 0 ? $path_below : 2, $use_strcmp);
 return;
}

function __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $0 = 0, $1 = 0, $6 = 0, $9 = 0;
 $0 = $info + 16 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 do if (!$1) {
  HEAP32[$0 >> 2] = $adjustedPtr;
  HEAP32[$info + 24 >> 2] = $path_below;
  HEAP32[$info + 36 >> 2] = 1;
 } else {
  if (($1 | 0) != ($adjustedPtr | 0)) {
   $9 = $info + 36 | 0;
   HEAP32[$9 >> 2] = (HEAP32[$9 >> 2] | 0) + 1;
   HEAP32[$info + 24 >> 2] = 2;
   HEAP8[$info + 54 >> 0] = 1;
   break;
  }
  $6 = $info + 24 | 0;
  if ((HEAP32[$6 >> 2] | 0) == 2) HEAP32[$6 >> 2] = $path_below;
 } while (0);
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIwEE($this, $__y, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 4) | 0;
 if (!(HEAP32[$__err >> 2] & 4)) HEAP32[$__y >> 2] = $2 + -1900;
 STACKTOP = sp;
 return;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11__get_year4ERiRS4_S4_RjRKNS_5ctypeIcEE($this, $__y, $__b, $__e, $__err, $__ct) {
 $this = $this | 0;
 $__y = $__y | 0;
 $__b = $__b | 0;
 $__e = $__e | 0;
 $__err = $__err | 0;
 $__ct = $__ct | 0;
 var $$byval_copy = 0, $0 = 0, $2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $$byval_copy = sp + 4 | 0;
 $0 = sp;
 HEAP32[$0 >> 2] = HEAP32[$__e >> 2];
 HEAP32[$$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 $2 = __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b, $$byval_copy, $__err, $__ct, 4) | 0;
 if (!(HEAP32[$__err >> 2] & 4)) HEAP32[$__y >> 2] = $2 + -1900;
 STACKTOP = sp;
 return;
}

function _vasprintf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $$0 = 0, $0 = 0, $10 = 0, $2 = 0, $5 = 0, $9 = 0, $ap2 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap2 = sp;
 $0 = _malloc(240) | 0;
 do if (!$0) $$0 = -1; else {
  HEAP32[$ap2 >> 2] = HEAP32[$ap >> 2];
  $2 = _vsnprintf($0, 240, $fmt, $ap2) | 0;
  if ($2 >>> 0 < 240) {
   $5 = _realloc($0, $2 + 1 | 0) | 0;
   HEAP32[$s >> 2] = ($5 | 0) != 0 ? $5 : $0;
   $$0 = $2;
   break;
  }
  _free($0);
  if (($2 | 0) < 0) $$0 = -1; else {
   $9 = $2 + 1 | 0;
   $10 = _malloc($9) | 0;
   HEAP32[$s >> 2] = $10;
   if (!$10) $$0 = -1; else $$0 = _vsnprintf($10, $9, $fmt, $ap) | 0;
  }
 } while (0);
 STACKTOP = sp;
 return $$0 | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $4 = 0;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below); else {
  $4 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiiiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 20 >> 2] & 15]($4, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp);
 }
 return;
}

function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEEC2EjjS6_($this, $__cap, $__start, $__a) {
 $this = $this | 0;
 $__cap = $__cap | 0;
 $__start = $__start | 0;
 $__a = $__a | 0;
 var $0 = 0, $3 = 0, $8 = 0, $9 = 0;
 $0 = $this + 12 | 0;
 HEAP32[$0 >> 2] = 0;
 HEAP32[$this + 16 >> 2] = $__a;
 do if (!$__cap) $8 = 0; else {
  $3 = $__a + 112 | 0;
  if ((HEAP8[$3 >> 0] | 0) == 0 & $__cap >>> 0 < 29) {
   HEAP8[$3 >> 0] = 1;
   $8 = $__a;
   break;
  } else {
   $8 = __Znwj($__cap << 2) | 0;
   break;
  }
 } while (0);
 HEAP32[$this >> 2] = $8;
 $9 = $8 + ($__start << 2) | 0;
 HEAP32[$this + 8 >> 2] = $9;
 HEAP32[$this + 4 >> 2] = $9;
 HEAP32[$0 >> 2] = $8 + ($__cap << 2);
 return;
}

function __ZNK10__cxxabiv122__base_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this, $info, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 var $1 = 0, $2 = 0, $8 = 0, $offset_to_base$0 = 0;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $1 >> 8;
 if (!($1 & 1)) $offset_to_base$0 = $2; else $offset_to_base$0 = HEAP32[(HEAP32[$current_ptr >> 2] | 0) + $2 >> 2] | 0;
 $8 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 24 >> 2] & 3]($8, $info, $current_ptr + $offset_to_base$0 | 0, ($1 & 2 | 0) != 0 ? $path_below : 2, $use_strcmp);
 return;
}

function __ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE($__nb, $__ne, $__iob) {
 $__nb = $__nb | 0;
 $__ne = $__ne | 0;
 $__iob = $__iob | 0;
 var $$0 = 0, $11 = 0, $2 = 0, $3 = 0, label = 0;
 $2 = HEAP32[$__iob + 4 >> 2] & 176;
 do if (($2 | 0) == 32) $$0 = $__ne; else if (($2 | 0) == 16) {
  $3 = HEAP8[$__nb >> 0] | 0;
  if ($3 << 24 >> 24 == 43 | $3 << 24 >> 24 == 45) {
   $$0 = $__nb + 1 | 0;
   break;
  }
  if (($__ne - $__nb | 0) > 1 & $3 << 24 >> 24 == 48) {
   $11 = HEAP8[$__nb + 1 >> 0] | 0;
   if ($11 << 24 >> 24 == 88 | $11 << 24 >> 24 == 120) $$0 = $__nb + 2 | 0; else label = 7;
  } else label = 7;
 } else label = 7; while (0);
 if ((label | 0) == 7) $$0 = $__nb;
 return $$0 | 0;
}

function __ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc($this, $__nb, $__ne, $__tm, $__fmt, $__mod) {
 $this = $this | 0;
 $__nb = $__nb | 0;
 $__ne = $__ne | 0;
 $__tm = $__tm | 0;
 $__fmt = $__fmt | 0;
 $__mod = $__mod | 0;
 var $0 = 0, $1 = 0, $fmt = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $fmt = sp;
 HEAP8[$fmt >> 0] = 37;
 $0 = $fmt + 1 | 0;
 HEAP8[$0 >> 0] = $__fmt;
 $1 = $fmt + 2 | 0;
 HEAP8[$1 >> 0] = $__mod;
 HEAP8[$fmt + 3 >> 0] = 0;
 if ($__mod << 24 >> 24) {
  HEAP8[$0 >> 0] = $__mod;
  HEAP8[$1 >> 0] = $__fmt;
 }
 HEAP32[$__ne >> 2] = $__nb + (_strftime_l($__nb | 0, (HEAP32[$__ne >> 2] | 0) - $__nb | 0, $fmt | 0, $__tm | 0, HEAP32[$this >> 2] | 0) | 0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$012 = 0, $13 = 0, $__i$03 = 0;
 L1 : do if (!(HEAP8[$this + 44 >> 0] | 0)) if (($__n | 0) > 0) {
  $$012 = $__s;
  $__i$03 = 0;
  while (1) {
   if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] & 31]($this, HEAP32[$$012 >> 2] | 0) | 0) == -1) {
    $$0 = $__i$03;
    break L1;
   }
   $13 = $__i$03 + 1 | 0;
   if (($13 | 0) < ($__n | 0)) {
    $$012 = $$012 + 4 | 0;
    $__i$03 = $13;
   } else {
    $$0 = $13;
    break;
   }
  }
 } else $$0 = 0; else $$0 = _fwrite($__s | 0, 4, $__n | 0, HEAP32[$this + 32 >> 2] | 0) | 0; while (0);
 return $$0 | 0;
}

function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this, $__s, $__n) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__n = $__n | 0;
 var $$0 = 0, $$012 = 0, $14 = 0, $__i$03 = 0;
 L1 : do if (!(HEAP8[$this + 44 >> 0] | 0)) if (($__n | 0) > 0) {
  $$012 = $__s;
  $__i$03 = 0;
  while (1) {
   if ((FUNCTION_TABLE_iii[HEAP32[(HEAP32[$this >> 2] | 0) + 52 >> 2] & 31]($this, HEAPU8[$$012 >> 0] | 0) | 0) == -1) {
    $$0 = $__i$03;
    break L1;
   }
   $14 = $__i$03 + 1 | 0;
   if (($14 | 0) < ($__n | 0)) {
    $$012 = $$012 + 1 | 0;
    $__i$03 = $14;
   } else {
    $$0 = $14;
    break;
   }
  }
 } else $$0 = 0; else $$0 = _fwrite($__s | 0, 1, $__n | 0, HEAP32[$this + 32 >> 2] | 0) | 0; while (0);
 return $$0 | 0;
}

function _strtoll($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $0 = 0, $4 = 0, $6 = 0, $7 = 0, $f$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $f$i = sp;
 HEAP32[$f$i >> 2] = 0;
 $0 = $f$i + 4 | 0;
 HEAP32[$0 >> 2] = $s;
 HEAP32[$f$i + 44 >> 2] = $s;
 $4 = $f$i + 8 | 0;
 HEAP32[$4 >> 2] = ($s | 0) < 0 ? -1 : $s + 2147483647 | 0;
 HEAP32[$f$i + 76 >> 2] = -1;
 ___shlim($f$i, 0);
 $6 = ___intscan($f$i, $base, 1, 0, -2147483648) | 0;
 $7 = tempRet0;
 if (!$p) {
  tempRet0 = $7;
  STACKTOP = sp;
  return $6 | 0;
 }
 HEAP32[$p >> 2] = $s + ((HEAP32[$0 >> 2] | 0) + (HEAP32[$f$i + 108 >> 2] | 0) - (HEAP32[$4 >> 2] | 0));
 tempRet0 = $7;
 STACKTOP = sp;
 return $6 | 0;
}

function _strtoull($s, $p, $base) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 var $0 = 0, $4 = 0, $6 = 0, $7 = 0, $f$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $f$i = sp;
 HEAP32[$f$i >> 2] = 0;
 $0 = $f$i + 4 | 0;
 HEAP32[$0 >> 2] = $s;
 HEAP32[$f$i + 44 >> 2] = $s;
 $4 = $f$i + 8 | 0;
 HEAP32[$4 >> 2] = ($s | 0) < 0 ? -1 : $s + 2147483647 | 0;
 HEAP32[$f$i + 76 >> 2] = -1;
 ___shlim($f$i, 0);
 $6 = ___intscan($f$i, $base, 1, -1, -1) | 0;
 $7 = tempRet0;
 if (!$p) {
  tempRet0 = $7;
  STACKTOP = sp;
  return $6 | 0;
 }
 HEAP32[$p >> 2] = $s + ((HEAP32[$0 >> 2] | 0) + (HEAP32[$f$i + 108 >> 2] | 0) - (HEAP32[$4 >> 2] | 0));
 tempRet0 = $7;
 STACKTOP = sp;
 return $6 | 0;
}

function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this, $low, $high, $vec) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $vec = $vec | 0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $4 = 0, $5 = 0, $9 = 0;
 if (($low | 0) == ($high | 0)) $$01$lcssa = $low; else {
  $4 = (($high + -4 - $low | 0) >>> 2) + 1 | 0;
  $$012 = $low;
  $$03 = $vec;
  while (1) {
   $5 = HEAP32[$$012 >> 2] | 0;
   if ($5 >>> 0 < 128) $9 = HEAP16[(__ZNSt3__15ctypeIcE13classic_tableEv() | 0) + ($5 << 1) >> 1] | 0; else $9 = 0;
   HEAP16[$$03 >> 1] = $9;
   $$012 = $$012 + 4 | 0;
   if (($$012 | 0) == ($high | 0)) break; else $$03 = $$03 + 2 | 0;
  }
  $$01$lcssa = $low + ($4 << 2) | 0;
 }
 return $$01$lcssa | 0;
}

function ___toread($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $15 = 0, $2 = 0, $21 = 0, $6 = 0, $8 = 0;
 $0 = $f + 74 | 0;
 $2 = HEAP8[$0 >> 0] | 0;
 HEAP8[$0 >> 0] = $2 + 255 | $2;
 $6 = $f + 20 | 0;
 $8 = $f + 44 | 0;
 if ((HEAP32[$6 >> 2] | 0) >>> 0 > (HEAP32[$8 >> 2] | 0) >>> 0) FUNCTION_TABLE_iiii[HEAP32[$f + 36 >> 2] & 31]($f, 0, 0) | 0;
 HEAP32[$f + 16 >> 2] = 0;
 HEAP32[$f + 28 >> 2] = 0;
 HEAP32[$6 >> 2] = 0;
 $15 = HEAP32[$f >> 2] | 0;
 if (!($15 & 20)) {
  $21 = HEAP32[$8 >> 2] | 0;
  HEAP32[$f + 8 >> 2] = $21;
  HEAP32[$f + 4 >> 2] = $21;
  $$0 = 0;
  return $$0 | 0;
 }
 if (!($15 & 4)) {
  $$0 = -1;
  return $$0 | 0;
 }
 HEAP32[$f >> 2] = $15 | 32;
 $$0 = -1;
 return $$0 | 0;
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((num | 0) >= 4096) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
 ret = dest | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if (!num) return ret | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  while ((num | 0) >= 4) {
   HEAP32[dest >> 2] = HEAP32[src >> 2];
   dest = dest + 4 | 0;
   src = src + 4 | 0;
   num = num - 4 | 0;
  }
 }
 while ((num | 0) > 0) {
  HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  dest = dest + 1 | 0;
  src = src + 1 | 0;
  num = num - 1 | 0;
 }
 return ret | 0;
}

function __ZNSt3__111__stdoutbufIwEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $0 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this >> 2] = 1392;
 HEAP32[$this + 32 >> 2] = $__fp;
 __ZNSt3__16localeC2ERKS0_($0, $this + 4 | 0);
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 4976) | 0;
 __ZNSt3__16localeD2Ev($0);
 HEAP32[$this + 36 >> 2] = $3;
 HEAP32[$this + 40 >> 2] = $__st;
 HEAP8[$this + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$3 >> 2] | 0) + 28 >> 2] & 63]($3) | 0) & 1;
 STACKTOP = sp;
 return;
}

function __ZNSt3__111__stdoutbufIcEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $0 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this >> 2] = 1648;
 HEAP32[$this + 32 >> 2] = $__fp;
 __ZNSt3__16localeC2ERKS0_($0, $this + 4 | 0);
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($0, 4968) | 0;
 __ZNSt3__16localeD2Ev($0);
 HEAP32[$this + 36 >> 2] = $3;
 HEAP32[$this + 40 >> 2] = $__st;
 HEAP8[$this + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$3 >> 2] | 0) + 28 >> 2] & 63]($3) | 0) & 1;
 STACKTOP = sp;
 return;
}

function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, $id) {
 $this = $this | 0;
 $f = $f | 0;
 $id = $id | 0;
 var $0 = 0, $11 = 0, $12 = 0, $15 = 0, $3 = 0;
 __ZNSt3__114__shared_count12__add_sharedEv($f);
 $0 = $this + 8 | 0;
 $3 = HEAP32[$0 >> 2] | 0;
 if ((HEAP32[$this + 12 >> 2] | 0) - $3 >> 2 >>> 0 > $id >>> 0) $11 = $3; else {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($0, $id + 1 | 0);
  $11 = HEAP32[$0 >> 2] | 0;
 }
 $12 = HEAP32[$11 + ($id << 2) >> 2] | 0;
 if (!$12) $15 = $11; else {
  __ZNSt3__114__shared_count16__release_sharedEv($12) | 0;
  $15 = HEAP32[$0 >> 2] | 0;
 }
 HEAP32[$15 + ($id << 2) >> 2] = $f;
 return;
}

function __ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv($__vp) {
 $__vp = $__vp | 0;
 var $$field = 0, $$field2 = 0, $$index1 = 0, $0 = 0, $10 = 0, $3 = 0;
 $0 = $__vp + 4 | 0;
 $$field = HEAPU8[$0 >> 0] | HEAPU8[$0 + 1 >> 0] << 8 | HEAPU8[$0 + 2 >> 0] << 16 | HEAPU8[$0 + 3 >> 0] << 24;
 $$index1 = $0 + 4 | 0;
 $$field2 = HEAPU8[$$index1 >> 0] | HEAPU8[$$index1 + 1 >> 0] << 8 | HEAPU8[$$index1 + 2 >> 0] << 16 | HEAPU8[$$index1 + 3 >> 0] << 24;
 $3 = (HEAP32[$__vp >> 2] | 0) + ($$field2 >> 1) | 0;
 if (!($$field2 & 1)) $10 = $$field; else $10 = HEAP32[(HEAP32[$3 >> 2] | 0) + $$field >> 2] | 0;
 FUNCTION_TABLE_vi[$10 & 127]($3);
 return;
}
function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
 stop = ptr + num | 0;
 if ((num | 0) >= 20) {
  value = value & 255;
  unaligned = ptr & 3;
  value4 = value | value << 8 | value << 16 | value << 24;
  stop4 = stop & ~3;
  if (unaligned) {
   unaligned = ptr + 4 - unaligned | 0;
   while ((ptr | 0) < (unaligned | 0)) {
    HEAP8[ptr >> 0] = value;
    ptr = ptr + 1 | 0;
   }
  }
  while ((ptr | 0) < (stop4 | 0)) {
   HEAP32[ptr >> 2] = value4;
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (stop | 0)) {
  HEAP8[ptr >> 0] = value;
  ptr = ptr + 1 | 0;
 }
 return ptr - num | 0;
}

function __ZNK10__cxxabiv122__base_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $1 = 0, $2 = 0, $8 = 0, $offset_to_base$0 = 0;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $1 >> 8;
 if (!($1 & 1)) $offset_to_base$0 = $2; else $offset_to_base$0 = HEAP32[(HEAP32[$adjustedPtr >> 2] | 0) + $2 >> 2] | 0;
 $8 = HEAP32[$this >> 2] | 0;
 FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$8 >> 2] | 0) + 28 >> 2] & 7]($8, $info, $adjustedPtr + $offset_to_base$0 | 0, ($1 & 2 | 0) != 0 ? $path_below : 2);
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $0 = 0, $2 = 0, $7 = 0;
 $0 = HEAP8[$this >> 0] | 0;
 $2 = ($0 & 1) == 0;
 if ($2) $7 = ($0 & 255) >>> 1; else $7 = HEAP32[$this + 4 >> 2] | 0;
 do if ($7 >>> 0 < $__n >>> 0) __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEjc($this, $__n - $7 | 0, $__c) | 0; else if ($2) {
  HEAP8[$this + $__n + 1 >> 0] = 0;
  HEAP8[$this >> 0] = $__n << 1;
  break;
 } else {
  HEAP8[(HEAP32[$this + 8 >> 2] | 0) + $__n >> 0] = 0;
  HEAP32[$this + 4 >> 2] = $__n;
  break;
 } while (0);
 return;
}

function __ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE($this, $msg, $ec) {
 $this = $this | 0;
 $msg = $msg | 0;
 $ec = $ec | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0, $tmpcast$byval_copy = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $tmpcast$byval_copy = sp + 8 | 0;
 $0 = sp;
 $1 = $ec;
 $6 = HEAP32[$1 + 4 >> 2] | 0;
 $7 = $0;
 HEAP32[$7 >> 2] = HEAP32[$1 >> 2];
 HEAP32[$7 + 4 >> 2] = $6;
 HEAP32[$tmpcast$byval_copy + 0 >> 2] = HEAP32[$0 + 0 >> 2];
 HEAP32[$tmpcast$byval_copy + 4 >> 2] = HEAP32[$0 + 4 >> 2];
 __ZNSt3__112system_errorC2ENS_10error_codeEPKc($this, $tmpcast$byval_copy, $msg);
 HEAP32[$this >> 2] = 2504;
 STACKTOP = sp;
 return;
}

function __ZNSt3__110__list_impIPN4Base9BenchmarkENS_9allocatorIS3_EEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $4 = 0, $6 = 0, $8 = 0, $__f$01$i = 0, $__f$01$i$looptemp = 0;
 $0 = $this + 8 | 0;
 if (!(HEAP32[$0 >> 2] | 0)) return;
 $4 = HEAP32[$this + 4 >> 2] | 0;
 $6 = (HEAP32[$this >> 2] | 0) + 4 | 0;
 $8 = HEAP32[$4 >> 2] | 0;
 HEAP32[$8 + 4 >> 2] = HEAP32[$6 >> 2];
 HEAP32[HEAP32[$6 >> 2] >> 2] = $8;
 HEAP32[$0 >> 2] = 0;
 if (($4 | 0) == ($this | 0)) return; else $__f$01$i = $4;
 do {
  $__f$01$i$looptemp = $__f$01$i;
  $__f$01$i = HEAP32[$__f$01$i + 4 >> 2] | 0;
  __ZdlPv($__f$01$i$looptemp);
 } while (($__f$01$i | 0) != ($this | 0));
 return;
}

function _wmemmove($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $$025 = 0, $$07 = 0, $$16 = 0, $$in = 0, $5 = 0;
 $5 = ($n | 0) == 0;
 if ($d - $s >> 2 >>> 0 < $n >>> 0) {
  if ($5) return $d | 0; else $$in = $n;
  do {
   $$in = $$in + -1 | 0;
   HEAP32[$d + ($$in << 2) >> 2] = HEAP32[$s + ($$in << 2) >> 2];
  } while (($$in | 0) != 0);
  return $d | 0;
 } else {
  if ($5) return $d | 0; else {
   $$025 = $s;
   $$07 = $d;
   $$16 = $n;
  }
  while (1) {
   $$16 = $$16 + -1 | 0;
   HEAP32[$$07 >> 2] = HEAP32[$$025 >> 2];
   if (!$$16) break; else {
    $$025 = $$025 + 4 | 0;
    $$07 = $$07 + 4 | 0;
   }
  }
  return $d | 0;
 }
 return 0;
}

function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this, $m, $low, $high) {
 $this = $this | 0;
 $m = $m | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0$lcssa = 0, $$01 = 0, $3 = 0;
 L1 : do if (($low | 0) == ($high | 0)) $$0$lcssa = $low; else {
  $$01 = $low;
  while (1) {
   $3 = HEAP32[$$01 >> 2] | 0;
   if ($3 >>> 0 >= 128) {
    $$0$lcssa = $$01;
    break L1;
   }
   if (!((HEAP16[(__ZNSt3__15ctypeIcE13classic_tableEv() | 0) + ($3 << 1) >> 1] & $m) << 16 >> 16)) {
    $$0$lcssa = $$01;
    break L1;
   }
   $$01 = $$01 + 4 | 0;
   if (($$01 | 0) == ($high | 0)) {
    $$0$lcssa = $high;
    break;
   }
  }
 } while (0);
 return $$0$lcssa | 0;
}

function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this, $low, $high, $dfault, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dfault = $dfault | 0;
 $dest = $dest | 0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0, $4 = 0, $5 = 0;
 if (($low | 0) == ($high | 0)) $$01$lcssa = $low; else {
  $4 = (($high + -4 - $low | 0) >>> 2) + 1 | 0;
  $$012 = $low;
  $$03 = $dest;
  while (1) {
   $5 = HEAP32[$$012 >> 2] | 0;
   HEAP8[$$03 >> 0] = $5 >>> 0 < 128 ? $5 & 255 : $dfault;
   $$012 = $$012 + 4 | 0;
   if (($$012 | 0) == ($high | 0)) break; else $$03 = $$03 + 1 | 0;
  }
  $$01$lcssa = $low + ($4 << 2) | 0;
 }
 return $$01$lcssa | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $6 = 0, $7 = 0, $__p$0 = 0;
 if ($__sz >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($__sz >>> 0 < 11) {
  HEAP8[$this >> 0] = $__sz << 1;
  $__p$0 = $this + 1 | 0;
 } else {
  $6 = $__sz + 16 & -16;
  $7 = __Znwj($6) | 0;
  HEAP32[$this + 8 >> 2] = $7;
  HEAP32[$this >> 2] = $6 | 1;
  HEAP32[$this + 4 >> 2] = $__sz;
  $__p$0 = $7;
 }
 _memcpy($__p$0 | 0, $__s | 0, $__sz | 0) | 0;
 HEAP8[$__p$0 + $__sz >> 0] = 0;
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($this, $__s, $__sz) {
 $this = $this | 0;
 $__s = $__s | 0;
 $__sz = $__sz | 0;
 var $6 = 0, $8 = 0, $__p$0 = 0;
 if ($__sz >>> 0 > 1073741807) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($__sz >>> 0 < 2) {
  HEAP8[$this >> 0] = $__sz << 1;
  $__p$0 = $this + 4 | 0;
 } else {
  $6 = $__sz + 4 & -4;
  $8 = __Znwj($6 << 2) | 0;
  HEAP32[$this + 8 >> 2] = $8;
  HEAP32[$this >> 2] = $6 | 1;
  HEAP32[$this + 4 >> 2] = $__sz;
  $__p$0 = $8;
 }
 _wmemcpy($__p$0, $__s, $__sz) | 0;
 HEAP32[$__p$0 + ($__sz << 2) >> 2] = 0;
 return;
}

function __ZNSt3__18ios_base5clearEj($this, $state) {
 $this = $this | 0;
 $state = $state | 0;
 var $0 = 0, $12 = 0, $13 = 0, $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 $3 = (HEAP32[$this + 24 >> 2] | 0) == 0;
 HEAP32[$this + 16 >> 2] = $3 & 1 | $state;
 if (!(($3 & 1 | $state) & HEAP32[$this + 20 >> 2])) {
  STACKTOP = sp;
  return;
 } else {
  $12 = ___cxa_allocate_exception(16) | 0;
  __ZNSt3__117iostream_categoryEv() | 0;
  $13 = $0;
  HEAP32[$13 >> 2] = 1;
  HEAP32[$13 + 4 >> 2] = 2480;
  __ZNSt3__18ios_base7failureC2EPKcRKNS_10error_codeE($12, 2536, $0);
  ___cxa_throw($12 | 0, 2584, 29);
 }
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $6 = 0, $7 = 0, $__p$0 = 0;
 if ($__n >>> 0 > 4294967279) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($__n >>> 0 < 11) {
  HEAP8[$this >> 0] = $__n << 1;
  $__p$0 = $this + 1 | 0;
 } else {
  $6 = $__n + 16 & -16;
  $7 = __Znwj($6) | 0;
  HEAP32[$this + 8 >> 2] = $7;
  HEAP32[$this >> 2] = $6 | 1;
  HEAP32[$this + 4 >> 2] = $__n;
  $__p$0 = $7;
 }
 _memset($__p$0 | 0, $__c | 0, $__n | 0) | 0;
 HEAP8[$__p$0 + $__n >> 0] = 0;
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($this, $__n, $__c) {
 $this = $this | 0;
 $__n = $__n | 0;
 $__c = $__c | 0;
 var $6 = 0, $8 = 0, $__p$0 = 0;
 if ($__n >>> 0 > 1073741807) __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this);
 if ($__n >>> 0 < 2) {
  HEAP8[$this >> 0] = $__n << 1;
  $__p$0 = $this + 4 | 0;
 } else {
  $6 = $__n + 4 & -4;
  $8 = __Znwj($6 << 2) | 0;
  HEAP32[$this + 8 >> 2] = $8;
  HEAP32[$this >> 2] = $6 | 1;
  HEAP32[$this + 4 >> 2] = $__n;
  $__p$0 = $8;
 }
 _wmemset($__p$0, $__c, $__n) | 0;
 HEAP32[$__p$0 + ($__n << 2) >> 2] = 0;
 return;
}

function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0$lcssa = 0, $$01 = 0, $4 = 0, $5 = 0, $9 = 0;
 if (($low | 0) == ($high | 0)) $$0$lcssa = $low; else {
  $4 = (($high + -4 - $low | 0) >>> 2) + 1 | 0;
  $$01 = $low;
  do {
   $5 = HEAP32[$$01 >> 2] | 0;
   if ($5 >>> 0 < 128) $9 = HEAP32[(__ZNSt3__15ctypeIcE21__classic_upper_tableEv() | 0) + ($5 << 2) >> 2] | 0; else $9 = $5;
   HEAP32[$$01 >> 2] = $9;
   $$01 = $$01 + 4 | 0;
  } while (($$01 | 0) != ($high | 0));
  $$0$lcssa = $low + ($4 << 2) | 0;
 }
 return $$0$lcssa | 0;
}

function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0$lcssa = 0, $$01 = 0, $4 = 0, $5 = 0, $9 = 0;
 if (($low | 0) == ($high | 0)) $$0$lcssa = $low; else {
  $4 = (($high + -4 - $low | 0) >>> 2) + 1 | 0;
  $$01 = $low;
  do {
   $5 = HEAP32[$$01 >> 2] | 0;
   if ($5 >>> 0 < 128) $9 = HEAP32[(__ZNSt3__15ctypeIcE21__classic_lower_tableEv() | 0) + ($5 << 2) >> 2] | 0; else $9 = $5;
   HEAP32[$$01 >> 2] = $9;
   $$01 = $$01 + 4 | 0;
  } while (($$01 | 0) != ($high | 0));
  $$0$lcssa = $low + ($4 << 2) | 0;
 }
 return $$0$lcssa | 0;
}

function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 var $4 = 0;
 if (($this | 0) == (HEAP32[$info + 8 >> 2] | 0)) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below); else {
  $4 = HEAP32[$this + 8 >> 2] | 0;
  FUNCTION_TABLE_viiii[HEAP32[(HEAP32[$4 >> 2] | 0) + 28 >> 2] & 7]($4, $info, $adjustedPtr, $path_below);
 }
 return;
}

function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this, $m, $low, $high) {
 $this = $this | 0;
 $m = $m | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0$lcssa = 0, $$01 = 0, $1 = 0;
 L1 : do if (($low | 0) == ($high | 0)) $$0$lcssa = $low; else {
  $$01 = $low;
  while (1) {
   $1 = HEAP32[$$01 >> 2] | 0;
   if ($1 >>> 0 < 128) if ((HEAP16[(__ZNSt3__15ctypeIcE13classic_tableEv() | 0) + ($1 << 1) >> 1] & $m) << 16 >> 16) {
    $$0$lcssa = $$01;
    break L1;
   }
   $$01 = $$01 + 4 | 0;
   if (($$01 | 0) == ($high | 0)) {
    $$0$lcssa = $high;
    break;
   }
  }
 } while (0);
 return $$0$lcssa | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this) {
 $this = $this | 0;
 if (!(HEAP8[5280] | 0)) if (___cxa_guard_acquire(5280) | 0) {
  if (!(HEAP8[10336] | 0)) if (___cxa_guard_acquire(10336) | 0) {
   _memset(10048, 0, 288) | 0;
   ___cxa_atexit(120, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(10336);
  }
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10048, 10344) | 0;
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(10060, 10352) | 0;
  HEAP32[1318] = 10048;
  ___cxa_guard_release(5280);
 }
 return HEAP32[1318] | 0;
}

function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this) {
 $this = $this | 0;
 if (!(HEAP8[5296] | 0)) if (___cxa_guard_acquire(5296) | 0) {
  if (!(HEAP8[10008] | 0)) if (___cxa_guard_acquire(10008) | 0) {
   _memset(9720, 0, 288) | 0;
   ___cxa_atexit(121, 0, ___dso_handle | 0) | 0;
   ___cxa_guard_release(10008);
  }
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(9720, 10016) | 0;
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(9732, 10032) | 0;
  HEAP32[1322] = 9720;
  ___cxa_guard_release(5296);
 }
 return HEAP32[1322] | 0;
}

function __ZNSt3__110__stdinbufIwEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this);
 HEAP32[$this >> 2] = 1504;
 HEAP32[$this + 32 >> 2] = $__fp;
 HEAP32[$this + 40 >> 2] = $__st;
 HEAP32[$this + 48 >> 2] = -1;
 HEAP8[$this + 52 >> 0] = 0;
 __ZNSt3__16localeC2ERKS0_($0, $this + 4 | 0);
 __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this, $0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__110__stdinbufIcEC2EP8_IO_FILEP11__mbstate_t($this, $__fp, $__st) {
 $this = $this | 0;
 $__fp = $__fp | 0;
 $__st = $__st | 0;
 var $0 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this);
 HEAP32[$this >> 2] = 1760;
 HEAP32[$this + 32 >> 2] = $__fp;
 HEAP32[$this + 40 >> 2] = $__st;
 HEAP32[$this + 48 >> 2] = -1;
 HEAP8[$this + 52 >> 0] = 0;
 __ZNSt3__16localeC2ERKS0_($0, $this + 4 | 0);
 __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this, $0);
 __ZNSt3__16localeD2Ev($0);
 STACKTOP = sp;
 return;
}

function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0;
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 4976) | 0;
 $1 = $this + 36 | 0;
 HEAP32[$1 >> 2] = $0;
 $6 = $this + 44 | 0;
 HEAP32[$6 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] & 63]($0) | 0;
 $7 = HEAP32[$1 >> 2] | 0;
 HEAP8[$this + 53 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 28 >> 2] & 63]($7) | 0) & 1;
 if ((HEAP32[$6 >> 2] | 0) > 8) __ZNSt3__121__throw_runtime_errorEPKc(1600); else return;
}

function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $0 = 0, $1 = 0, $6 = 0, $7 = 0;
 $0 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 4968) | 0;
 $1 = $this + 36 | 0;
 HEAP32[$1 >> 2] = $0;
 $6 = $this + 44 | 0;
 HEAP32[$6 >> 2] = FUNCTION_TABLE_ii[HEAP32[(HEAP32[$0 >> 2] | 0) + 24 >> 2] & 63]($0) | 0;
 $7 = HEAP32[$1 >> 2] | 0;
 HEAP8[$this + 53 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$7 >> 2] | 0) + 28 >> 2] & 63]($7) | 0) & 1;
 if ((HEAP32[$6 >> 2] | 0) > 8) __ZNSt3__121__throw_runtime_errorEPKc(1600); else return;
}

function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this, $low, $high, $dfault, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dfault = $dfault | 0;
 $dest = $dest | 0;
 var $$01$lcssa = 0, $$013 = 0, $$04 = 0, $1 = 0;
 if (($low | 0) == ($high | 0)) $$01$lcssa = $low; else {
  $$013 = $low;
  $$04 = $dest;
  while (1) {
   $1 = HEAP8[$$013 >> 0] | 0;
   HEAP8[$$04 >> 0] = $1 << 24 >> 24 > -1 ? $1 : $dfault;
   $$013 = $$013 + 1 | 0;
   if (($$013 | 0) == ($high | 0)) {
    $$01$lcssa = $high;
    break;
   } else $$04 = $$04 + 1 | 0;
  }
 }
 return $$01$lcssa | 0;
}

function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag, $arg, $func) {
 $flag = $flag | 0;
 $arg = $arg | 0;
 $func = $func | 0;
 _pthread_mutex_lock(2048) | 0;
 if ((HEAP32[$flag >> 2] | 0) == 1) do _pthread_cond_wait(2072, 2048) | 0; while ((HEAP32[$flag >> 2] | 0) == 1);
 if (!(HEAP32[$flag >> 2] | 0)) {
  HEAP32[$flag >> 2] = 1;
  _pthread_mutex_unlock(2048) | 0;
  FUNCTION_TABLE_vi[$func & 127]($arg);
  _pthread_mutex_lock(2048) | 0;
  HEAP32[$flag >> 2] = -1;
  _pthread_mutex_unlock(2048) | 0;
  _pthread_cond_broadcast(2072) | 0;
 } else _pthread_mutex_unlock(2048) | 0;
 return;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE6resizeEj($this, $__sz) {
 $this = $this | 0;
 $__sz = $__sz | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $6 = 0;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = HEAP32[$this >> 2] | 0;
 $6 = $1 - $2 >> 2;
 if ($6 >>> 0 < $__sz >>> 0) __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8__appendEj($this, $__sz - $6 | 0); else if ($6 >>> 0 > $__sz >>> 0) {
  $10 = $2 + ($__sz << 2) | 0;
  if (($1 | 0) != ($10 | 0)) HEAP32[$0 >> 2] = $1 + (~(($1 + -4 - $10 | 0) >>> 2) << 2);
 }
 return;
}

function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this, $__lo, $__hi) {
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var $3 = 0, $4 = 0, $7 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0;
 if (($__lo | 0) == ($__hi | 0)) $__h$0$lcssa = 0; else {
  $__h$02 = 0;
  $__p$01 = $__lo;
  while (1) {
   $3 = (HEAP32[$__p$01 >> 2] | 0) + ($__h$02 << 4) | 0;
   $4 = $3 & -268435456;
   $7 = ($4 >>> 24 | $4) ^ $3;
   $__p$01 = $__p$01 + 4 | 0;
   if (($__p$01 | 0) == ($__hi | 0)) {
    $__h$0$lcssa = $7;
    break;
   } else $__h$02 = $7;
  }
 }
 return $__h$0$lcssa | 0;
}

function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this, $__lo, $__hi) {
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 var $4 = 0, $5 = 0, $8 = 0, $__h$0$lcssa = 0, $__h$02 = 0, $__p$01 = 0;
 if (($__lo | 0) == ($__hi | 0)) $__h$0$lcssa = 0; else {
  $__h$02 = 0;
  $__p$01 = $__lo;
  while (1) {
   $4 = (HEAP8[$__p$01 >> 0] | 0) + ($__h$02 << 4) | 0;
   $5 = $4 & -268435456;
   $8 = ($5 >>> 24 | $5) ^ $4;
   $__p$01 = $__p$01 + 1 | 0;
   if (($__p$01 | 0) == ($__hi | 0)) {
    $__h$0$lcssa = $8;
    break;
   } else $__h$02 = $8;
  }
 }
 return $__h$0$lcssa | 0;
}

function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0$lcssa = 0, $$02 = 0, $1 = 0, $7 = 0;
 if (($low | 0) == ($high | 0)) $$0$lcssa = $low; else {
  $$02 = $low;
  do {
   $1 = HEAP8[$$02 >> 0] | 0;
   if ($1 << 24 >> 24 > -1) $7 = HEAP32[(__ZNSt3__15ctypeIcE21__classic_upper_tableEv() | 0) + ($1 << 24 >> 24 << 2) >> 2] & 255; else $7 = $1;
   HEAP8[$$02 >> 0] = $7;
   $$02 = $$02 + 1 | 0;
  } while (($$02 | 0) != ($high | 0));
  $$0$lcssa = $high;
 }
 return $$0$lcssa | 0;
}

function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this, $low, $high) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 var $$0$lcssa = 0, $$02 = 0, $1 = 0, $7 = 0;
 if (($low | 0) == ($high | 0)) $$0$lcssa = $low; else {
  $$02 = $low;
  do {
   $1 = HEAP8[$$02 >> 0] | 0;
   if ($1 << 24 >> 24 > -1) $7 = HEAP32[(__ZNSt3__15ctypeIcE21__classic_lower_tableEv() | 0) + ($1 << 24 >> 24 << 2) >> 2] & 255; else $7 = $1;
   HEAP8[$$02 >> 0] = $7;
   $$02 = $$02 + 1 | 0;
  } while (($$02 | 0) != ($high | 0));
  $$0$lcssa = $high;
 }
 return $$0$lcssa | 0;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$0$i$i = 0, $1 = 0;
 if ($__n >>> 0 > 1073741823) __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this);
 $1 = $this + 128 | 0;
 if ((HEAP8[$1 >> 0] | 0) == 0 & $__n >>> 0 < 29) {
  HEAP8[$1 >> 0] = 1;
  $$0$i$i = $this + 16 | 0;
 } else $$0$i$i = __Znwj($__n << 2) | 0;
 HEAP32[$this + 4 >> 2] = $$0$i$i;
 HEAP32[$this >> 2] = $$0$i$i;
 HEAP32[$this + 8 >> 2] = $$0$i$i + ($__n << 2);
 return;
}

function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $12 = 0, $2 = 0, $3 = 0, $9 = 0;
 $1 = HEAP32[$this + 4 >> 2] | 0;
 $2 = $this + 8 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 if (($3 | 0) != ($1 | 0)) HEAP32[$2 >> 2] = $3 + (~(($3 + -4 - $1 | 0) >>> 2) << 2);
 $9 = HEAP32[$this >> 2] | 0;
 do if ($9) {
  $12 = HEAP32[$this + 16 >> 2] | 0;
  if (($12 | 0) == ($9 | 0)) {
   HEAP8[$12 + 112 >> 0] = 0;
   break;
  } else {
   __ZdlPv($9);
   break;
  }
 } while (0);
 return;
}

function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this, $info, $dst_ptr, $current_ptr, $path_below, $use_strcmp) {
 $this = $this | 0;
 $info = $info | 0;
 $dst_ptr = $dst_ptr | 0;
 $current_ptr = $current_ptr | 0;
 $path_below = $path_below | 0;
 $use_strcmp = $use_strcmp | 0;
 if ((HEAP32[$info + 8 >> 2] | 0) == ($this | 0)) __ZNK10__cxxabiv117__class_type_info29process_static_type_above_dstEPNS_19__dynamic_cast_infoEPKvS4_i(0, $info, $dst_ptr, $current_ptr, $path_below);
 return;
}

function ___string_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $11 = 0, $2 = 0, $3 = 0, $k$0 = 0, $k$0$len = 0;
 $0 = $f + 84 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 $2 = $len + 256 | 0;
 $3 = _memchr($1, 0, $2) | 0;
 if (!$3) $k$0 = $2; else $k$0 = $3 - $1 | 0;
 $k$0$len = $k$0 >>> 0 < $len >>> 0 ? $k$0 : $len;
 _memcpy($buf | 0, $1 | 0, $k$0$len | 0) | 0;
 HEAP32[$f + 4 >> 2] = $1 + $k$0$len;
 $11 = $1 + $k$0 | 0;
 HEAP32[$f + 8 >> 2] = $11;
 HEAP32[$0 >> 2] = $11;
 return $k$0$len | 0;
}

function __Znwj($size) {
 $size = $size | 0;
 var $$lcssa = 0, $$size = 0, $1 = 0, $3 = 0, $5 = 0, $7 = 0;
 $$size = ($size | 0) == 0 ? 1 : $size;
 $1 = _malloc($$size) | 0;
 L1 : do if (!$1) {
  while (1) {
   $3 = __ZSt15get_new_handlerv() | 0;
   if (!$3) break;
   FUNCTION_TABLE_v[$3 & 3]();
   $5 = _malloc($$size) | 0;
   if ($5) {
    $$lcssa = $5;
    break L1;
   }
  }
  $7 = ___cxa_allocate_exception(4) | 0;
  HEAP32[$7 >> 2] = 13160;
  ___cxa_throw($7 | 0, 13208, 94);
 } else $$lcssa = $1; while (0);
 return $$lcssa | 0;
}

function ___towrite($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $13 = 0, $2 = 0, $6 = 0;
 $0 = $f + 74 | 0;
 $2 = HEAP8[$0 >> 0] | 0;
 HEAP8[$0 >> 0] = $2 + 255 | $2;
 $6 = HEAP32[$f >> 2] | 0;
 if (!($6 & 8)) {
  HEAP32[$f + 8 >> 2] = 0;
  HEAP32[$f + 4 >> 2] = 0;
  $13 = HEAP32[$f + 44 >> 2] | 0;
  HEAP32[$f + 28 >> 2] = $13;
  HEAP32[$f + 20 >> 2] = $13;
  HEAP32[$f + 16 >> 2] = $13 + (HEAP32[$f + 48 >> 2] | 0);
  $$0 = 0;
  return $$0 | 0;
 } else {
  HEAP32[$f >> 2] = $6 | 32;
  $$0 = -1;
  return $$0 | 0;
 }
 return 0;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = tempRet0;
 return (tempRet0 = (Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0) + (Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $1$1 | $1$1 & 0, $1$0 | 0 | 0) | 0;
}

function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this, $code, $condition) {
 $this = $this | 0;
 $code = $code | 0;
 $condition = $condition | 0;
 var $0 = 0, $12 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $0 = sp;
 FUNCTION_TABLE_viii[HEAP32[(HEAP32[$this >> 2] | 0) + 12 >> 2] & 3]($0, $this, $code);
 if ((HEAP32[$0 + 4 >> 2] | 0) == (HEAP32[$condition + 4 >> 2] | 0)) $12 = (HEAP32[$0 >> 2] | 0) == (HEAP32[$condition >> 2] | 0); else $12 = 0;
 STACKTOP = sp;
 return $12 | 0;
}

function __ZNSt3__18ios_base4initEPv($this, $sb) {
 $this = $this | 0;
 $sb = $sb | 0;
 var $8 = 0, dest = 0, stop = 0;
 HEAP32[$this + 24 >> 2] = $sb;
 HEAP32[$this + 16 >> 2] = ($sb | 0) == 0 & 1;
 HEAP32[$this + 20 >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 4098;
 HEAP32[$this + 12 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 6;
 $8 = $this + 28 | 0;
 dest = $this + 32 | 0;
 stop = dest + 40 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 __ZNSt3__16localeC2Ev($8);
 return;
}

function _vsscanf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 var $4 = 0, $f = 0, dest = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 $f = sp;
 dest = $f + 0 | 0;
 stop = dest + 112 | 0;
 do {
  HEAP32[dest >> 2] = 0;
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 HEAP32[$f + 32 >> 2] = 24;
 HEAP32[$f + 44 >> 2] = $s;
 HEAP32[$f + 76 >> 2] = -1;
 HEAP32[$f + 84 >> 2] = $s;
 $4 = _MUSL_vfscanf($f, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this, $low, $high, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dest = $dest | 0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0;
 if (($low | 0) == ($high | 0)) $$01$lcssa = $low; else {
  $$012 = $low;
  $$03 = $dest;
  while (1) {
   HEAP8[$$03 >> 0] = HEAP8[$$012 >> 0] | 0;
   $$012 = $$012 + 1 | 0;
   if (($$012 | 0) == ($high | 0)) {
    $$01$lcssa = $high;
    break;
   } else $$03 = $$03 + 1 | 0;
  }
 }
 return $$01$lcssa | 0;
}

function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this, $low, $high, $dest) {
 $this = $this | 0;
 $low = $low | 0;
 $high = $high | 0;
 $dest = $dest | 0;
 var $$01$lcssa = 0, $$012 = 0, $$03 = 0;
 if (($low | 0) == ($high | 0)) $$01$lcssa = $low; else {
  $$012 = $low;
  $$03 = $dest;
  while (1) {
   HEAP32[$$03 >> 2] = HEAP8[$$012 >> 0];
   $$012 = $$012 + 1 | 0;
   if (($$012 | 0) == ($high | 0)) {
    $$01$lcssa = $high;
    break;
   } else $$03 = $$03 + 4 | 0;
  }
 }
 return $$01$lcssa | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this, $__str) {
 $this = $this | 0;
 $__str = $__str | 0;
 if (!(HEAP8[$__str >> 0] & 1)) {
  HEAP32[$this + 0 >> 2] = HEAP32[$__str + 0 >> 2];
  HEAP32[$this + 4 >> 2] = HEAP32[$__str + 4 >> 2];
  HEAP32[$this + 8 >> 2] = HEAP32[$__str + 8 >> 2];
 } else __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this, HEAP32[$__str + 8 >> 2] | 0, HEAP32[$__str + 4 >> 2] | 0);
 return;
}

function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s, $__n, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__n = $__n | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $1 = 0, $__va = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__va = sp;
 HEAP32[$__va >> 2] = $varargs;
 $0 = _uselocale($__l | 0) | 0;
 $1 = _vsnprintf($__s, $__n, $__format, $__va) | 0;
 if ($0) _uselocale($0 | 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function ___cxa_can_catch($catchType, $excpType, $thrown) {
 $catchType = $catchType | 0;
 $excpType = $excpType | 0;
 $thrown = $thrown | 0;
 var $4 = 0, $temp = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $temp = sp;
 HEAP32[$temp >> 2] = HEAP32[$thrown >> 2];
 $4 = FUNCTION_TABLE_iiii[HEAP32[(HEAP32[$catchType >> 2] | 0) + 16 >> 2] & 31]($catchType, $excpType, $temp) | 0;
 if ($4) HEAP32[$thrown >> 2] = HEAP32[$temp >> 2];
 STACKTOP = sp;
 return $4 & 1 | 0;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 var $$0 = 0, $0 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0;
 $0 = $this + 8 | 0;
 $2 = _uselocale(HEAP32[$0 >> 2] | 0) | 0;
 $3 = _mbtowc(0, 0, 4) | 0;
 if ($2) _uselocale($2 | 0) | 0;
 if (!$3) {
  $6 = HEAP32[$0 >> 2] | 0;
  if (!$6) $$0 = 1; else {
   $8 = _uselocale($6 | 0) | 0;
   if (!$8) $$0 = 0; else {
    _uselocale($8 | 0) | 0;
    $$0 = 0;
   }
  }
 } else $$0 = -1;
 return $$0 | 0;
}

function __ZNSt3__18ios_base16__call_callbacksENS0_5eventE($this, $ev) {
 $this = $this | 0;
 $ev = $ev | 0;
 var $1 = 0, $3 = 0, $4 = 0, $i$01 = 0;
 $1 = HEAP32[$this + 40 >> 2] | 0;
 if ($1) {
  $3 = $this + 32 | 0;
  $4 = $this + 36 | 0;
  $i$01 = $1;
  do {
   $i$01 = $i$01 + -1 | 0;
   FUNCTION_TABLE_viii[HEAP32[(HEAP32[$3 >> 2] | 0) + ($i$01 << 2) >> 2] & 3]($ev, $this, HEAP32[(HEAP32[$4 >> 2] | 0) + ($i$01 << 2) >> 2] | 0);
  } while (($i$01 | 0) != 0);
 }
 return;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEEC2Ej($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 HEAP32[$this >> 2] = 0;
 HEAP32[$this + 4 >> 2] = 0;
 HEAP32[$this + 8 >> 2] = 0;
 HEAP8[$this + 128 >> 0] = 0;
 if ($__n) {
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE8allocateEj($this, $__n);
  __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this, $__n);
 }
 return;
}

function __ZNSt3__113__vector_baseIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $2 = 0, $3 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 do if ($0) {
  $2 = $this + 4 | 0;
  $3 = HEAP32[$2 >> 2] | 0;
  if (($3 | 0) != ($0 | 0)) HEAP32[$2 >> 2] = $3 + (~(($3 + -4 - $0 | 0) >>> 2) << 2);
  if (($this + 16 | 0) == ($0 | 0)) {
   HEAP8[$this + 128 >> 0] = 0;
   break;
  } else {
   __ZdlPv($0);
   break;
  }
 } while (0);
 return;
}

function copyTempDouble(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0];
 HEAP8[tempDoublePtr + 4 >> 0] = HEAP8[ptr + 4 >> 0];
 HEAP8[tempDoublePtr + 5 >> 0] = HEAP8[ptr + 5 >> 0];
 HEAP8[tempDoublePtr + 6 >> 0] = HEAP8[ptr + 6 >> 0];
 HEAP8[tempDoublePtr + 7 >> 0] = HEAP8[ptr + 7 >> 0];
}

function ___shlim($f, $lim) {
 $f = $f | 0;
 $lim = $lim | 0;
 var $$sink = 0, $12 = 0, $2 = 0, $4 = 0, $7 = 0;
 HEAP32[$f + 104 >> 2] = $lim;
 $2 = HEAP32[$f + 8 >> 2] | 0;
 $4 = HEAP32[$f + 4 >> 2] | 0;
 $7 = $2 - $4 | 0;
 HEAP32[$f + 108 >> 2] = $7;
 if (!(($lim | 0) != 0 & ($7 | 0) > ($lim | 0))) {
  $$sink = $2;
  $12 = $f + 100 | 0;
  HEAP32[$12 >> 2] = $$sink;
  return;
 }
 $$sink = $4 + $lim | 0;
 $12 = $f + 100 | 0;
 HEAP32[$12 >> 2] = $$sink;
 return;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryC2ERS3_($this, $__os) {
 $this = $this | 0;
 $__os = $__os | 0;
 var $3 = 0, $8 = 0;
 HEAP8[$this >> 0] = 0;
 HEAP32[$this + 4 >> 2] = $__os;
 $3 = HEAP32[(HEAP32[$__os >> 2] | 0) + -12 >> 2] | 0;
 if (!(HEAP32[$__os + ($3 + 16) >> 2] | 0)) {
  $8 = HEAP32[$__os + ($3 + 72) >> 2] | 0;
  if ($8) __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($8) | 0;
  HEAP8[$this >> 0] = 1;
 }
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC2ERS3_($this, $__os) {
 $this = $this | 0;
 $__os = $__os | 0;
 var $3 = 0, $8 = 0;
 HEAP8[$this >> 0] = 0;
 HEAP32[$this + 4 >> 2] = $__os;
 $3 = HEAP32[(HEAP32[$__os >> 2] | 0) + -12 >> 2] | 0;
 if (!(HEAP32[$__os + ($3 + 16) >> 2] | 0)) {
  $8 = HEAP32[$__os + ($3 + 72) >> 2] | 0;
  if ($8) __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($8) | 0;
  HEAP8[$this >> 0] = 1;
 }
 return;
}

function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $1 = 0, $__va = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__va = sp;
 HEAP32[$__va >> 2] = $varargs;
 $0 = _uselocale($__l | 0) | 0;
 $1 = _vasprintf($__s, $__format, $__va) | 0;
 if ($0) _uselocale($0 | 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s, $__l, $__format, $varargs) {
 $__s = $__s | 0;
 $__l = $__l | 0;
 $__format = $__format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $1 = 0, $__va = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__va = sp;
 HEAP32[$__va >> 2] = $varargs;
 $0 = _uselocale($__l | 0) | 0;
 $1 = _vsscanf($__s, $__format, $__va) | 0;
 if ($0) _uselocale($0 | 0) | 0;
 STACKTOP = sp;
 return $1 | 0;
}

function __ZNSt3__114__split_bufferIPNS_6locale5facetERNS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $4 = 0;
 $0 = $this + 8 | 0;
 $$0 = $__n;
 $1 = HEAP32[$0 >> 2] | 0;
 do {
  if (!$1) $4 = 0; else {
   HEAP32[$1 >> 2] = 0;
   $4 = HEAP32[$0 >> 2] | 0;
  }
  $1 = $4 + 4 | 0;
  HEAP32[$0 >> 2] = $1;
  $$0 = $$0 + -1 | 0;
 } while (($$0 | 0) != 0);
 return;
}

function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this, $info, $adjustedPtr, $path_below) {
 $this = $this | 0;
 $info = $info | 0;
 $adjustedPtr = $adjustedPtr | 0;
 $path_below = $path_below | 0;
 if ((HEAP32[$info + 8 >> 2] | 0) == ($this | 0)) __ZNK10__cxxabiv117__class_type_info24process_found_base_classEPNS_19__dynamic_cast_infoEPvi(0, $info, $adjustedPtr, $path_below);
 return;
}

function __ZNSt3__16vectorIPNS_6locale5facetENS_15__sso_allocatorIS3_Lj28EEEE18__construct_at_endEj($this, $__n) {
 $this = $this | 0;
 $__n = $__n | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $4 = 0;
 $0 = $this + 4 | 0;
 $$0 = $__n;
 $1 = HEAP32[$0 >> 2] | 0;
 do {
  if (!$1) $4 = 0; else {
   HEAP32[$1 >> 2] = 0;
   $4 = HEAP32[$0 >> 2] | 0;
  }
  $1 = $4 + 4 | 0;
  HEAP32[$0 >> 2] = $1;
  $$0 = $$0 + -1 | 0;
 } while (($$0 | 0) != 0);
 return;
}

function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (tempRet0 = ($8 >>> 16) + (Math_imul($11, $6) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, $8 + $12 << 16 | $3 & 65535 | 0) | 0;
}

function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest;
  src = src + num | 0;
  dest = dest + num | 0;
  while ((num | 0) > 0) {
   dest = dest - 1 | 0;
   src = src - 1 | 0;
   num = num - 1 | 0;
   HEAP8[dest >> 0] = HEAP8[src >> 0] | 0;
  }
  dest = ret;
 } else _memcpy(dest, src, num) | 0;
 return dest | 0;
}

function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $3 = 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] & 63]($this) | 0;
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 4976) | 0;
 HEAP32[$this + 36 >> 2] = $3;
 HEAP8[$this + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$3 >> 2] | 0) + 28 >> 2] & 63]($3) | 0) & 1;
 return;
}

function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this, $__loc) {
 $this = $this | 0;
 $__loc = $__loc | 0;
 var $3 = 0;
 FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 24 >> 2] & 63]($this) | 0;
 $3 = __ZNKSt3__16locale9use_facetERNS0_2idE($__loc, 4968) | 0;
 HEAP32[$this + 36 >> 2] = $3;
 HEAP8[$this + 44 >> 0] = (FUNCTION_TABLE_ii[HEAP32[(HEAP32[$3 >> 2] | 0) + 28 >> 2] & 63]($3) | 0) & 1;
 return;
}

function _copysign($x, $y) {
 $x = +$x;
 $y = +$y;
 var $0 = 0, $1 = 0, $6 = 0;
 HEAPF64[tempDoublePtr >> 3] = $x;
 $0 = HEAP32[tempDoublePtr >> 2] | 0;
 $1 = HEAP32[tempDoublePtr + 4 >> 2] | 0;
 HEAPF64[tempDoublePtr >> 3] = $y;
 $6 = HEAP32[tempDoublePtr + 4 >> 2] & -2147483648 | $1 & 2147483647;
 HEAP32[tempDoublePtr >> 2] = $0;
 HEAP32[tempDoublePtr + 4 >> 2] = $6;
 return +(+HEAPF64[tempDoublePtr >> 3]);
}

function __ZSt9terminatev() {
 var $0 = 0, $17 = 0, $2 = 0, $5 = 0;
 $0 = ___cxa_get_globals_fast() | 0;
 if ($0) {
  $2 = HEAP32[$0 >> 2] | 0;
  if ($2) {
   $5 = $2 + 48 | 0;
   if ((HEAP32[$5 >> 2] & -256 | 0) == 1126902528 ? (HEAP32[$5 + 4 >> 2] | 0) == 1129074247 : 0) __ZSt11__terminatePFvvE(HEAP32[$2 + 12 >> 2] | 0);
  }
 }
 $17 = HEAP32[3196] | 0;
 HEAP32[3196] = $17 + 0;
 __ZSt11__terminatePFvvE($17);
}

function __ZNSt3__16locale2id5__getEv($this) {
 $this = $this | 0;
 var $__p$i = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $__p$i = sp;
 if ((HEAP32[$this >> 2] | 0) != -1) {
  HEAP32[$__p$i >> 2] = $this;
  HEAP32[$__p$i + 4 >> 2] = 114;
  HEAP32[$__p$i + 8 >> 2] = 0;
  __ZNSt3__111__call_onceERVmPvPFvS2_E($this, $__p$i, 115);
 }
 STACKTOP = sp;
 return (HEAP32[$this + 4 >> 2] | 0) + -1 | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg$result, $this, $0, $1, $2, $3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $9 = 0;
 $4 = $agg$result;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 $9 = $agg$result + 8 | 0;
 HEAP32[$9 >> 2] = -1;
 HEAP32[$9 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg$result, $this, $0, $1, $2, $3) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 $2 = $2 | 0;
 $3 = $3 | 0;
 var $4 = 0, $9 = 0;
 $4 = $agg$result;
 HEAP32[$4 >> 2] = 0;
 HEAP32[$4 + 4 >> 2] = 0;
 $9 = $agg$result + 8 | 0;
 HEAP32[$9 >> 2] = -1;
 HEAP32[$9 + 4 >> 2] = -1;
 return;
}

function ___uflow($f) {
 $f = $f | 0;
 var $$0 = 0, $c = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $c = sp;
 if (!(HEAP32[$f + 8 >> 2] | 0)) if (!(___toread($f) | 0)) label = 3; else $$0 = -1; else label = 3;
 if ((label | 0) == 3) if ((FUNCTION_TABLE_iiii[HEAP32[$f + 32 >> 2] & 31]($f, $c, 1) | 0) == 1) $$0 = HEAPU8[$c >> 0] | 0; else $$0 = -1;
 STACKTOP = sp;
 return $$0 | 0;
}

function _main() {
 var $outputFunctions = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 $outputFunctions = sp + 48 | 0;
 HEAP32[$outputFunctions >> 2] = 109;
 HEAP32[$outputFunctions + 4 >> 2] = 110;
 HEAP32[$outputFunctions + 8 >> 2] = 111;
 __ZN15MatrixTransposeC2Ev(sp);
 __ZN4Base10Benchmarks6runAllERNS_15OutputFunctionsEb($outputFunctions, 1);
 STACKTOP = sp;
 return 0;
}

function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 8 | 0;
 $rem = __stackBase__ | 0;
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
 STACKTOP = __stackBase__;
 return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result, $this, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $7 = 0;
 $2 = $agg$result;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 $7 = $agg$result + 8 | 0;
 HEAP32[$7 >> 2] = -1;
 HEAP32[$7 + 4 >> 2] = -1;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg$result, $this, $0, $1) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $2 = 0, $7 = 0;
 $2 = $agg$result;
 HEAP32[$2 >> 2] = 0;
 HEAP32[$2 + 4 >> 2] = 0;
 $7 = $agg$result + 8 | 0;
 HEAP32[$7 >> 2] = -1;
 HEAP32[$7 + 4 >> 2] = -1;
 return;
}

function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this, $__nm, $0) {
 $this = $this | 0;
 $__nm = $__nm | 0;
 $0 = $0 | 0;
 var $7 = 0, $8 = 0;
 if (!(HEAP8[$__nm >> 0] & 1)) $7 = $__nm + 1 | 0; else $7 = HEAP32[$__nm + 8 >> 2] | 0;
 $8 = _catopen($7 | 0, 1) | 0;
 return $8 >>> (($8 | 0) != (-1 | 0) & 1) | 0;
}

function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this, $__nm, $0) {
 $this = $this | 0;
 $__nm = $__nm | 0;
 $0 = $0 | 0;
 var $7 = 0, $8 = 0;
 if (!(HEAP8[$__nm >> 0] & 1)) $7 = $__nm + 1 | 0; else $7 = HEAP32[$__nm + 8 >> 2] | 0;
 $8 = _catopen($7 | 0, 1) | 0;
 return $8 >>> (($8 | 0) != (-1 | 0) & 1) | 0;
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = HEAP8[cttz_i8 + (x & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret | 0;
 ret = HEAP8[cttz_i8 + (x >> 8 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 8 | 0;
 ret = HEAP8[cttz_i8 + (x >> 16 & 255) >> 0] | 0;
 if ((ret | 0) < 8) return ret + 16 | 0;
 return (HEAP8[cttz_i8 + (x >>> 24) >> 0] | 0) + 24 | 0;
}

function _wmemcpy($d, $s, $n) {
 $d = $d | 0;
 $s = $s | 0;
 $n = $n | 0;
 var $$014 = 0, $$023 = 0, $$05 = 0;
 if (!$n) return $d | 0; else {
  $$014 = $n;
  $$023 = $s;
  $$05 = $d;
 }
 while (1) {
  $$014 = $$014 + -1 | 0;
  HEAP32[$$05 >> 2] = HEAP32[$$023 >> 2];
  if (!$$014) break; else {
   $$023 = $$023 + 4 | 0;
   $$05 = $$05 + 4 | 0;
  }
 }
 return $d | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this) {
 $this = $this | 0;
 var $$0 = 0, $5 = 0, $6 = 0;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] & 63]($this) | 0) == -1) $$0 = -1; else {
  $5 = $this + 12 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  HEAP32[$5 >> 2] = $6 + 4;
  $$0 = HEAP32[$6 >> 2] | 0;
 }
 return $$0 | 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this) {
 $this = $this | 0;
 var $$0 = 0, $5 = 0, $6 = 0;
 if ((FUNCTION_TABLE_ii[HEAP32[(HEAP32[$this >> 2] | 0) + 36 >> 2] & 63]($this) | 0) == -1) $$0 = -1; else {
  $5 = $this + 12 | 0;
  $6 = HEAP32[$5 >> 2] | 0;
  HEAP32[$5 >> 2] = $6 + 1;
  $$0 = HEAPU8[$6 >> 0] | 0;
 }
 return $$0 | 0;
}

function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg$result, $this, $__lo, $__hi) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initIPKwEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result, $__lo, $__hi);
 return;
}

function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg$result, $this, $__lo, $__hi) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $__lo = $__lo | 0;
 $__hi = $__hi | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initIPKcEENS_9enable_ifIXsr21__is_forward_iteratorIT_EE5valueEvE4typeESA_SA_($agg$result, $__lo, $__hi);
 return;
}

function __ZNKSt3__119__iostream_category7messageEi($agg$result, $this, $ev) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $ev = $ev | 0;
 if (($ev | 0) != 1 & ($ev | 0) < 257) __ZNKSt3__112__do_message7messageEi($agg$result, $this, $ev); else __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result, 2440, 35);
 return;
}

function __ZNSt3__118__libcpp_refstringC2EPKc($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 var $0 = 0, $2 = 0, $5 = 0;
 $0 = _strlen($msg | 0) | 0;
 $2 = __Znwj($0 + 13 | 0) | 0;
 HEAP32[$2 >> 2] = $0;
 HEAP32[$2 + 4 >> 2] = $0;
 HEAP32[$2 + 8 >> 2] = 0;
 $5 = $2 + 12 | 0;
 _memcpy($5 | 0, $msg | 0, $0 + 1 | 0) | 0;
 HEAP32[$this >> 2] = $5;
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEEC2Ev($this) {
 $this = $this | 0;
 var $1 = 0;
 HEAP32[$this >> 2] = 2208;
 __ZNSt3__16localeC2Ev($this + 4 | 0);
 $1 = $this + 8 | 0;
 HEAP32[$1 + 0 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP32[$1 + 20 >> 2] = 0;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEEC2Ev($this) {
 $this = $this | 0;
 var $1 = 0;
 HEAP32[$this >> 2] = 2144;
 __ZNSt3__16localeC2Ev($this + 4 | 0);
 $1 = $this + 8 | 0;
 HEAP32[$1 + 0 >> 2] = 0;
 HEAP32[$1 + 4 >> 2] = 0;
 HEAP32[$1 + 8 >> 2] = 0;
 HEAP32[$1 + 12 >> 2] = 0;
 HEAP32[$1 + 16 >> 2] = 0;
 HEAP32[$1 + 20 >> 2] = 0;
 return;
}

function __ZNKSt3__16locale5__imp9use_facetEl($this, $id) {
 $this = $this | 0;
 $id = $id | 0;
 var $1 = 0;
 if (__ZNKSt3__16locale5__imp9has_facetEl($this, $id) | 0) return HEAP32[(HEAP32[$this + 8 >> 2] | 0) + ($id << 2) >> 2] | 0; else {
  $1 = ___cxa_allocate_exception(4) | 0;
  __ZNSt8bad_castC2Ev($1);
  ___cxa_throw($1 | 0, 13560, 101);
 }
 return 0;
}

function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this) {
 $this = $this | 0;
 if (!(HEAP8[5360] | 0)) if (___cxa_guard_acquire(5360) | 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(5344, 5368, _wcslen(5368) | 0);
  ___cxa_atexit(123, 5344, ___dso_handle | 0) | 0;
  ___cxa_guard_release(5360);
 }
 return 5344;
}

function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this) {
 $this = $this | 0;
 if (!(HEAP8[5728] | 0)) if (___cxa_guard_acquire(5728) | 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(5712, 5736, _wcslen(5736) | 0);
  ___cxa_atexit(123, 5712, ___dso_handle | 0) | 0;
  ___cxa_guard_release(5728);
 }
 return 5712;
}

function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this) {
 $this = $this | 0;
 if (!(HEAP8[5576] | 0)) if (___cxa_guard_acquire(5576) | 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(5560, 5584, _wcslen(5584) | 0);
  ___cxa_atexit(123, 5560, ___dso_handle | 0) | 0;
  ___cxa_guard_release(5576);
 }
 return 5560;
}

function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this) {
 $this = $this | 0;
 if (!(HEAP8[5464] | 0)) if (___cxa_guard_acquire(5464) | 0) {
  __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj(5448, 5472, _wcslen(5472) | 0);
  ___cxa_atexit(123, 5448, ___dso_handle | 0) | 0;
  ___cxa_guard_release(5464);
 }
 return 5448;
}

function __ZNSt3__18ios_baseD2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 2528;
 __ZNSt3__18ios_base16__call_callbacksENS0_5eventE($this, 0);
 __ZNSt3__16localeD2Ev($this + 28 | 0);
 _free(HEAP32[$this + 32 >> 2] | 0);
 _free(HEAP32[$this + 36 >> 2] | 0);
 _free(HEAP32[$this + 48 >> 2] | 0);
 _free(HEAP32[$this + 60 >> 2] | 0);
 return;
}

function __ZNSt3__18ios_base4InitD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(408) | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(584) | 0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(760) | 0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(936) | 0;
 return;
}

function __ZNSt13runtime_errorC2ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 var $7 = 0;
 HEAP32[$this >> 2] = 13328;
 if (!(HEAP8[$msg >> 0] & 1)) $7 = $msg + 1 | 0; else $7 = HEAP32[$msg + 8 >> 2] | 0;
 __ZNSt3__118__libcpp_refstringC2EPKc($this + 4 | 0, $7);
 return;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this, $0, $frm, $1, $frm_nxt, $to, $2, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $1 = $1 | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $2 = $2 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this, $0, $frm, $1, $frm_nxt, $to, $2, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $1 = $1 | 0;
 $frm_nxt = $frm_nxt | 0;
 $to = $to | 0;
 $2 = $2 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$frm_nxt >> 2] = $frm;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function _sn_write($f, $s, $l) {
 $f = $f | 0;
 $s = $s | 0;
 $l = $l | 0;
 var $2 = 0, $3 = 0, $6 = 0, $l$ = 0;
 $2 = $f + 20 | 0;
 $3 = HEAP32[$2 >> 2] | 0;
 $6 = (HEAP32[$f + 16 >> 2] | 0) - $3 | 0;
 $l$ = $6 >>> 0 > $l >>> 0 ? $l : $6;
 _memcpy($3 | 0, $s | 0, $l$ | 0) | 0;
 HEAP32[$2 >> 2] = (HEAP32[$2 >> 2] | 0) + $l$;
 return $l | 0;
}

function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this) {
 $this = $this | 0;
 if (!(HEAP8[5688] | 0)) if (___cxa_guard_acquire(5688) | 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(5672, 5696, 11);
  ___cxa_atexit(122, 5672, ___dso_handle | 0) | 0;
  ___cxa_guard_release(5688);
 }
 return 5672;
}

function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this) {
 $this = $this | 0;
 if (!(HEAP8[5528] | 0)) if (___cxa_guard_acquire(5528) | 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(5512, 5536, 20);
  ___cxa_atexit(122, 5512, ___dso_handle | 0) | 0;
  ___cxa_guard_release(5528);
 }
 return 5512;
}

function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this) {
 $this = $this | 0;
 if (!(HEAP8[5320] | 0)) if (___cxa_guard_acquire(5320) | 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(5304, 5328, 8);
  ___cxa_atexit(122, 5304, ___dso_handle | 0) | 0;
  ___cxa_guard_release(5320);
 }
 return 5304;
}

function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this) {
 $this = $this | 0;
 if (!(HEAP8[5424] | 0)) if (___cxa_guard_acquire(5424) | 0) {
  __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(5408, 5432, 8);
  ___cxa_atexit(122, 5408, ___dso_handle | 0) | 0;
  ___cxa_guard_release(5424);
 }
 return 5408;
}

function _abort_message($format, $varargs) {
 $format = $format | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $list = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $list = sp;
 HEAP32[$list >> 2] = $varargs;
 $0 = HEAP32[_stderr >> 2] | 0;
 _vfprintf($0 | 0, $format | 0, $list | 0) | 0;
 _fputc(10, $0 | 0) | 0;
 _abort();
}

function __ZN4Base10Benchmarks3addEPNS_9BenchmarkE($benchmark) {
 $benchmark = $benchmark | 0;
 var $0 = 0, $3 = 0;
 $0 = __Znwj(12) | 0;
 HEAP32[$0 + 8 >> 2] = $benchmark;
 HEAP32[$0 + 4 >> 2] = 80;
 $3 = HEAP32[20] | 0;
 HEAP32[$0 >> 2] = $3;
 HEAP32[$3 + 4 >> 2] = $0;
 HEAP32[20] = $0;
 HEAP32[22] = (HEAP32[22] | 0) + 1;
 return;
}

function dynCall_viiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 FUNCTION_TABLE_viiiiiiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0);
}

function __ZNSt3__114__shared_count16__release_sharedEv($this) {
 $this = $this | 0;
 var $$0 = 0, $0 = 0, $1 = 0;
 $0 = $this + 4 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 HEAP32[$0 >> 2] = $1 + -1;
 if (!$1) {
  FUNCTION_TABLE_vi[HEAP32[(HEAP32[$this >> 2] | 0) + 8 >> 2] & 127]($this);
  $$0 = 1;
 } else $$0 = 0;
 return $$0 | 0;
}

function dynCall_iiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 return FUNCTION_TABLE_iiiiiiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0) | 0;
}

function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this, $code, $condition) {
 $this = $this | 0;
 $code = $code | 0;
 $condition = $condition | 0;
 var $5 = 0;
 if ((HEAP32[$code + 4 >> 2] | 0) == ($this | 0)) $5 = (HEAP32[$code >> 2] | 0) == ($condition | 0); else $5 = 0;
 return $5 | 0;
}

function __ZNKSt3__112__do_message7messageEi($agg$result, $this, $ev) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $ev = $ev | 0;
 var $0 = 0;
 $0 = _strerror($ev | 0) | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result, $0, _strlen($0 | 0) | 0);
 return;
}

function _snprintf($s, $n, $fmt, $varargs) {
 $s = $s | 0;
 $n = $n | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = _vsnprintf($s, $n, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 return __ZNSt3__1L20utf8_to_utf16_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, 1114111, 0) | 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $frm_end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $frm_end = $frm_end | 0;
 $mx = $mx | 0;
 return __ZNSt3__1L19utf8_to_ucs4_lengthEPKhS1_jmNS_12codecvt_modeE($frm, $frm_end, $mx, 1114111, 0) | 0;
}

function dynCall_viiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 FUNCTION_TABLE_viiiiiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0);
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 var $1 = 0, $3 = 0, $5 = 0;
 $1 = HEAP32[$this + 8 >> 2] | 0;
 if (!$1) $5 = 1; else {
  $3 = _uselocale($1 | 0) | 0;
  if (!$3) $5 = 4; else {
   _uselocale($3 | 0) | 0;
   $5 = 4;
  }
 }
 return $5 | 0;
}

function __ZNKSt3__16locale5__imp9has_facetEl($this, $id) {
 $this = $this | 0;
 $id = $id | 0;
 var $12 = 0, $3 = 0;
 $3 = HEAP32[$this + 8 >> 2] | 0;
 if ((HEAP32[$this + 12 >> 2] | 0) - $3 >> 2 >>> 0 > $id >>> 0) $12 = (HEAP32[$3 + ($id << 2) >> 2] | 0) != 0; else $12 = 0;
 return $12 | 0;
}

function _wmemset($d, $c, $n) {
 $d = $d | 0;
 $c = $c | 0;
 $n = $n | 0;
 var $$012 = 0, $$03 = 0;
 if (!$n) return $d | 0; else {
  $$012 = $n;
  $$03 = $d;
 }
 while (1) {
  $$012 = $$012 + -1 | 0;
  HEAP32[$$03 >> 2] = $c;
  if (!$$012) break; else $$03 = $$03 + 4 | 0;
 }
 return $d | 0;
}

function _sprintf($s, $fmt, $varargs) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = _vsprintf($s, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function _sscanf($s, $fmt, $varargs) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $varargs = $varargs | 0;
 var $0 = 0, $ap = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $ap = sp;
 HEAP32[$ap >> 2] = $varargs;
 $0 = _vsscanf($s, $fmt, $ap) | 0;
 STACKTOP = sp;
 return $0 | 0;
}

function _bitshift64Ashr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = (high | 0) < 0 ? -1 : 0;
 return high >> bits - 32 | 0;
}

function dynCall_viiiiiii(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 FUNCTION_TABLE_viiiiiii[index & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0);
}

function ___cxa_get_globals_fast() {
 var $3 = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(_pthread_once(12976, 2) | 0)) {
  $3 = _pthread_getspecific(HEAP32[3242] | 0) | 0;
  STACKTOP = sp;
  return $3 | 0;
 } else _abort_message(12984, sp);
 return 0;
}

function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP8[$agg$result >> 0] = 2;
 HEAP8[$agg$result + 1 >> 0] = 3;
 HEAP8[$agg$result + 2 >> 0] = 0;
 HEAP8[$agg$result + 3 >> 0] = 4;
 return;
}

function __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($this) {
 $this = $this | 0;
 var $1 = 0, $2 = 0;
 $1 = (HEAP32[$this >> 2] | 0) + -4 | 0;
 $2 = HEAP32[$1 >> 2] | 0;
 HEAP32[$1 >> 2] = $2 + -1;
 if (($2 + -1 | 0) < 0) __ZdlPv((HEAP32[$this >> 2] | 0) + -12 | 0);
 return;
}

function dynCall_viiiiiid(index, a1, a2, a3, a4, a5, a6, a7) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = +a7;
 FUNCTION_TABLE_viiiiiid[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, +a7);
}

function __ZNSt3__16locale5__imp7installINS_9money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(4696) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_9money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(4648) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_9money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(4592) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_9money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(4512) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(4216) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(4184) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3952) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3800) | 0);
 return;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this, $0, $frm, $end, $mx) {
 $this = $this | 0;
 $0 = $0 | 0;
 $frm = $frm | 0;
 $end = $end | 0;
 $mx = $mx | 0;
 var $3 = 0;
 $3 = $end - $frm | 0;
 return ($3 >>> 0 < $mx >>> 0 ? $3 : $mx) | 0;
}

function __ZNKSt3__15ctypeIwE5do_isEtw($this, $m, $c) {
 $this = $this | 0;
 $m = $m | 0;
 $c = $c | 0;
 var $5 = 0;
 if ($c >>> 0 < 128) $5 = (HEAP16[(__ZNSt3__15ctypeIcE13classic_tableEv() | 0) + ($c << 1) >> 1] & $m) << 16 >> 16 != 0; else $5 = 0;
 return $5 | 0;
}

function __ZNSt3__16locale5__imp7installINS_7num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3688) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3592) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3528) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3408) | 0);
 return;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high << bits | (low & (1 << bits) - 1 << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}

function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this) {
 $this = $this | 0;
 var $0 = 0, $1 = 0;
 HEAP32[$this >> 2] = 4992;
 $0 = $this + 8 | 0;
 $1 = HEAP32[$0 >> 2] | 0;
 if (($1 | 0) != (__ZNSt3__16__clocEv() | 0)) _freelocale(HEAP32[$0 >> 2] | 0);
 return;
}

function __ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE($iob) {
 $iob = $iob | 0;
 var $$0 = 0, $2 = 0;
 $2 = HEAP32[$iob + 4 >> 2] & 74;
 if (($2 | 0) == 64) $$0 = 8; else if (!$2) $$0 = 0; else if (($2 | 0) == 8) $$0 = 16; else $$0 = 10;
 return $$0 | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKcj($this, $__s, _strlen($__s | 0) | 0) | 0;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKc($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this, $__s, _strlen($__s | 0) | 0) | 0;
}

function __ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv($p) {
 $p = $p | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 _free($p);
 if (!(_pthread_setspecific(HEAP32[3242] | 0, 0) | 0)) {
  STACKTOP = sp;
  return;
 } else _abort_message(13096, sp);
}

function __ZNKSt3__15ctypeIcE10do_tolowerEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $5 = 0;
 if ($c << 24 >> 24 > -1) $5 = HEAP32[(__ZNSt3__15ctypeIcE21__classic_lower_tableEv() | 0) + ($c << 24 >> 24 << 2) >> 2] & 255; else $5 = $c;
 return $5 | 0;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 if ((bits | 0) < 32) {
  tempRet0 = high >>> bits;
  return low >>> bits | (high & (1 << bits) - 1) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this, $__s) {
 $this = $this | 0;
 $__s = $__s | 0;
 return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKwj($this, $__s, _wcslen($__s) | 0) | 0;
}

function __ZNKSt3__15ctypeIcE10do_toupperEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $5 = 0;
 if ($c << 24 >> 24 > -1) $5 = HEAP32[(__ZNSt3__15ctypeIcE21__classic_upper_tableEv() | 0) + (($c & 255) << 2) >> 2] & 255; else $5 = $c;
 return $5 | 0;
}

function copyTempFloat(ptr) {
 ptr = ptr | 0;
 HEAP8[tempDoublePtr >> 0] = HEAP8[ptr >> 0];
 HEAP8[tempDoublePtr + 1 >> 0] = HEAP8[ptr + 1 >> 0];
 HEAP8[tempDoublePtr + 2 >> 0] = HEAP8[ptr + 2 >> 0];
 HEAP8[tempDoublePtr + 3 >> 0] = HEAP8[ptr + 3 >> 0];
}

function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = ___cxa_allocate_exception(8) | 0;
 __ZNSt11logic_errorC2EPKc($0, 2120);
 HEAP32[$0 >> 2] = 13384;
 ___cxa_throw($0 | 0, 13424, 96);
}

function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = ___cxa_allocate_exception(8) | 0;
 __ZNSt11logic_errorC2EPKc($0, 4784);
 HEAP32[$0 >> 2] = 13384;
 ___cxa_throw($0 | 0, 13424, 96);
}

function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result, 5184, _wcslen(5184) | 0);
 return;
}

function __ZNKSt3__18numpunctIwE11do_truenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEPKwj($agg$result, 5152, _wcslen(5152) | 0);
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 return;
}

function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__15ctypeIwE10do_toupperEw($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $3 = 0;
 if ($c >>> 0 < 128) $3 = HEAP32[(__ZNSt3__15ctypeIcE21__classic_upper_tableEv() | 0) + ($c << 2) >> 2] | 0; else $3 = $c;
 return $3 | 0;
}

function __ZNKSt3__15ctypeIwE10do_tolowerEw($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 var $3 = 0;
 if ($c >>> 0 < 128) $3 = HEAP32[(__ZNSt3__15ctypeIcE21__classic_lower_tableEv() | 0) + ($c << 2) >> 2] | 0; else $3 = $c;
 return $3 | 0;
}

function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 HEAP32[$agg$result + 0 >> 2] = 0;
 HEAP32[$agg$result + 4 >> 2] = 0;
 HEAP32[$agg$result + 8 >> 2] = 0;
 return;
}

function dynCall_viiiiid(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = +a6;
 FUNCTION_TABLE_viiiiid[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, +a6);
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($this, $__str) {
 $this = $this | 0;
 $__str = $__str | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC2ERKS5_($this, $__str);
 return;
}

function __ZNKSt3__114error_category23default_error_conditionEi($agg$result, $this, $ev) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 $ev = $ev | 0;
 HEAP32[$agg$result >> 2] = $ev;
 HEAP32[$agg$result + 4 >> 2] = $this;
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result, 1, 45);
 return;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6__initEjw($agg$result, 1, 45);
 return;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result, 1, 45);
 return;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEjc($agg$result, 1, 45);
 return;
}

function __ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = $this + 16 | 0;
 HEAP32[$0 >> 2] = HEAP32[$0 >> 2] | 1;
 if (!(HEAP32[$this + 20 >> 2] & 1)) return; else ___cxa_rethrow();
}

function __ZNSt3__16locale8__globalEv() {
 if (!(HEAP8[4880] | 0)) if (___cxa_guard_acquire(4880) | 0) {
  __ZNSt3__16locale5__imp11make_globalEv() | 0;
  HEAP32[1218] = 4864;
  ___cxa_guard_release(4880);
 }
 return HEAP32[1218] | 0;
}

function __ZNSt3__16locale7classicEv() {
 if (!(HEAP8[4856] | 0)) if (___cxa_guard_acquire(4856) | 0) {
  __ZNSt3__16locale5__imp12make_classicEv() | 0;
  HEAP32[1212] = 4840;
  ___cxa_guard_release(4856);
 }
 return HEAP32[1212] | 0;
}

function __ZNKSt3__18numpunctIwE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result, $this + 16 | 0);
 return;
}

function __ZNKSt3__18numpunctIcE11do_groupingEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEC1ERKS5_($agg$result, $this + 12 | 0);
 return;
}

function __ZNSt3__17codecvtIwc11__mbstate_tEC2Ej($this, $refs) {
 $this = $this | 0;
 $refs = $refs | 0;
 HEAP32[$this + 4 >> 2] = $refs + -1;
 HEAP32[$this >> 2] = 4992;
 HEAP32[$this + 8 >> 2] = __ZNSt3__16__clocEv() | 0;
 return;
}

function __ZNSt3__16locale5__imp7installINS_7codecvtIDsc11__mbstate_tEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(5032) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7codecvtIDic11__mbstate_tEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(5040) | 0);
 return;
}

function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result, 5176, 5);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7codecvtIwc11__mbstate_tEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(4976) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7codecvtIcc11__mbstate_tEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(4968) | 0);
 return;
}

function __ZNKSt3__18numpunctIcE11do_truenameEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg$result, 5144, 4);
 return;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this, $0, $to, $1, $to_nxt) {
 $this = $this | 0;
 $0 = $0 | 0;
 $to = $to | 0;
 $1 = $1 | 0;
 $to_nxt = $to_nxt | 0;
 HEAP32[$to_nxt >> 2] = $to;
 return 3;
}

function dynCall_iiiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 return FUNCTION_TABLE_iiiiii[index & 15](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0) | 0;
}

function __ZNKSt3__16locale9use_facetERNS0_2idE($this, $x) {
 $this = $this | 0;
 $x = $x | 0;
 var $0 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 return __ZNKSt3__16locale5__imp9use_facetEl($0, __ZNSt3__16locale2id5__getEv($x) | 0) | 0;
}

function runPostSets() {}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var h = 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, a - c >>> 0 | 0) | 0;
}

function __ZNSt3__117iostream_categoryEv() {
 if (!(HEAP8[2488] | 0)) if (___cxa_guard_acquire(2488) | 0) {
  HEAP32[620] = 3184;
  ___cxa_atexit(33, 2480, ___dso_handle | 0) | 0;
  ___cxa_guard_release(2488);
 }
 return 2480;
}

function __ZN10__cxxabiv112_GLOBAL__N_110construct_Ev() {
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if (!(_pthread_key_create(12968, 126) | 0)) {
  STACKTOP = sp;
  return;
 } else _abort_message(13040, sp);
}

function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this + (HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb1EEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(4472) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_10moneypunctIwLb0EEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(4408) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb1EEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(4344) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_10moneypunctIcLb0EEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(4280) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8numpunctIwEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(5056) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8numpunctIcEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(5048) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8messagesIwEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(4776) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_8messagesIcEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(4736) | 0);
 return;
}

function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[index & 3](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function __ZNSt3__16localeC2Ev($this) {
 $this = $this | 0;
 var $1 = 0;
 $1 = HEAP32[(__ZNSt3__16locale8__globalEv() | 0) >> 2] | 0;
 HEAP32[$this >> 2] = $1;
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7collateIwEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3336) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_7collateIcEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(3296) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_5ctypeIwEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(4896) | 0);
 return;
}

function __ZNSt3__16locale5__imp7installINS_5ctypeIcEEEEvPT_($this, $f) {
 $this = $this | 0;
 $f = $f | 0;
 __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this, $f, __ZNSt3__16locale2id5__getEv(4904) | 0);
 return;
}

function __ZNSt3__16__clocEv() {
 if (!(HEAP8[4800] | 0)) if (___cxa_guard_acquire(4800) | 0) {
  HEAP32[1198] = _newlocale(2147483647, 4808, 0) | 0;
  ___cxa_guard_release(4800);
 }
 return HEAP32[1198] | 0;
}

function _isxdigit($c) {
 $c = $c | 0;
 var $3 = 0, $4 = 0;
 if (($c + -48 | 0) >>> 0 < 10) {
  $4 = 1;
  $3 = $4 & 1;
  return $3 | 0;
 }
 $4 = (($c | 32) + -97 | 0) >>> 0 < 6;
 $3 = $4 & 1;
 return $3 | 0;
}

function __ZNSt3__16locale5__imp11make_globalEv() {
 var $1 = 0;
 $1 = HEAP32[(__ZNSt3__16locale7classicEv() | 0) >> 2] | 0;
 HEAP32[1216] = $1;
 __ZNSt3__114__shared_count12__add_sharedEv($1);
 return 4864;
}

function _wcslen($s) {
 $s = $s | 0;
 var $$0 = 0, $$0$lcssa = 0;
 $$0 = $s;
 while (1) if (!(HEAP32[$$0 >> 2] | 0)) {
  $$0$lcssa = $$0;
  break;
 } else $$0 = $$0 + 4 | 0;
 return $$0$lcssa - $s >> 2 | 0;
}

function __ZNSt3__16localeC2ERKS0_($this, $l) {
 $this = $this | 0;
 $l = $l | 0;
 var $0 = 0;
 $0 = HEAP32[$l >> 2] | 0;
 HEAP32[$this >> 2] = $0;
 __ZNSt3__114__shared_count12__add_sharedEv($0);
 return;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0;
 $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
 return $1$0 | 0;
}

function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 4) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 4) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 8) | 0);
 return;
}

function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + ((HEAP32[(HEAP32[$this >> 2] | 0) + -12 >> 2] | 0) + 8) | 0);
 return;
}

function dynCall_iiiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 return FUNCTION_TABLE_iiiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0) | 0;
}

function __ZNSt3__15ctypeIcED2Ev($this) {
 $this = $this | 0;
 var $1 = 0;
 HEAP32[$this >> 2] = 4920;
 $1 = HEAP32[$this + 8 >> 2] | 0;
 if ($1) if (HEAP8[$this + 12 >> 0] | 0) __ZdaPv($1);
 return;
}

function __ZNSt3__121__throw_runtime_errorEPKc($msg) {
 $msg = $msg | 0;
 var $0 = 0;
 $0 = ___cxa_allocate_exception(8) | 0;
 __ZNSt13runtime_errorC2EPKc($0, $msg);
 ___cxa_throw($0 | 0, 13464, 98);
}

function __ZNSt3__110__time_putD2Ev($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[$this >> 2] | 0;
 if (($0 | 0) != (__ZNSt3__16__clocEv() | 0)) _freelocale(HEAP32[$this >> 2] | 0);
 return;
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this);
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this);
 return;
}

function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[index & 7](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function __ZNSt3__18numpunctIwED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 5112;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this + 16 | 0);
 return;
}

function __ZNSt3__18numpunctIcED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 5072;
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this + 12 | 0);
 return;
}

function __ZNSt13runtime_errorC2EPKc($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 HEAP32[$this >> 2] = 13328;
 __ZNSt3__118__libcpp_refstringC2EPKc($this + 4 | 0, $msg);
 return;
}

function b6(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 abort(6);
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 2208;
 __ZNSt3__16localeD2Ev($this + 4 | 0);
 __ZdlPv($this);
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 2144;
 __ZNSt3__16localeD2Ev($this + 4 | 0);
 __ZdlPv($this);
 return;
}

function __ZNSt11logic_errorC2EPKc($this, $msg) {
 $this = $this | 0;
 $msg = $msg | 0;
 HEAP32[$this >> 2] = 13304;
 __ZNSt3__118__libcpp_refstringC2EPKc($this + 4 | 0, $msg);
 return;
}

function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__110__time_putD2Ev($this + 8 | 0);
 __ZdlPv($this);
 return;
}

function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__110__time_putD2Ev($this + 8 | 0);
 __ZdlPv($this);
 return;
}

function b12(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 abort(12);
 return 0;
}

function __ZSt11__terminatePFvvE($func) {
 $func = $func | 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 FUNCTION_TABLE_v[$func & 3]();
 _abort_message(13224, sp);
}

function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED2Ev($this) {
 $this = $this | 0;
 if (HEAP8[$this >> 0] & 1) __ZdlPv(HEAP32[$this + 8 >> 2] | 0);
 return;
}

function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED2Ev($this) {
 $this = $this | 0;
 if (HEAP8[$this >> 0] & 1) __ZdlPv(HEAP32[$this + 8 >> 2] | 0);
 return;
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0;
 l = a + c >>> 0;
 return (tempRet0 = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0, l | 0) | 0;
}

function __ZNKSt3__18ios_base6getlocEv($agg$result, $this) {
 $agg$result = $agg$result | 0;
 $this = $this | 0;
 __ZNSt3__16localeC2ERKS0_($agg$result, $this + 28 | 0);
 return;
}

function __ZNSt3__16locale5facet16__on_zero_sharedEv($this) {
 $this = $this | 0;
 if ($this) FUNCTION_TABLE_vi[HEAP32[(HEAP32[$this >> 2] | 0) + 4 >> 2] & 127]($this);
 return;
}

function ___cxa_is_pointer_type($type) {
 $type = $type | 0;
 var $3 = 0;
 if (!$type) $3 = 0; else $3 = (___dynamic_cast($type, 13616, 13784, 0) | 0) != 0;
 return $3 & 1 | 0;
}

function _strtoull_l($s, $p, $base, $loc) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 $loc = $loc | 0;
 var $0 = 0;
 $0 = _strtoull($s, $p, $base) | 0;
 return $0 | 0;
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[index & 31](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function __ZNKSt3__15ctypeIwE9do_narrowEwc($this, $c, $dfault) {
 $this = $this | 0;
 $c = $c | 0;
 $dfault = $dfault | 0;
 return ($c >>> 0 < 128 ? $c & 255 : $dfault) | 0;
}

function _strtoll_l($s, $p, $base, $loc) {
 $s = $s | 0;
 $p = $p | 0;
 $base = $base | 0;
 $loc = $loc | 0;
 var $0 = 0;
 $0 = _strtoll($s, $p, $base) | 0;
 return $0 | 0;
}

function __ZNKSt3__15ctypeIcE9do_narrowEcc($this, $c, $dfault) {
 $this = $this | 0;
 $c = $c | 0;
 $dfault = $dfault | 0;
 return ($c << 24 >> 24 > -1 ? $c : $dfault) | 0;
}

function __ZNSt3__16locale2id6__initEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = HEAP32[1222] | 0;
 HEAP32[1222] = $0 + 1;
 HEAP32[$this + 4 >> 2] = $0 + 1;
 return;
}

function b14(p0, p1, p2, p3, p4, p5, p6, p7) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 abort(14);
}

function __ZNSt3__114__shared_count12__add_sharedEv($this) {
 $this = $this | 0;
 var $0 = 0;
 $0 = $this + 4 | 0;
 HEAP32[$0 >> 2] = (HEAP32[$0 >> 2] | 0) + 1;
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 2208;
 __ZNSt3__16localeD2Ev($this + 4 | 0);
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 2208;
 __ZNSt3__16localeD2Ev($this + 4 | 0);
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 2144;
 __ZNSt3__16localeD2Ev($this + 4 | 0);
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 2144;
 __ZNSt3__16localeD2Ev($this + 4 | 0);
 return;
}

function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__110__time_putD2Ev($this + 8 | 0);
 return;
}

function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__110__time_putD2Ev($this + 8 | 0);
 return;
}

function __ZNKSt3__18messagesIwE8do_closeEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 _catclose((($__c | 0) == -1 ? -1 : $__c << 1) | 0) | 0;
 return;
}

function __ZNKSt3__18messagesIcE8do_closeEi($this, $__c) {
 $this = $this | 0;
 $__c = $__c | 0;
 _catclose((($__c | 0) == -1 ? -1 : $__c << 1) | 0) | 0;
 return;
}

function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[index & 3](a1 | 0, a2 | 0, a3 | 0);
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 return ret | 0;
}

function __ZNSt3__111__stdoutbufIwED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__111__stdoutbufIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0);
 __ZdlPv($this);
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0);
 __ZdlPv($this);
 return;
}

function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0);
 __ZdlPv($this);
 return;
}

function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0);
 __ZdlPv($this);
 return;
}

function __ZNSt3__110__stdinbufIwED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__110__stdinbufIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt13runtime_errorD2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 13328;
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($this + 4 | 0);
 return;
}

function __ZNSt11logic_errorD2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 13304;
 __ZN12_GLOBAL__N_114__libcpp_nmstrD2Ev($this + 4 | 0);
 return;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $this | 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this, $0, $1) {
 $this = $this | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 return $this | 0;
}

function __ZSt17__throw_bad_allocv() {
 var $0 = 0;
 $0 = ___cxa_allocate_exception(4) | 0;
 __ZNSt9bad_allocC2Ev($0);
 ___cxa_throw($0 | 0, 13208, 94);
}

function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 __ZdlPv($this);
 return;
}

function b1(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 abort(1);
}

function b8(p0, p1, p2, p3, p4, p5, p6) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = +p6;
 abort(8);
}

function __GLOBAL__sub_I_base_cpp() {
 HEAP32[20] = 80;
 HEAP32[21] = 80;
 HEAP32[22] = 0;
 ___cxa_atexit(112, 80, ___dso_handle | 0) | 0;
 return;
}

function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[index & 31](a1 | 0, a2 | 0) | 0;
}

function __ZNSt3__16localeD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__114__shared_count16__release_sharedEv(HEAP32[$this >> 2] | 0) | 0;
 return;
}

function _wctomb($s, $wc) {
 $s = $s | 0;
 $wc = $wc | 0;
 var $$0 = 0;
 if (!$s) $$0 = 0; else $$0 = _wcrtomb($s, $wc, 0) | 0;
 return $$0 | 0;
}

function _strlen(ptr) {
 ptr = ptr | 0;
 var curr = 0;
 curr = ptr;
 while (HEAP8[curr >> 0] | 0) curr = curr + 1 | 0;
 return curr - ptr | 0;
}

function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0);
 return;
}

function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 4 | 0);
 return;
}

function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0);
 return;
}

function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this + 8 | 0);
 return;
}

function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if (!__THREW__) {
  __THREW__ = threw;
  threwValue = value;
 }
}

function _mbrlen($s, $n, $st) {
 $s = $s | 0;
 $n = $n | 0;
 $st = $st | 0;
 return _mbrtowc(0, $s, $n, ($st | 0) != 0 ? $st : 12768) | 0;
}

function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this) {
 $this = $this | 0;
 return 2;
}

function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this) {
 $this = $this | 0;
 return 2;
}

function __ZNSt3__110__stdinbufIwE9underflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__110__stdinbufIwE9__getcharEb($this, 0) | 0;
}

function __ZNSt3__110__stdinbufIcE9underflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__110__stdinbufIcE9__getcharEb($this, 0) | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return;
}

function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[index & 63](a1 | 0, a2 | 0);
}

function b15(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 abort(15);
}

function _vsprintf($s, $fmt, $ap) {
 $s = $s | 0;
 $fmt = $fmt | 0;
 $ap = $ap | 0;
 return _vsnprintf($s, 2147483647, $fmt, $ap) | 0;
}

function _isspace($c) {
 $c = $c | 0;
 var $4 = 0;
 if (($c | 0) == 32) $4 = 1; else $4 = ($c + -9 | 0) >>> 0 < 5;
 return $4 & 1 | 0;
}

function __GLOBAL__sub_I_iostream_cpp() {
 __ZNSt3__18ios_base4InitC2Ev(0);
 ___cxa_atexit(124, 1024, ___dso_handle | 0) | 0;
 return;
}

function __ZNSt3__18ios_base7failureD0Ev($this) {
 $this = $this | 0;
 __ZNSt3__112system_errorD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__110__stdinbufIwE5uflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__110__stdinbufIwE9__getcharEb($this, 1) | 0;
}

function __ZNSt3__110__stdinbufIcE5uflowEv($this) {
 $this = $this | 0;
 return __ZNSt3__110__stdinbufIcE9__getcharEb($this, 1) | 0;
}

function b10(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = +p5;
 abort(10);
}

function _mbsinit($st) {
 $st = $st | 0;
 var $4 = 0;
 if (!$st) $4 = 1; else $4 = (HEAP32[$st >> 2] | 0) == 0;
 return $4 & 1 | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return -1;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return -1;
}

function _do_read($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 return ___string_read($f, $buf, $len) | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return -1;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this, $0) {
 $this = $this | 0;
 $0 = $0 | 0;
 return -1;
}

function __ZNSt3__16locale5__impD0Ev($this) {
 $this = $this | 0;
 __ZNSt3__16locale5__impD2Ev($this);
 __ZdlPv($this);
 return;
}

function b17(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(17);
 return 0;
}

function __ZNSt3__19basic_iosIwNS_11char_traitsIwEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this);
 return;
}

function __ZNSt3__19basic_iosIcNS_11char_traitsIcEEED2Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this);
 return;
}

function __ZNSt3__16locale5__imp12make_classicEv() {
 __ZNSt3__16locale5__impC2Ej(9248, 1);
 HEAP32[1210] = 9248;
 return 4840;
}

function __ZNSt3__112system_errorD0Ev($this) {
 $this = $this | 0;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__18numpunctIwED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__18numpunctIwED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__18numpunctIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__18numpunctIcED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt13runtime_errorD0Ev($this) {
 $this = $this | 0;
 __ZNSt13runtime_errorD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt12length_errorD0Ev($this) {
 $this = $this | 0;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__18ios_baseD0Ev($this) {
 $this = $this | 0;
 __ZNSt3__18ios_baseD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__15ctypeIcED0Ev($this) {
 $this = $this | 0;
 __ZNSt3__15ctypeIcED2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNSt11logic_errorD0Ev($this) {
 $this = $this | 0;
 __ZNSt11logic_errorD2Ev($this);
 __ZdlPv($this);
 return;
}

function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 12 >> 2] | 0;
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[index & 63](a1 | 0) | 0;
}

function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 8 >> 2] | 0;
}

function __ZNSt3__18ios_base7failureD2Ev($this) {
 $this = $this | 0;
 __ZNSt3__112system_errorD2Ev($this);
 return;
}

function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return HEAP8[$this + 9 >> 0] | 0;
}

function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return HEAP8[$this + 8 >> 0] | 0;
}

function __ZNKSt3__15ctypeIwE8do_widenEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 return $c << 24 >> 24 | 0;
}

function b2(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 abort(2);
}

function __ZSt15get_new_handlerv() {
 var $0 = 0;
 $0 = HEAP32[3316] | 0;
 HEAP32[3316] = $0 + 0;
 return $0 | 0;
}

function __ZNSt3__15ctypeIcE21__classic_upper_tableEv() {
 return HEAP32[(___ctype_toupper_loc() | 0) >> 2] | 0;
}

function __ZNSt3__15ctypeIcE21__classic_lower_tableEv() {
 return HEAP32[(___ctype_tolower_loc() | 0) >> 2] | 0;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this) {
 $this = $this | 0;
 return -1;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this) {
 $this = $this | 0;
 return -1;
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNSt3__112system_errorD2Ev($this) {
 $this = $this | 0;
 __ZNSt13runtime_errorD2Ev($this);
 return;
}

function b13(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(13);
 return 0;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 2147483647;
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[index & 127](a1 | 0);
}

function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function ___clang_call_terminate($0) {
 $0 = $0 | 0;
 ___cxa_begin_catch($0 | 0) | 0;
 __ZSt9terminatev();
}

function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this) {
 $this = $this | 0;
 return 1;
}

function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 return 4;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 return 4;
}

function __ZNKSt3__15ctypeIcE8do_widenEc($this, $c) {
 $this = $this | 0;
 $c = $c | 0;
 return $c | 0;
}

function __ZNKSt13runtime_error4whatEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 4 >> 2] | 0;
}

function __ZN10__cxxabiv117__class_type_infoD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this) {
 $this = $this | 0;
 return 1;
}

function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 127;
}

function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 127;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this) {
 $this = $this | 0;
 return 127;
}

function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this) {
 $this = $this | 0;
 return 127;
}

function __ZNKSt11logic_error4whatEv($this) {
 $this = $this | 0;
 return HEAP32[$this + 4 >> 2] | 0;
}

function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this) {
 $this = $this | 0;
 return 1;
}

function __ZNSt3__119__iostream_categoryD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function b18(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 abort(18);
}

function __ZNSt3__15ctypeIcE13classic_tableEv() {
 return HEAP32[(___ctype_b_loc() | 0) >> 2] | 0;
}

function __ZNSt3__110moneypunctIwLb1EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__110moneypunctIwLb0EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__110moneypunctIcLb1EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__110moneypunctIcLb0EED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}

function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this) {
 $this = $this | 0;
 return 0;
}

function _isdigit_l($c, $l) {
 $c = $c | 0;
 $l = $l | 0;
 return ($c + -48 | 0) >>> 0 < 10 | 0;
}

function __ZNSt9bad_allocC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 13160;
 return;
}

function __ZNSt8bad_castC2Ev($this) {
 $this = $this | 0;
 HEAP32[$this >> 2] = 13488;
 return;
}

function __ZNSt3__16locale5facetD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNKSt3__119__iostream_category4nameEv($this) {
 $this = $this | 0;
 return 2424;
}

function dynCall_i(index) {
 index = index | 0;
 return FUNCTION_TABLE_i[index & 3]() | 0;
}

function __ZNSt3__18messagesIwED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__18messagesIcED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this) {
 $this = $this | 0;
 return;
}

function b0(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(0);
 return 0;
}

function __ZNSt3__17collateIwED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__17collateIcED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __ZNSt3__15ctypeIwED0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function _isxdigit_l($c, $l) {
 $c = $c | 0;
 $l = $l | 0;
 return _isxdigit($c) | 0;
}

function __ZN10__cxxabiv116__shim_type_infoD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt9bad_allocD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __Z11printResultPc($str) {
 $str = $str | 0;
 _puts($str | 0) | 0;
 return;
}

function __ZNSt8bad_castD0Ev($this) {
 $this = $this | 0;
 __ZdlPv($this);
 return;
}

function __Z10printScorePc($str) {
 $str = $str | 0;
 _puts($str | 0) | 0;
 return;
}

function __Z10printErrorPc($str) {
 $str = $str | 0;
 _puts($str | 0) | 0;
 return;
}

function _copysignl($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+_copysign($x, $y));
}

function _scalbnl($x, $n) {
 $x = +$x;
 $n = $n | 0;
 return +(+_scalbn($x, $n));
}

function __ZNSt3__110moneypunctIwLb1EED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__110moneypunctIwLb0EED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__110moneypunctIcLb1EED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__110moneypunctIcLb0EED1Ev($this) {
 $this = $this | 0;
 return;
}

function dynCall_v(index) {
 index = index | 0;
 FUNCTION_TABLE_v[index & 3]();
}

function _frexpl($x, $e) {
 $x = +$x;
 $e = $e | 0;
 return +(+_frexp($x, $e));
}

function b9(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 abort(9);
}

function __ZNSt3__114error_categoryD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__114__shared_countD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNKSt9bad_alloc4whatEv($this) {
 $this = $this | 0;
 return 13176;
}

function __ZNKSt8bad_cast4whatEv($this) {
 $this = $this | 0;
 return 13504;
}

function _fmodl($x, $y) {
 $x = +$x;
 $y = +$y;
 return +(+_fmod($x, $y));
}

function __ZNSt3__16locale5facetD2Ev($this) {
 $this = $this | 0;
 return;
}

function b16(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(16);
 return 0;
}

function __ZNSt3__18messagesIwED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__18messagesIcED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__17collateIwED1Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt3__17collateIcED1Ev($this) {
 $this = $this | 0;
 return;
}

function __Znaj($size) {
 $size = $size | 0;
 return __Znwj($size) | 0;
}

function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}

function __ZdaPv($ptr) {
 $ptr = $ptr | 0;
 __ZdlPv($ptr);
 return;
}

function __ZNSt9type_infoD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt9exceptionD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt9bad_allocD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZNSt8bad_castD2Ev($this) {
 $this = $this | 0;
 return;
}

function __ZdlPv($ptr) {
 $ptr = $ptr | 0;
 _free($ptr);
 return;
}

function __ZNSt3__112__do_nothingEPv($0) {
 $0 = $0 | 0;
 return;
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function b5(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 abort(5);
}

function b7(p0) {
 p0 = p0 | 0;
 abort(7);
 return 0;
}

function getTempRet0() {
 return tempRet0 | 0;
}

function stackSave() {
 return STACKTOP | 0;
}

function b4(p0) {
 p0 = p0 | 0;
 abort(4);
}

function b3() {
 abort(3);
 return 0;
}

function b11() {
 abort(11);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,__ZNKSt3__17collateIcE7do_hashEPKcS3_,__ZNKSt3__17collateIwE7do_hashEPKwS3_,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,__ZNKSt3__15ctypeIcE9do_narrowEcc,__ZNKSt3__15ctypeIwE5do_isEtw,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,__ZNKSt3__15ctypeIwE9do_narrowEwc,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,_sn_write,_do_read,b0,b0,b0,b0
,b0,b0,b0];
var FUNCTION_TABLE_viiiiiii = [b1,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm
,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_viiiii = [b2,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib];
var FUNCTION_TABLE_i = [b3,__ZN15MatrixTranspose4initEv,__ZN15MatrixTranspose7cleanupEv,b3];
var FUNCTION_TABLE_vi = [b4,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED2Ev,__ZNSt3__111__stdoutbufIwED0Ev,__ZNSt3__110__stdinbufIwED0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED2Ev,__ZNSt3__111__stdoutbufIcED0Ev,__ZNSt3__110__stdinbufIcED0Ev,__ZNSt3__112system_errorD2Ev,__ZNSt3__112system_errorD0Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev
,__ZNSt3__18ios_base7failureD2Ev,__ZNSt3__18ios_base7failureD0Ev,__ZNSt3__18ios_baseD2Ev,__ZNSt3__18ios_baseD0Ev,__ZNSt3__114error_categoryD2Ev,__ZNSt3__119__iostream_categoryD0Ev,__ZNSt3__17collateIcED1Ev,__ZNSt3__17collateIcED0Ev,__ZNSt3__16locale5facet16__on_zero_sharedEv,__ZNSt3__17collateIwED1Ev,__ZNSt3__17collateIwED0Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__110moneypunctIcLb0EED1Ev,__ZNSt3__110moneypunctIcLb0EED0Ev,__ZNSt3__110moneypunctIcLb1EED1Ev
,__ZNSt3__110moneypunctIcLb1EED0Ev,__ZNSt3__110moneypunctIwLb0EED1Ev,__ZNSt3__110moneypunctIwLb0EED0Ev,__ZNSt3__110moneypunctIwLb1EED1Ev,__ZNSt3__110moneypunctIwLb1EED0Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,__ZNSt3__18messagesIcED1Ev,__ZNSt3__18messagesIcED0Ev,__ZNSt3__18messagesIwED1Ev,__ZNSt3__18messagesIwED0Ev,__ZNSt3__16locale5__impD2Ev,__ZNSt3__16locale5__impD0Ev,__ZNSt3__15ctypeIcED2Ev,__ZNSt3__15ctypeIcED0Ev,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,__ZNSt3__18numpunctIcED2Ev,__ZNSt3__18numpunctIcED0Ev,__ZNSt3__18numpunctIwED2Ev,__ZNSt3__18numpunctIwED0Ev,__ZNSt3__16locale5facetD2Ev,__ZNSt3__16locale5facetD0Ev,__ZNSt3__15ctypeIwED0Ev
,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,__ZNSt9bad_allocD2Ev,__ZNSt9bad_allocD0Ev,__ZNSt11logic_errorD2Ev,__ZNSt11logic_errorD0Ev,__ZNSt13runtime_errorD2Ev,__ZNSt13runtime_errorD0Ev,__ZNSt12length_errorD0Ev,__ZNSt8bad_castD2Ev,__ZNSt8bad_castD0Ev,__ZN10__cxxabiv116__shim_type_infoD2Ev,__ZN10__cxxabiv117__class_type_infoD0Ev,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,__ZN10__cxxabiv120__si_class_type_infoD0Ev,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,__Z11printResultPc,__Z10printErrorPc,__Z10printScorePc,__ZNSt3__110__list_impIPN4Base9BenchmarkENS_9allocatorIS3_EEED2Ev,__ZNSt3__112__do_nothingEPv,__ZNSt3__16locale2id6__initEv,__ZNSt3__117__call_once_proxyINS_5tupleIJNS_12_GLOBAL__N_111__fake_bindEEEEEEvPv,___cxx_global_array_dtor108,___cxx_global_array_dtor93,___cxx_global_array_dtor69
,___cxx_global_array_dtor45,___cxx_global_array_dtor42,___cxx_global_array_dtor,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,__ZNSt3__18ios_base4InitD2Ev,_free,__ZN10__cxxabiv112_GLOBAL__N_19destruct_EPv,b4];
var FUNCTION_TABLE_vii = [b5,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv
,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,__ZNKSt3__18messagesIcE8do_closeEi,__ZNKSt3__18messagesIwE8do_closeEi,__ZNKSt3__18numpunctIcE11do_groupingEv,__ZNKSt3__18numpunctIcE11do_truenameEv,__ZNKSt3__18numpunctIcE12do_falsenameEv,__ZNKSt3__18numpunctIwE11do_groupingEv,__ZNKSt3__18numpunctIwE11do_truenameEv,__ZNKSt3__18numpunctIwE12do_falsenameEv,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5
,b5,b5,b5,b5,b5];
var FUNCTION_TABLE_viiiiiiiii = [b6,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,b6];
var FUNCTION_TABLE_ii = [b7,__ZNSt3__111__stdoutbufIwE4syncEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,__ZNSt3__110__stdinbufIwE9underflowEv,__ZNSt3__110__stdinbufIwE5uflowEv,__ZNSt3__111__stdoutbufIcE4syncEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,__ZNSt3__110__stdinbufIcE9underflowEv,__ZNSt3__110__stdinbufIcE5uflowEv,__ZNKSt13runtime_error4whatEv,__ZNKSt3__119__iostream_category4nameEv,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,__ZNKSt3__120__time_get_c_storageIcE3__cEv,__ZNKSt3__120__time_get_c_storageIcE3__rEv,__ZNKSt3__120__time_get_c_storageIcE3__xEv,__ZNKSt3__120__time_get_c_storageIcE3__XEv,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv
,__ZNKSt3__120__time_get_c_storageIwE3__cEv,__ZNKSt3__120__time_get_c_storageIwE3__rEv,__ZNKSt3__120__time_get_c_storageIwE3__xEv,__ZNKSt3__120__time_get_c_storageIwE3__XEv,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv
,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,__ZNKSt9bad_alloc4whatEv,__ZNKSt11logic_error4whatEv,__ZNKSt8bad_cast4whatEv];
var FUNCTION_TABLE_viiiiiid = [b8,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,b8];
var FUNCTION_TABLE_viii = [b9,__ZNKSt3__114error_category23default_error_conditionEi,__ZNKSt3__119__iostream_category7messageEi,b9];
var FUNCTION_TABLE_viiiiid = [b10,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,b10,b10,b10];
var FUNCTION_TABLE_v = [b11,__ZL25default_terminate_handlerv,__ZN10__cxxabiv112_GLOBAL__N_110construct_Ev,b11];
var FUNCTION_TABLE_iiiiiiiii = [b12,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,b12,b12,b12,b12,b12,b12,b12];
var FUNCTION_TABLE_iiiii = [b13,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,b13,b13];
var FUNCTION_TABLE_viiiiiiii = [b14,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,b14];
var FUNCTION_TABLE_viiiiii = [b15,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib];
var FUNCTION_TABLE_iii = [b16,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,__ZNSt3__111__stdoutbufIwE8overflowEj,__ZNSt3__110__stdinbufIwE9pbackfailEj,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,__ZNSt3__111__stdoutbufIcE8overflowEi,__ZNSt3__110__stdinbufIcE9pbackfailEi,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,__ZNKSt3__15ctypeIcE10do_toupperEc,__ZNKSt3__15ctypeIcE10do_tolowerEc,__ZNKSt3__15ctypeIcE8do_widenEc,__ZNKSt3__15ctypeIwE10do_toupperEw,__ZNKSt3__15ctypeIwE10do_tolowerEw,__ZNKSt3__15ctypeIwE8do_widenEc,__ZN15MatrixTranspose13simdTransposeEy,__ZN15MatrixTranspose11transpose32Ey,__ZN15MatrixTranspose11transpose64Ey,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16,b16
,b16,b16,b16];
var FUNCTION_TABLE_iiiiii = [b17,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,b17,b17,b17];
var FUNCTION_TABLE_viiii = [b18,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,__ZNKSt3__17collateIcE12do_transformEPKcS3_,__ZNKSt3__17collateIwE12do_transformEPKwS3_,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi];

  return { ___cxa_can_catch: ___cxa_can_catch, _free: _free, _main: _main, _realloc: _realloc, _i64Add: _i64Add, _memmove: _memmove, ___cxa_is_pointer_type: ___cxa_is_pointer_type, _i64Subtract: _i64Subtract, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _strlen: _strlen, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, __GLOBAL__sub_I_base_cpp: __GLOBAL__sub_I_base_cpp, __GLOBAL__sub_I_iostream_cpp: __GLOBAL__sub_I_iostream_cpp, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_iiii: dynCall_iiii, dynCall_viiiiiii: dynCall_viiiiiii, dynCall_viiiii: dynCall_viiiii, dynCall_i: dynCall_i, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_ii: dynCall_ii, dynCall_viiiiiid: dynCall_viiiiiid, dynCall_viii: dynCall_viii, dynCall_viiiiid: dynCall_viiiiid, dynCall_v: dynCall_v, dynCall_iiiiiiiii: dynCall_iiiiiiiii, dynCall_iiiii: dynCall_iiiii, dynCall_viiiiiiii: dynCall_viiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_iiiiii: dynCall_iiiiii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var ___cxa_can_catch = Module["___cxa_can_catch"] = asm["___cxa_can_catch"];
var _free = Module["_free"] = asm["_free"];
var _main = Module["_main"] = asm["_main"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var ___cxa_is_pointer_type = Module["___cxa_is_pointer_type"] = asm["___cxa_is_pointer_type"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _strlen = Module["_strlen"] = asm["_strlen"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var __GLOBAL__sub_I_base_cpp = Module["__GLOBAL__sub_I_base_cpp"] = asm["__GLOBAL__sub_I_base_cpp"];
var __GLOBAL__sub_I_iostream_cpp = Module["__GLOBAL__sub_I_iostream_cpp"] = asm["__GLOBAL__sub_I_iostream_cpp"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiiiii = Module["dynCall_viiiiiii"] = asm["dynCall_viiiiiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_i = Module["dynCall_i"] = asm["dynCall_i"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viiiiiid = Module["dynCall_viiiiiid"] = asm["dynCall_viiiiiid"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiiiid = Module["dynCall_viiiiid"] = asm["dynCall_viiiiid"];
var dynCall_v = Module["dynCall_v"] = asm["dynCall_v"];
var dynCall_iiiiiiiii = Module["dynCall_iiiiiiiii"] = asm["dynCall_iiiiiiiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_viiiiiiii = Module["dynCall_viiiiiiii"] = asm["dynCall_viiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiiiii = Module["dynCall_iiiiii"] = asm["dynCall_iiiiii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];


// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (typeof Module['locateFile'] === 'function') {
    memoryInitializer = Module['locateFile'](memoryInitializer);
  } else if (Module['memoryInitializerPrefixURL']) {
    memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    function applyMemoryInitializer(data) {
      if (data.byteLength) data = new Uint8Array(data);
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }
    var request = Module['memoryInitializerRequest'];
    if (request) {
      // a network request has already been created, just use that
      if (request.response) {
        setTimeout(function() {
          applyMemoryInitializer(request.response);
        }, 0); // it's already here; but, apply it asynchronously
      } else {
        request.addEventListener('load', function() { // wait for it
          if (request.status !== 200 && request.status !== 0) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status);
          }
          if (!request.response || typeof request.response !== 'object' || !request.response.byteLength) {
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest response (expected ArrayBuffer): ' + request.response);
          }
          applyMemoryInitializer(request.response);
        });
      }
    } else {
      // fetch it from the network ourselves
      Browser.asyncLoad(memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  if (Module['noExitRuntime']) {
    return;
  }

  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  if (Module['onExit']) Module['onExit'](status);

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '\nIf this abort() is unexpected, build with -s ASSERTIONS=1 which can give more information.';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  abortDecorators.forEach(function(decorator) {
    output = decorator(output, what);
  });
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}






